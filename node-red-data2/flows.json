[
    {
        "id": "5df15275.2888ec",
        "type": "tab",
        "label": "MAIN",
        "disabled": false,
        "info": ""
    },
    {
        "id": "2a761808.610238",
        "type": "tab",
        "label": "TTP",
        "disabled": false,
        "info": ""
    },
    {
        "id": "5f98db3a.7ab21c",
        "type": "tab",
        "label": "API",
        "disabled": false,
        "info": ""
    },
    {
        "id": "654ea140.2275a8",
        "type": "tab",
        "label": "heap",
        "disabled": false,
        "info": ""
    },
    {
        "id": "38c422f8.b82bf6",
        "type": "tab",
        "label": "useback",
        "disabled": false,
        "info": ""
    },
    {
        "id": "ef9c825cf92ee31b",
        "type": "tab",
        "label": "sandbox",
        "disabled": false,
        "info": ""
    },
    {
        "id": "89dcb365.f1eba",
        "type": "group",
        "z": "38c422f8.b82bf6",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "a445188a.34a218",
            "71acd437.96b3dc",
            "18fc789.fac9d87",
            "79163972.5bdbe8",
            "a9b8fcea.cf55d",
            "e34cab2c.f35798",
            "e545caa6.7236c8",
            "623691b3.5a4c",
            "d010274c.5b8918",
            "23a461b5.8934de",
            "34642144.ae139e"
        ],
        "x": 54,
        "y": 319,
        "w": 1562,
        "h": 202
    },
    {
        "id": "c0b0e6b5.5e71f",
        "type": "group",
        "z": "38c422f8.b82bf6",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "12960d0b.36ef23",
            "3e18acb8.6ea274",
            "90df249b.c0cbf"
        ],
        "x": 2134,
        "y": 79,
        "w": 392,
        "h": 202
    },
    {
        "id": "6d0bae3e.4983b8",
        "type": "group",
        "z": "38c422f8.b82bf6",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "4d01ab16.cd9554",
            "e68822f4.50329",
            "d42587f0.33b758",
            "eb102c0d.9fc26",
            "da9e4dd8.dda28",
            "536d19d6.716798",
            "9d731fd4.ec333",
            "ab453ff0.f0607",
            "e72704f9.38636",
            "2e2d6018.33d4f8",
            "cf8e2d12.ded23",
            "1b14a050.631f9",
            "1692a27.8368fde",
            "cc1a6775.26469",
            "83eb55cb.4546",
            "8e1f3271.c24088"
        ],
        "x": 54,
        "y": 79,
        "w": 2022,
        "h": 202
    },
    {
        "id": "c4471f11.5e9398",
        "type": "group",
        "z": "38c422f8.b82bf6",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "168e0396.d38efc",
            "c971a180.2a71c8",
            "f13d409b.6445f8",
            "76409bc.077dee4"
        ],
        "x": 1114,
        "y": 1099,
        "w": 392,
        "h": 122
    },
    {
        "id": "205eec04.74c0d4",
        "type": "group",
        "z": "38c422f8.b82bf6",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "78ca5c87.8628d4",
            "ac559e43.94903",
            "160b4dd4.4f8e12",
            "61b59ea7.10c3a",
            "550838d7.0c4118",
            "89848e2c.9b815",
            "f369c890.c7bf58",
            "e7b2e93a.d772a8",
            "99328f1c.3a173",
            "d9c2af4e.ac296",
            "6efa7034.90b4e",
            "b3a83312.3848e",
            "ce43fd6d.7b213",
            "10907153.2feab7",
            "2bde6947.f7ecae",
            "27dbb0df.4fa588",
            "4377a687.40ea08",
            "dc26dcc0.bdbe6",
            "64ef31ed.e495e8",
            "34f31521.2b27d2",
            "5e6d0362.224584",
            "230838f7.7d169",
            "415a64d7.94e364",
            "63a1b9e8.5ea0a",
            "650ece50.fb118",
            "e7d6b6d2.32065"
        ],
        "x": 54,
        "y": 539,
        "w": 3362,
        "h": 242
    },
    {
        "id": "3e767551.3d299a",
        "type": "group",
        "z": "5df15275.2888ec",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "133c3e4a.687a62",
            "a7ef7b74.1301e8",
            "9f82a757.25f3d",
            "5a3f403a.e52a98"
        ],
        "x": 2294,
        "y": 1059,
        "w": 412,
        "h": 202
    },
    {
        "id": "bc481bc2.f1ae08",
        "type": "group",
        "z": "5df15275.2888ec",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "7ee8ada7.9818bc",
            "e0440623.2ec6e",
            "a359f524.2e00e8",
            "cf20b67b.cbc6e",
            "a0142b1a.f25d9",
            "941fc9d2.76b05",
            "8040b017.7a26f8",
            "189b2b68.7c485d",
            "842e37da.0d09"
        ],
        "x": 2254,
        "y": 1319,
        "w": 1082,
        "h": 202
    },
    {
        "id": "8fac538c.5d4a48",
        "type": "group",
        "z": "5df15275.2888ec",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "c3e2eace.6fef4",
            "f88e6307.876b78",
            "3e3a1491.e31a74",
            "fb84e297.7e169",
            "8275986.8fc5d68",
            "97442da1.47403",
            "c0dcb78d.280fb",
            "da741b09.f3974",
            "3201780f.c931f",
            "d43a0074.4523c",
            "d6651eda.7b83",
            "dfa11988.0cfa6",
            "9a76b6bf.1016d",
            "fe2a6027.b22b48",
            "4bd2ed9.fa5d114",
            "a790f90b.998d8",
            "b080e3fb.60616",
            "bec7265d.ad8278",
            "cec096cd.d93358",
            "be118eed.3c8348",
            "5bbb44fa.ec4574",
            "aa865712.dd6a08",
            "3b6f26a5.932aba",
            "32fce615.5af6c2",
            "8f9ec476.3b8e88"
        ],
        "x": 34,
        "y": 1099,
        "w": 2092,
        "h": 222
    },
    {
        "id": "c2109678.33bc38",
        "type": "group",
        "z": "5df15275.2888ec",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "754f373f.b15518",
            "444e001d.21432",
            "5d94f71d.d3668",
            "edea6dff.e44",
            "1e4c98d9.ba7367",
            "c982d578.5cca4",
            "90d93514.efa9e8",
            "24812b74.9bc644",
            "54724e9d.5a21d8",
            "5beb39ef.f84b7",
            "a707b53d.3343e",
            "2ac45d8.4ea1022",
            "fe43ccbb.7a083",
            "8f2b992a.2a5888",
            "3d3d989e.3a00f",
            "a2a98d92.7d7ac8",
            "2ffac69a.1af06a",
            "b72aec1b.3ff6d",
            "36be307e.92e14",
            "f00f32f3.dec218",
            "996dd87f.a47f"
        ],
        "x": 34,
        "y": 839,
        "w": 2992,
        "h": 202
    },
    {
        "id": "5b21035.9c9f6fc",
        "type": "group",
        "z": "5df15275.2888ec",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "fe0a5fc8.c442f",
            "50d2f56d.d89b5c",
            "24e3759c.ccab7a",
            "493967b2.355f88",
            "a77ec084.8fffe",
            "81b674e0.619348",
            "c192b5ce.f292e8",
            "f5e48d6b.8af42",
            "9c3f6550.f65078",
            "534028b7.335048",
            "d3e6b44f.196458",
            "ac588a65.521198",
            "496429d7.3e65b8",
            "daa3ab85.3e3f08",
            "839251af.05aeb",
            "49b11422.104a8c",
            "46c542f6.8abcf4",
            "5ca44974.720a18"
        ],
        "x": 4074,
        "y": 1459,
        "w": 692,
        "h": 502
    },
    {
        "id": "74a41043.26c49",
        "type": "group",
        "z": "5df15275.2888ec",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "eda0b98c.624f38",
            "dda68ce4.be4548",
            "33a98cf6.520fbc",
            "cd451268.3a6058",
            "14fd3fa0.82928",
            "7cd3ed75.b496ac"
        ],
        "x": 94,
        "y": 2579,
        "w": 592,
        "h": 122
    },
    {
        "id": "8b69f61d.c89028",
        "type": "group",
        "z": "5df15275.2888ec",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "317ffc4b.f9f944",
            "2da38506.59c15a",
            "cd9c83a2.b44c9",
            "98e142f2.2387b",
            "9814b19b.3a9ff",
            "657e86cb.b16d68",
            "e3789e7.ad48a6",
            "70ea442f.d8d06c",
            "c6f7047b.a7d5b8",
            "b878da1d.130a08",
            "1b8e9eca.e770e1",
            "e7053289.ff4a1",
            "12823fc.46bb5c",
            "53c0296c.86d5e8",
            "567ea009.d6895",
            "afeffd54.f2fdf",
            "addf44a8.eeead8",
            "38fa3076.5c174",
            "51dac58a.ae1ccc",
            "3b77b4a5.7373fc",
            "35298c0e.de04e4"
        ],
        "x": 3914,
        "y": 39,
        "w": 1052,
        "h": 502
    },
    {
        "id": "93990b56.ce7428",
        "type": "group",
        "z": "5df15275.2888ec",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "506a8391.c574dc",
            "31e84ef9.15d452",
            "5331f2f3.26e314",
            "b876d5aa.b5314",
            "193726e9.3199d9",
            "c1a0c26f.ded73",
            "7c1162f3.2e02bc",
            "1180bcc7.96539b",
            "74dd9f83.8b4a38",
            "1ee92671.77db3a",
            "890bff65.ae92a",
            "7be2e3c6.f4f0dc",
            "c18bfab4.a6c398",
            "4a2da56.007bbdc",
            "634b7ee.4a33b8",
            "a2076fe3.e1e4c8",
            "5c218091.24dc2",
            "d9152924.0b6fa",
            "8a90f52f.5e82b8",
            "b9301109.6d837"
        ],
        "x": 3914,
        "y": 579,
        "w": 1052,
        "h": 502
    },
    {
        "id": "154b2e1c.6272e2",
        "type": "group",
        "z": "5df15275.2888ec",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "9cbb75e6.0f4498",
            "6f87fcb7.9335e4",
            "d2e4b8ad.2f61c8",
            "f0503628.d8df98",
            "80d7c6d0.cd5e08",
            "712f8721.08ce18"
        ],
        "x": 4014,
        "y": 1119,
        "w": 952,
        "h": 82
    },
    {
        "id": "9234522a.3a33c",
        "type": "group",
        "z": "5df15275.2888ec",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "1a05e8c0.3a30d7",
            "239253ed.cd5e7c",
            "13685612.fa676a",
            "192054d1.4fe29b",
            "4c5eb819.338738",
            "c94a0180.3474a",
            "cefaef13.fdbe38"
        ],
        "x": 3834,
        "y": 1239,
        "w": 1132,
        "h": 182
    },
    {
        "id": "c625f482.ef7058",
        "type": "group",
        "z": "5df15275.2888ec",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "8c51dfe6.41bf1",
            "456373bf.34e8d4",
            "9d5e1703.2251f8",
            "88d1f442.5d291",
            "bca0f523.f10a5",
            "9929a915.a7192",
            "84fc47b3.40a288",
            "72938161.c1d328",
            "39200d24.d193aa",
            "2e79e684.725d42",
            "6d61a71c.3be1e",
            "d5710ed3.1f0ed8",
            "82c581f1.3d7b2",
            "4e808ea9.9699f8",
            "c996e15f.6cd09",
            "de421236.7ddad8",
            "3ea27905.a93e8e",
            "c419c89c.c82b7",
            "ee122abb.ffdf2",
            "dc63781f.d7f54",
            "e12b76fa.94dc68",
            "e1b6a373.027e3",
            "be80ac0a.3fcc6",
            "225135a2.08288a",
            "32fd021f.9c3646",
            "dce2a78c.7fb6c",
            "22c83041.c57288",
            "5a0e3510.93269c",
            "274d4375.725ad4",
            "dfdf853a.fea128",
            "fc027fe9.e8d708",
            "ba3e6008.7e12f8",
            "3c92a9f.7208756",
            "1bdf10d4.260a9f",
            "4a190c44.e49f5c",
            "3b3eb9c4.74e1ce",
            "2508abe7.d6a684",
            "f728a67.fc3a3d8",
            "fd75bbec.1aee88",
            "38fe7af7.4b2106",
            "c458d7d.41524a8",
            "c9147459.15de58",
            "b9afe11.e8147a",
            "1ecd91cb.e68c46",
            "c3c68186.76c01",
            "229ee0ff.22e48",
            "e47a380a.5fd968",
            "bcbb540b.558ae8",
            "6115d0a9.4e59f",
            "695f8ecb.2536a",
            "63dd941.f161b6c",
            "1fd9091b.b7c747",
            "1da56dc9.817ee2",
            "4af43326.f9b1bc",
            "3e8866d4.739e9a",
            "c83cd378.b93ca",
            "3eef8d0b.468082",
            "5799f4ed.f46bec",
            "dd20db68.d00b68",
            "e0daded4.e68d9",
            "32d4b8b1.77def8",
            "4c173f0f.94538",
            "7b28a869.162e18",
            "5775cffa.8e5f8",
            "e7904fa1.77f64",
            "2b86e90f.d5bac6"
        ],
        "x": 34,
        "y": 99,
        "w": 1552,
        "h": 682
    },
    {
        "id": "c7dcb289.e5232",
        "type": "group",
        "z": "2a761808.610238",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "9f535577.3cdc98",
            "203e6ef2.430c62",
            "26cad534.28973a"
        ],
        "x": 2814,
        "y": 219,
        "w": 372,
        "h": 202
    },
    {
        "id": "74e1a04.6df746",
        "type": "group",
        "z": "2a761808.610238",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "d4c6b3ea.b0118",
            "a0ad9ee6.aa105",
            "4c9d9272.a06d2c",
            "ddf77463.b02678",
            "599eef92.8ee31",
            "799698b0.78a948",
            "fe8b13e1.db5bf",
            "10d73930.850c67",
            "2e524180.ede67e",
            "da5d3bc9.d65b18",
            "461d3964.de54f8",
            "5b61698e.e6e8b8",
            "f18cbfd9.f0367",
            "3d559730.32d2c8",
            "f347b3fa.86c68",
            "e7cd9c55.03487",
            "7e462ed6.19cfd",
            "3e882d4e.c91df2",
            "1494284.0d799d8",
            "8ff82160.e2aa7",
            "3c03470a.507ec8",
            "ccbca6c6.392f58"
        ],
        "x": 334,
        "y": 259,
        "w": 2252,
        "h": 222
    },
    {
        "id": "115b1d61.ba4ba3",
        "type": "group",
        "z": "2a761808.610238",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "6ae38ed.612797",
            "9539cd06.048d1",
            "61edcde5.92f5f4",
            "4ea4b575.92fb0c",
            "8d2ce50.2e70018",
            "bdd4eff7.879af"
        ],
        "x": 94,
        "y": 59,
        "w": 592,
        "h": 122
    },
    {
        "id": "79e296b2.11a2d8",
        "type": "group",
        "z": "5f98db3a.7ab21c",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "1adeb6d2.0028b1",
            "174c55c9.364c72",
            "af87984e.38efa8",
            "af6bd09e.c7c798",
            "9a835f6c.6a1ab"
        ],
        "x": 14,
        "y": 19,
        "w": 632,
        "h": 162
    },
    {
        "id": "3684cd36.8432c2",
        "type": "group",
        "z": "654ea140.2275a8",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "d9186e74.22817",
            "389f73e5.59ca9c",
            "95dd2e2c.06eea",
            "855d1e5e.112688",
            "1bb1a9a2.c72076",
            "5c14e61c.17df1",
            "10eab9fb.e22636",
            "a003933f.68583",
            "8d1c9d05.67e5e8"
        ],
        "x": 94,
        "y": 139,
        "w": 1382,
        "h": 162
    },
    {
        "id": "4bf7491f.8e70b",
        "type": "group",
        "z": "5f98db3a.7ab21c",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "eb0ebfc5.9889a",
            "6868e3af.6c4b4c",
            "6526e141.43af9",
            "eab25c49.10d9c8",
            "afaf3a2c.646c88",
            "9018737c.12e188",
            "81a608ac.0eeab8",
            "d615849.c726078"
        ],
        "x": 14,
        "y": 199,
        "w": 1432,
        "h": 82
    },
    {
        "id": "4ca0454e.162644",
        "type": "group",
        "z": "5df15275.2888ec",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "45106e21.e54d18",
            "90b3de3e.0f9138",
            "1cfbf41e.cf4f7c",
            "5723790d.977708",
            "6d45b492.84bb6c",
            "527a479c.295dc8"
        ],
        "x": 1714,
        "y": 519,
        "w": 592,
        "h": 122
    },
    {
        "id": "3cd75c26.965da4",
        "type": "group",
        "z": "5df15275.2888ec",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "9a0212b.22ad2f",
            "ba11b816.73cd58",
            "539b4f99.508ec8",
            "82b5feb8.b8894",
            "61f763b0.65d2b4",
            "43e93874.b7141"
        ],
        "x": 2554,
        "y": 1639,
        "w": 592,
        "h": 122
    },
    {
        "id": "4a199c83.179e84",
        "type": "group",
        "z": "5f98db3a.7ab21c",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "387fcf8a.76cff",
            "c985b525.212f78",
            "2bed7653.30adaa",
            "ade3bf55.b02e3",
            "9606b8d3.0957",
            "2cfa357e.60327a",
            "40b91664.72912",
            "cc5b16dd.4820c8",
            "46152e90.390ef8",
            "df242fa3.762dc",
            "f8fb32fa.8c38e",
            "7fc0c8c6.6d262",
            "594b48ef.1a0e68",
            "8eca3137.03e0a8",
            "8af21b87.015cb",
            "90c4f7da.42c3b8",
            "ac3992bd.d4dd5",
            "4cfd5bbd.59f8dc",
            "d91e5b6e.e583c",
            "72c134ed.8f07cc",
            "937d8df0.8d461",
            "d9e1bbad.d8dc4",
            "7d460277.6d43cc",
            "83dab1d2.d3929",
            "c2ee13d8.13fab8",
            "4fd27ca5.37d60c",
            "8044def5.ed945",
            "f52a6bcf.7d3728",
            "fa849ff6.802878",
            "f38ba797.bdd398",
            "f6791e2.e72656",
            "4b18cb02.0baa0c",
            "2827f6dd.5c7162",
            "5f7186a8.0ea498",
            "e5d314a7.f6825",
            "be53914b.bf62b",
            "5a624a9b.734534",
            "563d14b6.3a5db4",
            "c0b46394.7bd6e",
            "efc7fd64.6f06b8",
            "241d62c4.835d6e",
            "6f817e7d.c291c",
            "85f53fe7.0846f8",
            "9ebc7b79.d11ad8",
            "2253204.d02816",
            "874d8336.9507e"
        ],
        "x": 14,
        "y": 339,
        "w": 2072,
        "h": 742
    },
    {
        "id": "8ff1d3c1.b9bf5",
        "type": "group",
        "z": "5f98db3a.7ab21c",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "130f3240.00961e",
            "f4452587.561d48",
            "6b7c6b19.00a204",
            "b1193833.175118",
            "efe6ca9d.d20898",
            "2ccabce5.3df754",
            "307f6fe7.76709",
            "f83aa4a.5b36658",
            "b5f725fd.240e98",
            "f6fb5868.e9bd18",
            "ec0d7b62.22bf98",
            "607a1476.9d2f3c",
            "d8222377.a5f0c",
            "f9b6f483.e38838",
            "301639c.27435c6",
            "7c3b4244.df47fc",
            "d73dab1c.a64828",
            "8c2b136a.c18c",
            "bb1ad3fd.e2d78",
            "9a627e02.c4ed6",
            "960e13d0.f7b41",
            "bf190e9d.225ad"
        ],
        "x": 14,
        "y": 1199,
        "w": 1422,
        "h": 422
    },
    {
        "id": "8e45b793.1a6e28",
        "type": "group",
        "z": "2a761808.610238",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "ef282a23.e47f38",
            "f229ed26.96564",
            "e29a09ff.54e678",
            "e0ba03e0.3324b",
            "c9312996.591418",
            "30a2f633.22ee6a"
        ],
        "x": 1934,
        "y": 1099,
        "w": 592,
        "h": 122
    },
    {
        "id": "65abc86145e37427",
        "type": "group",
        "z": "38c422f8.b82bf6",
        "style": {
            "stroke": "#2e333a",
            "stroke-opacity": "1",
            "fill": "#383c45",
            "fill-opacity": "0.5",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "02ca96ddf821f4a4",
            "8991e2fdf9687fd0",
            "bddd617cfebb090c",
            "c52cd9aeca05e5e6",
            "01fcc97b9515e9ab",
            "ad4a60911a1403c9",
            "4688647e1b4eb199",
            "e4c5f4b0c0253c3e",
            "c62ed669afc2a0b4",
            "c786044a4b5a935e",
            "f7c9c5304874e49e",
            "01d50ca9cf2bba93",
            "8a2e3a0791a0d916",
            "8cc7eb367f3a8fac",
            "ff060b00ec82c8fc",
            "6028609c703356b7",
            "49a619c80eacebf1",
            "b72e8c7f528d0831",
            "b219a84fb8d4f2bd",
            "cd0b32fd35e3ed8e",
            "04417acfb5681c89",
            "0d9d174a2c748ac9",
            "d806cfbe67853d5c",
            "dd700a3347c72114",
            "32819bdde4a1252f",
            "745b5be109936ded",
            "aed76f84102c42e9",
            "c2952a37558ba43c",
            "a042d1827f09adb9",
            "03203220f9154eb1",
            "8f3a882648aea9f9",
            "28c1e96f1f24aa80",
            "e08c432df06f1406",
            "b0d7da571edc62ed",
            "1dfa15c8c74befdf",
            "ce525bcc40a8ad16",
            "c00547ab3dee8cd8",
            "c97b45dc2cc2c1a9",
            "5d66ac9385b01ea0",
            "6b8035484dfbfa64",
            "a307da0f1e6f2f6c",
            "b4edba730c39373e",
            "de3f9b07e95ddd36",
            "7246563096b8b5a5",
            "0700e48ebd404370",
            "0f53143be5e10912",
            "1de9b5ec745f8bb3",
            "336f036a2466ce6c",
            "68e35febb8b0d3a7",
            "ac687b2e90f5a6e0",
            "9f0a67199929ef6e",
            "e9becf0373ab58d8",
            "9de0ad9a47f01fc2",
            "d3e550c14491e618",
            "9d11ebd49f3516cb",
            "f2a856ab0123a165",
            "133e5dc32e1851e6",
            "6f9f36c263f31e80",
            "76c93ffb5cad7f1f",
            "9c375352d389551a",
            "57475fdf9f9f60f2",
            "f4f9592af024d221",
            "b08147814835dc59",
            "43afd4da2f71c8a2",
            "e94df4c1a132c681",
            "e46edbf631e5f603",
            "46e6a94f837f5191",
            "ce733a2821cc60fd",
            "c25efd1ae2c4b1d7",
            "692595dc34ca3716",
            "13dd6f8a558abb83",
            "6dcf9aa5f7d0b71f",
            "3e41f820bb89714a",
            "6e8a19435159f0e8",
            "299557d0dc38653b",
            "c49aaa1f81e85c6b"
        ],
        "x": 120,
        "y": 2579,
        "w": 4006,
        "h": 1061
    },
    {
        "id": "f120eab2.0a60a8",
        "type": "redis-config",
        "name": "redis:6379",
        "options": "redis://:YzRAdGgkFg@redis:6379",
        "cluster": false,
        "optionsType": "str"
    },
    {
        "id": "acbee441.8c1e1",
        "type": "ui_tab",
        "name": "Home",
        "icon": "dashboard",
        "disabled": false,
        "hidden": false
    },
    {
        "id": "a328c3be.7f91c8",
        "type": "ui_group",
        "name": "BTC",
        "tab": "acbee441.8c1e1",
        "order": 1,
        "disp": false,
        "width": "14",
        "collapse": false
    },
    {
        "id": "7eefe30b.94c464",
        "type": "ui_base",
        "theme": {
            "name": "theme-dark",
            "lightTheme": {
                "default": "#0094CE",
                "baseColor": "#0094CE",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif",
                "edited": true,
                "reset": false
            },
            "darkTheme": {
                "default": "#097479",
                "baseColor": "#097479",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif",
                "edited": true,
                "reset": false
            },
            "customTheme": {
                "name": "Untitled Theme 1",
                "default": "#4B7930",
                "baseColor": "#4B7930",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif"
            },
            "themeState": {
                "base-color": {
                    "default": "#097479",
                    "value": "#097479",
                    "edited": true
                },
                "page-titlebar-backgroundColor": {
                    "value": "#097479",
                    "edited": false
                },
                "page-backgroundColor": {
                    "value": "#111111",
                    "edited": false
                },
                "page-sidebar-backgroundColor": {
                    "value": "#333333",
                    "edited": false
                },
                "group-textColor": {
                    "value": "#0eb8c0",
                    "edited": false
                },
                "group-borderColor": {
                    "value": "#555555",
                    "edited": false
                },
                "group-backgroundColor": {
                    "value": "#333333",
                    "edited": false
                },
                "widget-textColor": {
                    "value": "#eeeeee",
                    "edited": false
                },
                "widget-backgroundColor": {
                    "value": "#097479",
                    "edited": false
                },
                "widget-borderColor": {
                    "value": "#333333",
                    "edited": false
                },
                "base-font": {
                    "value": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif"
                }
            },
            "angularTheme": {
                "primary": "indigo",
                "accents": "blue",
                "warn": "red",
                "background": "grey"
            }
        },
        "site": {
            "name": "Node-RED Dashboard",
            "hideToolbar": "true",
            "allowSwipe": "false",
            "lockMenu": "false",
            "allowTempTheme": "true",
            "dateFormat": "DD/MM/YYYY",
            "sizes": {
                "sx": 48,
                "sy": 48,
                "gx": 6,
                "gy": 6,
                "cx": 6,
                "cy": 6,
                "px": 0,
                "py": 0
            }
        }
    },
    {
        "id": "261e447.e94ad3c",
        "type": "ui_group",
        "name": "work mode",
        "tab": "acbee441.8c1e1",
        "order": 2,
        "disp": true,
        "width": "4",
        "collapse": false
    },
    {
        "id": "848f142.6165868",
        "type": "telegrambot-config",
        "botname": "Tibot",
        "usernames": "",
        "chatIds": "454883204",
        "pollInterval": "300"
    },
    {
        "id": "f244fee6.d2627",
        "type": "ui_group",
        "name": "duration ",
        "tab": "acbee441.8c1e1",
        "order": 3,
        "disp": true,
        "width": "8",
        "collapse": false
    },
    {
        "id": "3c770aff.9ba2a6",
        "type": "ui_tab",
        "name": "Main Tab",
        "icon": "dashboard",
        "order": 1
    },
    {
        "id": "156af96f.f8fd27",
        "type": "ui_tab",
        "name": "Home",
        "icon": "home",
        "order": "1"
    },
    {
        "id": "1e3fe400.0baf5c",
        "type": "ui_tab",
        "name": "Reports",
        "icon": "dashboard",
        "order": 9
    },
    {
        "id": "4d01ab16.cd9554",
        "type": "function",
        "z": "38c422f8.b82bf6",
        "g": "6d0bae3e.4983b8",
        "name": "payload = payload.bots",
        "func": "//<трекер<\n    let track = flow.get(\"track\");\n    let start_node_time = Date.parse(new Date()) / 1000;\n    let steptitle = node.name;\n//>трекер>\n\nmsg.payload = msg.payload.bots;\n\n//>трекер>\n    let end_node_time = Date.parse(new Date()) / 1000;\n    let duration = end_node_time - start_node_time;\n    track.push({\n        \"steptitle\": steptitle,\n        \"start_node_time\": start_node_time,\n        \"end_node_time\": end_node_time,\n        \"duration\": duration\n    });\n    flow.set(\"track\", track);\n//>трекер>\nnode.status({fill:\"green\",shape:\"dot\"});\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 1150,
        "y": 180,
        "wires": [
            [
                "e68822f4.50329"
            ]
        ]
    },
    {
        "id": "e68822f4.50329",
        "type": "split",
        "z": "38c422f8.b82bf6",
        "g": "6d0bae3e.4983b8",
        "name": "",
        "splt": "1",
        "spltType": "len",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "x": 1350,
        "y": 180,
        "wires": [
            [
                "d42587f0.33b758"
            ]
        ]
    },
    {
        "id": "d42587f0.33b758",
        "type": "function",
        "z": "38c422f8.b82bf6",
        "g": "6d0bae3e.4983b8",
        "name": "onoff === true,  busy === false ",
        "func": "//<трекер<\n    let track = flow.get(\"track\");\n    let start_node_time = Date.parse(new Date()) / 1000;\n    let steptitle = node.name;\n//>трекер>\n\n\n\n\nif (msg.payload.onoff === true) {\n\n    if (msg.payload.busy === false) {\n        msg.payload = msg.payload.id;\n        \n//>трекер>\n    let end_node_time = Date.parse(new Date()) / 1000;\n    let duration = end_node_time - start_node_time;\n    track.push({\n        \"steptitle\": steptitle+\"-norm\",\n        \"start_node_time\": start_node_time,\n        \"end_node_time\": end_node_time,\n        \"duration\": duration\n    });\n    flow.set(\"track\", track);\n//>трекер>\nnode.status({fill:\"green\",shape:\"dot\"});\n        return [msg, null];\n    }\n\n    else {\n\n        let id = msg.payload.id;\n        msg.payload = [];\n\n\n        var count = flow.get(id) || 0;\n        count += 1;\n\n        if (count > 12) {\n        \n            let newsetb = { \"busy\": false };\n\n            msg.payload = newsetb;\n\n            msg.headers = {};\n            msg.headers['accept'] = 'application/json';\n            msg.headers['Content-Type'] = 'application/json';\n            \n            const upd = global.get('updateSettings')(msg.payload, id);\n\n            upd.then(upd => {\n                //>трекер>\n                    let end_node_time = Date.parse(new Date()) / 1000;\n                    let duration = end_node_time - start_node_time;\n                    track.push({\n                        \"steptitle\": steptitle+\"-12\",\n                        \"start_node_time\": start_node_time,\n                        \"end_node_time\": end_node_time,\n                        \"duration\": duration\n                    });\n                    flow.set(\"track\", track);\n                //>трекер>\n                node.status({fill:\"red\",shape:\"dot\"});\n                \n                node.warn(\"reset busy:\" + id);\n\n            }).catch(error => {\n                //>трекер>\n                    let end_node_time = Date.parse(new Date()) / 1000;\n                    let duration = end_node_time - start_node_time;\n                    track.push({\n                        \"steptitle\": steptitle+\"-error update\",\n                        \"start_node_time\": start_node_time,\n                        \"end_node_time\": end_node_time,\n                        \"duration\": duration\n                    });\n                    flow.set(\"track\", track);\n                //>трекер>\n                node.status({fill:\"red\",shape:\"dot\"});\n                \n                node.error(error);\n            });\n\n        }\n\n        flow.set(id, count);\n        return [null, msg];\n\n    }\n}\n\n\n\n\n",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 1570,
        "y": 180,
        "wires": [
            [
                "536d19d6.716798"
            ],
            [
                "ab453ff0.f0607"
            ]
        ],
        "icon": "font-awesome/fa-bolt"
    },
    {
        "id": "eb102c0d.9fc26",
        "type": "comment",
        "z": "38c422f8.b82bf6",
        "g": "6d0bae3e.4983b8",
        "name": "Старт трека",
        "info": "",
        "x": 150,
        "y": 120,
        "wires": []
    },
    {
        "id": "da9e4dd8.dda28",
        "type": "trigger",
        "z": "38c422f8.b82bf6",
        "g": "6d0bae3e.4983b8",
        "name": "",
        "op1": "1",
        "op2": "0",
        "op1type": "str",
        "op2type": "str",
        "duration": "-250",
        "extend": false,
        "overrideDelay": false,
        "units": "ms",
        "reset": "",
        "bytopic": "all",
        "topic": "topic",
        "outputs": 1,
        "x": 500,
        "y": 180,
        "wires": [
            [
                "8e1f3271.c24088"
            ]
        ]
    },
    {
        "id": "a445188a.34a218",
        "type": "function",
        "z": "38c422f8.b82bf6",
        "g": "89dcb365.f1eba",
        "name": "updateSettings : price, zapret_na_zakup, status",
        "func": "//<трекер<\n    let track = flow.get(\"track\");\n    let start_node_time = Date.parse(new Date()) / 1000;\n    let steptitle = node.name;\n//>трекер>\n\nmsg.bot.last_price = Number(msg.payload);\n    \nif ((msg.bot.last_price > msg.bot.status.sr_ma_big)&&(msg.bot.last_price > msg.bot.status.sr_ma_small)){\n    msg.bot.zapret_na_zakup = true;\n    msg.bot.status.rezhim = \"МА - закуп разрешен\";\n} else {\n    msg.bot.zapret_na_zakup = true;\n    msg.bot.status.rezhim = \"МА - закуп запрещён\";\n}\n\nlet newset = {\"last_price\":Number(msg.payload),\n                \"status\":msg.bot.status, \n                \"zapret_na_zakup\":msg.bot.zapret_na_zakup\n    };\n\nmsg.payload = newset;\n\nmsg.headers = {};\nmsg.headers['accept'] = 'application/json';\nmsg.headers['Content-Type'] = 'application/json';\n\nconst upd = global.get('updateSettings')(msg.payload, msg.bot.id);\n\nupd.then(upd => {\n\n    msg.payload = {\"bot\":msg.bot};\n    //>трекер>\n        let end_node_time = Date.parse(new Date()) / 1000;\n        let duration = end_node_time - start_node_time;\n        track.push({\n            \"steptitle\": steptitle,\n            \"start_node_time\": start_node_time,\n            \"end_node_time\": end_node_time,\n            \"duration\": duration\n        });\n        flow.set(\"track\", track);\n    //>трекер>\n    node.status({fill:\"green\",shape:\"dot\"});\n    node.send(msg);\n\n}).catch(error => {\n    node.error(error);\n    node.status({fill:\"red\",shape:\"dot\"});\n});\n\n//   \"zapret_na_zakup\":msg.bot.zapret_na_zakup",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 1340,
        "y": 420,
        "wires": [
            [
                "d010274c.5b8918"
            ]
        ],
        "icon": "font-awesome/fa-bolt"
    },
    {
        "id": "71acd437.96b3dc",
        "type": "switch",
        "z": "38c422f8.b82bf6",
        "g": "89dcb365.f1eba",
        "name": "last_price ? current price",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "neq",
                "v": "bot.last_price",
                "vt": "msg"
            },
            {
                "t": "eq",
                "v": "bot.last_price",
                "vt": "msg"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 1010,
        "y": 420,
        "wires": [
            [
                "a445188a.34a218"
            ],
            [
                "23a461b5.8934de"
            ]
        ]
    },
    {
        "id": "12960d0b.36ef23",
        "type": "function",
        "z": "38c422f8.b82bf6",
        "g": "c0b0e6b5.5e71f",
        "name": "updateSettings : busy=false",
        "func": "//<трекер<\n    let track = flow.get(\"track\");\n    let start_node_time = Date.parse(new Date()) / 1000;\n    let steptitle = node.name;\n//>трекер>\n\nlet newsetb = {\"busy\":false};\n\nmsg.payload = newsetb;\n\nmsg.headers = {};\nmsg.headers['accept'] = 'application/json';\nmsg.headers['Content-Type'] = 'application/json';\n\n    let idstep = msg.bot.id+\"-step\";\n    flow.set(idstep, 8);\n\nconst upd = global.get('updateSettings')(msg.payload, msg.bot.id);\n\nupd.then(upd => {\n//>трекер>\n    let end_node_time = Date.parse(new Date()) / 1000;\n    let duration = end_node_time - start_node_time;\n    track.push({\n        \"steptitle\": steptitle,\n        \"start_node_time\": start_node_time,\n        \"end_node_time\": end_node_time,\n        \"duration\": duration\n    });\n    flow.set(\"track\", track);\n//>трекер>\nnode.status({fill:\"green\",shape:\"dot\"});    \n    msg.payload = \"updated\"\n    node.send(msg);\n\n}).catch(error => {\n    node.status({fill:\"red\",shape:\"dot\"});  \n    node.error(error);\n});",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 2360,
        "y": 180,
        "wires": [
            [
                "3e18acb8.6ea274"
            ]
        ],
        "icon": "font-awesome/fa-bolt"
    },
    {
        "id": "18fc789.fac9d87",
        "type": "function",
        "z": "38c422f8.b82bf6",
        "g": "89dcb365.f1eba",
        "name": "prepare getprice",
        "func": "//<трекер<\n    let track = flow.get(\"track\");\n    let start_node_time = Date.parse(new Date()) / 1000;\n    let steptitle = node.name;\n//>трекер>\n\nlet moneta = msg.payload.bot.settings.moneta;\nmsg.bot = msg.payload.bot;\n\nmsg.payload = [];\nmsg.topic = \"prices:\" + moneta;\n    \n//>трекер>\n    let end_node_time = Date.parse(new Date()) / 1000;\n    let duration = end_node_time - start_node_time;\n    track.push({\n        \"steptitle\": steptitle,\n        \"start_node_time\": start_node_time,\n        \"end_node_time\": end_node_time,\n        \"duration\": duration\n    });\n    flow.set(\"track\", track);\n//>трекер>\nnode.status({fill:\"green\",shape:\"dot\"});\n    \nreturn msg;\n    \n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 420,
        "y": 420,
        "wires": [
            [
                "79163972.5bdbe8"
            ]
        ],
        "inputLabels": [
            "orderid"
        ],
        "outputLabels": [
            "status"
        ],
        "icon": "node-red-contrib-binance/binance.png"
    },
    {
        "id": "79163972.5bdbe8",
        "type": "redis-command",
        "z": "38c422f8.b82bf6",
        "g": "89dcb365.f1eba",
        "server": "f120eab2.0a60a8",
        "command": "GET",
        "name": "get price",
        "topic": "msg.payload",
        "params": "[]",
        "paramsType": "json",
        "payloadType": "json",
        "block": false,
        "x": 600,
        "y": 420,
        "wires": [
            [
                "a9b8fcea.cf55d"
            ]
        ]
    },
    {
        "id": "3e18acb8.6ea274",
        "type": "debug",
        "z": "38c422f8.b82bf6",
        "g": "c0b0e6b5.5e71f",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 2430,
        "y": 240,
        "wires": []
    },
    {
        "id": "536d19d6.716798",
        "type": "function",
        "z": "38c422f8.b82bf6",
        "g": "6d0bae3e.4983b8",
        "name": "updateSettings : busy=true",
        "func": "//<трекер<\n    let track = flow.get(\"track\");\n    let start_node_time = Date.parse(new Date()) / 1000;\n    let steptitle = node.name;\n//>трекер>\nlet newset = {\"busy\":true};\n\nmsg.topic = msg.payload;\nmsg.payload = newset;\n\nmsg.headers = {};\nmsg.headers['accept'] = 'application/json';\nmsg.headers['Content-Type'] = 'application/json';\n\n\nconst upd = global.get('updateSettings')(msg.payload, msg.topic);\n\nupd.then(upd => {\n    \n    msg.payload = msg.topic;\n    let idstep = msg.topic+\"-step\";\n\n    \n//>трекер>\n    let end_node_time = Date.parse(new Date()) / 1000;\n    let duration = end_node_time - start_node_time;\n    track.push({\n        \"steptitle\": steptitle,\n        \"start_node_time\": start_node_time,\n        \"end_node_time\": end_node_time,\n        \"duration\": duration\n    });\n    flow.set(\"track\", track);\n//>трекер>\nnode.status({fill:\"green\",shape:\"dot\"});\n\n    node.send(msg);\n    node.done();\n\n}).catch(error => {\n    node.status({fill:\"red\",shape:\"dot\"});\n    node.error(error);\n});\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 1860,
        "y": 180,
        "wires": [
            [
                "9d731fd4.ec333"
            ]
        ],
        "icon": "font-awesome/fa-bolt"
    },
    {
        "id": "a9b8fcea.cf55d",
        "type": "function",
        "z": "38c422f8.b82bf6",
        "g": "89dcb365.f1eba",
        "name": "topic = bot.id",
        "func": "//<трекер<\n    let track = flow.get(\"track\");\n    let start_node_time = Date.parse(new Date()) / 1000;\n    let steptitle = node.name;\n//>трекер>\n\nmsg.topic = msg.bot.id\n\n//>трекер>\n    let end_node_time = Date.parse(new Date()) / 1000;\n    let duration = end_node_time - start_node_time;\n    track.push({\n        \"steptitle\": steptitle,\n        \"start_node_time\": start_node_time,\n        \"end_node_time\": end_node_time,\n        \"duration\": duration\n    });\n    flow.set(\"track\", track);\n//>трекер>\nnode.status({fill:\"green\",shape:\"dot\"});\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 780,
        "y": 420,
        "wires": [
            [
                "71acd437.96b3dc"
            ]
        ]
    },
    {
        "id": "9d731fd4.ec333",
        "type": "link out",
        "z": "38c422f8.b82bf6",
        "g": "6d0bae3e.4983b8",
        "name": "start 250",
        "links": [
            "34642144.ae139e"
        ],
        "x": 2035,
        "y": 180,
        "wires": [],
        "icon": "font-awesome/fa-space-shuttle"
    },
    {
        "id": "34642144.ae139e",
        "type": "link in",
        "z": "38c422f8.b82bf6",
        "g": "89dcb365.f1eba",
        "name": "узбек 250",
        "links": [
            "9d731fd4.ec333",
            "bdd26a23.d309d"
        ],
        "x": 95,
        "y": 420,
        "wires": [
            []
        ],
        "icon": "font-awesome/fa-space-shuttle"
    },
    {
        "id": "618930a2.3dffb",
        "type": "function",
        "z": "38c422f8.b82bf6",
        "name": "определяем этаж",
        "func": "//<трекер<\n    let track = flow.get(\"track\");\n    let start_node_time = Date.parse(new Date()) / 1000;\n    let steptitle = node.name;\n//>трекер>\n\nlet lp = msg.bot.last_price;\nlet f = msg.bot.floors;\n\n    var curfloor = f.filter(function(floor) {\n     return ((floor[1]<=lp)&&(floor[2]>lp));\n    });\n\nif (curfloor[0]) {\n   // node.warn(curfloor); //\n   //>трекер>\n        let end_node_time = Date.parse(new Date()) / 1000;\n        let duration = end_node_time - start_node_time;\n        track.push({\n            \"steptitle\": steptitle,\n            \"start_node_time\": start_node_time,\n            \"end_node_time\": end_node_time,\n            \"duration\": duration\n        });\n        flow.set(\"track\", track);\n    //>трекер>\n    node.status({fill:\"green\",shape:\"dot\"});\n   \n   \n    msg.bot.status.currentfloor = curfloor[0];\n    return [msg, null];\n} \nelse\n{\n    \n     //>трекер>\n        let end_node_time = Date.parse(new Date()) / 1000;\n        let duration = end_node_time - start_node_time;\n        track.push({\n            \"steptitle\": steptitle+\"вне сетки\",\n            \"start_node_time\": start_node_time,\n            \"end_node_time\": end_node_time,\n            \"duration\": duration\n        });\n        flow.set(\"track\", track);\n    //>трекер>\n    \n   node.status({fill:\"red\",shape:\"dot\"}); \n   // node.warn(\"вне сетки\"); \n    return [null,msg];\n}\n\n",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 430,
        "y": 1680,
        "wires": [
            [
                "654f08ad.d21cf8",
                "79a93671.4908f"
            ],
            [
                "ec3bcc27.2d321"
            ]
        ]
    },
    {
        "id": "52932694.e0d918",
        "type": "comment",
        "z": "38c422f8.b82bf6",
        "name": "вне сетки",
        "info": "",
        "x": 441.4285430908203,
        "y": 1735.7140808105469,
        "wires": []
    },
    {
        "id": "e34cab2c.f35798",
        "type": "comment",
        "z": "38c422f8.b82bf6",
        "g": "89dcb365.f1eba",
        "name": "работаем со всеми этажами",
        "info": "",
        "x": 1460,
        "y": 360,
        "wires": []
    },
    {
        "id": "654f08ad.d21cf8",
        "type": "switch",
        "z": "38c422f8.b82bf6",
        "name": "статус этажа",
        "property": "bot.status.currentfloor[7]",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "0",
                "vt": "num"
            },
            {
                "t": "eq",
                "v": "1",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "2",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "3",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "4",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 5,
        "x": 660,
        "y": 1680,
        "wires": [
            [
                "9a8d53a0.bd127"
            ],
            [],
            [
                "afd8e2a9.7ef34"
            ],
            [
                "4583d2f5.6234ac"
            ],
            [
                "c397e056.6b1a3"
            ]
        ]
    },
    {
        "id": "9a8d53a0.bd127",
        "type": "switch",
        "z": "38c422f8.b82bf6",
        "name": "проверка запрета на закуп",
        "property": "bot.zapret_na_zakup",
        "propertyType": "msg",
        "rules": [
            {
                "t": "false"
            },
            {
                "t": "true"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 1220,
        "y": 1360,
        "wires": [
            [
                "e16705a1.83df08",
                "ed3ebb40.401b98"
            ],
            [
                "ead17618.db03e8",
                "f053413b.f6608"
            ]
        ]
    },
    {
        "id": "d010274c.5b8918",
        "type": "link out",
        "z": "38c422f8.b82bf6",
        "g": "89dcb365.f1eba",
        "name": "передаем этажному узбеку",
        "links": [
            "78ca5c87.8628d4"
        ],
        "x": 1575,
        "y": 420,
        "wires": []
    },
    {
        "id": "b414ae7e.1f40d",
        "type": "link in",
        "z": "38c422f8.b82bf6",
        "name": "этажный узбек",
        "links": [
            "ac559e43.94903",
            "ce43fd6d.7b213",
            "e7b2e93a.d772a8",
            "6b66fec2.62c95",
            "64ef31ed.e495e8"
        ],
        "x": 135,
        "y": 980,
        "wires": [
            [
                "7a8474f8.a35f2c"
            ]
        ]
    },
    {
        "id": "ead17618.db03e8",
        "type": "link out",
        "z": "38c422f8.b82bf6",
        "name": "заперещено закупать",
        "links": [
            "62b1f37b.6896ec",
            "eb00b163.ba0f88"
        ],
        "x": 1355,
        "y": 1400,
        "wires": []
    },
    {
        "id": "ec3bcc27.2d321",
        "type": "link out",
        "z": "38c422f8.b82bf6",
        "name": "вне сетки",
        "links": [
            "62b1f37b.6896ec",
            "eb00b163.ba0f88"
        ],
        "x": 515,
        "y": 1740,
        "wires": []
    },
    {
        "id": "e545caa6.7236c8",
        "type": "link out",
        "z": "38c422f8.b82bf6",
        "g": "89dcb365.f1eba",
        "name": "цена не изменилась",
        "links": [
            "62b1f37b.6896ec",
            "eb00b163.ba0f88"
        ],
        "x": 1575,
        "y": 480,
        "wires": []
    },
    {
        "id": "fee94f7f.5f093",
        "type": "comment",
        "z": "38c422f8.b82bf6",
        "name": "запрещено закупать",
        "info": "",
        "x": 1221.4285430908203,
        "y": 1395.7140808105469,
        "wires": []
    },
    {
        "id": "e16705a1.83df08",
        "type": "function",
        "z": "38c422f8.b82bf6",
        "name": "set buy order",
        "func": "function parseApiError(error) {\n  if (error.body) {\n    try {\n      var resp = JSON.parse(error.body);\n      return resp.msg;\n    } catch (error) {/* pass thru */}\n  }\n  return \"Unknown error. Status code: \"+error.statsCode;\n}\n\nlet LBinance = global.get('gBinance');\n//node.warn(LBinance);\nlet binance = new LBinance().options({\n\tAPIKEY: msg.bot.keypair.apikey,\n\tAPISECRET: msg.bot.keypair.secret,\n\t\"reconnect\": false\n});\n\nlet moneta = msg.bot.settings.moneta;\nlet quantity = Number((Number(msg.bot.finance.depo)*Number(msg.bot.settings.ordersize)/100/msg.bot.last_price).toFixed(msg.bot.settings.digitq));\nlet price = Number((msg.bot.status.currentfloor[3]).toFixed(msg.bot.settings.digitprice));\nnode.warn(quantity);\n\n//msg.payload = \"qjson.status\";\n\n\n\n\nbinance.buy(moneta, quantity, price, {type:'LIMIT'}, (err, resp) => {\n // console.info(\"Limit Buy response\", response);\n // console.info(\"order id: \" + response.orderId);\n    if (err) {\n        var errorMsg = parseApiError(err) + \", moneta:\" + moneta;\n        node.error(errorMsg, msg);\n        node.status({fill: \"red\", shape: \"ring\", text: errorMsg});\n        node.send(msg);\n        //return [msg, null];\n    \n    }\n    if (resp) {\n        msg.orderid = resp.orderId;\n        msg.resp = resp;\n        node.status({fill: \"green\", shape: \"ring\", text: resp.orderId});\n        node.send(msg);\n       // return [null,msg];\n                \n    }\n    //node.status({}); //clear status message\n});\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 1490,
        "y": 1360,
        "wires": [
            [
                "7c34199a.ae4948",
                "3ff7fc13.f3a62c"
            ]
        ],
        "inputLabels": [
            "orderid, moneta"
        ],
        "outputLabels": [
            "status"
        ],
        "icon": "font-awesome/fa-compress"
    },
    {
        "id": "7c34199a.ae4948",
        "type": "function",
        "z": "38c422f8.b82bf6",
        "name": "change floors, finance ",
        "func": "let idstep = msg.bot.id+\"-step\";\nflow.set(idstep, \"0 - change floors, finance\");\n\n\nlet currentfloor = msg.bot.status.currentfloor\ncurrentfloor[7] = 1;\ncurrentfloor[8] = msg.resp.orderId;\ncurrentfloor[14] = msg.resp.origQty;\n\nmsg.bot.floors[currentfloor[0]-1] = currentfloor;\n\nmsg.bot.finance.baseinorders = (Number(Number(msg.bot.finance.baseinorders) + Number(msg.resp.origQty) * Number(msg.resp.price))).toFixed(msg.bot.settings.digitprice);\nmsg.bot.finance.basenal = (Number(Number(msg.bot.finance.basenal) - Number(msg.resp.origQty) * Number(msg.resp.price))).toFixed(msg.bot.settings.digitprice);\n\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 1700,
        "y": 1360,
        "wires": [
            [
                "4b9e0594.e0be5c"
            ]
        ]
    },
    {
        "id": "4b9e0594.e0be5c",
        "type": "function",
        "z": "38c422f8.b82bf6",
        "name": "update bot floors, finance",
        "func": "\n\nlet newsetb = {\"floors\":msg.bot.floors, \"finance\":msg.bot.finance};\n//newset = JSON.stringify(newset);\n//node.warn(newsetb);\n\nmsg.payload = newsetb;\n\nmsg.headers = {};\nmsg.headers['accept'] = 'application/json';\nmsg.headers['Content-Type'] = 'application/json';\n\n   // let idstep = msg.bot.id+\"-step\";\n   // flow.set(idstep, 8);\n\nconst upd = global.get('updateSettings')(msg.payload, msg.bot.id);\n\nupd.then(upd => {\n    \n    msg.payload = \"updated\"\n    node.send(msg);\n\n}).catch(error => {\n    node.error(error);\n});",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 1950,
        "y": 1360,
        "wires": [
            [
                "2956ac05.ff4344",
                "7ecf7e00.a0d31"
            ]
        ],
        "icon": "font-awesome/fa-bolt"
    },
    {
        "id": "ab453ff0.f0607",
        "type": "debug",
        "z": "38c422f8.b82bf6",
        "g": "6d0bae3e.4983b8",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1650,
        "y": 220,
        "wires": []
    },
    {
        "id": "2956ac05.ff4344",
        "type": "link out",
        "z": "38c422f8.b82bf6",
        "name": "",
        "links": [
            "62b1f37b.6896ec",
            "eb00b163.ba0f88"
        ],
        "x": 2135,
        "y": 1340,
        "wires": []
    },
    {
        "id": "2fb97838.e99388",
        "type": "link out",
        "z": "38c422f8.b82bf6",
        "name": "заперещено закупать",
        "links": [
            "62b1f37b.6896ec",
            "eb00b163.ba0f88"
        ],
        "x": 2216.4285430908203,
        "y": 1395.7140808105469,
        "wires": []
    },
    {
        "id": "623691b3.5a4c",
        "type": "comment",
        "z": "38c422f8.b82bf6",
        "g": "89dcb365.f1eba",
        "name": "определяем изменилась ли цена",
        "info": "",
        "x": 279,
        "y": 360,
        "wires": []
    },
    {
        "id": "cb8cd7bb.8245b8",
        "type": "comment",
        "z": "38c422f8.b82bf6",
        "name": "дежурный по этажу",
        "info": "",
        "x": 381.4285430908203,
        "y": 1575.7140808105469,
        "wires": []
    },
    {
        "id": "75b77b62.c812e4",
        "type": "function",
        "z": "38c422f8.b82bf6",
        "name": "topic",
        "func": "msg.topic = msg.bot.id\n\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 1611.4285430908203,
        "y": 1515.7140808105469,
        "wires": [
            [
                "e8d3ff71.0b342"
            ]
        ]
    },
    {
        "id": "a4f0bf29.e2039",
        "type": "function",
        "z": "38c422f8.b82bf6",
        "name": "prepare get order status",
        "func": "//msg.bot = msg.payload.bot;\n    let idstep = msg.bot.id+\"-step\";\n    flow.set(idstep, \"покупаем\");\n\nlet moneta = msg.bot.settings.moneta;\nlet orderid = msg.bot.status.currentfloor[8];\n\nmsg.payload = [];\nmsg.topic = \"orders-status-\" + msg.bot.settings.userid + \":\" + moneta + \":\" + orderid;\n\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 1211.4285430908203,
        "y": 1515.7140808105469,
        "wires": [
            [
                "1f74cb03.b098d5"
            ]
        ],
        "inputLabels": [
            "orderid"
        ],
        "outputLabels": [
            "status"
        ],
        "icon": "node-red-contrib-binance/binance.png"
    },
    {
        "id": "1f74cb03.b098d5",
        "type": "redis-command",
        "z": "38c422f8.b82bf6",
        "server": "f120eab2.0a60a8",
        "command": "GET",
        "name": "get order status",
        "topic": "msg.payload",
        "params": "[]",
        "paramsType": "json",
        "payloadType": "json",
        "block": false,
        "x": 1441.4285430908203,
        "y": 1515.7140808105469,
        "wires": [
            [
                "75b77b62.c812e4"
            ]
        ]
    },
    {
        "id": "e8d3ff71.0b342",
        "type": "switch",
        "z": "38c422f8.b82bf6",
        "name": "статус ордера",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "NEW",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "PARTIALLY_FILLED",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "CANCELED",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "FILLED",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "REJECTED",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "EXPIRED",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 6,
        "x": 1801.4285430908203,
        "y": 1515.7140808105469,
        "wires": [
            [
                "2fb97838.e99388"
            ],
            [
                "2fb97838.e99388"
            ],
            [
                "bfa40a78.696948"
            ],
            [],
            [
                "c5286ec6.a8b15"
            ],
            [
                "c5286ec6.a8b15"
            ]
        ]
    },
    {
        "id": "eab0e428.fcd408",
        "type": "comment",
        "z": "38c422f8.b82bf6",
        "name": "NEW",
        "info": "",
        "x": 2231.4285430908203,
        "y": 1355.7140808105469,
        "wires": []
    },
    {
        "id": "31d94907.d5ee46",
        "type": "comment",
        "z": "38c422f8.b82bf6",
        "name": "CANCELED",
        "info": "",
        "x": 2251.4285430908203,
        "y": 1455.7140808105469,
        "wires": []
    },
    {
        "id": "c887e0b8.f3139",
        "type": "comment",
        "z": "38c422f8.b82bf6",
        "name": "FILLED",
        "info": "",
        "x": 2231.4285430908203,
        "y": 1595.7140808105469,
        "wires": []
    },
    {
        "id": "53825580.1576fc",
        "type": "comment",
        "z": "38c422f8.b82bf6",
        "name": "REJECTED или EXPIRED",
        "info": "",
        "x": 2291.4285430908203,
        "y": 1775.7140808105469,
        "wires": []
    },
    {
        "id": "6dcd6fc8.44e7a",
        "type": "comment",
        "z": "38c422f8.b82bf6",
        "name": "0 - Свободно",
        "info": "",
        "x": 1151.4285430908203,
        "y": 1315.7140808105469,
        "wires": []
    },
    {
        "id": "4eb7b103.982d3",
        "type": "comment",
        "z": "38c422f8.b82bf6",
        "name": "1 - Покупаем",
        "info": "",
        "x": 1151.4285430908203,
        "y": 1475.7140808105469,
        "wires": []
    },
    {
        "id": "afd8e2a9.7ef34",
        "type": "function",
        "z": "38c422f8.b82bf6",
        "name": "check price for sale start",
        "func": "if (msg.bot.last_price >= msg.bot.status.currentfloor[5]){\n    msg.bot.status.currentfloor[7] = 3;\n    \n\n    return [null,msg];\n    \n} else {\n    return [msg,null];\n}",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 1210,
        "y": 1680,
        "wires": [
            [
                "58341de1.c6a694"
            ],
            [
                "4c8c6a95.68df5c"
            ]
        ]
    },
    {
        "id": "a25fa3a.ee7886",
        "type": "comment",
        "z": "38c422f8.b82bf6",
        "name": "2 - Купили. Держим",
        "info": "",
        "x": 1181.4285430908203,
        "y": 1635.7140808105469,
        "wires": []
    },
    {
        "id": "4b58e0d8.8011e",
        "type": "comment",
        "z": "38c422f8.b82bf6",
        "name": "3 - Продаём",
        "info": "",
        "x": 1151.4285430908203,
        "y": 1775.7140808105469,
        "wires": []
    },
    {
        "id": "c397e056.6b1a3",
        "type": "function",
        "z": "38c422f8.b82bf6",
        "name": "",
        "func": "\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 1160,
        "y": 1960,
        "wires": [
            []
        ]
    },
    {
        "id": "6c1c2e57.86b3e",
        "type": "comment",
        "z": "38c422f8.b82bf6",
        "name": "4 - Продали",
        "info": "",
        "x": 1151.4285430908203,
        "y": 1915.7140808105469,
        "wires": []
    },
    {
        "id": "933bc906.115c18",
        "type": "function",
        "z": "38c422f8.b82bf6",
        "name": "update bot floors, finance",
        "func": "\n\nlet newsetb = {\"floors\":msg.bot.floors, \"finance\":msg.bot.finance};\n//newset = JSON.stringify(newset);\n//node.warn(newsetb);\n\nmsg.payload = newsetb;\n\nmsg.headers = {};\nmsg.headers['accept'] = 'application/json';\nmsg.headers['Content-Type'] = 'application/json';\n\n   // let idstep = msg.bot.id+\"-step\";\n   // flow.set(idstep, 8);\n\nconst upd = global.get('updateSettings')(msg.payload, msg.bot.id);\n\nupd.then(upd => {\n    \n    msg.payload = \"updated\"\n    node.send(msg);\n\n}).catch(error => {\n    node.error(error);\n});",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 2571.4285430908203,
        "y": 1495.7140808105469,
        "wires": [
            [
                "abadb293.75484"
            ]
        ],
        "icon": "font-awesome/fa-bolt"
    },
    {
        "id": "a43ddf8b.ec7a1",
        "type": "function",
        "z": "38c422f8.b82bf6",
        "name": "update bot floors, finance",
        "func": "\n\nlet newsetb = {\"floors\":msg.bot.floors, \"finance\":msg.bot.finance};\n//newset = JSON.stringify(newset);\n//node.warn(newsetb);\n\nmsg.payload = newsetb;\n\nmsg.headers = {};\nmsg.headers['accept'] = 'application/json';\nmsg.headers['Content-Type'] = 'application/json';\n\n   // let idstep = msg.bot.id+\"-step\";\n   // flow.set(idstep, 8);\n\nconst upd = global.get('updateSettings')(msg.payload, msg.bot.id);\n\nupd.then(upd => {\n    \n    msg.payload = \"updated\"\n    node.send(msg);\n\n}).catch(error => {\n    node.error(error);\n});",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 2571.4285430908203,
        "y": 1635.7140808105469,
        "wires": [
            [
                "ff0bcae8.e1f978"
            ]
        ],
        "icon": "font-awesome/fa-bolt"
    },
    {
        "id": "1592eedd.d43391",
        "type": "function",
        "z": "38c422f8.b82bf6",
        "name": "update bot floors, finance",
        "func": "\n\nlet newsetb = {\"floors\":msg.bot.floors, \"finance\":msg.bot.finance};\n//newset = JSON.stringify(newset);\n//node.warn(newsetb);\n\nmsg.payload = newsetb;\n\nmsg.headers = {};\nmsg.headers['accept'] = 'application/json';\nmsg.headers['Content-Type'] = 'application/json';\n\n   // let idstep = msg.bot.id+\"-step\";\n   // flow.set(idstep, 8);\n\nconst upd = global.get('updateSettings')(msg.payload, msg.bot.id);\n\nupd.then(upd => {\n    \n    msg.payload = \"updated\"\n    node.send(msg);\n\n}).catch(error => {\n    node.error(error);\n});",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 2571.4285430908203,
        "y": 1815.7140808105469,
        "wires": [
            []
        ],
        "icon": "font-awesome/fa-bolt"
    },
    {
        "id": "bfa40a78.696948",
        "type": "function",
        "z": "38c422f8.b82bf6",
        "name": "change floors, finance ",
        "func": "let idstep = msg.bot.id+\"-step\";\nflow.set(idstep, \"регистрируем отмену ордера\");\n    \nlet tempfin = Number(Number(msg.bot.finance.baseinorders) - Number(msg.bot.status.currentfloor[14])*Number(msg.bot.status.currentfloor[3]));\nlet tempfin2 = Number(Number(msg.bot.finance.basenal) + Number(msg.bot.status.currentfloor[14])*Number(msg.bot.status.currentfloor[3]));\n\nmsg.bot.finance.baseinorders = tempfin.toFixed(msg.bot.settings.digitprice);\nmsg.bot.finance.basenal = tempfin2.toFixed(msg.bot.settings.digitprice);\n\nif (msg.bot.finance.baseinorders == -0) {msg.bot.finance.baseinorders = 0;}\nif (msg.bot.finance.basenal == -0) {msg.bot.finance.basenal = 0;}\n\nlet currentfloor = msg.bot.status.currentfloor;\ncurrentfloor[7] = 0;\ncurrentfloor[8] = 0;\ncurrentfloor[14] = 0;\n\nmsg.bot.floors[currentfloor[0]-1] = currentfloor;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 2301.4285430908203,
        "y": 1495.7140808105469,
        "wires": [
            [
                "933bc906.115c18"
            ]
        ]
    },
    {
        "id": "2d40e9a0.c0ec26",
        "type": "function",
        "z": "38c422f8.b82bf6",
        "name": "change floors, finance ",
        "func": "let idstep = msg.bot.id+\"-step\";\nflow.set(idstep, \"регистрируем покупку\");\n    \nlet tempfin = Number(Number(msg.bot.finance.baseinorders) - Number(msg.bot.status.currentfloor[14])*Number(msg.bot.status.currentfloor[3]));\n\nlet tempfin2 = Number(Number(msg.bot.finance.quotanal) + Number(msg.bot.status.currentfloor[14]));\n\nmsg.bot.finance.baseinorders = tempfin.toFixed(msg.bot.settings.digitprice);\nmsg.bot.finance.quotanal = tempfin2.toFixed(msg.bot.settings.digitq);\n\nif (msg.bot.finance.baseinorders == -0) {msg.bot.finance.baseinorders = 0;}\nif (msg.bot.finance.basenal == -0) {msg.bot.finance.basenal = 0;}\n\nlet currentfloor = msg.bot.status.currentfloor;\ncurrentfloor[7] = 2;\n\n\nmsg.bot.floors[currentfloor[0]-1] = currentfloor;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 2301.4285430908203,
        "y": 1635.7140808105469,
        "wires": [
            [
                "a43ddf8b.ec7a1"
            ]
        ]
    },
    {
        "id": "c5286ec6.a8b15",
        "type": "function",
        "z": "38c422f8.b82bf6",
        "name": "change floors, finance ",
        "func": "let currentfloor = msg.bot.status.currentfloor\ncurrentfloor[7] = 1;\ncurrentfloor[8] = msg.resp.orderId;\ncurrentfloor[14] = msg.resp.origQty;\n\nmsg.bot.floors[currentfloor[0]-1] = currentfloor;\n\nmsg.bot.finance.baseinorders = msg.bot.finance.baseinorders + Number(msg.resp.origQty) * Number(msg.resp.price);\nmsg.bot.finance.basenal = msg.bot.finance.basenal - Number(msg.resp.origQty) * Number(msg.resp.price);\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 2321.4285430908203,
        "y": 1815.7140808105469,
        "wires": [
            []
        ]
    },
    {
        "id": "abadb293.75484",
        "type": "link out",
        "z": "38c422f8.b82bf6",
        "name": "заперещено закупать",
        "links": [
            "62b1f37b.6896ec",
            "eb00b163.ba0f88"
        ],
        "x": 2756.4285430908203,
        "y": 1495.7140808105469,
        "wires": []
    },
    {
        "id": "78ca5c87.8628d4",
        "type": "link in",
        "z": "38c422f8.b82bf6",
        "g": "205eec04.74c0d4",
        "name": "",
        "links": [
            "d010274c.5b8918"
        ],
        "x": 95,
        "y": 640,
        "wires": [
            [
                "34f31521.2b27d2"
            ]
        ]
    },
    {
        "id": "ac559e43.94903",
        "type": "link out",
        "z": "38c422f8.b82bf6",
        "g": "205eec04.74c0d4",
        "name": "",
        "links": [
            "b414ae7e.1f40d",
            "fb33fc0c.af5f78"
        ],
        "x": 955,
        "y": 600,
        "wires": []
    },
    {
        "id": "160b4dd4.4f8e12",
        "type": "switch",
        "z": "38c422f8.b82bf6",
        "g": "205eec04.74c0d4",
        "name": "проверка запрета на закуп",
        "property": "bot.zapret_na_zakup",
        "propertyType": "msg",
        "rules": [
            {
                "t": "false"
            },
            {
                "t": "true"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 500,
        "y": 640,
        "wires": [
            [
                "5e6d0362.224584",
                "650ece50.fb118"
            ],
            [
                "61b59ea7.10c3a",
                "63a1b9e8.5ea0a"
            ]
        ]
    },
    {
        "id": "61b59ea7.10c3a",
        "type": "function",
        "z": "38c422f8.b82bf6",
        "g": "205eec04.74c0d4",
        "name": "filter all buy orders",
        "func": "//<трекер<\n    let track = flow.get(\"track\");\n    let start_node_time = Date.parse(new Date()) / 1000;\n    let steptitle = node.name;\n//>трекер>\n\nmsg.bot = msg.payload.bot;\n\n\nlet f = msg.bot.floors;\n\n var openfloors = f.filter(function(floor) {\n     return (floor[7] == 1);\n    });\n\nmsg.bot.openfoors = openfloors;\n\nif (openfloors.length > 0){\n    msg.payload = openfloors;\n    \n    //>трекер>\n        let end_node_time = Date.parse(new Date()) / 1000;\n        let duration = end_node_time - start_node_time;\n        track.push({\n            \"steptitle\": steptitle,\n            \"start_node_time\": start_node_time,\n            \"end_node_time\": end_node_time,\n            \"duration\": duration\n        });\n        flow.set(\"track\", track);\n    //>трекер>\n\n    node.status({fill:\"green\",shape:\"ring\",text:openfloors.length});\n    return [msg, null];\n    \n}\nelse{\n    \n    //>трекер>\n    let end_node_time = Date.parse(new Date()) / 1000;\n    let duration = end_node_time - start_node_time;\n    track.push({\n        \"steptitle\": steptitle,\n        \"start_node_time\": start_node_time,\n        \"end_node_time\": end_node_time,\n        \"duration\": duration\n    });\n    flow.set(\"track\", track);\n    //>трекер>\n\n    node.status({fill:\"blue\",shape:\"ring\",text:openfloors.length});\n    return [null, msg];\n}\n\n\n",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 770,
        "y": 680,
        "wires": [
            [
                "415a64d7.94e364"
            ],
            [
                "230838f7.7d169"
            ]
        ]
    },
    {
        "id": "550838d7.0c4118",
        "type": "function",
        "z": "38c422f8.b82bf6",
        "g": "205eec04.74c0d4",
        "name": "cansel buy orders",
        "func": "//<трекер<\n    let track = flow.get(\"track\");\n    let start_node_time = Date.parse(new Date()) / 1000;\n    let steptitle = node.name;\n//>трекер>\n\nfunction parseApiError(error) {\n  if (error.body) {\n    try {\n      var resp = JSON.parse(error.body);\n      return resp.msg;\n    } catch (error) {/* pass thru */}\n  }\n  return \"Unknown error. Status code: \"+error.statsCode;\n}\n\nlet LBinance = global.get('gBinance');\n//node.warn(LBinance);\nlet binance = new LBinance().options({\n\tAPIKEY: msg.bot.keypair.apikey,\n\tAPISECRET: msg.bot.keypair.secret,\n\t\"reconnect\": false\n});\n\nlet moneta = msg.bot.settings.moneta;\nlet orderid = msg.bot.ttp.orderid;\n\n//msg.payload = \"qjson.status\";\n\n\nbinance.cancel(moneta, orderid, (err, resp) => {\n // console.info(\"Limit Buy response\", response);\n // console.info(\"order id: \" + response.orderId);\n    if (err) {\n        var errorMsg = parseApiError(err) + \", moneta:\" + moneta;\n        node.error(errorMsg, msg);\n        \n        \n        //>трекер>\n            let end_node_time = Date.parse(new Date()) / 1000;\n            let duration = end_node_time - start_node_time;\n            track.push({\n                \"steptitle\": steptitle,\n                \"start_node_time\": start_node_time,\n                \"end_node_time\": end_node_time,\n                \"duration\": duration\n            });\n            flow.set(\"track\", track);\n        //>трекер>\n        \n        \n        node.status({fill: \"red\", shape: \"ring\", text: errorMsg});\n        node.send(msg);\n        \n    \n    }\n    if (resp) {\n        msg.orderid = resp.orderId;\n        msg.resp = resp;\n        \n        //>трекер>\n            let end_node_time = Date.parse(new Date()) / 1000;\n            let duration = end_node_time - start_node_time;\n            track.push({\n                \"steptitle\": steptitle,\n                \"start_node_time\": start_node_time,\n                \"end_node_time\": end_node_time,\n                \"duration\": duration\n            });\n            flow.set(\"track\", track);\n        //>трекер>\n\n        \n        node.status({fill:\"green\", shape:\"ring\", text:resp.orderId});\n        node.send(msg);\n        \n                \n    }\n    //node.status({}); //clear status message\n});\n\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 2590,
        "y": 620,
        "wires": [
            [
                "f369c890.c7bf58"
            ]
        ]
    },
    {
        "id": "89848e2c.9b815",
        "type": "function",
        "z": "38c422f8.b82bf6",
        "g": "205eec04.74c0d4",
        "name": "update bot floors, finance",
        "func": "\n\nlet newsetb = {\"floors\":msg.bot.floors, \"finance\":msg.bot.finance};\n//newset = JSON.stringify(newset);\n//node.warn(newsetb);\n\nmsg.payload = newsetb;\n\nmsg.headers = {};\nmsg.headers['accept'] = 'application/json';\nmsg.headers['Content-Type'] = 'application/json';\n\n   // let idstep = msg.bot.id+\"-step\";\n   // flow.set(idstep, 8);\n\nconst upd = global.get('updateSettings')(msg.payload, msg.bot.id);\n\nupd.then(upd => {\n    \n    msg.payload = \"updated\"\n    node.send(msg);\n\n}).catch(error => {\n    node.error(error);\n});",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 3210,
        "y": 620,
        "wires": [
            [
                "e7b2e93a.d772a8",
                "d9c2af4e.ac296"
            ]
        ],
        "icon": "font-awesome/fa-bolt"
    },
    {
        "id": "f369c890.c7bf58",
        "type": "function",
        "z": "38c422f8.b82bf6",
        "g": "205eec04.74c0d4",
        "name": "change floors, finance ",
        "func": "let idstep = msg.bot.id+\"-step\";\nflow.set(idstep, \"регистрируем отмену ордера\");\n    \nlet tempfin = Number(Number(msg.bot.finance.baseinorders) - Number(msg.payload[14])*Number(msg.payload[3]));\nlet tempfin2 = Number(Number(msg.bot.finance.basenal) + Number(msg.payload[14])*Number(msg.payload[3]));\n\nmsg.bot.finance.baseinorders = tempfin.toFixed(msg.bot.settings.digitprice);\nmsg.bot.finance.basenal = tempfin2.toFixed(msg.bot.settings.digitprice);\n\nif (msg.bot.finance.baseinorders == -0) {msg.bot.finance.baseinorders = 0;}\nif (msg.bot.finance.basenal == -0) {msg.bot.finance.basenal = 0;}\n\nlet currentfloor = msg.payload;\ncurrentfloor[7] = 0;\ncurrentfloor[8] = 0;\ncurrentfloor[14] = 0;\n\nmsg.bot.floors[currentfloor[0]-1] = currentfloor;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 2820,
        "y": 620,
        "wires": [
            [
                "99328f1c.3a173",
                "b3a83312.3848e"
            ]
        ]
    },
    {
        "id": "e7b2e93a.d772a8",
        "type": "link out",
        "z": "38c422f8.b82bf6",
        "g": "205eec04.74c0d4",
        "name": "заперещено закупать",
        "links": [
            "b414ae7e.1f40d",
            "fb33fc0c.af5f78"
        ],
        "x": 3375,
        "y": 620,
        "wires": []
    },
    {
        "id": "99328f1c.3a173",
        "type": "debug",
        "z": "38c422f8.b82bf6",
        "g": "205eec04.74c0d4",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 2890,
        "y": 680,
        "wires": []
    },
    {
        "id": "d9c2af4e.ac296",
        "type": "debug",
        "z": "38c422f8.b82bf6",
        "g": "205eec04.74c0d4",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 3270,
        "y": 680,
        "wires": []
    },
    {
        "id": "6efa7034.90b4e",
        "type": "split",
        "z": "38c422f8.b82bf6",
        "g": "205eec04.74c0d4",
        "name": "",
        "splt": "\\n",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "x": 1290,
        "y": 660,
        "wires": [
            [
                "2bde6947.f7ecae"
            ]
        ]
    },
    {
        "id": "b3a83312.3848e",
        "type": "join",
        "z": "38c422f8.b82bf6",
        "g": "205eec04.74c0d4",
        "name": "",
        "mode": "auto",
        "build": "string",
        "property": "payload",
        "propertyType": "msg",
        "key": "topic",
        "joiner": "\\n",
        "joinerType": "str",
        "accumulate": "false",
        "timeout": "",
        "count": "",
        "reduceRight": false,
        "x": 3010,
        "y": 620,
        "wires": [
            [
                "89848e2c.9b815"
            ]
        ]
    },
    {
        "id": "ce43fd6d.7b213",
        "type": "link out",
        "z": "38c422f8.b82bf6",
        "g": "205eec04.74c0d4",
        "name": "",
        "links": [
            "b414ae7e.1f40d",
            "fb33fc0c.af5f78"
        ],
        "x": 1175,
        "y": 740,
        "wires": []
    },
    {
        "id": "ff0bcae8.e1f978",
        "type": "link out",
        "z": "38c422f8.b82bf6",
        "name": "заперещено закупать",
        "links": [
            "62b1f37b.6896ec",
            "eb00b163.ba0f88"
        ],
        "x": 2756.4285430908203,
        "y": 1635.7140808105469,
        "wires": []
    },
    {
        "id": "58341de1.c6a694",
        "type": "link out",
        "z": "38c422f8.b82bf6",
        "name": "купили держим",
        "links": [
            "62b1f37b.6896ec",
            "eb00b163.ba0f88"
        ],
        "x": 1415,
        "y": 1660,
        "wires": []
    },
    {
        "id": "5791acbc.438464",
        "type": "debug",
        "z": "38c422f8.b82bf6",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 2311.4285430908203,
        "y": 2275.714080810547,
        "wires": []
    },
    {
        "id": "2dd429e8.fc29be",
        "type": "link out",
        "z": "38c422f8.b82bf6",
        "name": "заперещено закупать",
        "links": [
            "62b1f37b.6896ec",
            "eb00b163.ba0f88"
        ],
        "x": 2036.4285430908203,
        "y": 1955.7140808105469,
        "wires": []
    },
    {
        "id": "59c7fca9.251a84",
        "type": "function",
        "z": "38c422f8.b82bf6",
        "name": "topic",
        "func": "msg.topic = msg.bot.id\n\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 1611.4285430908203,
        "y": 1815.7140808105469,
        "wires": [
            [
                "73bb335f.8e910c"
            ]
        ]
    },
    {
        "id": "73bb335f.8e910c",
        "type": "switch",
        "z": "38c422f8.b82bf6",
        "name": "статус ордера",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "null"
            },
            {
                "t": "eq",
                "v": "NEW",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "PARTIALLY_FILLED",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "CANCELED",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "FILLED",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "REJECTED",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "EXPIRED",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 7,
        "x": 1821.4285430908203,
        "y": 2055.714080810547,
        "wires": [
            [
                "2dd429e8.fc29be"
            ],
            [
                "2dd429e8.fc29be"
            ],
            [
                "2dd429e8.fc29be"
            ],
            [
                "a2e1c788.fe99b"
            ],
            [
                "26d2069a.8c7f4a"
            ],
            [
                "3c05d46c.6ed684"
            ],
            [
                "3c05d46c.6ed684"
            ]
        ]
    },
    {
        "id": "44ff20b0.033da8",
        "type": "comment",
        "z": "38c422f8.b82bf6",
        "name": "NEW",
        "info": "",
        "x": 2171.4285430908203,
        "y": 1915.7140808105469,
        "wires": []
    },
    {
        "id": "c30450d4.7672",
        "type": "comment",
        "z": "38c422f8.b82bf6",
        "name": "CANCELED",
        "info": "",
        "x": 2071.4285430908203,
        "y": 2015.7140808105469,
        "wires": []
    },
    {
        "id": "1d2b8df3.148562",
        "type": "comment",
        "z": "38c422f8.b82bf6",
        "name": "FILLED",
        "info": "",
        "x": 2051.4285430908203,
        "y": 2115.714080810547,
        "wires": []
    },
    {
        "id": "c72ec1ed.163048",
        "type": "comment",
        "z": "38c422f8.b82bf6",
        "name": "REJECTED или EXPIRED",
        "info": "",
        "x": 1831.4285430908203,
        "y": 2235.714080810547,
        "wires": []
    },
    {
        "id": "a8d933b5.a10878",
        "type": "function",
        "z": "38c422f8.b82bf6",
        "name": "update bot floors, finance",
        "func": "\n\nlet newsetb = {\"floors\":msg.bot.floors, \"finance\":msg.bot.finance};\n//newset = JSON.stringify(newset);\n//node.warn(newsetb);\n\nmsg.payload = newsetb;\n\nmsg.headers = {};\nmsg.headers['accept'] = 'application/json';\nmsg.headers['Content-Type'] = 'application/json';\n\n   // let idstep = msg.bot.id+\"-step\";\n   // flow.set(idstep, 8);\n\nconst upd = global.get('updateSettings')(msg.payload, msg.bot.id);\n\nupd.then(upd => {\n    \n    msg.payload = \"updated\"\n    node.send(msg);\n\n}).catch(error => {\n    node.error(error);\n});",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 2651.4285430908203,
        "y": 2155.714080810547,
        "wires": [
            [
                "63519573.f7e63c",
                "546906a8.9838d8"
            ]
        ],
        "icon": "font-awesome/fa-bolt"
    },
    {
        "id": "929a70e6.c1b508",
        "type": "function",
        "z": "38c422f8.b82bf6",
        "name": "update bot floors, finance",
        "func": "\n\nlet newsetb = {\"floors\":msg.bot.floors, \"finance\":msg.bot.finance};\n//newset = JSON.stringify(newset);\n//node.warn(newsetb);\n\nmsg.payload = newsetb;\n\nmsg.headers = {};\nmsg.headers['accept'] = 'application/json';\nmsg.headers['Content-Type'] = 'application/json';\n\n   // let idstep = msg.bot.id+\"-step\";\n   // flow.set(idstep, 8);\n\nconst upd = global.get('updateSettings')(msg.payload, msg.bot.id);\n\nupd.then(upd => {\n    \n    msg.payload = \"updated\"\n    node.send(msg);\n\n}).catch(error => {\n    node.error(error);\n});",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 2111.4285430908203,
        "y": 2275.714080810547,
        "wires": [
            []
        ],
        "icon": "font-awesome/fa-bolt"
    },
    {
        "id": "6f6fe048.ee9c08",
        "type": "function",
        "z": "38c422f8.b82bf6",
        "d": true,
        "name": "change floors, finance ",
        "func": "let idstep = msg.bot.id+\"-step\";\nflow.set(idstep, \"регистрируем продажу\");\n\nlet sellprice = \n    \nlet tempfin = Number(Number(msg.bot.finance.quotainorders) - Number(msg.bot.status.currentfloor[14]));\n\nlet tempfin2 = Number(Number(msg.bot.finance.basenal) + Number(msg.bot.status.currentfloor[14])*sellprice);\n\nmsg.bot.finance.baseinorders = tempfin.toFixed(msg.bot.settings.digitprice);\nmsg.bot.finance.quotanal = tempfin2.toFixed(msg.bot.settings.digitq);\n\nif (msg.bot.finance.quotainorders == -0) {msg.bot.finance.baseinorders = 0;}\nif (msg.bot.finance.basenal == -0) {msg.bot.finance.basenal = 0;}\n\nlet currentfloor = msg.bot.status.currentfloor;\ncurrentfloor[7] = 2;\n\n\nmsg.bot.floors[currentfloor[0]-1] = currentfloor;\n\nreturn msg;\n\n\n\n\n    \nlet tempfin = Number(Number(msg.bot.finance.quotainorders) - Number(msg.bot.status.currentfloor[14]));\nlet tempfin2 = Number(Number(msg.bot.finance.quotanal) + Number(msg.bot.status.currentfloor[14]));\n\nmsg.bot.finance.quotainorders = tempfin.toFixed(msg.bot.settings.digitprice);\nmsg.bot.finance.quotanal = tempfin2.toFixed(msg.bot.settings.digitprice);\n\nif (msg.bot.finance.quotainorders == -0) {msg.bot.finance.baseinorders = 0;}\nif (msg.bot.finance.quotanal == -0) {msg.bot.finance.basenal = 0;}\n\nlet currentfloor = msg.bot.status.currentfloor;\ncurrentfloor[11] = 0;\n\n\nmsg.bot.floors[currentfloor[0]-1] = currentfloor;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 5,
        "initialize": "",
        "finalize": "",
        "x": 2381.4285430908203,
        "y": 2155.714080810547,
        "wires": [
            [
                "a8d933b5.a10878",
                "2e812e84.cc6522"
            ]
        ]
    },
    {
        "id": "3c05d46c.6ed684",
        "type": "function",
        "z": "38c422f8.b82bf6",
        "name": "change floors, finance ",
        "func": "let currentfloor = msg.bot.status.currentfloor\ncurrentfloor[7] = 1;\ncurrentfloor[8] = msg.resp.orderId;\ncurrentfloor[14] = msg.resp.origQty;\n\nmsg.bot.floors[currentfloor[0]-1] = currentfloor;\n\nmsg.bot.finance.baseinorders = msg.bot.finance.baseinorders + Number(msg.resp.origQty) * Number(msg.resp.price);\nmsg.bot.finance.basenal = msg.bot.finance.basenal - Number(msg.resp.origQty) * Number(msg.resp.price);\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 1841.4285430908203,
        "y": 2275.714080810547,
        "wires": [
            []
        ]
    },
    {
        "id": "a2e1c788.fe99b",
        "type": "link out",
        "z": "38c422f8.b82bf6",
        "name": "заперещено закупать",
        "links": [
            "62b1f37b.6896ec",
            "eb00b163.ba0f88"
        ],
        "x": 2036.4285430908203,
        "y": 2055.714080810547,
        "wires": []
    },
    {
        "id": "63519573.f7e63c",
        "type": "link out",
        "z": "38c422f8.b82bf6",
        "name": "заперещено закупать",
        "links": [
            "62b1f37b.6896ec",
            "eb00b163.ba0f88"
        ],
        "x": 2816.4285430908203,
        "y": 2035.7140808105469,
        "wires": []
    },
    {
        "id": "2e812e84.cc6522",
        "type": "debug",
        "z": "38c422f8.b82bf6",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 2431.4285430908203,
        "y": 2195.714080810547,
        "wires": []
    },
    {
        "id": "546906a8.9838d8",
        "type": "debug",
        "z": "38c422f8.b82bf6",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 2711.4285430908203,
        "y": 2195.714080810547,
        "wires": []
    },
    {
        "id": "45684b39.42603c",
        "type": "redis-command",
        "z": "38c422f8.b82bf6",
        "server": "f120eab2.0a60a8",
        "command": "GET",
        "name": "get order status",
        "topic": "msg.payload",
        "params": "[]",
        "paramsType": "json",
        "payloadType": "json",
        "block": false,
        "x": 1441.4285430908203,
        "y": 1815.7140808105469,
        "wires": [
            [
                "59c7fca9.251a84"
            ]
        ]
    },
    {
        "id": "4583d2f5.6234ac",
        "type": "function",
        "z": "38c422f8.b82bf6",
        "name": "prepare get order status",
        "func": "//msg.bot = msg.payload.bot;\n    let idstep = msg.bot.id+\"-step\";\n    flow.set(idstep, \"prepare get order status\");\n\nlet moneta = msg.bot.settings.moneta;\nlet orderid = msg.bot.ttp.curorderid;\n\nmsg.payload = [];\nmsg.topic = \"orders-status-\" + msg.bot.settings.userid + \":\" + moneta + \":\" + orderid;\n\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 1210,
        "y": 1820,
        "wires": [
            []
        ],
        "inputLabels": [
            "orderid"
        ],
        "outputLabels": [
            "status"
        ],
        "icon": "node-red-contrib-binance/binance.png"
    },
    {
        "id": "61515a9a.c79fc4",
        "type": "comment",
        "z": "38c422f8.b82bf6",
        "name": "PARTIALLY_FILLED",
        "info": "",
        "x": 2331.4285430908203,
        "y": 1915.7140808105469,
        "wires": []
    },
    {
        "id": "b9d33800.c2b3b",
        "type": "comment",
        "z": "38c422f8.b82bf6",
        "name": "PARTIALLY_FILLED",
        "info": "",
        "x": 2391.4285430908203,
        "y": 1355.7140808105469,
        "wires": []
    },
    {
        "id": "b7f15645.081678",
        "type": "comment",
        "z": "38c422f8.b82bf6",
        "name": "не проработано",
        "info": "",
        "x": 2501.4285430908203,
        "y": 1775.7140808105469,
        "wires": []
    },
    {
        "id": "50643dea.dae064",
        "type": "comment",
        "z": "38c422f8.b82bf6",
        "name": "не проработано",
        "info": "",
        "x": 2041.4285430908203,
        "y": 2235.714080810547,
        "wires": []
    },
    {
        "id": "26d2069a.8c7f4a",
        "type": "function",
        "z": "38c422f8.b82bf6",
        "name": "",
        "func": "\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 2161.4285430908203,
        "y": 2155.714080810547,
        "wires": [
            []
        ]
    },
    {
        "id": "8b92a4cb.4008b",
        "type": "redis-out",
        "z": "38c422f8.b82bf6",
        "server": "f120eab2.0a60a8",
        "command": "publish",
        "name": "",
        "topic": "ttp",
        "obj": true,
        "x": 1971.4285430908203,
        "y": 1695.7140808105469,
        "wires": []
    },
    {
        "id": "4c8c6a95.68df5c",
        "type": "function",
        "z": "38c422f8.b82bf6",
        "name": "prepare data for ttp",
        "func": "msg.payload = {\"quantity\":msg.bot.status.currentfloor[14],\"botid\":msg.bot.id, \"bot\":msg.bot}\nmsg.topic = \"\";\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 1490,
        "y": 1700,
        "wires": [
            [
                "666f7c9e.05f384"
            ]
        ]
    },
    {
        "id": "e72704f9.38636",
        "type": "delay",
        "z": "38c422f8.b82bf6",
        "g": "6d0bae3e.4983b8",
        "name": "",
        "pauseType": "delay",
        "timeout": "500",
        "timeoutUnits": "milliseconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "x": 290,
        "y": 180,
        "wires": [
            [
                "da9e4dd8.dda28"
            ]
        ]
    },
    {
        "id": "10907153.2feab7",
        "type": "function",
        "z": "38c422f8.b82bf6",
        "g": "205eec04.74c0d4",
        "name": "канселятор topic = bot.id",
        "func": "//<трекер<\n    let track = flow.get(\"track\");\n    let start_node_time = Date.parse(new Date()) / 1000;\n    let steptitle = node.name;\n//>трекер>\n\nmsg.topic = msg.bot.id\n\n//>трекер>\n    let end_node_time = Date.parse(new Date()) / 1000;\n    let duration = end_node_time - start_node_time;\n    track.push({\n        \"steptitle\": steptitle,\n        \"start_node_time\": start_node_time,\n        \"end_node_time\": end_node_time,\n        \"duration\": duration\n    });\n    flow.set(\"track\", track);\n//>трекер>\nnode.status({fill:\"green\",shape:\"dot\"});\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 1950,
        "y": 660,
        "wires": [
            [
                "27dbb0df.4fa588",
                "4377a687.40ea08"
            ]
        ]
    },
    {
        "id": "2bde6947.f7ecae",
        "type": "function",
        "z": "38c422f8.b82bf6",
        "g": "205eec04.74c0d4",
        "name": "get order status1",
        "func": "//<трекер<\n    let track = flow.get(\"track\");\n    let start_node_time = Date.parse(new Date()) / 1000;\n    let steptitle = node.name;\n//>трекер>\n\nlet moneta = msg.bot.settings.moneta;\nlet orderid = msg.payload[8];\nlet userid = msg.bot.settings.userid;\n\n\n//msg.payload = [];\n//msg.topic = \"orders-status-\" + msg.bot.settings.userid + \":\" + moneta + \":\" + orderid;\nconst getorderstatus = global.get('getorderstatus')(userid, moneta, orderid);\n\n\ngetorderstatus.then(getorderstatus => {\n    \n    \n\n    msg.payload = getorderstatus;\n//>трекер>\n    let end_node_time = Date.parse(new Date()) / 1000;\n    let duration = end_node_time - start_node_time;\n    track.push({\n        \"steptitle\": steptitle,\n        \"start_node_time\": start_node_time,\n        \"end_node_time\": end_node_time,\n        \"duration\": duration\n    });\n    flow.set(\"track\", track);\n//>трекер>\nnode.status({fill:\"green\",shape:\"dot\"});\n\n    node.send(msg);\n    node.done();\n\n}).catch(error => {\n    node.status({fill:\"red\",shape:\"dot\"});\n    node.error(error);\n});\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 1470,
        "y": 660,
        "wires": [
            [
                "e7d6b6d2.32065"
            ]
        ],
        "inputLabels": [
            "orderid"
        ],
        "outputLabels": [
            "status"
        ],
        "icon": "node-red-contrib-binance/binance.png"
    },
    {
        "id": "27dbb0df.4fa588",
        "type": "debug",
        "z": "38c422f8.b82bf6",
        "g": "205eec04.74c0d4",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 2010,
        "y": 620,
        "wires": []
    },
    {
        "id": "4377a687.40ea08",
        "type": "switch",
        "z": "38c422f8.b82bf6",
        "g": "205eec04.74c0d4",
        "name": "статус ордера",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "NEW",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "PARTIALLY_FILLED",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "CANCELED",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "FILLED",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "REJECTED",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "EXPIRED",
                "vt": "str"
            },
            {
                "t": "null"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 7,
        "x": 2180,
        "y": 660,
        "wires": [
            [
                "550838d7.0c4118"
            ],
            [
                "64ef31ed.e495e8"
            ],
            [
                "64ef31ed.e495e8"
            ],
            [
                "64ef31ed.e495e8"
            ],
            [
                "64ef31ed.e495e8"
            ],
            [
                "64ef31ed.e495e8"
            ],
            [
                "64ef31ed.e495e8"
            ]
        ]
    },
    {
        "id": "dc26dcc0.bdbe6",
        "type": "comment",
        "z": "38c422f8.b82bf6",
        "g": "205eec04.74c0d4",
        "name": "NEW",
        "info": "",
        "x": 2410,
        "y": 620,
        "wires": []
    },
    {
        "id": "64ef31ed.e495e8",
        "type": "link out",
        "z": "38c422f8.b82bf6",
        "g": "205eec04.74c0d4",
        "name": "заперещено закупать",
        "links": [
            "b414ae7e.1f40d",
            "fb33fc0c.af5f78"
        ],
        "x": 2375,
        "y": 720,
        "wires": []
    },
    {
        "id": "c952aeaf.2136b8",
        "type": "link out",
        "z": "38c422f8.b82bf6",
        "name": "купили держим",
        "links": [
            "62b1f37b.6896ec",
            "eb00b163.ba0f88"
        ],
        "x": 1915,
        "y": 1760,
        "wires": []
    },
    {
        "id": "666f7c9e.05f384",
        "type": "function",
        "z": "38c422f8.b82bf6",
        "name": "update bot floors, finance",
        "func": "\n\nlet newsetb = {\"floors\":msg.bot.floors, \"finance\":msg.bot.finance};\n//newset = JSON.stringify(newset);\n//node.warn(newsetb);\n\nmsg.payload = newsetb;\n\nmsg.headers = {};\nmsg.headers['accept'] = 'application/json';\nmsg.headers['Content-Type'] = 'application/json';\n\n   // let idstep = msg.bot.id+\"-step\";\n   // flow.set(idstep, 8);\n\nconst upd = global.get('updateSettings')(msg.payload, msg.bot.id);\n\nupd.then(upd => {\n    \n    msg.payload = {\"bot\":msg.bot};\n    node.send(msg);\n\n}).catch(error => {\n    node.error(error);\n});",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 1750,
        "y": 1700,
        "wires": [
            [
                "c952aeaf.2136b8",
                "8b92a4cb.4008b"
            ]
        ],
        "icon": "font-awesome/fa-bolt"
    },
    {
        "id": "2e2d6018.33d4f8",
        "type": "function",
        "z": "38c422f8.b82bf6",
        "g": "6d0bae3e.4983b8",
        "name": "stop",
        "func": "msg.reset = true;\nmsg.payload = \"\";\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 270,
        "y": 240,
        "wires": [
            [
                "da9e4dd8.dda28"
            ]
        ]
    },
    {
        "id": "cf8e2d12.ded23",
        "type": "redis-in",
        "z": "38c422f8.b82bf6",
        "g": "6d0bae3e.4983b8",
        "server": "f120eab2.0a60a8",
        "command": "subscribe",
        "name": "",
        "topic": "stop",
        "obj": true,
        "timeout": 0,
        "x": 130,
        "y": 240,
        "wires": [
            [
                "2e2d6018.33d4f8"
            ]
        ]
    },
    {
        "id": "f31fab3.4c5ea58",
        "type": "comment",
        "z": "38c422f8.b82bf6",
        "name": "NULL",
        "info": "",
        "x": 2051.4285430908203,
        "y": 1915.7140808105469,
        "wires": []
    },
    {
        "id": "1b14a050.631f9",
        "type": "function",
        "z": "38c422f8.b82bf6",
        "g": "6d0bae3e.4983b8",
        "name": "start",
        "func": "//<трекер<\n    ////>только для стартовой ноды>\n        var track = [];\n        let start_track_time = Date.parse(new Date()) / 1000;\n        let start_node_time = start_track_time;\n        let steptitle = node.name;\n    ////>только для стартовой ноды>\n//>трекер>\n\n\n\n\n\n\n//>трекер>\n    let end_node_time = Date.parse(new Date()) / 1000;\n    let duration = end_node_time - start_node_time;\n    track.push({\n        \"steptitle\": steptitle,\n        \"start_node_time\": start_node_time,\n        \"end_node_time\": end_node_time,\n        \"duration\": duration\n    });\n\n    flow.set(\"track\", track);\n//>трекер>\nnode.status({ fill: \"green\", shape: \"ring\", text: duration });\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 910,
        "y": 240,
        "wires": [
            []
        ]
    },
    {
        "id": "23a461b5.8934de",
        "type": "function",
        "z": "38c422f8.b82bf6",
        "g": "89dcb365.f1eba",
        "name": "цена не изменилась",
        "func": "//<трекер<\n    let track = flow.get(\"track\");\n    let start_node_time = Date.parse(new Date()) / 1000;\n    let steptitle = node.name;\n//>трекер>\n\n\n//>трекер>\n    let end_node_time = Date.parse(new Date()) / 1000;\n    let duration = end_node_time - start_node_time;\n    track.push({\n        \"steptitle\": steptitle,\n        \"start_node_time\": start_node_time,\n        \"end_node_time\": end_node_time,\n        \"duration\": duration\n    });\n    flow.set(\"track\", track);\n//>трекер>\nnode.status({fill:\"green\",shape:\"dot\"});\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 1260,
        "y": 480,
        "wires": [
            [
                "e545caa6.7236c8"
            ]
        ]
    },
    {
        "id": "1692a27.8368fde",
        "type": "redis-in",
        "z": "38c422f8.b82bf6",
        "g": "6d0bae3e.4983b8",
        "server": "f120eab2.0a60a8",
        "command": "subscribe",
        "name": "",
        "topic": "start",
        "obj": true,
        "timeout": 0,
        "x": 130,
        "y": 180,
        "wires": [
            []
        ]
    },
    {
        "id": "90df249b.c0cbf",
        "type": "comment",
        "z": "38c422f8.b82bf6",
        "g": "c0b0e6b5.5e71f",
        "name": "Финиш трека. Семафор = \"Свободно\"",
        "info": "",
        "x": 2320,
        "y": 120,
        "wires": []
    },
    {
        "id": "cc1a6775.26469",
        "type": "redis-in",
        "z": "38c422f8.b82bf6",
        "g": "6d0bae3e.4983b8",
        "server": "f120eab2.0a60a8",
        "command": "subscribe",
        "name": "",
        "topic": "start1",
        "obj": true,
        "timeout": 0,
        "x": 770,
        "y": 240,
        "wires": [
            [
                "1b14a050.631f9"
            ]
        ]
    },
    {
        "id": "34f31521.2b27d2",
        "type": "function",
        "z": "38c422f8.b82bf6",
        "g": "205eec04.74c0d4",
        "name": "Старт канселятора",
        "func": "//<трекер<\n    let track = flow.get(\"track\");\n    let start_node_time = Date.parse(new Date()) / 1000;\n    let steptitle = node.name;\n//>трекер>\n\n\n//>трекер>\n    let end_node_time = Date.parse(new Date()) / 1000;\n    let duration = end_node_time - start_node_time;\n    track.push({\n        \"steptitle\": steptitle,\n        \"start_node_time\": start_node_time,\n        \"end_node_time\": end_node_time,\n        \"duration\": duration\n    });\n    flow.set(\"track\", track);\n//>трекер>\nnode.status({fill:\"green\",shape:\"dot\"});\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 240,
        "y": 640,
        "wires": [
            [
                "160b4dd4.4f8e12"
            ]
        ]
    },
    {
        "id": "83eb55cb.4546",
        "type": "comment",
        "z": "38c422f8.b82bf6",
        "g": "6d0bae3e.4983b8",
        "name": "Семафор = \"Занято\"",
        "info": "",
        "x": 1840,
        "y": 140,
        "wires": []
    },
    {
        "id": "5e6d0362.224584",
        "type": "function",
        "z": "38c422f8.b82bf6",
        "g": "205eec04.74c0d4",
        "name": "нет запрета на покупку",
        "func": "//<трекер<\n    let track = flow.get(\"track\");\n    let start_node_time = Date.parse(new Date()) / 1000;\n    let steptitle = node.name;\n//>трекер>\n\n\n//>трекер>\n    let end_node_time = Date.parse(new Date()) / 1000;\n    let duration = end_node_time - start_node_time;\n    track.push({\n        \"steptitle\": steptitle,\n        \"start_node_time\": start_node_time,\n        \"end_node_time\": end_node_time,\n        \"duration\": duration\n    });\n    flow.set(\"track\", track);\n//>трекер>\nnode.status({fill:\"green\",shape:\"dot\"});\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 790,
        "y": 600,
        "wires": [
            [
                "ac559e43.94903"
            ]
        ]
    },
    {
        "id": "168e0396.d38efc",
        "type": "catch",
        "z": "38c422f8.b82bf6",
        "g": "c4471f11.5e9398",
        "name": "",
        "scope": null,
        "uncaught": false,
        "x": 1360,
        "y": 1140,
        "wires": [
            [
                "c971a180.2a71c8"
            ]
        ]
    },
    {
        "id": "c971a180.2a71c8",
        "type": "debug",
        "z": "38c422f8.b82bf6",
        "g": "c4471f11.5e9398",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1410,
        "y": 1180,
        "wires": []
    },
    {
        "id": "f13d409b.6445f8",
        "type": "inject",
        "z": "38c422f8.b82bf6",
        "g": "c4471f11.5e9398",
        "name": "start1",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 1210,
        "y": 1140,
        "wires": [
            [
                "76409bc.077dee4"
            ]
        ]
    },
    {
        "id": "76409bc.077dee4",
        "type": "redis-out",
        "z": "38c422f8.b82bf6",
        "g": "c4471f11.5e9398",
        "server": "f120eab2.0a60a8",
        "command": "publish",
        "name": "",
        "topic": "start1",
        "obj": false,
        "x": 1210,
        "y": 1180,
        "wires": []
    },
    {
        "id": "230838f7.7d169",
        "type": "function",
        "z": "38c422f8.b82bf6",
        "g": "205eec04.74c0d4",
        "name": "buy ордеров нет",
        "func": "//<трекер<\n    let track = flow.get(\"track\");\n    let start_node_time = Date.parse(new Date()) / 1000;\n    let steptitle = node.name;\n//>трекер>\n\n\n//>трекер>\n    let end_node_time = Date.parse(new Date()) / 1000;\n    let duration = end_node_time - start_node_time;\n    track.push({\n        \"steptitle\": steptitle,\n        \"start_node_time\": start_node_time,\n        \"end_node_time\": end_node_time,\n        \"duration\": duration\n    });\n    flow.set(\"track\", track);\n//>трекер>\nnode.status({fill:\"green\",shape:\"dot\"});\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 1030,
        "y": 740,
        "wires": [
            [
                "ce43fd6d.7b213"
            ]
        ]
    },
    {
        "id": "415a64d7.94e364",
        "type": "function",
        "z": "38c422f8.b82bf6",
        "g": "205eec04.74c0d4",
        "name": "отменяем ордера на покупку",
        "func": "//<трекер<\n    let track = flow.get(\"track\");\n    let start_node_time = Date.parse(new Date()) / 1000;\n    let steptitle = node.name;\n//>трекер>\n\n\n//>трекер>\n    let end_node_time = Date.parse(new Date()) / 1000;\n    let duration = end_node_time - start_node_time;\n    track.push({\n        \"steptitle\": steptitle,\n        \"start_node_time\": start_node_time,\n        \"end_node_time\": end_node_time,\n        \"duration\": duration\n    });\n    flow.set(\"track\", track);\n//>трекер>\nnode.status({fill:\"green\",shape:\"dot\"});\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1070,
        "y": 660,
        "wires": [
            [
                "6efa7034.90b4e"
            ]
        ]
    },
    {
        "id": "8e1f3271.c24088",
        "type": "function",
        "z": "38c422f8.b82bf6",
        "g": "6d0bae3e.4983b8",
        "name": "start",
        "func": "//<трекер<\n    ////>только для стартовой ноды>\n        var track = [];\n        let start_track_time = Date.parse(new Date()) / 1000;\n        let start_node_time = start_track_time;\n        let steptitle = node.name;\n    ////>только для стартовой ноды>\n//>трекер>\n\n\n\n\n\n\n//>трекер>\n    let end_node_time = Date.parse(new Date()) / 1000;\n    let duration = end_node_time - start_node_time;\n    track.push({\n        \"steptitle\": steptitle,\n        \"start_node_time\": start_node_time,\n        \"end_node_time\": end_node_time,\n        \"duration\": duration\n    });\n\n    flow.set(\"track\", track);\n//>трекер>\nnode.status({ fill: \"green\", shape: \"ring\", text: duration });\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 690,
        "y": 180,
        "wires": [
            []
        ]
    },
    {
        "id": "79a93671.4908f",
        "type": "debug",
        "z": "38c422f8.b82bf6",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "x": 450,
        "y": 1640,
        "wires": []
    },
    {
        "id": "7a8474f8.a35f2c",
        "type": "function",
        "z": "38c422f8.b82bf6",
        "name": "проверяем статусы открытых ордеров на всех этажах",
        "func": "//<трекер<\n    let track = flow.get(\"track\");\n    let start_node_time = Date.parse(new Date()) / 1000;\n    let steptitle = node.name;\n//>трекер>\n\n\n//>трекер>\n    let end_node_time = Date.parse(new Date()) / 1000;\n    let duration = end_node_time - start_node_time;\n    track.push({\n        \"steptitle\": steptitle,\n        \"start_node_time\": start_node_time,\n        \"end_node_time\": end_node_time,\n        \"duration\": duration\n    });\n    flow.set(\"track\", track);\n//>трекер>\nnode.status({fill:\"green\",shape:\"dot\"});\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 410,
        "y": 980,
        "wires": [
            [
                "db4dea56.5e575",
                "a836d292.a18c6"
            ]
        ]
    },
    {
        "id": "fb04f823.a3bdd8",
        "type": "debug",
        "z": "38c422f8.b82bf6",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 870,
        "y": 900,
        "wires": []
    },
    {
        "id": "db4dea56.5e575",
        "type": "function",
        "z": "38c422f8.b82bf6",
        "name": "filter all open orders",
        "func": "//<трекер<\n    let track = flow.get(\"track\");\n    let start_node_time = Date.parse(new Date()) / 1000;\n    let steptitle = node.name;\n//>трекер>\n\n//msg.bot = msg.payload.bot;\n\n\nlet f = msg.bot.floors;\n\n var openfloors = f.filter(function(floor) {\n     return ((floor[7] == 1) || (floor[7] == 3));\n    });\n\nmsg.bot.openfloors = openfloors;\n\nif (openfloors.length > 0){\n    msg.payload = openfloors;\n    \n    //>трекер>\n        let end_node_time = Date.parse(new Date()) / 1000;\n        let duration = end_node_time - start_node_time;\n        track.push({\n            \"steptitle\": steptitle,\n            \"start_node_time\": start_node_time,\n            \"end_node_time\": end_node_time,\n            \"duration\": duration\n        });\n        flow.set(\"track\", track);\n    //>трекер>\n\n    node.status({fill:\"green\",shape:\"ring\",text:openfloors.length});\n    return [msg, null];\n    \n}\nelse{\n    \n    //>трекер>\n    let end_node_time = Date.parse(new Date()) / 1000;\n    let duration = end_node_time - start_node_time;\n    track.push({\n        \"steptitle\": steptitle,\n        \"start_node_time\": start_node_time,\n        \"end_node_time\": end_node_time,\n        \"duration\": duration\n    });\n    flow.set(\"track\", track);\n    //>трекер>\n\n    node.status({fill:\"blue\",shape:\"ring\",text:openfloors.length});\n    return [null, msg];\n}\n\n\n",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 820,
        "y": 980,
        "wires": [
            [
                "fb04f823.a3bdd8",
                "cff1b080.040028"
            ],
            [
                "b881a645.5fdc4",
                "355f109f.8ebbb"
            ]
        ]
    },
    {
        "id": "63a1b9e8.5ea0a",
        "type": "debug",
        "z": "38c422f8.b82bf6",
        "g": "205eec04.74c0d4",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 500,
        "y": 720,
        "wires": []
    },
    {
        "id": "b881a645.5fdc4",
        "type": "debug",
        "z": "38c422f8.b82bf6",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 870,
        "y": 1040,
        "wires": []
    },
    {
        "id": "a836d292.a18c6",
        "type": "debug",
        "z": "38c422f8.b82bf6",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 570,
        "y": 920,
        "wires": []
    },
    {
        "id": "cff1b080.040028",
        "type": "split",
        "z": "38c422f8.b82bf6",
        "name": "",
        "splt": "\\n",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "x": 1030,
        "y": 980,
        "wires": [
            [
                "6189b11c.899fd8"
            ]
        ]
    },
    {
        "id": "6189b11c.899fd8",
        "type": "function",
        "z": "38c422f8.b82bf6",
        "name": "prepare get order status",
        "func": "//<трекер<\n    let track = flow.get(\"track\");\n    let start_node_time = Date.parse(new Date()) / 1000;\n    let steptitle = node.name;\n//>трекер>\n\nlet moneta = msg.bot.settings.moneta;\nlet orderid = msg.payload[8];\n\nmsg.payload = [];\nmsg.topic = \"orders-status-\" + msg.bot.settings.userid + \":\" + moneta + \":\" + orderid;\n\n//>трекер>\n    let end_node_time = Date.parse(new Date()) / 1000;\n    let duration = end_node_time - start_node_time;\n    track.push({\n        \"steptitle\": steptitle,\n        \"start_node_time\": start_node_time,\n        \"end_node_time\": end_node_time,\n        \"duration\": duration\n    });\n    flow.set(\"track\", track);\n//>трекер>\nnode.status({fill:\"green\",shape:\"dot\"});\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 1230,
        "y": 980,
        "wires": [
            [
                "b731d6be.9f8fc8"
            ]
        ],
        "inputLabels": [
            "orderid"
        ],
        "outputLabels": [
            "status"
        ],
        "icon": "node-red-contrib-binance/binance.png"
    },
    {
        "id": "b731d6be.9f8fc8",
        "type": "redis-command",
        "z": "38c422f8.b82bf6",
        "server": "f120eab2.0a60a8",
        "command": "GET",
        "name": "get order status",
        "topic": "msg.payload",
        "params": "[]",
        "paramsType": "json",
        "payloadType": "json",
        "block": false,
        "x": 1460,
        "y": 980,
        "wires": [
            [
                "e3d41428.60691"
            ]
        ]
    },
    {
        "id": "e3d41428.60691",
        "type": "function",
        "z": "38c422f8.b82bf6",
        "name": "allchecker topic = bot.id",
        "func": "//<трекер<\n    let track = flow.get(\"track\");\n    let start_node_time = Date.parse(new Date()) / 1000;\n    let steptitle = node.name;\n//>трекер>\n\nmsg.topic = msg.bot.id\n\n//>трекер>\n    let end_node_time = Date.parse(new Date()) / 1000;\n    let duration = end_node_time - start_node_time;\n    track.push({\n        \"steptitle\": steptitle,\n        \"start_node_time\": start_node_time,\n        \"end_node_time\": end_node_time,\n        \"duration\": duration\n    });\n    flow.set(\"track\", track);\n//>трекер>\nnode.status({fill:\"green\",shape:\"dot\"});\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 1690,
        "y": 980,
        "wires": [
            [
                "9705d73c.6e5ca",
                "6ce338e3.82232"
            ]
        ]
    },
    {
        "id": "9705d73c.6e5ca",
        "type": "switch",
        "z": "38c422f8.b82bf6",
        "name": "статус ордера",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "NEW",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "PARTIALLY_FILLED",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "CANCELED",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "FILLED",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "REJECTED",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "EXPIRED",
                "vt": "str"
            },
            {
                "t": "null"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 7,
        "x": 1920,
        "y": 980,
        "wires": [
            [
                "fe358c3e.8ff248"
            ],
            [
                "fe358c3e.8ff248"
            ],
            [
                "2257b76.071d6c8"
            ],
            [
                "4084a396.073304"
            ],
            [
                "fe358c3e.8ff248"
            ],
            [
                "fe358c3e.8ff248"
            ],
            [
                "c01705a8.21d418",
                "fe358c3e.8ff248"
            ]
        ]
    },
    {
        "id": "6ce338e3.82232",
        "type": "debug",
        "z": "38c422f8.b82bf6",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1710,
        "y": 880,
        "wires": []
    },
    {
        "id": "c01705a8.21d418",
        "type": "debug",
        "z": "38c422f8.b82bf6",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1910,
        "y": 1120,
        "wires": []
    },
    {
        "id": "19e93a09.89aee6",
        "type": "comment",
        "z": "38c422f8.b82bf6",
        "name": "FILLED",
        "info": "",
        "x": 2190,
        "y": 900,
        "wires": []
    },
    {
        "id": "6012c453.cfeffc",
        "type": "function",
        "z": "38c422f8.b82bf6",
        "name": "update bot floors, finance",
        "func": "\n\nlet newsetb = {\"floors\":msg.bot.floors, \"finance\":msg.bot.finance};\n//newset = JSON.stringify(newset);\n//node.warn(newsetb);\n\nmsg.payload = newsetb;\n\nmsg.headers = {};\nmsg.headers['accept'] = 'application/json';\nmsg.headers['Content-Type'] = 'application/json';\n\n   // let idstep = msg.bot.id+\"-step\";\n   // flow.set(idstep, 8);\n\nconst upd = global.get('updateSettings')(msg.payload, msg.bot.id);\n\nupd.then(upd => {\n    \n    msg.payload = \"updated\"\n    node.send(msg);\n\n}).catch(error => {\n    node.error(error);\n});",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 3010,
        "y": 920,
        "wires": [
            [
                "5c51429d.72e104"
            ]
        ],
        "icon": "font-awesome/fa-bolt"
    },
    {
        "id": "4084a396.073304",
        "type": "function",
        "z": "38c422f8.b82bf6",
        "name": "change floors, finance ",
        "func": "let idstep = msg.bot.id+\"-step\";\nflow.set(idstep, \"регистрируем покупку\");\n    \nlet tempfin = Number(Number(msg.bot.finance.baseinorders) - Number(msg.bot.status.currentfloor[14])*Number(msg.bot.status.currentfloor[3]));\n\nlet tempfin2 = Number(Number(msg.bot.finance.quotanal) + Number(msg.bot.status.currentfloor[14]));\n\nmsg.bot.finance.baseinorders = tempfin.toFixed(msg.bot.settings.digitprice);\nmsg.bot.finance.quotanal = tempfin2.toFixed(msg.bot.settings.digitq);\n\nif (msg.bot.finance.baseinorders == -0) {msg.bot.finance.baseinorders = 0;}\nif (msg.bot.finance.basenal == -0) {msg.bot.finance.basenal = 0;}\n\nlet currentfloor = msg.bot.status.currentfloor;\ncurrentfloor[7] = 2;\n\n\nmsg.bot.floors[currentfloor[0]-1] = currentfloor;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 2260,
        "y": 940,
        "wires": [
            [
                "fe358c3e.8ff248"
            ]
        ]
    },
    {
        "id": "5c51429d.72e104",
        "type": "link out",
        "z": "38c422f8.b82bf6",
        "name": "заперещено закупать",
        "links": [
            "3e6444c9.a2ba14"
        ],
        "x": 3195,
        "y": 920,
        "wires": []
    },
    {
        "id": "3e6444c9.a2ba14",
        "type": "link in",
        "z": "38c422f8.b82bf6",
        "name": "",
        "links": [
            "5c51429d.72e104",
            "fe175d6.982952",
            "68ae7dd9.356844",
            "355f109f.8ebbb"
        ],
        "x": 295,
        "y": 1680,
        "wires": [
            [
                "618930a2.3dffb"
            ]
        ]
    },
    {
        "id": "fe175d6.982952",
        "type": "link out",
        "z": "38c422f8.b82bf6",
        "name": "заперещено закупать",
        "links": [
            "3e6444c9.a2ba14"
        ],
        "x": 2275,
        "y": 1080,
        "wires": []
    },
    {
        "id": "1b8a3dc2.1cbaf2",
        "type": "comment",
        "z": "38c422f8.b82bf6",
        "name": "CANCELED",
        "info": "",
        "x": 2210,
        "y": 800,
        "wires": []
    },
    {
        "id": "fc774736.1854f8",
        "type": "function",
        "z": "38c422f8.b82bf6",
        "name": "update bot floors, finance",
        "func": "\n\nlet newsetb = {\"floors\":msg.bot.floors, \"finance\":msg.bot.finance};\n//newset = JSON.stringify(newset);\n//node.warn(newsetb);\n\nmsg.payload = newsetb;\n\nmsg.headers = {};\nmsg.headers['accept'] = 'application/json';\nmsg.headers['Content-Type'] = 'application/json';\n\n   // let idstep = msg.bot.id+\"-step\";\n   // flow.set(idstep, 8);\n\nconst upd = global.get('updateSettings')(msg.payload, msg.bot.id);\n\nupd.then(upd => {\n    \n    msg.payload = \"updated\"\n    node.send(msg);\n\n}).catch(error => {\n    node.error(error);\n});",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 2750,
        "y": 900,
        "wires": [
            [
                "68ae7dd9.356844"
            ]
        ],
        "icon": "font-awesome/fa-bolt"
    },
    {
        "id": "2257b76.071d6c8",
        "type": "function",
        "z": "38c422f8.b82bf6",
        "name": "change floors, finance ",
        "func": "let idstep = msg.bot.id+\"-step\";\nflow.set(idstep, \"регистрируем отмену ордера\");\n    \nlet tempfin = Number(Number(msg.bot.finance.baseinorders) - Number(msg.bot.status.currentfloor[14])*Number(msg.bot.status.currentfloor[3]));\nlet tempfin2 = Number(Number(msg.bot.finance.basenal) + Number(msg.bot.status.currentfloor[14])*Number(msg.bot.status.currentfloor[3]));\n\nmsg.bot.finance.baseinorders = tempfin.toFixed(msg.bot.settings.digitprice);\nmsg.bot.finance.basenal = tempfin2.toFixed(msg.bot.settings.digitprice);\n\nif (msg.bot.finance.baseinorders == -0) {msg.bot.finance.baseinorders = 0;}\nif (msg.bot.finance.basenal == -0) {msg.bot.finance.basenal = 0;}\n\nlet currentfloor = msg.bot.status.currentfloor;\ncurrentfloor[7] = 0;\ncurrentfloor[8] = 0;\ncurrentfloor[14] = 0;\n\nmsg.bot.floors[currentfloor[0]-1] = currentfloor;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 2260,
        "y": 840,
        "wires": [
            [
                "fe358c3e.8ff248"
            ]
        ]
    },
    {
        "id": "68ae7dd9.356844",
        "type": "link out",
        "z": "38c422f8.b82bf6",
        "name": "заперещено закупать",
        "links": [
            "3e6444c9.a2ba14"
        ],
        "x": 2955,
        "y": 820,
        "wires": []
    },
    {
        "id": "355f109f.8ebbb",
        "type": "link out",
        "z": "38c422f8.b82bf6",
        "name": "заперещено закупать",
        "links": [
            "3e6444c9.a2ba14"
        ],
        "x": 995,
        "y": 1040,
        "wires": []
    },
    {
        "id": "3ff7fc13.f3a62c",
        "type": "debug",
        "z": "38c422f8.b82bf6",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1560,
        "y": 1440,
        "wires": []
    },
    {
        "id": "fe358c3e.8ff248",
        "type": "join",
        "z": "38c422f8.b82bf6",
        "name": "",
        "mode": "auto",
        "build": "string",
        "property": "payload",
        "propertyType": "msg",
        "key": "topic",
        "joiner": "\\n",
        "joinerType": "str",
        "accumulate": "false",
        "timeout": "",
        "count": "",
        "reduceRight": false,
        "x": 2510,
        "y": 940,
        "wires": [
            [
                "fc774736.1854f8"
            ]
        ]
    },
    {
        "id": "ed3ebb40.401b98",
        "type": "debug",
        "z": "38c422f8.b82bf6",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "x": 1330,
        "y": 1300,
        "wires": []
    },
    {
        "id": "f053413b.f6608",
        "type": "debug",
        "z": "38c422f8.b82bf6",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "x": 1250,
        "y": 1440,
        "wires": []
    },
    {
        "id": "7ecf7e00.a0d31",
        "type": "debug",
        "z": "38c422f8.b82bf6",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 2270,
        "y": 1320,
        "wires": []
    },
    {
        "id": "650ece50.fb118",
        "type": "debug",
        "z": "38c422f8.b82bf6",
        "g": "205eec04.74c0d4",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 530,
        "y": 580,
        "wires": []
    },
    {
        "id": "e7d6b6d2.32065",
        "type": "debug",
        "z": "38c422f8.b82bf6",
        "g": "205eec04.74c0d4",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1630,
        "y": 700,
        "wires": []
    },
    {
        "id": "34e1566a.fe282a",
        "type": "function",
        "z": "5df15275.2888ec",
        "name": "set buy order",
        "func": "function parseApiError(error) {\n  if (error.body) {\n    try {\n      var resp = JSON.parse(error.body);\n      return resp.msg;\n    } catch (error) {/* pass thru */}\n  }\n  return \"Unknown error. Status code: \"+error.statsCode;\n}\n\nlet LBinance = global.get('gBinance');\n//node.warn(LBinance);\nlet binance = new LBinance().options({\n\tAPIKEY: \"m0dqmIilej2JPuK6vTzNGPMSc0N6pCHCCA0L5Jtes15gWIDteQ23mlrqCxJjSXOb\",\n\tAPISECRET: \"AI4qXclwJWQcBdkNZdGDAB3wVdiJMEwc9OBp54XxFECGjZRHL96Kcv0siBaPC5Kh\",\n\t\"reconnect\": false,\n    'useServerTime': true,\n    \n});\n\n\n//'options': {\n//        'adjustForTimeDifference': true,\n//        'verbose': true, // if needed, not mandatory\n//        'recvWindow': 10000000, // not really needed\n//    }\n\n \n\n\nlet moneta = \"ALPHAUSDT\";\nlet quantity = Number(100);\nlet price = Number(0.137);\nnode.warn(quantity);\nnode.warn(moneta);\nnode.warn(price);\n//msg.payload = \"qjson.status\";\n\nbinance.buy(moneta, quantity, price, {type:'LIMIT'}, (err, resp) => {\n    if (resp) {\n        msg.orderid = resp.orderId;\n        msg.resp = resp.orderId;\n        msg.payload = resp.orderId;\n        node.status({fill: \"green\", shape: \"ring\", text: resp.orderId});\n        node.send(msg);\n       // return [null,msg];\n    }\n    if (err) {\n        var errorMsg = parseApiError(err) + \", moneta:\" + moneta;\n        node.error(errorMsg, msg);\n        node.warn(err);\n        node.status({fill: \"red\", shape: \"ring\", text: errorMsg});\n        node.send(msg);\n        //return [msg, null];\n    }\n    //node.status({}); //clear status message\n});\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 4130,
        "y": 2940,
        "wires": [
            [
                "2ec21dae.6f5322"
            ]
        ],
        "inputLabels": [
            "orderid, moneta"
        ],
        "outputLabels": [
            "status"
        ],
        "icon": "font-awesome/fa-compress"
    },
    {
        "id": "2ec21dae.6f5322",
        "type": "debug",
        "z": "5df15275.2888ec",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 4380,
        "y": 2940,
        "wires": []
    },
    {
        "id": "668fe2df.5f9904",
        "type": "inject",
        "z": "5df15275.2888ec",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 3900,
        "y": 2940,
        "wires": [
            [
                "34e1566a.fe282a"
            ]
        ]
    },
    {
        "id": "27518c71.378094",
        "type": "inject",
        "z": "5df15275.2888ec",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 3900,
        "y": 2780,
        "wires": [
            [
                "20c4bf6b.e3b69"
            ]
        ]
    },
    {
        "id": "6729f2a9.4470b4",
        "type": "debug",
        "z": "5df15275.2888ec",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 4390,
        "y": 2780,
        "wires": []
    },
    {
        "id": "20c4bf6b.e3b69",
        "type": "function",
        "z": "5df15275.2888ec",
        "name": "current time",
        "func": "msg.payload = new Date();\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 4110,
        "y": 2780,
        "wires": [
            [
                "6729f2a9.4470b4"
            ]
        ]
    },
    {
        "id": "540d66e2.52f558",
        "type": "function",
        "z": "5df15275.2888ec",
        "name": "prepare getprice",
        "func": "\n//let moneta = msg.payload.bot.settings.moneta;\n//msg.bot = msg.payload.bot;\n\nmoneta= msg.payload;\n\nmsg.payload = [];\nmsg.topic = \"prices:\" + moneta;\n    \n\nnode.status({fill:\"green\",shape:\"dot\"});\n    \nreturn msg;\n    \n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 4100,
        "y": 2860,
        "wires": [
            [
                "90c5df5.f6159a"
            ]
        ],
        "inputLabels": [
            "orderid"
        ],
        "outputLabels": [
            "status"
        ],
        "icon": "node-red-contrib-binance/binance.png"
    },
    {
        "id": "90c5df5.f6159a",
        "type": "redis-command",
        "z": "5df15275.2888ec",
        "server": "f120eab2.0a60a8",
        "command": "GET",
        "name": "get price",
        "topic": "msg.payload",
        "params": "[]",
        "paramsType": "json",
        "payloadType": "json",
        "block": false,
        "x": 4300,
        "y": 2860,
        "wires": [
            [
                "4f02ed0f.f40ee4"
            ]
        ]
    },
    {
        "id": "4f02ed0f.f40ee4",
        "type": "debug",
        "z": "5df15275.2888ec",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 4410,
        "y": 2780,
        "wires": []
    },
    {
        "id": "509f1931.8d0b28",
        "type": "inject",
        "z": "5df15275.2888ec",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "BTCUSDT",
        "payloadType": "str",
        "x": 3900,
        "y": 2860,
        "wires": [
            [
                "540d66e2.52f558"
            ]
        ]
    },
    {
        "id": "8c51dfe6.41bf1",
        "type": "function",
        "z": "5df15275.2888ec",
        "g": "c625f482.ef7058",
        "name": "getprice()",
        "func": "",
        "outputs": 1,
        "noerr": 0,
        "initialize": "\n// Code added here will be run once\n// whenever the node is deployed.\nlet getprice = function (moneta = msg.payload) {\n    \n    let promise = new Promise((resolve, reject) => {\n        msg.resolve = resolve;\n        msg.reject = reject;\n    });\n    \n\n    msg.topic = \"prices:\"+moneta;\n    msg.payload = [];\n\n    node.send(Object.assign({}, msg));\n    \n    return promise;\n};\n\nglobal.set('getprice', getprice);",
        "finalize": "",
        "x": 1080,
        "y": 140,
        "wires": [
            [
                "9d5e1703.2251f8"
            ]
        ]
    },
    {
        "id": "456373bf.34e8d4",
        "type": "inject",
        "z": "5df15275.2888ec",
        "g": "c625f482.ef7058",
        "name": "moneta",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "x": 900,
        "y": 140,
        "wires": [
            [
                "8c51dfe6.41bf1"
            ]
        ]
    },
    {
        "id": "9d5e1703.2251f8",
        "type": "redis-command",
        "z": "5df15275.2888ec",
        "g": "c625f482.ef7058",
        "server": "f120eab2.0a60a8",
        "command": "GET",
        "name": "get price",
        "topic": "msg.payload",
        "params": "[]",
        "paramsType": "json",
        "payloadType": "json",
        "block": false,
        "x": 1240,
        "y": 140,
        "wires": [
            [
                "88d1f442.5d291"
            ]
        ]
    },
    {
        "id": "88d1f442.5d291",
        "type": "function",
        "z": "5df15275.2888ec",
        "g": "c625f482.ef7058",
        "name": "resolve",
        "func": "msg.resolve(msg.payload);\n\n// reject\n// setTimeout(function () {\n//     msg.reject({message: 'Could not request joke'});\n// }, 2000);",
        "outputs": "0",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 1460,
        "y": 140,
        "wires": []
    },
    {
        "id": "fdc8dc79.4afd5",
        "type": "inject",
        "z": "5df15275.2888ec",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "BTCUSDT",
        "payloadType": "str",
        "x": 3780,
        "y": 2480,
        "wires": [
            [
                "7bb4ae52.b1d468"
            ]
        ]
    },
    {
        "id": "7bb4ae52.b1d468",
        "type": "function",
        "z": "5df15275.2888ec",
        "name": "getprice",
        "func": "\nlet moneta = msg.payload;\n\nconst gp = global.get('getprice')(moneta);\n\ngp.then(gp => {\n    \n    msg.payload = gp;\n    node.send(msg);\n\n}).catch(error => {\n    node.error(error);\n});",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 3980,
        "y": 2480,
        "wires": [
            [
                "42a69b7a.7442d4"
            ]
        ]
    },
    {
        "id": "42a69b7a.7442d4",
        "type": "debug",
        "z": "5df15275.2888ec",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 4180,
        "y": 2480,
        "wires": []
    },
    {
        "id": "506a8391.c574dc",
        "type": "http in",
        "z": "5df15275.2888ec",
        "g": "93990b56.ce7428",
        "name": "",
        "url": "/botcreate",
        "method": "post",
        "upload": false,
        "swaggerDoc": "",
        "x": 4020,
        "y": 620,
        "wires": [
            [
                "5331f2f3.26e314",
                "b876d5aa.b5314",
                "1180bcc7.96539b",
                "74dd9f83.8b4a38",
                "890bff65.ae92a",
                "c18bfab4.a6c398",
                "634b7ee.4a33b8",
                "5c218091.24dc2",
                "8a90f52f.5e82b8"
            ]
        ]
    },
    {
        "id": "31e84ef9.15d452",
        "type": "redis-command",
        "z": "5df15275.2888ec",
        "g": "93990b56.ce7428",
        "server": "f120eab2.0a60a8",
        "command": "hmset",
        "name": "",
        "topic": "",
        "params": "[]",
        "paramsType": "json",
        "payloadType": "json",
        "block": false,
        "x": 4510,
        "y": 620,
        "wires": [
            []
        ]
    },
    {
        "id": "5331f2f3.26e314",
        "type": "function",
        "z": "5df15275.2888ec",
        "g": "93990b56.ce7428",
        "name": "prepare data for create bot",
        "func": "msg.topic = msg.payload.user_id_from_google+\"-bots:\"+msg.payload.botname+\":data\";\nlet botdata = {\"finance\":msg.payload.finance,\"floors\":msg.payload.floors,\"sales\":msg.payload.sales};\nmsg.payload = botdata;\nnode.status({fill:\"green\",shape:\"dot\"});\nreturn msg;\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 4280,
        "y": 620,
        "wires": [
            [
                "31e84ef9.15d452"
            ]
        ]
    },
    {
        "id": "50198026.187798",
        "type": "function",
        "z": "5df15275.2888ec",
        "name": "register guid",
        "func": "let guid = msg.payload;\nglobal.set('guid',guid);\n\nlet botlistname = guid+\"-botlist\";\nglobal.set('guid',guid);\nglobal.set(botlistname,[]);\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 470,
        "y": 60,
        "wires": [
            []
        ]
    },
    {
        "id": "c866516d.ec8d7",
        "type": "inject",
        "z": "5df15275.2888ec",
        "name": "d3fmoh2rVoVNgIcpLTFZBE0jHnI2",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "d3fmoh2rVoVNgIcpLTFZBE0jHnI2",
        "payloadType": "str",
        "x": 220,
        "y": 60,
        "wires": [
            [
                "50198026.187798"
            ]
        ]
    },
    {
        "id": "bca0f523.f10a5",
        "type": "function",
        "z": "5df15275.2888ec",
        "g": "c625f482.ef7058",
        "name": "getbot_status()",
        "func": "",
        "outputs": 1,
        "noerr": 0,
        "initialize": "let guid = global.get('guid');\n\n\n\nlet getbot_status = function (botname = msg.payload) {\n    \n    let promise = new Promise((resolve, reject) => {\n        msg.resolve = resolve;\n        msg.reject = reject;\n    });\n    \n\n    msg.topic = guid+\"-bots:\"+botname+\":status\";\n    msg.payload = [];\n\n    node.send(Object.assign({}, msg));\n    \n    return promise;\n};\n\nglobal.set('getbot_status', getbot_status);",
        "finalize": "",
        "x": 320,
        "y": 200,
        "wires": [
            [
                "d5710ed3.1f0ed8"
            ]
        ]
    },
    {
        "id": "9929a915.a7192",
        "type": "inject",
        "z": "5df15275.2888ec",
        "g": "c625f482.ef7058",
        "name": "botname",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "x": 140,
        "y": 200,
        "wires": [
            [
                "bca0f523.f10a5"
            ]
        ]
    },
    {
        "id": "84fc47b3.40a288",
        "type": "function",
        "z": "5df15275.2888ec",
        "g": "c625f482.ef7058",
        "name": "resolve",
        "func": "msg.resolve(msg.payload);\n\n// reject\n// setTimeout(function () {\n//     msg.reject({message: 'Could not request joke'});\n// }, 2000);",
        "outputs": "0",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 700,
        "y": 200,
        "wires": []
    },
    {
        "id": "338b53fe.bad3b4",
        "type": "inject",
        "z": "5df15275.2888ec",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "BNBUSDT-1606062710",
        "payloadType": "str",
        "x": 3800,
        "y": 2360,
        "wires": [
            [
                "984c0eb9.874e48"
            ]
        ]
    },
    {
        "id": "984c0eb9.874e48",
        "type": "function",
        "z": "5df15275.2888ec",
        "name": "getbot",
        "func": "\nlet botname = msg.payload;\n\nconst gb = global.get('getbot_status')(botname);\n\ngb.then(gb => {\n    \n    msg.payload = gb;\n    node.send(msg);\n\n}).catch(error => {\n    node.error(error);\n});",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 4030,
        "y": 2360,
        "wires": [
            [
                "625fa757.6ddd8",
                "f509bf72.00e618"
            ]
        ]
    },
    {
        "id": "625fa757.6ddd8",
        "type": "debug",
        "z": "5df15275.2888ec",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 4260,
        "y": 2380,
        "wires": []
    },
    {
        "id": "72938161.c1d328",
        "type": "function",
        "z": "5df15275.2888ec",
        "g": "c625f482.ef7058",
        "name": "getbotlist()",
        "func": "",
        "outputs": 1,
        "noerr": 0,
        "initialize": "\n// Code added here will be run once\n// whenever the node is deployed.\nlet getbotlist = function (guid = msg.payload) {\n    \n    let promise = new Promise((resolve, reject) => {\n        msg.resolve = resolve;\n        msg.reject = reject;\n    });\n    \n\n    msg.topic = guid+\"-botlist\";\n    msg.payload = [];\n\n    node.send(Object.assign({}, msg));\n    \n    return promise;\n};\n\nglobal.set('getbotlist', getbotlist);",
        "finalize": "",
        "x": 290,
        "y": 140,
        "wires": [
            [
                "2e79e684.725d42"
            ]
        ]
    },
    {
        "id": "39200d24.d193aa",
        "type": "inject",
        "z": "5df15275.2888ec",
        "g": "c625f482.ef7058",
        "name": "guid",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "x": 130,
        "y": 140,
        "wires": [
            [
                "72938161.c1d328"
            ]
        ]
    },
    {
        "id": "2e79e684.725d42",
        "type": "redis-command",
        "z": "5df15275.2888ec",
        "g": "c625f482.ef7058",
        "server": "f120eab2.0a60a8",
        "command": "GET",
        "name": "get botlist",
        "topic": "msg.payload",
        "params": "[]",
        "paramsType": "json",
        "payloadType": "json",
        "block": false,
        "x": 460,
        "y": 140,
        "wires": [
            [
                "6d61a71c.3be1e"
            ]
        ]
    },
    {
        "id": "6d61a71c.3be1e",
        "type": "function",
        "z": "5df15275.2888ec",
        "g": "c625f482.ef7058",
        "name": "resolve",
        "func": "msg.resolve(msg.payload);\n\n// reject\n// setTimeout(function () {\n//     msg.reject({message: 'Could not request joke'});\n// }, 2000);",
        "outputs": "0",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 620,
        "y": 140,
        "wires": []
    },
    {
        "id": "1aa4adeb.16a03a",
        "type": "inject",
        "z": "5df15275.2888ec",
        "name": "d3fmoh2rVoVNgIcpLTFZBE0jHnI2",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "d3fmoh2rVoVNgIcpLTFZBE0jHnI2",
        "payloadType": "str",
        "x": 3860,
        "y": 2560,
        "wires": [
            [
                "a7ab24c2.b685e8"
            ]
        ]
    },
    {
        "id": "a7ab24c2.b685e8",
        "type": "function",
        "z": "5df15275.2888ec",
        "name": "getbotlist",
        "func": "\nlet guid = msg.payload;\n\nconst gbl = global.get('getbotlist')(guid);\n\ngbl.then(gbl => {\n    \n    msg.payload = gbl;\n    node.send(msg);\n\n}).catch(error => {\n    node.error(error);\n});",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 4080,
        "y": 2560,
        "wires": [
            [
                "d8a96fea.e8a12"
            ]
        ]
    },
    {
        "id": "d8a96fea.e8a12",
        "type": "debug",
        "z": "5df15275.2888ec",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 4250,
        "y": 2560,
        "wires": []
    },
    {
        "id": "b876d5aa.b5314",
        "type": "function",
        "z": "5df15275.2888ec",
        "g": "93990b56.ce7428",
        "name": "prepare for get botlist",
        "func": "msg.botlistname = msg.payload.user_id_from_google+\"-botlist\";\nmsg.botname = msg.payload.botname;\nmsg.payload = msg.payload.user_id_from_google;\nnode.status({fill:\"green\",shape:\"dot\"});\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 4260,
        "y": 680,
        "wires": [
            [
                "193726e9.3199d9"
            ]
        ]
    },
    {
        "id": "193726e9.3199d9",
        "type": "function",
        "z": "5df15275.2888ec",
        "g": "93990b56.ce7428",
        "name": "getbotlist",
        "func": "\nlet guid = msg.payload;\n\nconst gbl = global.get('getbotlist')(guid);\n\ngbl.then(gbl => {\n    \n    msg.payload = JSON.parse(gbl);\n    node.status({fill:\"green\",shape:\"dot\"});\n    node.send(msg);\n\n}).catch(error => {\n    node.status({fill:\"red\",shape:\"dot\"});\n    node.error(error);\n});",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 4460,
        "y": 680,
        "wires": [
            [
                "c1a0c26f.ded73"
            ]
        ]
    },
    {
        "id": "c1a0c26f.ded73",
        "type": "function",
        "z": "5df15275.2888ec",
        "g": "93990b56.ce7428",
        "name": "prepare for add botlist",
        "func": "msg.topic = msg.botlistname;\n\nlet newbotlist = [];\nif (msg.payload == null) {\n    newbotlist = [msg.botname];\n} else {\n    let oldbotlist = msg.payload;\n    newbotlist = [...oldbotlist,msg.botname];\n    }\n\nmsg.payload = JSON.stringify(newbotlist);\nnode.status({fill:\"green\",shape:\"dot\"});\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 4660,
        "y": 680,
        "wires": [
            [
                "7c1162f3.2e02bc"
            ]
        ]
    },
    {
        "id": "7c1162f3.2e02bc",
        "type": "redis-command",
        "z": "5df15275.2888ec",
        "g": "93990b56.ce7428",
        "server": "f120eab2.0a60a8",
        "command": "getset",
        "name": "",
        "topic": "",
        "params": "[]",
        "paramsType": "json",
        "payloadType": "json",
        "block": false,
        "x": 4870,
        "y": 680,
        "wires": [
            []
        ]
    },
    {
        "id": "1180bcc7.96539b",
        "type": "http response",
        "z": "5df15275.2888ec",
        "g": "93990b56.ce7428",
        "name": "",
        "statusCode": "200",
        "headers": {},
        "x": 4040,
        "y": 680,
        "wires": []
    },
    {
        "id": "754f373f.b15518",
        "type": "trigger",
        "z": "5df15275.2888ec",
        "g": "c2109678.33bc38",
        "name": "",
        "op1": "1",
        "op2": "0",
        "op1type": "str",
        "op2type": "str",
        "duration": "-10",
        "extend": false,
        "overrideDelay": false,
        "units": "s",
        "reset": "",
        "bytopic": "all",
        "topic": "topic",
        "outputs": 1,
        "x": 510,
        "y": 940,
        "wires": [
            [
                "8f2b992a.2a5888"
            ]
        ]
    },
    {
        "id": "444e001d.21432",
        "type": "comment",
        "z": "5df15275.2888ec",
        "g": "c2109678.33bc38",
        "name": "Расчет МА",
        "info": "",
        "x": 130,
        "y": 880,
        "wires": []
    },
    {
        "id": "5d94f71d.d3668",
        "type": "redis-in",
        "z": "5df15275.2888ec",
        "g": "c2109678.33bc38",
        "server": "f120eab2.0a60a8",
        "command": "subscribe",
        "name": "",
        "topic": "stop",
        "obj": true,
        "timeout": 0,
        "x": 110,
        "y": 1000,
        "wires": [
            [
                "edea6dff.e44"
            ]
        ]
    },
    {
        "id": "edea6dff.e44",
        "type": "function",
        "z": "5df15275.2888ec",
        "g": "c2109678.33bc38",
        "name": "stop",
        "func": "msg.reset = true;\nmsg.payload = \"\";\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 250,
        "y": 1000,
        "wires": [
            [
                "754f373f.b15518"
            ]
        ]
    },
    {
        "id": "1e4c98d9.ba7367",
        "type": "redis-in",
        "z": "5df15275.2888ec",
        "g": "c2109678.33bc38",
        "server": "f120eab2.0a60a8",
        "command": "subscribe",
        "name": "",
        "topic": "start",
        "obj": true,
        "timeout": 0,
        "x": 110,
        "y": 940,
        "wires": [
            [
                "c982d578.5cca4"
            ]
        ]
    },
    {
        "id": "c982d578.5cca4",
        "type": "delay",
        "z": "5df15275.2888ec",
        "g": "c2109678.33bc38",
        "name": "",
        "pauseType": "delay",
        "timeout": "1",
        "timeoutUnits": "milliseconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "x": 270,
        "y": 940,
        "wires": [
            [
                "754f373f.b15518"
            ]
        ]
    },
    {
        "id": "eda0b98c.624f38",
        "type": "inject",
        "z": "5df15275.2888ec",
        "g": "74a41043.26c49",
        "name": " stop",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "reset",
                "v": "true",
                "vt": "bool"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 610,
        "y": 2620,
        "wires": [
            [
                "dda68ce4.be4548"
            ]
        ]
    },
    {
        "id": "dda68ce4.be4548",
        "type": "redis-out",
        "z": "5df15275.2888ec",
        "g": "74a41043.26c49",
        "server": "f120eab2.0a60a8",
        "command": "publish",
        "name": "",
        "topic": "stop",
        "obj": false,
        "x": 610,
        "y": 2660,
        "wires": []
    },
    {
        "id": "33a98cf6.520fbc",
        "type": "inject",
        "z": "5df15275.2888ec",
        "g": "74a41043.26c49",
        "name": "start",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 190,
        "y": 2620,
        "wires": [
            [
                "cd451268.3a6058"
            ]
        ]
    },
    {
        "id": "cd451268.3a6058",
        "type": "redis-out",
        "z": "5df15275.2888ec",
        "g": "74a41043.26c49",
        "server": "f120eab2.0a60a8",
        "command": "publish",
        "name": "",
        "topic": "start",
        "obj": false,
        "x": 190,
        "y": 2660,
        "wires": []
    },
    {
        "id": "14fd3fa0.82928",
        "type": "inject",
        "z": "5df15275.2888ec",
        "g": "74a41043.26c49",
        "name": "start1",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 370,
        "y": 2620,
        "wires": [
            [
                "7cd3ed75.b496ac"
            ]
        ]
    },
    {
        "id": "7cd3ed75.b496ac",
        "type": "redis-out",
        "z": "5df15275.2888ec",
        "g": "74a41043.26c49",
        "server": "f120eab2.0a60a8",
        "command": "publish",
        "name": "",
        "topic": "start1",
        "obj": false,
        "x": 370,
        "y": 2660,
        "wires": []
    },
    {
        "id": "c3e2eace.6fef4",
        "type": "comment",
        "z": "5df15275.2888ec",
        "g": "8fac538c.5d4a48",
        "name": "Старт трека",
        "info": "",
        "x": 130,
        "y": 1160,
        "wires": []
    },
    {
        "id": "f88e6307.876b78",
        "type": "trigger",
        "z": "5df15275.2888ec",
        "g": "8fac538c.5d4a48",
        "name": "",
        "op1": "1",
        "op2": "0",
        "op1type": "str",
        "op2type": "str",
        "duration": "-500",
        "extend": false,
        "overrideDelay": false,
        "units": "ms",
        "reset": "",
        "bytopic": "all",
        "topic": "topic",
        "outputs": 1,
        "x": 480,
        "y": 1220,
        "wires": [
            [
                "d43a0074.4523c"
            ]
        ]
    },
    {
        "id": "3e3a1491.e31a74",
        "type": "delay",
        "z": "5df15275.2888ec",
        "g": "8fac538c.5d4a48",
        "name": "",
        "pauseType": "delay",
        "timeout": "1",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "x": 260,
        "y": 1220,
        "wires": [
            [
                "f88e6307.876b78"
            ]
        ]
    },
    {
        "id": "fb84e297.7e169",
        "type": "function",
        "z": "5df15275.2888ec",
        "g": "8fac538c.5d4a48",
        "name": "stop",
        "func": "let botname = \"syslog.txt\";\nlet data = \"Стоп\";\nconst syslog = global.get('tilog')(botname,data);\nsyslog;\n        \n\n        \nmsg.reset = true;\nmsg.payload = \"\";\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 250,
        "y": 1280,
        "wires": [
            [
                "f88e6307.876b78"
            ]
        ]
    },
    {
        "id": "8275986.8fc5d68",
        "type": "redis-in",
        "z": "5df15275.2888ec",
        "g": "8fac538c.5d4a48",
        "server": "f120eab2.0a60a8",
        "command": "subscribe",
        "name": "",
        "topic": "stop",
        "obj": true,
        "timeout": 0,
        "x": 110,
        "y": 1280,
        "wires": [
            [
                "fb84e297.7e169"
            ]
        ]
    },
    {
        "id": "97442da1.47403",
        "type": "function",
        "z": "5df15275.2888ec",
        "g": "8fac538c.5d4a48",
        "name": "start",
        "func": "//<трекер<\n    ////>только для стартовой ноды>\n        var track = [];\n        let start_track_time = new Date().getTime();\n        let start_node_time = start_track_time;\n        let steptitle = node.name;\n    ////>только для стартовой ноды>\n//>трекер>\n\n\n\nmsg.payload = global.get('guid');\n\n\n//>трекер>\n    let end_node_time = new Date().getTime();\n    let duration = end_node_time - start_node_time;\n    track.push({\n        \"steptitle\": steptitle,\n        \"start_node_time\": start_node_time,\n        \"end_node_time\": end_node_time,\n        \"duration_node\": duration,\n        \"duration_step\": 0\n    });\n\n    flow.set(\"track\", track);\n//>трекер>\nnode.status({ fill: \"green\", shape: \"ring\", text: duration });\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 670,
        "y": 1160,
        "wires": [
            [
                "d6651eda.7b83"
            ]
        ]
    },
    {
        "id": "c0dcb78d.280fb",
        "type": "redis-in",
        "z": "5df15275.2888ec",
        "g": "8fac538c.5d4a48",
        "server": "f120eab2.0a60a8",
        "command": "subscribe",
        "name": "",
        "topic": "start",
        "obj": true,
        "timeout": 0,
        "x": 110,
        "y": 1220,
        "wires": [
            [
                "3e3a1491.e31a74",
                "32fce615.5af6c2"
            ]
        ]
    },
    {
        "id": "da741b09.f3974",
        "type": "redis-in",
        "z": "5df15275.2888ec",
        "g": "8fac538c.5d4a48",
        "server": "f120eab2.0a60a8",
        "command": "subscribe",
        "name": "",
        "topic": "start1",
        "obj": true,
        "timeout": 0,
        "x": 530,
        "y": 1160,
        "wires": [
            [
                "97442da1.47403"
            ]
        ]
    },
    {
        "id": "3201780f.c931f",
        "type": "comment",
        "z": "5df15275.2888ec",
        "g": "8fac538c.5d4a48",
        "name": "Семафор = \"Занято\"",
        "info": "",
        "x": 2000,
        "y": 1140,
        "wires": []
    },
    {
        "id": "d43a0074.4523c",
        "type": "function",
        "z": "5df15275.2888ec",
        "g": "8fac538c.5d4a48",
        "name": "start",
        "func": "//<трекер<\n    ////>только для стартовой ноды>\n        var track = [];\n        let start_track_time = new Date().getTime();\n        let start_node_time = start_track_time;\n        let steptitle = node.name;\n    ////>только для стартовой ноды>\n//>трекер>\n\n\n\nmsg.payload = global.get('guid');\n\n\n//>трекер>\n// @ts-ignore\nlet lasttrack = flow.get(\"track\", track) || \"\";\nflow.set(\"lasttrack\", lasttrack);\n\n    let end_node_time = new Date().getTime();\n    let duration = end_node_time - start_node_time;\n    track.push({\n        \"steptitle\": steptitle,\n        \"start_node_time\": start_node_time,\n        \"end_node_time\": end_node_time,\n        \"duration_node\": duration,\n        \"duration_step\": 0\n    });\n\n    flow.set(\"track\", track);\n//>трекер>\nnode.status({ fill: \"green\", shape: \"ring\", text: duration });\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 670,
        "y": 1220,
        "wires": [
            [
                "d6651eda.7b83"
            ]
        ]
    },
    {
        "id": "133c3e4a.687a62",
        "type": "debug",
        "z": "5df15275.2888ec",
        "g": "3e767551.3d299a",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 2550,
        "y": 1220,
        "wires": []
    },
    {
        "id": "a7ef7b74.1301e8",
        "type": "comment",
        "z": "5df15275.2888ec",
        "g": "3e767551.3d299a",
        "name": "Финиш трека. Семафор = \"Свободно\"",
        "info": "",
        "x": 2520,
        "y": 1100,
        "wires": []
    },
    {
        "id": "90d93514.efa9e8",
        "type": "redis-in",
        "z": "5df15275.2888ec",
        "g": "c2109678.33bc38",
        "server": "f120eab2.0a60a8",
        "command": "subscribe",
        "name": "",
        "topic": "start1",
        "obj": true,
        "timeout": 0,
        "x": 550,
        "y": 1000,
        "wires": [
            [
                "24812b74.9bc644"
            ]
        ]
    },
    {
        "id": "f509bf72.00e618",
        "type": "json",
        "z": "5df15275.2888ec",
        "name": "",
        "property": "payload",
        "action": "obj",
        "pretty": false,
        "x": 4270,
        "y": 2340,
        "wires": [
            [
                "b0bce207.3e7de8"
            ]
        ]
    },
    {
        "id": "b0bce207.3e7de8",
        "type": "debug",
        "z": "5df15275.2888ec",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 4410,
        "y": 2360,
        "wires": []
    },
    {
        "id": "7b1b57ca.c72288",
        "type": "function",
        "z": "5df15275.2888ec",
        "name": "register keypar",
        "func": "let key = msg.key;\nlet secret = msg.secret\nglobal.set('key',key);\nglobal.set('secret',secret);\n\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 920,
        "y": 60,
        "wires": [
            []
        ]
    },
    {
        "id": "36430d18.7c1cea",
        "type": "inject",
        "z": "5df15275.2888ec",
        "name": "my keypair",
        "props": [
            {
                "p": "key",
                "v": "m0dqmIilej2JPuK6vTzNGPMSc0N6pCHCCA0L5Jtes15gWIDteQ23mlrqCxJjSXOb",
                "vt": "str"
            },
            {
                "p": "secret",
                "v": "AI4qXclwJWQcBdkNZdGDAB3wVdiJMEwc9OBp54XxFECGjZRHL96Kcv0siBaPC5Kh",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "x": 690,
        "y": 60,
        "wires": [
            [
                "7b1b57ca.c72288"
            ]
        ]
    },
    {
        "id": "7ee8ada7.9818bc",
        "type": "catch",
        "z": "5df15275.2888ec",
        "d": true,
        "g": "bc481bc2.f1ae08",
        "name": "",
        "scope": null,
        "uncaught": false,
        "x": 2680,
        "y": 1360,
        "wires": [
            [
                "e0440623.2ec6e"
            ]
        ]
    },
    {
        "id": "e0440623.2ec6e",
        "type": "debug",
        "z": "5df15275.2888ec",
        "g": "bc481bc2.f1ae08",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 2930,
        "y": 1360,
        "wires": []
    },
    {
        "id": "a359f524.2e00e8",
        "type": "function",
        "z": "5df15275.2888ec",
        "g": "bc481bc2.f1ae08",
        "name": "get flow.track",
        "func": "\n//<трекер<\nlet track = flow.get(\"track\");\nlet start_node_time = Date.parse(new Date())/1000;\nlet steptitle = node.name;\n//>трекер>\n\nmsg.payload = track;\n\n//<трекер< \n //   let end_node_time = Date.parse(new Date())/1000;\n //   let duration = end_node_time-start_node_time;\n //   track.push([steptitle,start_node_time,end_node_time,duration]);\n //   msg.track = track;\n //   flow.set(\"track\", track);\n//>трекер>\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 2880,
        "y": 1480,
        "wires": [
            [
                "a0142b1a.f25d9",
                "941fc9d2.76b05"
            ]
        ]
    },
    {
        "id": "cf20b67b.cbc6e",
        "type": "inject",
        "z": "5df15275.2888ec",
        "g": "bc481bc2.f1ae08",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 2580,
        "y": 1420,
        "wires": [
            [
                "a359f524.2e00e8"
            ]
        ]
    },
    {
        "id": "a0142b1a.f25d9",
        "type": "debug",
        "z": "5df15275.2888ec",
        "g": "bc481bc2.f1ae08",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 3050,
        "y": 1440,
        "wires": []
    },
    {
        "id": "941fc9d2.76b05",
        "type": "ui_table",
        "z": "5df15275.2888ec",
        "d": true,
        "g": "bc481bc2.f1ae08",
        "group": "a328c3be.7f91c8",
        "name": "",
        "order": 2,
        "width": "14",
        "height": "9",
        "columns": [
            {
                "field": "steptitle",
                "title": "steptitle",
                "width": "",
                "align": "left",
                "formatter": "plaintext",
                "formatterParams": {
                    "target": "_blank"
                }
            },
            {
                "field": "duration_node",
                "title": "duration_node",
                "width": "",
                "align": "left",
                "formatter": "plaintext",
                "formatterParams": {
                    "target": "_blank"
                }
            },
            {
                "field": "duration_step",
                "title": "duration_step",
                "width": "",
                "align": "left",
                "formatter": "plaintext",
                "formatterParams": {
                    "target": "_blank"
                }
            }
        ],
        "outputs": 0,
        "cts": false,
        "x": 3050,
        "y": 1480,
        "wires": []
    },
    {
        "id": "8040b017.7a26f8",
        "type": "comment",
        "z": "5df15275.2888ec",
        "g": "bc481bc2.f1ae08",
        "name": "Отладка",
        "info": "",
        "x": 3250,
        "y": 1380,
        "wires": []
    },
    {
        "id": "189b2b68.7c485d",
        "type": "delay",
        "z": "5df15275.2888ec",
        "g": "bc481bc2.f1ae08",
        "name": "",
        "pauseType": "delay",
        "timeout": "500",
        "timeoutUnits": "milliseconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "x": 2470,
        "y": 1480,
        "wires": [
            [
                "a359f524.2e00e8"
            ]
        ]
    },
    {
        "id": "842e37da.0d09",
        "type": "redis-in",
        "z": "5df15275.2888ec",
        "g": "bc481bc2.f1ae08",
        "server": "f120eab2.0a60a8",
        "command": "subscribe",
        "name": "",
        "topic": "start1",
        "obj": true,
        "timeout": 0,
        "x": 2330,
        "y": 1480,
        "wires": [
            [
                "189b2b68.7c485d"
            ]
        ]
    },
    {
        "id": "74dd9f83.8b4a38",
        "type": "function",
        "z": "5df15275.2888ec",
        "g": "93990b56.ce7428",
        "name": "prepare for add bot status",
        "func": "msg.topic = msg.payload.user_id_from_google+\"-bots:\"+msg.payload.botname+\":status\";\nmsg.payload.status.updated = new Date().getTime();\nmsg.payload = msg.payload.status;\n\nnode.status({fill:\"green\",shape:\"dot\"});\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 4270,
        "y": 740,
        "wires": [
            [
                "1ee92671.77db3a"
            ]
        ]
    },
    {
        "id": "1ee92671.77db3a",
        "type": "redis-command",
        "z": "5df15275.2888ec",
        "g": "93990b56.ce7428",
        "server": "f120eab2.0a60a8",
        "command": "getset",
        "name": "",
        "topic": "",
        "params": "[]",
        "paramsType": "json",
        "payloadType": "json",
        "block": false,
        "x": 4490,
        "y": 740,
        "wires": [
            []
        ]
    },
    {
        "id": "890bff65.ae92a",
        "type": "function",
        "z": "5df15275.2888ec",
        "g": "93990b56.ce7428",
        "name": "prepare for add bot settings",
        "func": "msg.topic = msg.payload.user_id_from_google+\"-bots:\"+msg.payload.botname+\":settings\";\n\nmsg.payload = msg.payload.settings;\n\nnode.status({fill:\"green\",shape:\"dot\"});\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 4280,
        "y": 800,
        "wires": [
            [
                "7be2e3c6.f4f0dc"
            ]
        ]
    },
    {
        "id": "7be2e3c6.f4f0dc",
        "type": "redis-command",
        "z": "5df15275.2888ec",
        "g": "93990b56.ce7428",
        "server": "f120eab2.0a60a8",
        "command": "getset",
        "name": "",
        "topic": "",
        "params": "[]",
        "paramsType": "json",
        "payloadType": "json",
        "block": false,
        "x": 4510,
        "y": 800,
        "wires": [
            []
        ]
    },
    {
        "id": "c18bfab4.a6c398",
        "type": "function",
        "z": "5df15275.2888ec",
        "g": "93990b56.ce7428",
        "name": "prepare for add bot ttp",
        "func": "msg.topic = msg.payload.user_id_from_google+\"-bots:\"+msg.payload.botname+\":ttp\";\n\nmsg.payload = msg.payload.ttp;\n\nnode.status({fill:\"green\",shape:\"dot\"});\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 4260,
        "y": 860,
        "wires": [
            [
                "4a2da56.007bbdc"
            ]
        ]
    },
    {
        "id": "4a2da56.007bbdc",
        "type": "redis-command",
        "z": "5df15275.2888ec",
        "g": "93990b56.ce7428",
        "server": "f120eab2.0a60a8",
        "command": "getset",
        "name": "",
        "topic": "",
        "params": "[]",
        "paramsType": "json",
        "payloadType": "json",
        "block": false,
        "x": 4470,
        "y": 860,
        "wires": [
            []
        ]
    },
    {
        "id": "634b7ee.4a33b8",
        "type": "function",
        "z": "5df15275.2888ec",
        "g": "93990b56.ce7428",
        "name": "prepare for add bot onoff",
        "func": "msg.topic = msg.payload.user_id_from_google+\"-bots:\"+msg.payload.botname+\":onoff\";\n\nmsg.payload = JSON.stringify(msg.payload.onoff);\n\nnode.status({fill:\"green\",shape:\"dot\"});\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 4270,
        "y": 920,
        "wires": [
            [
                "a2076fe3.e1e4c8"
            ]
        ]
    },
    {
        "id": "a2076fe3.e1e4c8",
        "type": "redis-command",
        "z": "5df15275.2888ec",
        "g": "93990b56.ce7428",
        "server": "f120eab2.0a60a8",
        "command": "getset",
        "name": "",
        "topic": "",
        "params": "[]",
        "paramsType": "json",
        "payloadType": "json",
        "block": false,
        "x": 4470,
        "y": 920,
        "wires": [
            []
        ]
    },
    {
        "id": "d5710ed3.1f0ed8",
        "type": "redis-command",
        "z": "5df15275.2888ec",
        "g": "c625f482.ef7058",
        "server": "f120eab2.0a60a8",
        "command": "GET",
        "name": "get bot status",
        "topic": "msg.payload",
        "params": "[]",
        "paramsType": "json",
        "payloadType": "json",
        "block": false,
        "x": 520,
        "y": 200,
        "wires": [
            [
                "84fc47b3.40a288"
            ]
        ]
    },
    {
        "id": "82c581f1.3d7b2",
        "type": "function",
        "z": "5df15275.2888ec",
        "g": "c625f482.ef7058",
        "name": "getbot_settings()",
        "func": "",
        "outputs": 1,
        "noerr": 0,
        "initialize": "let guid = global.get('guid');\n\n\nlet getbot_settings = function (botname = msg.payload) {\n    \n    let promise = new Promise((resolve, reject) => {\n        msg.resolve = resolve;\n        msg.reject = reject;\n    });\n    \n\n    msg.topic = guid+\"-bots:\"+botname+\":settings\";\n    msg.payload = [];\n\n    node.send(Object.assign({}, msg));\n    \n    return promise;\n};\n\nglobal.set('getbot_settings', getbot_settings);",
        "finalize": "",
        "x": 330,
        "y": 260,
        "wires": [
            [
                "de421236.7ddad8"
            ]
        ]
    },
    {
        "id": "4e808ea9.9699f8",
        "type": "inject",
        "z": "5df15275.2888ec",
        "g": "c625f482.ef7058",
        "name": "botname",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "x": 140,
        "y": 260,
        "wires": [
            [
                "82c581f1.3d7b2"
            ]
        ]
    },
    {
        "id": "c996e15f.6cd09",
        "type": "function",
        "z": "5df15275.2888ec",
        "g": "c625f482.ef7058",
        "name": "resolve",
        "func": "msg.resolve(msg.payload);\n\n// reject\n// setTimeout(function () {\n//     msg.reject({message: 'Could not request joke'});\n// }, 2000);",
        "outputs": "0",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 720,
        "y": 260,
        "wires": []
    },
    {
        "id": "de421236.7ddad8",
        "type": "redis-command",
        "z": "5df15275.2888ec",
        "g": "c625f482.ef7058",
        "server": "f120eab2.0a60a8",
        "command": "GET",
        "name": "get bot settings",
        "topic": "msg.payload",
        "params": "[]",
        "paramsType": "json",
        "payloadType": "json",
        "block": false,
        "x": 540,
        "y": 260,
        "wires": [
            [
                "c996e15f.6cd09"
            ]
        ]
    },
    {
        "id": "5c218091.24dc2",
        "type": "function",
        "z": "5df15275.2888ec",
        "g": "93990b56.ce7428",
        "name": "prepare for add bot busy",
        "func": "msg.topic = msg.payload.user_id_from_google+\"-bots:\"+msg.payload.botname+\":busy\";\n\nmsg.payload = JSON.stringify(msg.payload.busy);\n\nnode.status({fill:\"green\",shape:\"dot\"});\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 4270,
        "y": 980,
        "wires": [
            [
                "d9152924.0b6fa"
            ]
        ]
    },
    {
        "id": "d9152924.0b6fa",
        "type": "redis-command",
        "z": "5df15275.2888ec",
        "g": "93990b56.ce7428",
        "server": "f120eab2.0a60a8",
        "command": "getset",
        "name": "",
        "topic": "",
        "params": "[]",
        "paramsType": "json",
        "payloadType": "json",
        "block": false,
        "x": 4490,
        "y": 980,
        "wires": [
            []
        ]
    },
    {
        "id": "3ea27905.a93e8e",
        "type": "function",
        "z": "5df15275.2888ec",
        "g": "c625f482.ef7058",
        "name": "getbot_ttp()",
        "func": "",
        "outputs": 1,
        "noerr": 0,
        "initialize": "let guid = global.get('guid');\n\n\nlet getbot_ttp = function (botname = msg.payload) {\n    \n    let promise = new Promise((resolve, reject) => {\n        msg.resolve = resolve;\n        msg.reject = reject;\n    });\n    \n\n    msg.topic = guid+\"-bots:\"+botname+\":ttp\";\n    msg.payload = [];\n\n    node.send(Object.assign({}, msg));\n    \n    return promise;\n};\n\nglobal.set('getbot_ttp', getbot_ttp);",
        "finalize": "",
        "x": 310,
        "y": 320,
        "wires": [
            [
                "dc63781f.d7f54"
            ]
        ]
    },
    {
        "id": "c419c89c.c82b7",
        "type": "inject",
        "z": "5df15275.2888ec",
        "g": "c625f482.ef7058",
        "name": "botname",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "x": 140,
        "y": 320,
        "wires": [
            [
                "3ea27905.a93e8e"
            ]
        ]
    },
    {
        "id": "ee122abb.ffdf2",
        "type": "function",
        "z": "5df15275.2888ec",
        "g": "c625f482.ef7058",
        "name": "resolve",
        "func": "msg.resolve(msg.payload);\n\n// reject\n// setTimeout(function () {\n//     msg.reject({message: 'Could not request joke'});\n// }, 2000);",
        "outputs": "0",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 680,
        "y": 320,
        "wires": []
    },
    {
        "id": "dc63781f.d7f54",
        "type": "redis-command",
        "z": "5df15275.2888ec",
        "g": "c625f482.ef7058",
        "server": "f120eab2.0a60a8",
        "command": "GET",
        "name": "get bot ttp",
        "topic": "msg.payload",
        "params": "[]",
        "paramsType": "json",
        "payloadType": "json",
        "block": false,
        "x": 490,
        "y": 320,
        "wires": [
            [
                "ee122abb.ffdf2"
            ]
        ]
    },
    {
        "id": "e12b76fa.94dc68",
        "type": "function",
        "z": "5df15275.2888ec",
        "g": "c625f482.ef7058",
        "name": "getbot_onoff()",
        "func": "",
        "outputs": 1,
        "noerr": 0,
        "initialize": "let guid = global.get('guid');\n\n\nlet getbot_onoff = function (botname = msg.payload) {\n    \n    let promise = new Promise((resolve, reject) => {\n        msg.resolve = resolve;\n        msg.reject = reject;\n    });\n    \n\n    msg.topic = guid+\"-bots:\"+botname+\":onoff\";\n    msg.payload = [];\n\n    node.send(Object.assign({}, msg));\n    \n    return promise;\n};\n\nglobal.set('getbot_onoff', getbot_onoff);",
        "finalize": "",
        "x": 320,
        "y": 380,
        "wires": [
            [
                "225135a2.08288a"
            ]
        ]
    },
    {
        "id": "e1b6a373.027e3",
        "type": "inject",
        "z": "5df15275.2888ec",
        "g": "c625f482.ef7058",
        "name": "botname",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "x": 140,
        "y": 380,
        "wires": [
            [
                "e12b76fa.94dc68"
            ]
        ]
    },
    {
        "id": "be80ac0a.3fcc6",
        "type": "function",
        "z": "5df15275.2888ec",
        "g": "c625f482.ef7058",
        "name": "resolve",
        "func": "msg.resolve(msg.payload);\n\n// reject\n// setTimeout(function () {\n//     msg.reject({message: 'Could not request joke'});\n// }, 2000);",
        "outputs": "0",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 700,
        "y": 380,
        "wires": []
    },
    {
        "id": "225135a2.08288a",
        "type": "redis-command",
        "z": "5df15275.2888ec",
        "g": "c625f482.ef7058",
        "server": "f120eab2.0a60a8",
        "command": "GET",
        "name": "get bot onoff",
        "topic": "msg.payload",
        "params": "[]",
        "paramsType": "json",
        "payloadType": "json",
        "block": false,
        "x": 510,
        "y": 380,
        "wires": [
            [
                "be80ac0a.3fcc6"
            ]
        ]
    },
    {
        "id": "32fd021f.9c3646",
        "type": "function",
        "z": "5df15275.2888ec",
        "g": "c625f482.ef7058",
        "name": "getbot_busy()",
        "func": "",
        "outputs": 1,
        "noerr": 0,
        "initialize": "let guid = global.get('guid');\n\n\nlet getbot_busy = function (botname = msg.payload) {\n    \n    let promise = new Promise((resolve, reject) => {\n        msg.resolve = resolve;\n        msg.reject = reject;\n    });\n    \n\n    msg.topic = guid+\"-bots:\"+botname+\":busy\";\n    msg.payload = [];\n\n    node.send(Object.assign({}, msg));\n    \n    return promise;\n};\n\nglobal.set('getbot_busy', getbot_busy);",
        "finalize": "",
        "x": 320,
        "y": 440,
        "wires": [
            [
                "5a0e3510.93269c"
            ]
        ]
    },
    {
        "id": "dce2a78c.7fb6c",
        "type": "inject",
        "z": "5df15275.2888ec",
        "g": "c625f482.ef7058",
        "name": "botname",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "x": 140,
        "y": 440,
        "wires": [
            [
                "32fd021f.9c3646"
            ]
        ]
    },
    {
        "id": "22c83041.c57288",
        "type": "function",
        "z": "5df15275.2888ec",
        "g": "c625f482.ef7058",
        "name": "resolve",
        "func": "msg.resolve(msg.payload);\n\n// reject\n// setTimeout(function () {\n//     msg.reject({message: 'Could not request joke'});\n// }, 2000);",
        "outputs": "0",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 700,
        "y": 440,
        "wires": []
    },
    {
        "id": "5a0e3510.93269c",
        "type": "redis-command",
        "z": "5df15275.2888ec",
        "g": "c625f482.ef7058",
        "server": "f120eab2.0a60a8",
        "command": "GET",
        "name": "get bot busy",
        "topic": "msg.payload",
        "params": "[]",
        "paramsType": "json",
        "payloadType": "json",
        "block": false,
        "x": 510,
        "y": 440,
        "wires": [
            [
                "22c83041.c57288"
            ]
        ]
    },
    {
        "id": "274d4375.725ad4",
        "type": "function",
        "z": "5df15275.2888ec",
        "g": "c625f482.ef7058",
        "name": "setbotlist()",
        "func": "",
        "outputs": 1,
        "noerr": 0,
        "initialize": "\n// Code added here will be run once\n// whenever the node is deployed.\nlet setbotlist = function (guid = msg.payload.guid, botlist = msg.payload.botlist) {\n    \n    let promise = new Promise((resolve, reject) => {\n        msg.resolve = resolve;\n        msg.reject = reject;\n    });\n    \n\n    msg.topic = guid+\"-botlist\";\n    msg.payload = botlist;\n\n    node.send(Object.assign({}, msg));\n    \n    return promise;\n};\n\nglobal.set('setbotlist', setbotlist);",
        "finalize": "",
        "x": 1090,
        "y": 200,
        "wires": [
            [
                "ba3e6008.7e12f8"
            ]
        ]
    },
    {
        "id": "dfdf853a.fea128",
        "type": "inject",
        "z": "5df15275.2888ec",
        "g": "c625f482.ef7058",
        "name": "guid, botlist",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "x": 910,
        "y": 200,
        "wires": [
            [
                "274d4375.725ad4"
            ]
        ]
    },
    {
        "id": "fc027fe9.e8d708",
        "type": "function",
        "z": "5df15275.2888ec",
        "g": "c625f482.ef7058",
        "name": "resolve",
        "func": "msg.resolve(msg.payload);\n\n// reject\n// setTimeout(function () {\n//     msg.reject({message: 'Could not request joke'});\n// }, 2000);",
        "outputs": "0",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 1420,
        "y": 200,
        "wires": []
    },
    {
        "id": "ba3e6008.7e12f8",
        "type": "redis-command",
        "z": "5df15275.2888ec",
        "g": "c625f482.ef7058",
        "server": "f120eab2.0a60a8",
        "command": "getset",
        "name": "set botlist",
        "topic": "",
        "params": "[]",
        "paramsType": "json",
        "payloadType": "json",
        "block": false,
        "x": 1260,
        "y": 200,
        "wires": [
            [
                "fc027fe9.e8d708"
            ]
        ]
    },
    {
        "id": "3c92a9f.7208756",
        "type": "function",
        "z": "5df15275.2888ec",
        "g": "c625f482.ef7058",
        "name": "setbot_status()",
        "func": "",
        "outputs": 1,
        "noerr": 0,
        "initialize": "\nlet setbot_status = function (botname = msg.topic, status = msg.payload) {\n    \n    let promise = new Promise((resolve, reject) => {\n        msg.resolve = resolve;\n        msg.reject = reject;\n    });\n    \n\n    msg.topic = botname;\n    msg.payload = status;\n\n    node.send(Object.assign({}, msg));\n    \n    return promise;\n};\n\nglobal.set('setbot_status', setbot_status);",
        "finalize": "",
        "x": 1120,
        "y": 260,
        "wires": [
            [
                "3b3eb9c4.74e1ce"
            ]
        ]
    },
    {
        "id": "1bdf10d4.260a9f",
        "type": "inject",
        "z": "5df15275.2888ec",
        "g": "c625f482.ef7058",
        "name": "botname, status",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "x": 920,
        "y": 260,
        "wires": [
            [
                "3c92a9f.7208756"
            ]
        ]
    },
    {
        "id": "4a190c44.e49f5c",
        "type": "function",
        "z": "5df15275.2888ec",
        "g": "c625f482.ef7058",
        "name": "resolve",
        "func": "msg.resolve(msg.payload);\n\n// reject\n// setTimeout(function () {\n//     msg.reject({message: 'Could not request joke'});\n// }, 2000);",
        "outputs": "0",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 1500,
        "y": 260,
        "wires": []
    },
    {
        "id": "3b3eb9c4.74e1ce",
        "type": "redis-command",
        "z": "5df15275.2888ec",
        "g": "c625f482.ef7058",
        "server": "f120eab2.0a60a8",
        "command": "getset",
        "name": "",
        "topic": "",
        "params": "[]",
        "paramsType": "json",
        "payloadType": "json",
        "block": false,
        "x": 1310,
        "y": 260,
        "wires": [
            [
                "4a190c44.e49f5c"
            ]
        ]
    },
    {
        "id": "2508abe7.d6a684",
        "type": "function",
        "z": "5df15275.2888ec",
        "g": "c625f482.ef7058",
        "name": "setbot_busy()",
        "func": "",
        "outputs": 1,
        "noerr": 0,
        "initialize": "let guid = global.get('guid');\n\nlet setbot_busy = function (botname = msg.topic) {\n    \n    let promise = new Promise((resolve, reject) => {\n        msg.resolve = resolve;\n        msg.reject = reject;\n    });\n    \n     msg.topic = guid+\"-bots:\"+botname+\":busy\";\n    msg.payload = \"true\";\n\n    node.send(Object.assign({}, msg));\n    \n    return promise;\n};\n\nglobal.set('setbot_busy', setbot_busy);",
        "finalize": "",
        "x": 320,
        "y": 500,
        "wires": [
            [
                "38fe7af7.4b2106"
            ]
        ]
    },
    {
        "id": "f728a67.fc3a3d8",
        "type": "inject",
        "z": "5df15275.2888ec",
        "g": "c625f482.ef7058",
        "name": "botname",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "x": 140,
        "y": 500,
        "wires": [
            [
                "2508abe7.d6a684"
            ]
        ]
    },
    {
        "id": "fd75bbec.1aee88",
        "type": "function",
        "z": "5df15275.2888ec",
        "g": "c625f482.ef7058",
        "name": "resolve",
        "func": "msg.resolve(msg.payload);\n\n// reject\n// setTimeout(function () {\n//     msg.reject({message: 'Could not request joke'});\n// }, 2000);",
        "outputs": "0",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 700,
        "y": 500,
        "wires": []
    },
    {
        "id": "38fe7af7.4b2106",
        "type": "redis-command",
        "z": "5df15275.2888ec",
        "g": "c625f482.ef7058",
        "server": "f120eab2.0a60a8",
        "command": "getset",
        "name": "",
        "topic": "",
        "params": "[]",
        "paramsType": "json",
        "payloadType": "json",
        "block": false,
        "x": 510,
        "y": 500,
        "wires": [
            [
                "fd75bbec.1aee88"
            ]
        ]
    },
    {
        "id": "c458d7d.41524a8",
        "type": "function",
        "z": "5df15275.2888ec",
        "g": "c625f482.ef7058",
        "name": "setbot_free()",
        "func": "",
        "outputs": 1,
        "noerr": 0,
        "initialize": "let guid = global.get('guid');\n\nlet setbot_free = function (botname = msg.topic) {\n    \n    let promise = new Promise((resolve, reject) => {\n        msg.resolve = resolve;\n        msg.reject = reject;\n    });\n    \n    msg.topic = guid+\"-bots:\"+botname+\":busy\";\n    msg.payload = \"false\";\n\n    node.send(Object.assign({}, msg));\n    \n    return promise;\n};\n\nglobal.set('setbot_free', setbot_free);",
        "finalize": "",
        "x": 310,
        "y": 560,
        "wires": [
            [
                "1ecd91cb.e68c46"
            ]
        ]
    },
    {
        "id": "c9147459.15de58",
        "type": "inject",
        "z": "5df15275.2888ec",
        "g": "c625f482.ef7058",
        "name": "botname",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "x": 140,
        "y": 560,
        "wires": [
            [
                "c458d7d.41524a8"
            ]
        ]
    },
    {
        "id": "b9afe11.e8147a",
        "type": "function",
        "z": "5df15275.2888ec",
        "g": "c625f482.ef7058",
        "name": "resolve",
        "func": "msg.resolve(msg.payload);\n\n// reject\n// setTimeout(function () {\n//     msg.reject({message: 'Could not request joke'});\n// }, 2000);",
        "outputs": "0",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 700,
        "y": 560,
        "wires": []
    },
    {
        "id": "1ecd91cb.e68c46",
        "type": "redis-command",
        "z": "5df15275.2888ec",
        "g": "c625f482.ef7058",
        "server": "f120eab2.0a60a8",
        "command": "getset",
        "name": "",
        "topic": "",
        "params": "[]",
        "paramsType": "json",
        "payloadType": "json",
        "block": false,
        "x": 510,
        "y": 560,
        "wires": [
            [
                "b9afe11.e8147a"
            ]
        ]
    },
    {
        "id": "d6651eda.7b83",
        "type": "function",
        "z": "5df15275.2888ec",
        "g": "8fac538c.5d4a48",
        "name": "getbotlist",
        "func": "//<трекер<\n    let track = flow.get(\"track\");\n    let start_node_time = new Date().getTime();\n    let steptitle = node.name;\n\n    let laststep = track[0];\n\n    let last_node_end_time = laststep.end_node_time;\n\n//>трекер>\n\nlet guid = global.get('guid');\n\nconst gbl = global.get('getbotlist')(guid);\n\ngbl.then(gbl => {\n    \n    msg.payload = gbl;\n    \n    //>трекер>\n        let end_node_time = new Date().getTime();\n        let duration = end_node_time - start_node_time;\n        let duration_step = end_node_time - last_node_end_time;\n        track.push({\n            \"steptitle\": steptitle,\n            \"start_node_time\": start_node_time,\n            \"end_node_time\": end_node_time,\n            \"duration_node\": duration,\n            \"duration_step\": duration_step\n        });\n        flow.set(\"track\", track);\n    //>трекер>\n    node.status({fill:\"green\",shape:\"dot\"});\n    node.send(msg);\n\n}).catch(error => {\n    \n    //>трекер>\n        let end_node_time = new Date().getTime();\n        let duration = end_node_time - start_node_time;\n        let duration_step = end_node_time - last_node_end_time;\n        track.push({\n            \"steptitle\": steptitle+\"-faile\",\n            \"start_node_time\": start_node_time,\n            \"end_node_time\": end_node_time,\n            \"duration\": duration,\n            \"duration_step\": duration_step,\n            \"error\": error\n        });\n        flow.set(\"track\", track);\n    //>трекер>\n    node.status({fill:\"red\",shape:\"dot\"});\n    \n    node.error(error);\n});",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 820,
        "y": 1220,
        "wires": [
            [
                "dfa11988.0cfa6",
                "bec7265d.ad8278"
            ]
        ]
    },
    {
        "id": "dfa11988.0cfa6",
        "type": "json",
        "z": "5df15275.2888ec",
        "g": "8fac538c.5d4a48",
        "name": "",
        "property": "payload",
        "action": "obj",
        "pretty": false,
        "x": 970,
        "y": 1220,
        "wires": [
            [
                "9a76b6bf.1016d"
            ]
        ]
    },
    {
        "id": "9a76b6bf.1016d",
        "type": "split",
        "z": "5df15275.2888ec",
        "g": "8fac538c.5d4a48",
        "name": "",
        "splt": "1",
        "spltType": "len",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "x": 1110,
        "y": 1220,
        "wires": [
            [
                "fe2a6027.b22b48",
                "3b6f26a5.932aba"
            ]
        ]
    },
    {
        "id": "fe2a6027.b22b48",
        "type": "function",
        "z": "5df15275.2888ec",
        "g": "8fac538c.5d4a48",
        "name": "getbot_onoff",
        "func": "//<трекер<\n    let track = flow.get(\"track\");\n    let start_node_time = new Date().getTime();\n    let steptitle = node.name;\n\n    let laststep = track[track.length-1];\n    let last_node_end_time = laststep.end_node_time;\n//>трекер>\n\nlet botname = msg.payload;\nmsg.botname = botname;\n\nconst gb = global.get('getbot_onoff')(botname);\n\ngb.then(gb => {\n    \n    msg.payload = JSON.parse(gb);\n    \n    //>трекер>\n        let end_node_time = new Date().getTime();\n        let duration = end_node_time - start_node_time;\n        let duration_step = end_node_time - last_node_end_time;\n        track.push({\n            \"steptitle\": steptitle,\n            \"start_node_time\": start_node_time,\n            \"end_node_time\": end_node_time,\n            \"duration_node\": duration,\n            \"duration_step\": duration_step\n        });\n        flow.set(\"track\", track);\n    //>трекер>\n    node.status({fill:\"green\",shape:\"dot\"});\n    \n    node.send(msg);\n\n}).catch(error => {\n    \n    //>трекер>\n        let end_node_time = new Date().getTime();\n        let duration = end_node_time - start_node_time;\n        let duration_step = end_node_time - last_node_end_time;\n        track.push({\n            \"steptitle\": steptitle+\"-faile\",\n            \"start_node_time\": start_node_time,\n            \"end_node_time\": end_node_time,\n            \"duration\": duration,\n            \"duration_step\": duration_step,\n            \"error\": error\n        });\n        flow.set(\"track\", track);\n    //>трекер>\n    node.status({fill:\"red\",shape:\"dot\"});\n    \n    node.error(error);\n});",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1250,
        "y": 1220,
        "wires": [
            [
                "4bd2ed9.fa5d114",
                "aa865712.dd6a08"
            ]
        ]
    },
    {
        "id": "4bd2ed9.fa5d114",
        "type": "filter",
        "z": "5df15275.2888ec",
        "g": "8fac538c.5d4a48",
        "name": "filter off",
        "property": "payload",
        "propertyType": "msg",
        "asArray": false,
        "itemProperty": "",
        "itemPropertyType": "item",
        "rules": [
            {
                "t": "true",
                "output": 1
            }
        ],
        "checkall": "true",
        "outputs": 1,
        "x": 1420,
        "y": 1220,
        "wires": [
            [
                "a790f90b.998d8"
            ]
        ]
    },
    {
        "id": "a790f90b.998d8",
        "type": "function",
        "z": "5df15275.2888ec",
        "g": "8fac538c.5d4a48",
        "name": "getbot_busy",
        "func": "//<трекер<\n    let track = flow.get(\"track\");\n    let start_node_time = new Date().getTime();\n    let steptitle = node.name;\n\n    let laststep = track[track.length-1];\n    let last_node_end_time = laststep.end_node_time;\n//>трекер>\n\nconst gb = global.get('getbot_busy')(msg.botname);\n\ngb.then(gb => {\n    \n    msg.payload = JSON.parse(gb);\n    \n    //>трекер>\n        let end_node_time = new Date().getTime();\n        let duration = end_node_time - start_node_time;\n        let duration_step = end_node_time - last_node_end_time;\n        track.push({\n            \"steptitle\": steptitle,\n            \"start_node_time\": start_node_time,\n            \"end_node_time\": end_node_time,\n            \"duration_node\": duration,\n            \"duration_step\": duration_step\n        });\n        flow.set(\"track\", track);\n    //>трекер>\n    node.status({fill:\"green\",shape:\"dot\"});\n    \n    \n    node.send(msg);\n\n}).catch(error => {\n    \n    //>трекер>\n        let end_node_time = new Date().getTime();\n        let duration = end_node_time - start_node_time;\n        let duration_step = end_node_time - last_node_end_time;\n        track.push({\n            \"steptitle\": steptitle+\"-faile\",\n            \"start_node_time\": start_node_time,\n            \"end_node_time\": end_node_time,\n            \"duration\": duration,\n            \"duration_step\": duration_step,\n            \"error\": error\n        });\n        flow.set(\"track\", track);\n    //>трекер>\n    node.status({fill:\"red\",shape:\"dot\"});\n    \n    node.error(error);\n});",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 1590,
        "y": 1220,
        "wires": [
            [
                "b080e3fb.60616"
            ]
        ]
    },
    {
        "id": "b080e3fb.60616",
        "type": "function",
        "z": "5df15275.2888ec",
        "g": "8fac538c.5d4a48",
        "name": "busy === false ",
        "func": "//<трекер<\n    let track = flow.get(\"track\");\n    let start_node_time = new Date().getTime();\n    let steptitle = node.name;\n\n    let laststep = track[track.length-1];\n    let last_node_end_time = laststep.end_node_time;\n//>трекер>\n\nif (msg.payload === false) {\n    //>трекер>\n        let end_node_time = new Date().getTime();\n        let duration = end_node_time - start_node_time;\n        let duration_step = end_node_time - last_node_end_time;\n        track.push({\n            \"steptitle\": steptitle,\n            \"start_node_time\": start_node_time,\n            \"end_node_time\": end_node_time,\n            \"duration_node\": duration,\n            \"duration_step\": duration_step\n        });\n        flow.set(\"track\", track);\n    //>трекер>\n    node.status({fill:\"green\",shape:\"dot\"});\n    \n    return [msg, null];\n}\n\nelse {\n\n    let id = msg.botname;\n    msg.payload = [];\n\n    var count = flow.get(id) || 0;\n    count += 1;\n\n    //>трекер>\n        let end_node_time = new Date().getTime();\n        let duration = end_node_time - start_node_time;\n        let duration_step = end_node_time - last_node_end_time;\n        track.push({\n            \"steptitle\": steptitle+\"-faile\",\n            \"start_node_time\": start_node_time,\n            \"end_node_time\": end_node_time,\n            \"duration\": duration,\n            \"duration_step\": duration_step\n        });\n        flow.set(\"track\", track);\n    //>трекер>\n    node.status({fill:\"blue\",shape:\"dot\"});\n\n\n    if (count > 6) {\n        \n\n        let lasttrack = JSON.stringify(flow.get(\"track\") || \"\", null, '\\t');\n        \n        //запись в журнал\n        let botname = \"syslog.txt\";\n        let data = \"Сброс \"+msg.botname+\" \\n \"+lasttrack;\n        const syslog = global.get('tilog')(botname,data);\n        syslog;\n        \n        let botname2 = msg.botname;\n        let data2 = \"Сброс busy \\n \"+lasttrack;\n        const tilog = global.get('tilog')(botname2,data2);\n        tilog;\n        //запись в журнал\n        \n        const upd = global.get('setbot_free')(id);\n\n        upd.then(upd => {\n            \n            //>трекер>\n                let end_node_time = new Date().getTime();\n                let duration = end_node_time - start_node_time;\n                let duration_step = end_node_time - last_node_end_time;\n                track.push({\n                    \"steptitle\": steptitle+\"-reset\",\n                    \"start_node_time\": start_node_time,\n                    \"end_node_time\": end_node_time,\n                    \"duration\": duration,\n                    \"duration_step\": duration_step,\n                });\n                flow.set(\"track\", track);\n            //>трекер>\n            node.status({fill:\"red\",shape:\"dot\"});\n            \n            flow.set(id, 0);\n            node.warn(\"reset busy:\" + id);\n\n        }).catch(error => {\n            node.error(error);\n        });\n\n    }\n    flow.set(id, count);\n    return [null, msg];\n}\n\n\n\n\n\n",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 1780,
        "y": 1220,
        "wires": [
            [
                "cec096cd.d93358"
            ],
            [
                "5bbb44fa.ec4574"
            ]
        ],
        "icon": "font-awesome/fa-bolt"
    },
    {
        "id": "40175d8a.67b97c",
        "type": "link out",
        "z": "5df15275.2888ec",
        "name": "",
        "links": [
            "8ada0320.0af298"
        ],
        "x": 2175,
        "y": 1120,
        "wires": []
    },
    {
        "id": "8ada0320.0af298",
        "type": "link in",
        "z": "5df15275.2888ec",
        "name": "",
        "links": [
            "40175d8a.67b97c",
            "7e6df2c2.aa43bc"
        ],
        "x": 35,
        "y": 1460,
        "wires": [
            [
                "95a19c1d.39bae",
                "af44b4f3.4b59e8"
            ]
        ]
    },
    {
        "id": "14ffa955.ed6edf",
        "type": "link out",
        "z": "5df15275.2888ec",
        "name": "",
        "links": [
            "256455f.6de7caa",
            "373cb204.5f5efe"
        ],
        "x": 1795,
        "y": 1400,
        "wires": []
    },
    {
        "id": "9f82a757.25f3d",
        "type": "function",
        "z": "5df15275.2888ec",
        "g": "3e767551.3d299a",
        "name": "setbot_free",
        "func": "//<трекер<\n    let track = flow.get(\"track\");\n    let start_node_time = new Date().getTime();\n    let steptitle = node.name;\n\n    let laststep = track[track.length-1];\n    let last_node_end_time = laststep.end_node_time;\n    \n    let firststep = track[0];\n    let first_node_start_time = firststep.start_node_time;\n    \n    let duration_track = last_node_end_time - first_node_start_time;\n//>трекер>\n\nconst upd = global.get('setbot_free')(msg.botname);\n\nupd.then(upd => {\n\n    //>трекер>\n        let end_node_time = new Date().getTime();\n        let duration = end_node_time - start_node_time;\n        let duration_step = end_node_time - last_node_end_time;\n        track.push({\n            \"steptitle\": steptitle,\n            \"start_node_time\": start_node_time,\n            \"end_node_time\": end_node_time,\n            \"duration_node\": duration,\n            \"duration_step\": duration_track //только для финишной ноды\n        });\n        flow.set(\"track\", track);\n        flow.set(\"lasttrack\", track);\n        flow.set(msg.botname, 0);\n    //>трекер>\n    node.status({fill:\"green\",shape:\"dot\"});\n    \n    node.send(msg);\n\n}).catch(error => {\n    //>трекер>\n        let end_node_time = new Date().getTime();\n        let duration = end_node_time - start_node_time;\n        let duration_step = end_node_time - last_node_end_time;\n        track.push({\n            \"steptitle\": steptitle+\"-faile\",\n            \"start_node_time\": start_node_time,\n            \"end_node_time\": end_node_time,\n            \"duration\": duration,\n            \"duration_step\": duration_step,\n            \"error\": error\n        });\n        flow.set(\"track\", track);\n    //>трекер>\n    node.status({fill:\"red\",shape:\"dot\"});\n\n    node.error(error);\n});",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 2530,
        "y": 1160,
        "wires": [
            [
                "133c3e4a.687a62",
                "51b45a57.49dad4",
                "a359f524.2e00e8",
                "283c3766.823b68"
            ]
        ],
        "icon": "font-awesome/fa-bolt"
    },
    {
        "id": "bec7265d.ad8278",
        "type": "debug",
        "z": "5df15275.2888ec",
        "g": "8fac538c.5d4a48",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 910,
        "y": 1160,
        "wires": []
    },
    {
        "id": "cec096cd.d93358",
        "type": "function",
        "z": "5df15275.2888ec",
        "g": "8fac538c.5d4a48",
        "name": "setbot_busy",
        "func": "//<трекер<\n    let track = flow.get(\"track\");\n    let start_node_time = new Date().getTime();\n    let steptitle = node.name;\n\n    let laststep = track[track.length-1];\n    let last_node_end_time = laststep.end_node_time;\n//>трекер>\n\nconst upd = global.get('setbot_busy')(msg.botname);\n\nlet id = \"srv-\"+msg.botname;\nvar count = flow.get(id) || 0;\n    count += 1;\n    //node.warn(count);\n    flow.set(id,count);\nif (count >= 10) {\n    msg.service = true;\n    flow.set(id,0);\n} else {\n    msg.service = false;\n    \n}\n\nupd.then(upd => {\n\n    //>трекер>\n        let end_node_time = new Date().getTime();\n        let duration = end_node_time - start_node_time;\n        let duration_step = end_node_time - last_node_end_time;\n        track.push({\n            \"steptitle\": steptitle,\n            \"start_node_time\": start_node_time,\n            \"end_node_time\": end_node_time,\n            \"duration_node\": duration,\n            \"duration_step\": duration_step\n        });\n        flow.set(\"track\", track);\n    //>трекер>\n    node.status({fill:\"green\",shape:\"dot\"});\n    \n    node.send(msg);\n\n}).catch(error => {\n    \n    //>трекер>\n        let end_node_time = new Date().getTime();\n        let duration = end_node_time - start_node_time;\n        let duration_step = end_node_time - last_node_end_time;\n        track.push({\n            \"steptitle\": steptitle+\"-faile\",\n            \"start_node_time\": start_node_time,\n            \"end_node_time\": end_node_time,\n            \"duration\": duration,\n            \"duration_step\": duration_step,\n            \"error\": error\n        });\n        flow.set(\"track\", track);\n    //>трекер>\n    node.status({fill:\"red\",shape:\"dot\"});\n    node.error(error);\n});",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 1990,
        "y": 1220,
        "wires": [
            [
                "40175d8a.67b97c",
                "be118eed.3c8348"
            ]
        ],
        "icon": "font-awesome/fa-bolt"
    },
    {
        "id": "be118eed.3c8348",
        "type": "debug",
        "z": "5df15275.2888ec",
        "g": "8fac538c.5d4a48",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 2010,
        "y": 1180,
        "wires": []
    },
    {
        "id": "5bbb44fa.ec4574",
        "type": "debug",
        "z": "5df15275.2888ec",
        "g": "8fac538c.5d4a48",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1770,
        "y": 1280,
        "wires": []
    },
    {
        "id": "fde6293c.43f6a",
        "type": "function",
        "z": "5df15275.2888ec",
        "name": "setbot_free",
        "func": "//<трекер<\n    let track = flow.get(\"track\");\n    let start_node_time = Date.parse(new Date()) / 1000;\n    let steptitle = node.name;\n\n    let laststep = track[track.length-1];\n    let last_node_end_time = laststep.end_node_time;\n    node.warn(last_node_end_time);\n//>трекер>\n\nconst upd = global.get('setbot_free')(msg.botname);\n\nupd.then(upd => {\n\n    //>трекер>\n        let end_node_time = Date.parse(new Date()) / 1000;\n        let duration = end_node_time - start_node_time;\n        let duration_step = end_node_time - last_node_end_time;\n        track.push({\n            \"steptitle\": steptitle,\n            \"start_node_time\": start_node_time,\n            \"end_node_time\": end_node_time,\n            \"duration_node\": duration,\n            \"duration_step\": duration_step\n        });\n        flow.set(\"track\", track);\n    //>трекер>\n    node.status({fill:\"green\",shape:\"dot\"});\n    \n    node.send(msg);\n\n}).catch(error => {\n    //>трекер>\n        let end_node_time = Date.parse(new Date()) / 1000;\n        let duration = end_node_time - start_node_time;\n        let duration_step = end_node_time - last_node_end_time;\n        track.push({\n            \"steptitle\": steptitle+\"-faile\",\n            \"start_node_time\": start_node_time,\n            \"end_node_time\": end_node_time,\n            \"duration\": duration,\n            \"duration_step\": duration_step,\n            \"error\": error\n        });\n        flow.set(\"track\", track);\n    //>трекер>\n    node.status({fill:\"red\",shape:\"dot\"});\n    node.error(error);\n});",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 4670,
        "y": 2140,
        "wires": [
            [
                "a9a43381.7fb07"
            ]
        ],
        "icon": "font-awesome/fa-bolt"
    },
    {
        "id": "6424a7a9.fde1e",
        "type": "inject",
        "z": "5df15275.2888ec",
        "name": "",
        "props": [
            {
                "p": "botname",
                "v": "BNBUSDT-1606088829",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 4440,
        "y": 2480,
        "wires": [
            [
                "fde6293c.43f6a"
            ]
        ]
    },
    {
        "id": "a9a43381.7fb07",
        "type": "debug",
        "z": "5df15275.2888ec",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 4860,
        "y": 2140,
        "wires": []
    },
    {
        "id": "51b45a57.49dad4",
        "type": "function",
        "z": "5df15275.2888ec",
        "name": "duration",
        "func": "\nlet track = flow.get(\"track\");\n\nlet laststep = track[track.length-1];\nlet firststep = track[0];\nlet last_node_end_time = laststep.end_node_time;\nlet first_node_start_time = firststep.start_node_time;\n\nlet duration = last_node_end_time - first_node_start_time;\n//node.warn(duration);\nmsg.payload = duration;\n\nif (duration > 500){\n            //запись в журнал\n\n        \n        let botname2 = msg.botname;\n        let data2 = \"Длительноть трека -\"+duration;\n        const tilog = global.get('tilog')(botname2,data2);\n        tilog;\n        //запись в журнал\n    \n}\n    \nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 2800,
        "y": 1160,
        "wires": [
            [
                "51350500.94f214",
                "1d3cd462.fdc43c"
            ]
        ]
    },
    {
        "id": "51350500.94f214",
        "type": "debug",
        "z": "5df15275.2888ec",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 2970,
        "y": 1200,
        "wires": []
    },
    {
        "id": "1d3cd462.fdc43c",
        "type": "ui_chart",
        "z": "5df15275.2888ec",
        "name": "",
        "group": "f244fee6.d2627",
        "order": 0,
        "width": "4",
        "height": "7",
        "label": "chart track",
        "chartType": "line",
        "legend": "false",
        "xformat": "ss",
        "interpolate": "cubic",
        "nodata": "",
        "dot": true,
        "ymin": "",
        "ymax": "",
        "removeOlder": "10",
        "removeOlderPoints": "20",
        "removeOlderUnit": "1",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": true,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9a244f",
            "#c5b0d5"
        ],
        "outputs": 1,
        "x": 2970,
        "y": 1160,
        "wires": [
            []
        ]
    },
    {
        "id": "24812b74.9bc644",
        "type": "function",
        "z": "5df15275.2888ec",
        "g": "c2109678.33bc38",
        "name": "start MA calc",
        "func": "//<трекер<\n    ////>только для стартовой ноды>\n        var track = [];\n        let start_track_time = new Date().getTime();\n        let start_node_time = start_track_time;\n        let steptitle = node.name;\n    ////>только для стартовой ноды>\n//>трекер>\n\n\n\nmsg.payload = global.get('guid');\n\n\n//>трекер>\n    let end_node_time = new Date().getTime();\n    let duration = end_node_time - start_node_time;\n    track.push({\n        \"steptitle\": steptitle,\n        \"start_node_time\": start_node_time,\n        \"end_node_time\": end_node_time,\n        \"duration_node\": duration,\n        \"duration_step\": 0\n    });\n\n    flow.set(\"track\", track);\n//>трекер>\nnode.status({ fill: \"green\", shape: \"ring\", text: duration });\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 710,
        "y": 1000,
        "wires": [
            [
                "54724e9d.5a21d8"
            ]
        ]
    },
    {
        "id": "54724e9d.5a21d8",
        "type": "function",
        "z": "5df15275.2888ec",
        "g": "c2109678.33bc38",
        "name": "getbotlist",
        "func": "//<трекер<\n    let track = flow.get(\"track\");\n    let start_node_time = new Date().getTime();\n    let steptitle = node.name;\n\n    let laststep = track[0];\n\n    let last_node_end_time = laststep.end_node_time;\n\n//>трекер>\n\nlet guid = msg.payload;\n\nconst gbl = global.get('getbotlist')(guid);\n\ngbl.then(gbl => {\n    \n    msg.payload = gbl;\n    \n    //>трекер>\n        let end_node_time = new Date().getTime();\n        let duration = end_node_time - start_node_time;\n        let duration_step = end_node_time - last_node_end_time;\n        track.push({\n            \"steptitle\": steptitle,\n            \"start_node_time\": start_node_time,\n            \"end_node_time\": end_node_time,\n            \"duration_node\": duration,\n            \"duration_step\": duration_step\n        });\n        flow.set(\"track\", track);\n    //>трекер>\n    node.status({fill:\"green\",shape:\"dot\"});\n    node.send(msg);\n\n}).catch(error => {\n    \n    //>трекер>\n        let end_node_time = new Date().getTime();\n        let duration = end_node_time - start_node_time;\n        let duration_step = end_node_time - last_node_end_time;\n        track.push({\n            \"steptitle\": steptitle+\"-faile\",\n            \"start_node_time\": start_node_time,\n            \"end_node_time\": end_node_time,\n            \"duration\": duration,\n            \"duration_step\": duration_step,\n            \"error\": error\n        });\n        flow.set(\"track\", track);\n    //>трекер>\n    node.status({fill:\"red\",shape:\"dot\"});\n    \n    node.error(error);\n});",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 880,
        "y": 940,
        "wires": [
            [
                "5beb39ef.f84b7"
            ]
        ]
    },
    {
        "id": "5beb39ef.f84b7",
        "type": "json",
        "z": "5df15275.2888ec",
        "g": "c2109678.33bc38",
        "name": "",
        "property": "payload",
        "action": "obj",
        "pretty": false,
        "x": 1030,
        "y": 940,
        "wires": [
            [
                "a707b53d.3343e"
            ]
        ]
    },
    {
        "id": "a707b53d.3343e",
        "type": "split",
        "z": "5df15275.2888ec",
        "g": "c2109678.33bc38",
        "name": "",
        "splt": "1",
        "spltType": "len",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "x": 1170,
        "y": 940,
        "wires": [
            [
                "2ac45d8.4ea1022"
            ]
        ]
    },
    {
        "id": "2ac45d8.4ea1022",
        "type": "function",
        "z": "5df15275.2888ec",
        "g": "c2109678.33bc38",
        "name": "getbot_onoff",
        "func": "//<трекер<\n    let track = flow.get(\"track\");\n    let start_node_time = new Date().getTime();\n    let steptitle = node.name;\n\n    let laststep = track[track.length-1];\n    let last_node_end_time = laststep.end_node_time;\n//>трекер>\n\nlet botname = msg.payload;\nmsg.botname = botname;\n\nconst gb = global.get('getbot_onoff')(botname);\n\ngb.then(gb => {\n    \n    msg.payload = JSON.parse(gb);\n    \n    //>трекер>\n        let end_node_time = new Date().getTime();\n        let duration = end_node_time - start_node_time;\n        let duration_step = end_node_time - last_node_end_time;\n        track.push({\n            \"steptitle\": steptitle,\n            \"start_node_time\": start_node_time,\n            \"end_node_time\": end_node_time,\n            \"duration_node\": duration,\n            \"duration_step\": duration_step\n        });\n        flow.set(\"track\", track);\n    //>трекер>\n    node.status({fill:\"green\",shape:\"dot\"});\n    \n    node.send(msg);\n\n}).catch(error => {\n    \n    //>трекер>\n        let end_node_time = new Date().getTime();\n        let duration = end_node_time - start_node_time;\n        let duration_step = end_node_time - last_node_end_time;\n        track.push({\n            \"steptitle\": steptitle+\"-faile\",\n            \"start_node_time\": start_node_time,\n            \"end_node_time\": end_node_time,\n            \"duration\": duration,\n            \"duration_step\": duration_step,\n            \"error\": error\n        });\n        flow.set(\"track\", track);\n    //>трекер>\n    node.status({fill:\"red\",shape:\"dot\"});\n    \n    node.error(error);\n});",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 1310,
        "y": 940,
        "wires": [
            [
                "fe43ccbb.7a083"
            ]
        ]
    },
    {
        "id": "fe43ccbb.7a083",
        "type": "filter",
        "z": "5df15275.2888ec",
        "g": "c2109678.33bc38",
        "name": "filter off",
        "property": "payload",
        "propertyType": "msg",
        "asArray": false,
        "itemProperty": "",
        "itemPropertyType": "item",
        "rules": [
            {
                "t": "true",
                "output": 1
            }
        ],
        "checkall": "true",
        "outputs": 1,
        "x": 1480,
        "y": 940,
        "wires": [
            [
                "b72aec1b.3ff6d"
            ]
        ]
    },
    {
        "id": "8f2b992a.2a5888",
        "type": "function",
        "z": "5df15275.2888ec",
        "g": "c2109678.33bc38",
        "name": "start MA calc",
        "func": "//<трекер<\n    ////>только для стартовой ноды>\n        var track = [];\n        let start_track_time = new Date().getTime();\n        let start_node_time = start_track_time;\n        let steptitle = node.name;\n    ////>только для стартовой ноды>\n//>трекер>\n\n\n\nmsg.payload = global.get('guid');\n\n\n//>трекер>\n    let end_node_time = new Date().getTime();\n    let duration = end_node_time - start_node_time;\n    track.push({\n        \"steptitle\": steptitle,\n        \"start_node_time\": start_node_time,\n        \"end_node_time\": end_node_time,\n        \"duration_node\": duration,\n        \"duration_step\": 0\n    });\n\n    flow.set(\"track\", track);\n//>трекер>\nnode.status({ fill: \"green\", shape: \"ring\", text: duration });\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 710,
        "y": 940,
        "wires": [
            [
                "54724e9d.5a21d8"
            ]
        ]
    },
    {
        "id": "3d3d989e.3a00f",
        "type": "function",
        "z": "5df15275.2888ec",
        "g": "c2109678.33bc38",
        "name": "get candlestick",
        "func": "function parseApiError(error) {\n  if (error.body) {\n    try {\n      var resp = JSON.parse(error.body);\n      return resp.msg;\n    } catch (error) {/* pass thru */}\n  }\n  return \"Unknown error. Status code: \"+error.statsCode;\n}\n\nlet LBinance = global.get('gBinance');\nlet key = global.get('key');\nlet secret = global.get('secret');\n\nlet binance = new LBinance().options({\n\tAPIKEY: key,\n\tAPISECRET: secret,\n\t\"reconnect\": false\n});\n\nlet moneta = msg.bot.settings.moneta;\nlet deep = Number(msg.bot.settings.ma2);\n\n//node.warn(binance);\n\n\n//msg.payload = \"qjson.status\";\n\n\nbinance.candlesticks(moneta, \"1m\", (error, ticks, symbol) => {\n // console.info(\"candlesticks()\", ticks);\n // let last_tick = ticks[ticks.length - 1];\n // let [time, open, high, low, close, volume, closeTime, assetVolume, trades, buyBaseVolume, buyAssetVolume, ignored] = ticks;\n  //console.info(symbol+\" last close: \"+close);\n  msg.payload = ticks;\n  \n  node.send(msg);\n  return;\n  \n}, {limit: deep});",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "gBinance",
                "module": "node-binance-api"
            }
        ],
        "x": 2100,
        "y": 940,
        "wires": [
            [
                "a2a98d92.7d7ac8",
                "11f5815b.2198c7"
            ]
        ],
        "inputLabels": [
            "orderid, moneta"
        ],
        "outputLabels": [
            "status"
        ],
        "icon": "font-awesome/fa-compress"
    },
    {
        "id": "a2a98d92.7d7ac8",
        "type": "function",
        "z": "5df15275.2888ec",
        "g": "c2109678.33bc38",
        "name": "расчет MA",
        "func": "let candles = msg.payload;\n\n\nlet heiken = candles.map(function(tick){\n  //  node.warn(tick);\n    \n    \n    return (Number(tick[1]) + Number(tick[2]) + Number(tick[3]) + Number(tick[4]))/4;\n});\n\n\n//node.warn(heiken);\nmsg.heiken = heiken;\n\n\nlet heiken_small = heiken.slice(-msg.bot.settings.ma1);\n\n//node.warn(heiken_small);\nlet sum_all = heiken.reduce(function(sum, current) {\n  return sum + current\n});\n\nlet sum_small = heiken_small.reduce(function(sum, current) {\n  return sum + current\n});\n\nmsg.bot.status.sr_ma_big = sum_all / msg.bot.settings.ma2;\nmsg.bot.status.sr_ma_small = sum_small / msg.bot.settings.ma1;\n\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 2290,
        "y": 940,
        "wires": [
            [
                "2ffac69a.1af06a"
            ]
        ]
    },
    {
        "id": "2ffac69a.1af06a",
        "type": "function",
        "z": "5df15275.2888ec",
        "g": "c2109678.33bc38",
        "name": "prepare update bot status",
        "func": "msg.topic = msg.bot.settings.userid+\"-bots:\"+msg.bot.settings.botname+\":status\";\n\nmsg.payload = JSON.stringify(msg.bot.status);\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 2510,
        "y": 940,
        "wires": [
            [
                "f00f32f3.dec218"
            ]
        ],
        "icon": "font-awesome/fa-bolt"
    },
    {
        "id": "b72aec1b.3ff6d",
        "type": "function",
        "z": "5df15275.2888ec",
        "g": "c2109678.33bc38",
        "name": "getbot_settings",
        "func": "//<трекер<\n    let track = flow.get(\"track\");\n    let start_node_time = new Date().getTime();\n    let steptitle = node.name;\n\n    let laststep = track[track.length-1];\n    let last_node_end_time = laststep.end_node_time;\n//>трекер>\n\nlet bot = {};\nmsg.bot = bot;\nconst gb = global.get('getbot_settings')(msg.botname);\n\ngb.then(gb => {\n    \n    msg.bot.settings = JSON.parse(gb);\n    node.send(msg);\n\n}).catch(error => {\n    node.error(error);\n});",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 1660,
        "y": 940,
        "wires": [
            [
                "36be307e.92e14"
            ]
        ]
    },
    {
        "id": "36be307e.92e14",
        "type": "function",
        "z": "5df15275.2888ec",
        "g": "c2109678.33bc38",
        "name": "getbot_status",
        "func": "\nconst gb = global.get('getbot_status')(msg.botname);\n\ngb.then(gb => {\n\n\n    msg.bot.status = JSON.parse(gb);\n //   msg.bot.status = JSON.parse(gb);\n    node.send(msg);\n\n}).catch(error => {\n    node.error(error);\n});",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 1880,
        "y": 940,
        "wires": [
            [
                "3d3d989e.3a00f"
            ]
        ]
    },
    {
        "id": "f00f32f3.dec218",
        "type": "function",
        "z": "5df15275.2888ec",
        "g": "c2109678.33bc38",
        "name": "setbot_status",
        "func": "\nconst upd = global.get('setbot_status')(msg.topic, msg.payload);\n\nupd.then(upd => {\n\n    msg.payload = \"updated\"\n    node.send(msg);\n    \n        \n        \n\n}).catch(error => {\n    node.status({fill:\"red\",shape:\"dot\"});  \n    node.error(error);\n});",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 2760,
        "y": 940,
        "wires": [
            [
                "cac10d2c.dddd8"
            ]
        ],
        "icon": "font-awesome/fa-bolt"
    },
    {
        "id": "a911e390.b5d95",
        "type": "function",
        "z": "5df15275.2888ec",
        "name": "getprice",
        "func": "//<трекер<\n    let track = flow.get(\"track\");\n    let start_node_time = new Date().getTime();\n    let steptitle = node.name;\n\n    let laststep = track[track.length-1];\n    let last_node_end_time = laststep.end_node_time;\n//>трекер>\nlet moneta = msg.bot.settings.moneta;\n\nconst gp = global.get('getprice')(moneta);\n\ngp.then(gp => {\n    \n    msg.bot.status.currentprice = gp;\n    \n    //>трекер>\n        let end_node_time = new Date().getTime();\n        let duration = end_node_time - start_node_time;\n        let duration_step = end_node_time - last_node_end_time;\n        track.push({\n            \"steptitle\": steptitle,\n            \"start_node_time\": start_node_time,\n            \"end_node_time\": end_node_time,\n            \"duration_node\": duration,\n            \"duration_step\": duration_step\n        });\n        flow.set(\"track\", track);\n    //>трекер>\n    node.status({fill:\"green\",shape:\"dot\"});\n    node.send(msg);\n\n}).catch(error => {\n    \n    //>трекер>\n        let end_node_time = new Date().getTime();\n        let duration = end_node_time - start_node_time;\n        let duration_step = end_node_time - last_node_end_time;\n        track.push({\n            \"steptitle\": steptitle+\"-faile\",\n            \"start_node_time\": start_node_time,\n            \"end_node_time\": end_node_time,\n            \"duration\": duration,\n            \"duration_step\": duration_step,\n            \"error\": error\n        });\n        flow.set(\"track\", track);\n    //>трекер>\n    node.status({fill:\"red\",shape:\"dot\"});\n    node.error(error);\n});",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 560,
        "y": 1460,
        "wires": [
            [
                "cb37028d.66ec4"
            ]
        ]
    },
    {
        "id": "cb37028d.66ec4",
        "type": "function",
        "z": "5df15275.2888ec",
        "name": "prepare update bot status",
        "func": "//<трекер<\n    let track = flow.get(\"track\");\n    let start_node_time = new Date().getTime();\n    let steptitle = node.name;\n\n    let laststep = track[track.length-1];\n    let last_node_end_time = laststep.end_node_time;\n//>трекер>\n\nmsg.topic = msg.bot.settings.userid+\"-bots:\"+msg.bot.settings.botname+\":status\";\n\nmsg.payload = JSON.stringify(msg.bot.status);\n\n//>трекер>\n    let end_node_time = new Date().getTime();\n    let duration = end_node_time - start_node_time;\n    let duration_step = end_node_time - last_node_end_time;\n    track.push({\n        \"steptitle\": steptitle,\n        \"start_node_time\": start_node_time,\n        \"end_node_time\": end_node_time,\n        \"duration_node\": duration,\n        \"duration_step\": duration_step\n    });\n    flow.set(\"track\", track);\n//>трекер>\nnode.status({fill:\"green\",shape:\"dot\"});\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 770,
        "y": 1460,
        "wires": [
            [
                "302b86fd.feef2a"
            ]
        ],
        "icon": "font-awesome/fa-bolt"
    },
    {
        "id": "e44e5a97.f491b",
        "type": "function",
        "z": "5df15275.2888ec",
        "name": "setbot_status",
        "func": "//<трекер<\n    let track = flow.get(\"track\");\n    let start_node_time = new Date().getTime();\n    \n    let steptitle = node.name;\n\n    let laststep = track[track.length-1];\n    let last_node_end_time = laststep.end_node_time;\n//>трекер>\nmsg.topic = msg.bot.settings.userid+\"-bots:\"+msg.bot.settings.botname+\":status\";\nmsg.bot.status.updated = new Date().getTime();\nmsg.payload = JSON.stringify(msg.bot.status);\nconst upd = global.get('setbot_status')(msg.topic, msg.payload);\n\n\nupd.then(upd => {\n\n    //>трекер>\n        let end_node_time = new Date().getTime();\n        let duration = end_node_time - start_node_time;\n        let duration_step = end_node_time - last_node_end_time;\n        track.push({\n            \"steptitle\": steptitle,\n            \"start_node_time\": start_node_time,\n            \"end_node_time\": end_node_time,\n            \"duration_node\": duration,\n            \"duration_step\": duration_step\n        });\n        flow.set(\"track\", track);\n    //>трекер>\n    node.status({fill:\"green\",shape:\"dot\"});\n    node.send(msg);\n\n}).catch(error => {\n\n    //>трекер>\n        let end_node_time = new Date().getTime();\n        let duration = end_node_time - start_node_time;\n        let duration_step = end_node_time - last_node_end_time;\n        track.push({\n            \"steptitle\": steptitle+\"-faile\",\n            \"start_node_time\": start_node_time,\n            \"end_node_time\": end_node_time,\n            \"duration\": duration,\n            \"duration_step\": duration_step,\n            \"error\": error\n        });\n        flow.set(\"track\", track);\n    //>трекер>\n    node.status({fill:\"red\",shape:\"dot\"}); \n    node.error(error);\n});",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 1240,
        "y": 1460,
        "wires": [
            [
                "8228371e.8b4288",
                "c6daab76.cf51c8"
            ]
        ],
        "icon": "font-awesome/fa-bolt"
    },
    {
        "id": "95a19c1d.39bae",
        "type": "debug",
        "z": "5df15275.2888ec",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 130,
        "y": 1380,
        "wires": []
    },
    {
        "id": "af44b4f3.4b59e8",
        "type": "function",
        "z": "5df15275.2888ec",
        "name": "getbot_settings",
        "func": "//<трекер<\n    let track = flow.get(\"track\");\n    let start_node_time = new Date().getTime();\n    let steptitle = node.name;\n\n    let laststep = track[track.length-1];\n    let last_node_end_time = laststep.end_node_time;\n//>трекер>\n\nlet bot = {};\nmsg.bot = bot;\nconst gb = global.get('getbot_settings')(msg.botname);\n\ngb.then(gb => {\n    \n    msg.bot.settings = JSON.parse(gb);\n    \n        //>трекер>\n        let end_node_time = new Date().getTime();\n        let duration = end_node_time - start_node_time;\n        let duration_step = end_node_time - last_node_end_time;\n        track.push({\n            \"steptitle\": steptitle,\n            \"start_node_time\": start_node_time,\n            \"end_node_time\": end_node_time,\n            \"duration_node\": duration,\n            \"duration_step\": duration_step\n        });\n        flow.set(\"track\", track);\n    //>трекер>\n    node.status({fill:\"green\",shape:\"dot\"});\n    \n    node.send(msg);\n\n}).catch(error => {\n    \n    //>трекер>\n        let end_node_time = new Date().getTime();\n        let duration = end_node_time - start_node_time;\n        let duration_step = end_node_time - last_node_end_time;\n        track.push({\n            \"steptitle\": steptitle+\"-faile\",\n            \"start_node_time\": start_node_time,\n            \"end_node_time\": end_node_time,\n            \"duration\": duration,\n            \"duration_step\": duration_step,\n            \"error\": error\n        });\n        flow.set(\"track\", track);\n    //>трекер>\n    node.status({fill:\"red\",shape:\"dot\"});\n    \n    node.error(error);\n});",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 180,
        "y": 1460,
        "wires": [
            [
                "48cf55ef.7a86ec"
            ]
        ]
    },
    {
        "id": "48cf55ef.7a86ec",
        "type": "function",
        "z": "5df15275.2888ec",
        "name": "getbot_status",
        "func": "//<трекер<\n    let track = flow.get(\"track\");\n    let start_node_time = new Date().getTime();\n    let steptitle = node.name;\n\n    let laststep = track[track.length-1];\n    let last_node_end_time = laststep.end_node_time;\n//>трекер>\nconst gb = global.get('getbot_status')(msg.botname);\n\ngb.then(gb => {\n    msg.bot.status = JSON.parse(gb);\n    //>трекер>\n        let end_node_time = new Date().getTime();\n        let duration = end_node_time - start_node_time;\n        let duration_step = end_node_time - last_node_end_time;\n        track.push({\n            \"steptitle\": steptitle,\n            \"start_node_time\": start_node_time,\n            \"end_node_time\": end_node_time,\n            \"duration_node\": duration,\n            \"duration_step\": duration_step\n        });\n        flow.set(\"track\", track);\n    //>трекер>\n    node.status({fill:\"green\",shape:\"dot\"});\n\n    node.send(msg);\n\n}).catch(error => {\n    \n    //>трекер>\n        let end_node_time = new Date().getTime();\n        let duration = end_node_time - start_node_time;\n        let duration_step = end_node_time - last_node_end_time;\n        track.push({\n            \"steptitle\": steptitle+\"-faile\",\n            \"start_node_time\": start_node_time,\n            \"end_node_time\": end_node_time,\n            \"duration\": duration,\n            \"duration_step\": duration_step,\n            \"error\": error\n        });\n        flow.set(\"track\", track);\n    //>трекер>\n    node.status({fill:\"red\",shape:\"dot\"});\n    node.error(error);\n});",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 380,
        "y": 1460,
        "wires": [
            [
                "a911e390.b5d95"
            ]
        ]
    },
    {
        "id": "e34a5b68.726ec8",
        "type": "link in",
        "z": "5df15275.2888ec",
        "name": "",
        "links": [
            "1d363e0d.ecfda2",
            "12ffe7f.e8dc818",
            "5c79e5db.ac8dbc",
            "e7a3546e.921a88",
            "95441edd.0d929",
            "6754e914.7614e8",
            "ddabea75.dd1088",
            "753a36de.b9e428",
            "e8c8331e.e7793",
            "b8ba1292.37024",
            "22a97a04.318866",
            "680cfedc.4fcef",
            "94225cb4.7b0ac",
            "c51d3999.c7a808",
            "c0331d12.6a72c",
            "b4a0f6b3.fffbc8",
            "8f71fdf8.2081f",
            "1d3d001f.71ad58",
            "21bac3f3.0c9a4c",
            "934868db.80736",
            "fb59e9.14f76618",
            "a0acd38.9f8573",
            "f7b1bee6.22d7c",
            "c687d087.0896d"
        ],
        "x": 2315,
        "y": 1120,
        "wires": [
            [
                "9f82a757.25f3d",
                "5a3f403a.e52a98"
            ]
        ]
    },
    {
        "id": "9cbb75e6.0f4498",
        "type": "http in",
        "z": "5df15275.2888ec",
        "g": "154b2e1c.6272e2",
        "name": "",
        "url": "/botslist",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 4110,
        "y": 1160,
        "wires": [
            [
                "d2e4b8ad.2f61c8"
            ]
        ]
    },
    {
        "id": "6f87fcb7.9335e4",
        "type": "http response",
        "z": "5df15275.2888ec",
        "g": "154b2e1c.6272e2",
        "name": "",
        "statusCode": "200",
        "headers": {},
        "x": 4880,
        "y": 1160,
        "wires": []
    },
    {
        "id": "d2e4b8ad.2f61c8",
        "type": "function",
        "z": "5df15275.2888ec",
        "g": "154b2e1c.6272e2",
        "name": "getbotlist",
        "func": "\n\nlet guid = global.get('guid');\n\nconst gbl = global.get('getbotlist')(guid);\n\ngbl.then(gbl => {\n    \n    msg.payload = JSON.parse(gbl);\n    \n\n    node.status({fill:\"green\",shape:\"dot\"});\n    node.send(msg);\n\n}).catch(error => {\n    \n\n    node.status({fill:\"red\",shape:\"dot\"});\n    \n    node.error(error);\n});",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 4280,
        "y": 1160,
        "wires": [
            [
                "80d7c6d0.cd5e08"
            ]
        ]
    },
    {
        "id": "f0503628.d8df98",
        "type": "function",
        "z": "5df15275.2888ec",
        "g": "154b2e1c.6272e2",
        "name": "",
        "func": "let guid = global.get('guid');\nmsg.payload = [true, msg.payload, 0, 0, 0, 0, 0, 0, guid];\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 4580,
        "y": 1160,
        "wires": [
            [
                "712f8721.08ce18"
            ]
        ]
    },
    {
        "id": "80d7c6d0.cd5e08",
        "type": "split",
        "z": "5df15275.2888ec",
        "g": "154b2e1c.6272e2",
        "name": "",
        "splt": "\\n",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "x": 4430,
        "y": 1160,
        "wires": [
            [
                "f0503628.d8df98"
            ]
        ]
    },
    {
        "id": "712f8721.08ce18",
        "type": "join",
        "z": "5df15275.2888ec",
        "g": "154b2e1c.6272e2",
        "name": "",
        "mode": "auto",
        "build": "string",
        "property": "payload",
        "propertyType": "msg",
        "key": "topic",
        "joiner": "\\n",
        "joinerType": "str",
        "accumulate": "false",
        "timeout": "",
        "count": "",
        "reduceRight": false,
        "x": 4730,
        "y": 1160,
        "wires": [
            [
                "6f87fcb7.9335e4"
            ]
        ]
    },
    {
        "id": "1a05e8c0.3a30d7",
        "type": "http in",
        "z": "5df15275.2888ec",
        "g": "9234522a.3a33c",
        "name": "",
        "url": "/bot_full",
        "method": "post",
        "upload": false,
        "swaggerDoc": "",
        "x": 3930,
        "y": 1280,
        "wires": [
            [
                "192054d1.4fe29b"
            ]
        ]
    },
    {
        "id": "239253ed.cd5e7c",
        "type": "function",
        "z": "5df15275.2888ec",
        "g": "9234522a.3a33c",
        "name": "getbot_status",
        "func": "\nlet botname = msg.payload.botname;\n\nconst gb = global.get('getbot_status')(botname);\n\ngb.then(gb => {\n    \n    msg.bot.status = JSON.parse(gb);\n    node.send(msg);\n\n}).catch(error => {\n    node.error(error);\n});",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 4340,
        "y": 1280,
        "wires": [
            [
                "c94a0180.3474a",
                "cefaef13.fdbe38"
            ]
        ]
    },
    {
        "id": "13685612.fa676a",
        "type": "http response",
        "z": "5df15275.2888ec",
        "g": "9234522a.3a33c",
        "name": "",
        "statusCode": "200",
        "headers": {},
        "x": 4880,
        "y": 1280,
        "wires": []
    },
    {
        "id": "d577802f.1b12c",
        "type": "redis-command",
        "z": "5df15275.2888ec",
        "server": "f120eab2.0a60a8",
        "command": "AUTH",
        "name": "",
        "topic": "",
        "params": "[\"YzRAdGgkFg\"]",
        "paramsType": "json",
        "payloadType": "json",
        "block": false,
        "x": 2170,
        "y": 300,
        "wires": [
            [
                "6182b5a9.c0565c"
            ]
        ]
    },
    {
        "id": "98f37d3.dcbc68",
        "type": "inject",
        "z": "5df15275.2888ec",
        "name": "YzRAdGgkFg",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": "1",
        "topic": "",
        "payload": "[\"YzRAdGgkFg\"]",
        "payloadType": "str",
        "x": 1870,
        "y": 300,
        "wires": [
            [
                "d577802f.1b12c"
            ]
        ]
    },
    {
        "id": "192054d1.4fe29b",
        "type": "function",
        "z": "5df15275.2888ec",
        "g": "9234522a.3a33c",
        "name": "getbot_settings",
        "func": "\n\nlet bot = {};\nmsg.bot = bot;\nconst gb = global.get('getbot_settings')(msg.payload.botname);\n\ngb.then(gb => {\n    \n    msg.bot.settings = JSON.parse(gb);\n    node.send(msg);\n\n}).catch(error => {\n    node.error(error);\n});",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 4140,
        "y": 1280,
        "wires": [
            [
                "239253ed.cd5e7c"
            ]
        ]
    },
    {
        "id": "4c5eb819.338738",
        "type": "function",
        "z": "5df15275.2888ec",
        "g": "9234522a.3a33c",
        "name": "prepare data",
        "func": "msg.payload = msg.bot;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 4710,
        "y": 1280,
        "wires": [
            [
                "13685612.fa676a"
            ]
        ]
    },
    {
        "id": "9d4b21de.c6e79",
        "type": "comment",
        "z": "5df15275.2888ec",
        "name": "1 - Покупаем",
        "info": "",
        "x": 970,
        "y": 2020,
        "wires": []
    },
    {
        "id": "29bba474.1311bc",
        "type": "comment",
        "z": "5df15275.2888ec",
        "name": "2 - Купили. Держим",
        "info": "",
        "x": 1000,
        "y": 2380,
        "wires": []
    },
    {
        "id": "164e36c.27147c9",
        "type": "comment",
        "z": "5df15275.2888ec",
        "name": "3 - Продаём",
        "info": "",
        "x": 970,
        "y": 2620,
        "wires": []
    },
    {
        "id": "59e2c8e3.215458",
        "type": "function",
        "z": "5df15275.2888ec",
        "name": "",
        "func": "\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 960,
        "y": 2800,
        "wires": [
            []
        ]
    },
    {
        "id": "2d408eec.5fd1d2",
        "type": "comment",
        "z": "5df15275.2888ec",
        "name": "4 - Продали",
        "info": "",
        "x": 970,
        "y": 2760,
        "wires": []
    },
    {
        "id": "91ce6bcb.4660c8",
        "type": "switch",
        "z": "5df15275.2888ec",
        "name": "статус этажа",
        "property": "bot.currentfloor[7]",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "0",
                "vt": "num"
            },
            {
                "t": "eq",
                "v": "1",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "2",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "3",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "4",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 5,
        "x": 680,
        "y": 2120,
        "wires": [
            [
                "c1205a7a.e64a88"
            ],
            [
                "f9171818.a77228",
                "8cb56aa3.a4d61"
            ],
            [
                "d4b164b1.ec0c48",
                "8b633602.aac0d8"
            ],
            [
                "c51d3999.c7a808",
                "3ca95c2c.4bc654"
            ],
            [
                "59e2c8e3.215458"
            ]
        ]
    },
    {
        "id": "b90cf80b.4b7998",
        "type": "function",
        "z": "5df15275.2888ec",
        "name": "определяем этаж",
        "func": "//<трекер<\n    let track = flow.get(\"track\");\n    let start_node_time = new Date().getTime();\n    let steptitle = node.name;\n\n    let laststep = track[track.length-1];\n    let last_node_end_time = laststep.end_node_time;\n//>трекер>\n\nlet lp = Number(msg.bot.status.currentprice);\nlet f = msg.bot.floors;\n\nvar curfloor = f.filter(function(floor) {\n    return ((floor[1]<=lp)&&(floor[2]>lp));\n});\n\nif (curfloor[0]) {\n\n    //>трекер>\n        let end_node_time = new Date().getTime();\n        let duration = end_node_time - start_node_time;\n        let duration_step = end_node_time - last_node_end_time;\n        track.push({\n            \"steptitle\": steptitle,\n            \"start_node_time\": start_node_time,\n            \"end_node_time\": end_node_time,\n            \"duration_node\": duration,\n            \"duration_step\": duration_step\n        });\n        flow.set(\"track\", track);\n    //>трекер>\n    node.status({fill:\"green\",shape:\"dot\"});\n   \n   \n    msg.bot.currentfloor = curfloor[0];\n    msg.bot.status.lastfloor = msg.bot.status.currentfloor;\n    msg.bot.status.currentfloor = curfloor[0][0];\n\n    msg.bot.downfloor = f[msg.bot.status.currentfloor-2];\n    return [msg, null];\n} \nelse\n{\n    \n    //>трекер>\n        let end_node_time = new Date().getTime();\n        let duration = end_node_time - start_node_time;\n        let duration_step = end_node_time - last_node_end_time;\n        track.push({\n            \"steptitle\": steptitle+\"-outgrid\",\n            \"start_node_time\": start_node_time,\n            \"end_node_time\": end_node_time,\n            \"duration\": duration,\n            \"duration_step\": duration_step,\n            \n        });\n        flow.set(\"track\", track);\n    //>трекер>\n    node.status({fill:\"blue\",shape:\"dot\"});\n   // node.warn(\"вне сетки\"); \n    return [null,msg];\n}\n\n",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 250,
        "y": 2120,
        "wires": [
            [
                "dc892fe8.bac79",
                "4a02d190.e7d87"
            ],
            []
        ]
    },
    {
        "id": "dc892fe8.bac79",
        "type": "debug",
        "z": "5df15275.2888ec",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "x": 310,
        "y": 2060,
        "wires": []
    },
    {
        "id": "4fd5ae55.50c0d",
        "type": "comment",
        "z": "5df15275.2888ec",
        "name": "вне сетки",
        "info": "",
        "x": 440,
        "y": 2360,
        "wires": []
    },
    {
        "id": "d0445e86.60e8a",
        "type": "comment",
        "z": "5df15275.2888ec",
        "name": "дежурный по этажу",
        "info": "",
        "x": 240,
        "y": 1920,
        "wires": []
    },
    {
        "id": "c3c68186.76c01",
        "type": "function",
        "z": "5df15275.2888ec",
        "g": "c625f482.ef7058",
        "name": "getbot_data()",
        "func": "",
        "outputs": 1,
        "noerr": 0,
        "initialize": "let guid = global.get('guid');\n\n\n\nlet getbot_data = function (botname = msg.payload) {\n    \n    let promise = new Promise((resolve, reject) => {\n        msg.resolve = resolve;\n        msg.reject = reject;\n    });\n    \n\n    msg.topic = guid+\"-bots:\"+botname+\":data\";\n    msg.payload = [];\n\n    node.send(Object.assign({}, msg));\n    \n    return promise;\n};\n\nglobal.set('getbot_data', getbot_data);",
        "finalize": "",
        "x": 1070,
        "y": 500,
        "wires": [
            [
                "bcbb540b.558ae8"
            ]
        ]
    },
    {
        "id": "229ee0ff.22e48",
        "type": "inject",
        "z": "5df15275.2888ec",
        "g": "c625f482.ef7058",
        "name": "botname",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "x": 900,
        "y": 500,
        "wires": [
            [
                "c3c68186.76c01"
            ]
        ]
    },
    {
        "id": "e47a380a.5fd968",
        "type": "function",
        "z": "5df15275.2888ec",
        "g": "c625f482.ef7058",
        "name": "resolve",
        "func": "msg.resolve(msg.payload);\n\n// reject\n// setTimeout(function () {\n//     msg.reject({message: 'Could not request joke'});\n// }, 2000);",
        "outputs": "0",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 1460,
        "y": 500,
        "wires": []
    },
    {
        "id": "fe0a5fc8.c442f",
        "type": "function",
        "z": "5df15275.2888ec",
        "g": "5b21035.9c9f6fc",
        "name": "getbot_start_set",
        "func": "\nlet botname = msg.payload.botname;\n\nconst gb = global.get('getbot_start_set')(botname);\n\ngb.then(gb => {\n\n    msg.payload = gb;\n    node.send(msg);\n\n}).catch(error => {\n    node.error(error);\n});",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 4400,
        "y": 1560,
        "wires": [
            [
                "ac588a65.521198"
            ]
        ]
    },
    {
        "id": "bcbb540b.558ae8",
        "type": "redis-command",
        "z": "5df15275.2888ec",
        "g": "c625f482.ef7058",
        "server": "f120eab2.0a60a8",
        "command": "hgetall",
        "name": "",
        "topic": "",
        "params": "{}",
        "paramsType": "json",
        "payloadType": "json",
        "block": false,
        "x": 1250,
        "y": 500,
        "wires": [
            [
                "e47a380a.5fd968"
            ]
        ]
    },
    {
        "id": "8228371e.8b4288",
        "type": "function",
        "z": "5df15275.2888ec",
        "name": "getbot_data",
        "func": "\nlet botname = msg.botname;\n\nconst gb = global.get('getbot_data')(botname);\n\ngb.then(gb => {\n    //node.warn(gb);\n    let bot = {...msg.bot,\n        \"floors\":JSON.parse(gb.floors),\n        \"finance\":JSON.parse(gb.finance),\n        \"sales\":JSON.parse(gb.sales)\n    };\n    msg.bot = bot;\n    node.send(msg);\n\n}).catch(error => {\n    node.error(error);\n});",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 1430,
        "y": 1460,
        "wires": [
            [
                "f46e3c05.ef292",
                "438a4ff8.3b594"
            ]
        ]
    },
    {
        "id": "f46e3c05.ef292",
        "type": "debug",
        "z": "5df15275.2888ec",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1770,
        "y": 1560,
        "wires": []
    },
    {
        "id": "373cb204.5f5efe",
        "type": "link in",
        "z": "5df15275.2888ec",
        "name": "",
        "links": [
            "14ffa955.ed6edf"
        ],
        "x": 95,
        "y": 2120,
        "wires": [
            [
                "be39e216.8776b",
                "b90cf80b.4b7998"
            ]
        ]
    },
    {
        "id": "be39e216.8776b",
        "type": "debug",
        "z": "5df15275.2888ec",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "x": 170,
        "y": 2220,
        "wires": []
    },
    {
        "id": "c1205a7a.e64a88",
        "type": "switch",
        "z": "5df15275.2888ec",
        "name": "проверка запрета на закуп",
        "property": "bot.zapret_na_zakup",
        "propertyType": "msg",
        "rules": [
            {
                "t": "false"
            },
            {
                "t": "true"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 1020,
        "y": 1900,
        "wires": [
            [
                "174109bc.94fd76"
            ],
            [
                "1d363e0d.ecfda2",
                "915da6cf.825428"
            ]
        ]
    },
    {
        "id": "a0d89c52.2ec2b",
        "type": "comment",
        "z": "5df15275.2888ec",
        "name": "запрещено закупать",
        "info": "",
        "x": 1320,
        "y": 1920,
        "wires": []
    },
    {
        "id": "d46ce170.d1325",
        "type": "comment",
        "z": "5df15275.2888ec",
        "name": "0 - Свободно",
        "info": "",
        "x": 970,
        "y": 1860,
        "wires": []
    },
    {
        "id": "24cf66df.38462a",
        "type": "comment",
        "z": "5df15275.2888ec",
        "name": "PARTIALLY_FILLED",
        "info": "",
        "x": 2290,
        "y": 2600,
        "wires": []
    },
    {
        "id": "1d363e0d.ecfda2",
        "type": "link out",
        "z": "5df15275.2888ec",
        "name": "",
        "links": [
            "e34a5b68.726ec8",
            "e3e1e22a.f958b"
        ],
        "x": 1455,
        "y": 1920,
        "wires": []
    },
    {
        "id": "302b86fd.feef2a",
        "type": "function",
        "z": "5df15275.2888ec",
        "name": "MA zapret calculate",
        "func": "//<трекер<\n    let track = flow.get(\"track\");\n    let start_node_time = new Date().getTime();\n    let steptitle = node.name;\n\n    let laststep = track[track.length-1];\n    let last_node_end_time = laststep.end_node_time;\n//>трекер>\n\nif ((msg.bot.status.currentprice > msg.bot.status.sr_ma_big)&&(msg.bot.status.currentprice > msg.bot.status.sr_ma_small)){\n    msg.bot.zapret_na_zakup = false;\n    msg.bot.status.rezhim = \"МА - закуп разрешен\";\n} else {\n    msg.bot.zapret_na_zakup = true;\n    msg.bot.status.rezhim = \"МА - закуп запрещён\";\n}\n\n    //>трекер>\n        let end_node_time = new Date().getTime();\n        let duration = end_node_time - start_node_time;\n        let duration_step = end_node_time - last_node_end_time;\n        track.push({\n            \"steptitle\": steptitle,\n            \"start_node_time\": start_node_time,\n            \"end_node_time\": end_node_time,\n            \"duration_node\": duration,\n            \"duration_step\": duration_step\n        });\n        flow.set(\"track\", track);\n    //>трекер>\n    node.status({fill:\"green\",shape:\"dot\"});\n    \nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 1020,
        "y": 1460,
        "wires": [
            [
                "e44e5a97.f491b"
            ]
        ]
    },
    {
        "id": "6115d0a9.4e59f",
        "type": "function",
        "z": "5df15275.2888ec",
        "g": "c625f482.ef7058",
        "name": "setbot_data()",
        "func": "",
        "outputs": 1,
        "noerr": 0,
        "initialize": "let guid = global.get('guid');\n\n\nlet setbot_data = function (volname = msg.topic, data = msg.payload) {\n    \n    let promise = new Promise((resolve, reject) => {\n        msg.resolve = resolve;\n        msg.reject = reject;\n    });\n    \n\n    msg.topic = volname;\n    msg.payload = data;\n\n    node.send(Object.assign({}, msg));\n    \n    return promise;\n};\n\nglobal.set('setbot_data', setbot_data);",
        "finalize": "",
        "x": 1070,
        "y": 320,
        "wires": [
            [
                "1fd9091b.b7c747"
            ]
        ]
    },
    {
        "id": "695f8ecb.2536a",
        "type": "inject",
        "z": "5df15275.2888ec",
        "g": "c625f482.ef7058",
        "name": "botname",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "x": 900,
        "y": 320,
        "wires": [
            [
                "6115d0a9.4e59f"
            ]
        ]
    },
    {
        "id": "63dd941.f161b6c",
        "type": "function",
        "z": "5df15275.2888ec",
        "g": "c625f482.ef7058",
        "name": "resolve",
        "func": "msg.resolve(msg.payload);\n\n// reject\n// setTimeout(function () {\n//     msg.reject({message: 'Could not request joke'});\n// }, 2000);",
        "outputs": "0",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 1460,
        "y": 320,
        "wires": []
    },
    {
        "id": "1fd9091b.b7c747",
        "type": "redis-command",
        "z": "5df15275.2888ec",
        "g": "c625f482.ef7058",
        "server": "f120eab2.0a60a8",
        "command": "hmset",
        "name": "",
        "topic": "",
        "params": "[]",
        "paramsType": "json",
        "payloadType": "json",
        "block": false,
        "x": 1250,
        "y": 320,
        "wires": [
            [
                "63dd941.f161b6c"
            ]
        ]
    },
    {
        "id": "c94a0180.3474a",
        "type": "function",
        "z": "5df15275.2888ec",
        "g": "9234522a.3a33c",
        "name": "getbot_data",
        "func": "\nlet botname = msg.bot.settings.botname;\n\nconst gb = global.get('getbot_data')(botname);\n\ngb.then(gb => {\n    //node.warn(gb);\n    let bot = {...msg.bot,\n        \"floors\":JSON.parse(gb.floors),\n        \"finance\":JSON.parse(gb.finance),\n        \"sales\":JSON.parse(gb.sales)\n    };\n    msg.bot = bot;\n    node.send(msg);\n\n}).catch(error => {\n    node.error(error);\n});",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 4530,
        "y": 1280,
        "wires": [
            [
                "4c5eb819.338738"
            ]
        ]
    },
    {
        "id": "7ddb53c7.3bb5bc",
        "type": "function",
        "z": "5df15275.2888ec",
        "name": "",
        "func": "msg.topic = \"jurnal\";\nmsg.payload = flow.get(\"track\");\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 3660,
        "y": 2180,
        "wires": [
            [
                "5ec57567.e09b8c"
            ]
        ]
    },
    {
        "id": "8eb1f45.b108d08",
        "type": "debug",
        "z": "5df15275.2888ec",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 4170,
        "y": 2480,
        "wires": []
    },
    {
        "id": "f01cd92b.fcdc68",
        "type": "inject",
        "z": "5df15275.2888ec",
        "name": "",
        "props": [
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "\"jurnal\"",
        "x": 3670,
        "y": 2420,
        "wires": [
            [
                "8b8766ab.625aa8",
                "1dd9dcaa.3f7493"
            ]
        ]
    },
    {
        "id": "f2127320.046ec",
        "type": "function",
        "z": "5df15275.2888ec",
        "name": "",
        "func": "msg.payload = JSON.parse(msg.payload);\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 4050,
        "y": 2400,
        "wires": [
            [
                "8eb1f45.b108d08"
            ]
        ]
    },
    {
        "id": "4b069157.19693",
        "type": "redis-command",
        "z": "5df15275.2888ec",
        "server": "f120eab2.0a60a8",
        "command": "sadd",
        "name": "",
        "topic": "",
        "params": "",
        "paramsType": "json",
        "payloadType": "json",
        "block": false,
        "x": 3850,
        "y": 2120,
        "wires": [
            [
                "907c34e5.1e9808"
            ]
        ]
    },
    {
        "id": "5ec57567.e09b8c",
        "type": "join",
        "z": "5df15275.2888ec",
        "name": "",
        "mode": "auto",
        "build": "string",
        "property": "payload",
        "propertyType": "msg",
        "key": "topic",
        "joiner": "\\n",
        "joinerType": "str",
        "accumulate": "false",
        "timeout": "",
        "count": "",
        "reduceRight": false,
        "x": 3790,
        "y": 2060,
        "wires": [
            [
                "4b069157.19693"
            ]
        ]
    },
    {
        "id": "907c34e5.1e9808",
        "type": "debug",
        "z": "5df15275.2888ec",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 3970,
        "y": 2180,
        "wires": []
    },
    {
        "id": "8b8766ab.625aa8",
        "type": "function",
        "z": "5df15275.2888ec",
        "name": "prepare getprice",
        "func": "\nmsg.topic = [];\nmsg.payload = \"jurnal\";\n    \n\nnode.status({fill:\"green\",shape:\"dot\"});\n    \nreturn msg;\n    \n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 3880,
        "y": 2420,
        "wires": [
            []
        ],
        "inputLabels": [
            "orderid"
        ],
        "outputLabels": [
            "status"
        ],
        "icon": "node-red-contrib-binance/binance.png"
    },
    {
        "id": "601248c1.6a3f58",
        "type": "redis-command",
        "z": "5df15275.2888ec",
        "server": "f120eab2.0a60a8",
        "command": "GET",
        "name": "get price",
        "topic": "msg.topic",
        "params": "",
        "paramsType": "json",
        "payloadType": "json",
        "block": false,
        "x": 3920,
        "y": 2300,
        "wires": [
            [
                "6771d2a6.edcd3c"
            ]
        ]
    },
    {
        "id": "6771d2a6.edcd3c",
        "type": "debug",
        "z": "5df15275.2888ec",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 4090,
        "y": 2300,
        "wires": []
    },
    {
        "id": "b6ece763.681068",
        "type": "inject",
        "z": "5df15275.2888ec",
        "name": "",
        "props": [
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "jurnal",
        "x": 3710,
        "y": 2300,
        "wires": [
            [
                "601248c1.6a3f58"
            ]
        ]
    },
    {
        "id": "1dd9dcaa.3f7493",
        "type": "redis-command",
        "z": "5df15275.2888ec",
        "server": "f120eab2.0a60a8",
        "command": "hgetall",
        "name": "",
        "topic": "",
        "params": "{}",
        "paramsType": "json",
        "payloadType": "json",
        "block": false,
        "x": 3890,
        "y": 2440,
        "wires": [
            [
                "f2127320.046ec"
            ]
        ]
    },
    {
        "id": "8a90f52f.5e82b8",
        "type": "function",
        "z": "5df15275.2888ec",
        "g": "93990b56.ce7428",
        "name": "prepare for start_set",
        "func": "msg.topic = msg.payload.user_id_from_google+\"-bots:\"+msg.payload.botname+\":start_set\";\n\nmsg.payload = msg.payload.start_set;\n\nnode.status({fill:\"green\",shape:\"dot\"});\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 4260,
        "y": 1040,
        "wires": [
            [
                "b9301109.6d837"
            ]
        ]
    },
    {
        "id": "b9301109.6d837",
        "type": "redis-command",
        "z": "5df15275.2888ec",
        "g": "93990b56.ce7428",
        "server": "f120eab2.0a60a8",
        "command": "getset",
        "name": "",
        "topic": "",
        "params": "[]",
        "paramsType": "json",
        "payloadType": "json",
        "block": false,
        "x": 4490,
        "y": 1040,
        "wires": [
            []
        ]
    },
    {
        "id": "1da56dc9.817ee2",
        "type": "function",
        "z": "5df15275.2888ec",
        "g": "c625f482.ef7058",
        "name": "getbot_start_set()",
        "func": "",
        "outputs": 1,
        "noerr": 0,
        "initialize": "let guid = global.get('guid');\n\n\nlet getbot_start_set = function (botname = msg.payload) {\n    \n    let promise = new Promise((resolve, reject) => {\n        msg.resolve = resolve;\n        msg.reject = reject;\n    });\n    \n\n    msg.topic = guid+\"-bots:\"+botname+\":start_set\";\n    msg.payload = [];\n\n    node.send(Object.assign({}, msg));\n    \n    return promise;\n};\n\nglobal.set('getbot_start_set', getbot_start_set);",
        "finalize": "",
        "x": 1090,
        "y": 560,
        "wires": [
            [
                "c83cd378.b93ca"
            ]
        ]
    },
    {
        "id": "4af43326.f9b1bc",
        "type": "inject",
        "z": "5df15275.2888ec",
        "g": "c625f482.ef7058",
        "name": "botname",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "x": 900,
        "y": 560,
        "wires": [
            [
                "1da56dc9.817ee2"
            ]
        ]
    },
    {
        "id": "3e8866d4.739e9a",
        "type": "function",
        "z": "5df15275.2888ec",
        "g": "c625f482.ef7058",
        "name": "resolve",
        "func": "msg.resolve(msg.payload);\n\n// reject\n// setTimeout(function () {\n//     msg.reject({message: 'Could not request joke'});\n// }, 2000);",
        "outputs": "0",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 1500,
        "y": 560,
        "wires": []
    },
    {
        "id": "c83cd378.b93ca",
        "type": "redis-command",
        "z": "5df15275.2888ec",
        "g": "c625f482.ef7058",
        "server": "f120eab2.0a60a8",
        "command": "GET",
        "name": "get bot starts_set",
        "topic": "msg.payload",
        "params": "[]",
        "paramsType": "json",
        "payloadType": "json",
        "block": false,
        "x": 1310,
        "y": 560,
        "wires": [
            [
                "3e8866d4.739e9a"
            ]
        ]
    },
    {
        "id": "50d2f56d.d89b5c",
        "type": "redis-command",
        "z": "5df15275.2888ec",
        "g": "5b21035.9c9f6fc",
        "server": "f120eab2.0a60a8",
        "command": "hmset",
        "name": "",
        "topic": "",
        "params": "[]",
        "paramsType": "json",
        "payloadType": "json",
        "block": false,
        "x": 4670,
        "y": 1620,
        "wires": [
            []
        ]
    },
    {
        "id": "24e3759c.ccab7a",
        "type": "function",
        "z": "5df15275.2888ec",
        "g": "5b21035.9c9f6fc",
        "name": "prepare data for create bot",
        "func": "msg.topic = msg.payload.settings.userid+\"-bots:\"+msg.payload.settings.botname+\":data\";\n\nlet botdata = {\n    \"finance\":JSON.stringify(msg.payload.finance),\n    \"floors\":JSON.stringify(msg.payload.floors),\n    \"sales\":JSON.stringify(msg.payload.sales)\n    \n};\nmsg.payload = botdata;\nnode.status({fill:\"green\",shape:\"dot\"});\nreturn msg;\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 4440,
        "y": 1620,
        "wires": [
            [
                "50d2f56d.d89b5c"
            ]
        ]
    },
    {
        "id": "493967b2.355f88",
        "type": "function",
        "z": "5df15275.2888ec",
        "g": "5b21035.9c9f6fc",
        "name": "prepare for add bot status",
        "func": "msg.topic = msg.payload.settings.userid+\"-bots:\"+msg.payload.settings.botname+\":status\";\nmsg.payload.status.updated = new Date().getTime();\nmsg.payload = JSON.stringify(msg.payload.status);\n\nnode.status({fill:\"green\",shape:\"dot\"});\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 4430,
        "y": 1680,
        "wires": [
            [
                "a77ec084.8fffe"
            ]
        ]
    },
    {
        "id": "a77ec084.8fffe",
        "type": "redis-command",
        "z": "5df15275.2888ec",
        "g": "5b21035.9c9f6fc",
        "server": "f120eab2.0a60a8",
        "command": "getset",
        "name": "",
        "topic": "",
        "params": "[]",
        "paramsType": "json",
        "payloadType": "json",
        "block": false,
        "x": 4650,
        "y": 1680,
        "wires": [
            []
        ]
    },
    {
        "id": "81b674e0.619348",
        "type": "function",
        "z": "5df15275.2888ec",
        "g": "5b21035.9c9f6fc",
        "name": "prepare for add bot settings",
        "func": "msg.topic = msg.payload.settings.userid+\"-bots:\"+msg.payload.settings.botname+\":settings\";\n\nmsg.payload = JSON.stringify(msg.payload.settings);\n\nnode.status({fill:\"green\",shape:\"dot\"});\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 4440,
        "y": 1740,
        "wires": [
            [
                "c192b5ce.f292e8"
            ]
        ]
    },
    {
        "id": "c192b5ce.f292e8",
        "type": "redis-command",
        "z": "5df15275.2888ec",
        "g": "5b21035.9c9f6fc",
        "server": "f120eab2.0a60a8",
        "command": "getset",
        "name": "",
        "topic": "",
        "params": "[]",
        "paramsType": "json",
        "payloadType": "json",
        "block": false,
        "x": 4670,
        "y": 1740,
        "wires": [
            []
        ]
    },
    {
        "id": "f5e48d6b.8af42",
        "type": "function",
        "z": "5df15275.2888ec",
        "g": "5b21035.9c9f6fc",
        "name": "prepare for add bot ttp",
        "func": "msg.topic = msg.payload.settings.userid+\"-bots:\"+msg.payload.settings.botname+\":ttp\";\n\nmsg.payload = JSON.stringify(msg.payload.ttp);\n\nnode.status({fill:\"green\",shape:\"dot\"});\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 4420,
        "y": 1800,
        "wires": [
            [
                "9c3f6550.f65078"
            ]
        ]
    },
    {
        "id": "9c3f6550.f65078",
        "type": "redis-command",
        "z": "5df15275.2888ec",
        "g": "5b21035.9c9f6fc",
        "server": "f120eab2.0a60a8",
        "command": "getset",
        "name": "",
        "topic": "",
        "params": "[]",
        "paramsType": "json",
        "payloadType": "json",
        "block": false,
        "x": 4630,
        "y": 1800,
        "wires": [
            []
        ]
    },
    {
        "id": "534028b7.335048",
        "type": "function",
        "z": "5df15275.2888ec",
        "g": "5b21035.9c9f6fc",
        "name": "prepare for add bot busy",
        "func": "msg.topic = msg.payload.settings.userid+\"-bots:\"+msg.payload.settings.botname+\":busy\";\n\nmsg.payload = \"false\";\n\nnode.status({fill:\"green\",shape:\"dot\"});\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 4430,
        "y": 1860,
        "wires": [
            [
                "d3e6b44f.196458"
            ]
        ]
    },
    {
        "id": "d3e6b44f.196458",
        "type": "redis-command",
        "z": "5df15275.2888ec",
        "g": "5b21035.9c9f6fc",
        "server": "f120eab2.0a60a8",
        "command": "getset",
        "name": "",
        "topic": "",
        "params": "[]",
        "paramsType": "json",
        "payloadType": "json",
        "block": false,
        "x": 4650,
        "y": 1860,
        "wires": [
            []
        ]
    },
    {
        "id": "ac588a65.521198",
        "type": "json",
        "z": "5df15275.2888ec",
        "g": "5b21035.9c9f6fc",
        "name": "",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 4570,
        "y": 1560,
        "wires": [
            [
                "24e3759c.ccab7a",
                "493967b2.355f88",
                "81b674e0.619348",
                "f5e48d6b.8af42",
                "534028b7.335048",
                "49b11422.104a8c",
                "46c542f6.8abcf4"
            ]
        ]
    },
    {
        "id": "496429d7.3e65b8",
        "type": "http in",
        "z": "5df15275.2888ec",
        "g": "5b21035.9c9f6fc",
        "name": "",
        "url": "/bot_reset",
        "method": "post",
        "upload": false,
        "swaggerDoc": "",
        "x": 4180,
        "y": 1560,
        "wires": [
            [
                "daa3ab85.3e3f08",
                "fe0a5fc8.c442f"
            ]
        ]
    },
    {
        "id": "daa3ab85.3e3f08",
        "type": "http response",
        "z": "5df15275.2888ec",
        "g": "5b21035.9c9f6fc",
        "name": "",
        "statusCode": "200",
        "headers": {},
        "x": 4200,
        "y": 1620,
        "wires": []
    },
    {
        "id": "839251af.05aeb",
        "type": "inject",
        "z": "5df15275.2888ec",
        "g": "5b21035.9c9f6fc",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "LINKDOWNUSDT-1626792009",
        "payloadType": "str",
        "x": 4250,
        "y": 1500,
        "wires": [
            [
                "fe0a5fc8.c442f"
            ]
        ]
    },
    {
        "id": "f9171818.a77228",
        "type": "switch",
        "z": "5df15275.2888ec",
        "name": "проверка запрета на закуп",
        "property": "bot.zapret_na_zakup",
        "propertyType": "msg",
        "rules": [
            {
                "t": "false"
            },
            {
                "t": "true"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 1020,
        "y": 2060,
        "wires": [
            [
                "b55cd864.198818"
            ],
            [
                "9495114e.60fe3"
            ]
        ]
    },
    {
        "id": "c6daab76.cf51c8",
        "type": "debug",
        "z": "5df15275.2888ec",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1580,
        "y": 1580,
        "wires": []
    },
    {
        "id": "599bb04c.9368d",
        "type": "function",
        "z": "5df15275.2888ec",
        "name": "change floors, finance ",
        "func": "//<трекер<\n    let track = flow.get(\"track\");\n    let start_node_time = new Date().getTime();\n    let steptitle = node.name;\n\n    let laststep = track[track.length-1];\n    let last_node_end_time = laststep.end_node_time;\n//>трекер>\n node.warn(\"cancel order \"+msg.bot.currentfloor[14]);     \nlet tempfin = Number(Number(msg.bot.finance.baseinorders) - Number(msg.bot.currentfloor[14])*Number(msg.bot.currentfloor[3]));\nlet tempfin2 = Number(Number(msg.bot.finance.basenal) + Number(msg.bot.currentfloor[14])*Number(msg.bot.currentfloor[3]));\n\nmsg.bot.finance.baseinorders = tempfin.toFixed(msg.bot.settings.digitprice);\nmsg.bot.finance.basenal = tempfin2.toFixed(msg.bot.settings.digitprice);\n\nif (msg.bot.finance.baseinorders == -0) {msg.bot.finance.baseinorders = 0;}\nif (msg.bot.finance.basenal == -0) {msg.bot.finance.basenal = 0;}\n\nlet currentfloor = msg.bot.currentfloor;\n\n\n\nlet data = \"Ордер на покупку отменен, ID - \"+msg.bot.currentfloor[8];\nconst tilog = global.get('tilog')(msg.bot.settings.botname,data);\ntilog;\n\n\n\n\ncurrentfloor[7] = 0;\ncurrentfloor[8] = 0;\ncurrentfloor[14] = 0;\n\nmsg.bot.floors[currentfloor[0]-1] = currentfloor;\n\n//>трекер>\n    let end_node_time = new Date().getTime();\n    let duration = end_node_time - start_node_time;\n    let duration_step = end_node_time - last_node_end_time;\n    track.push({\n        \"steptitle\": steptitle,\n        \"start_node_time\": start_node_time,\n        \"end_node_time\": end_node_time,\n        \"duration_node\": duration,\n        \"duration_step\": duration_step\n    });\n    flow.set(\"track\", track);\n//>трекер>\nnode.status({fill: \"green\", shape: \"ring\", text: start_node_time});\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 2800,
        "y": 2360,
        "wires": [
            [
                "a135ebf2.c63d48"
            ]
        ]
    },
    {
        "id": "acc188d3.58d138",
        "type": "comment",
        "z": "5df15275.2888ec",
        "name": "NEW",
        "info": "",
        "x": 2210,
        "y": 2320,
        "wires": []
    },
    {
        "id": "ef979c72.74622",
        "type": "switch",
        "z": "5df15275.2888ec",
        "name": "статус ордера",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "NEW",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "PARTIALLY_FILLED",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "CANCELED",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "FILLED",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "REJECTED",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "EXPIRED",
                "vt": "str"
            },
            {
                "t": "null"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 7,
        "x": 1960,
        "y": 2400,
        "wires": [
            [
                "c0de766a.ac5d58"
            ],
            [
                "e8c8331e.e7793"
            ],
            [
                "599bb04c.9368d"
            ],
            [
                "509e478f.306ba8"
            ],
            [
                "82e76eec.4698f",
                "c0331d12.6a72c"
            ],
            [
                "82e76eec.4698f",
                "c0331d12.6a72c"
            ],
            [
                "82e76eec.4698f",
                "c0331d12.6a72c"
            ]
        ]
    },
    {
        "id": "9495114e.60fe3",
        "type": "function",
        "z": "5df15275.2888ec",
        "name": "prepare get order status",
        "func": "//<трекер<\n    let track = flow.get(\"track\");\n    let start_node_time = new Date().getTime();\n    let steptitle = node.name;\n\n    let laststep = track[track.length-1];\n    let last_node_end_time = laststep.end_node_time;\n//>трекер>\nlet orderid = msg.bot.currentfloor[8];\nmsg.moneta = msg.bot.settings.moneta;\nmsg.orderid = orderid;\n\n//msg.payload = [];\n//msg.topic = \"orders-status-\" + msg.bot.settings.userid + \":\" + moneta + \":\" + orderid;\n\n    //>трекер>\n        let end_node_time = new Date().getTime();\n        let duration = end_node_time - start_node_time;\n        let duration_step = end_node_time - last_node_end_time;\n        track.push({\n            \"steptitle\": steptitle,\n            \"start_node_time\": start_node_time,\n            \"end_node_time\": end_node_time,\n            \"duration_node\": duration,\n            \"duration_step\": duration_step\n        });\n        flow.set(\"track\", track);\n    //>трекер>\nnode.status({fill: \"green\", shape: \"ring\", text: orderid});\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 1530,
        "y": 2300,
        "wires": [
            [
                "39bc96c2.9bc51a"
            ]
        ],
        "inputLabels": [
            "orderid"
        ],
        "outputLabels": [
            "status"
        ],
        "icon": "node-red-contrib-binance/binance.png"
    },
    {
        "id": "e7a3546e.921a88",
        "type": "link out",
        "z": "5df15275.2888ec",
        "name": "",
        "links": [
            "e34a5b68.726ec8",
            "e3e1e22a.f958b"
        ],
        "x": 3415,
        "y": 2380,
        "wires": []
    },
    {
        "id": "a135ebf2.c63d48",
        "type": "function",
        "z": "5df15275.2888ec",
        "name": "update bot floors, finance",
        "func": "//<трекер<\n    let track = flow.get(\"track\");\n    let start_node_time = new Date().getTime();\n    let steptitle = node.name;\n\n    let laststep = track[track.length-1];\n    let last_node_end_time = laststep.end_node_time;\n//>трекер>\nlet volname = msg.bot.settings.userid+\"-bots:\"+msg.botname+\":data\";\nlet botdata = {\n    \"finance\":JSON.stringify(msg.bot.finance),\n    \"floors\":JSON.stringify(msg.bot.floors),\n    \"sales\":JSON.stringify(msg.bot.sales)\n    \n};\n\nconst upd = global.get('setbot_data')(volname, botdata);\n\nupd.then(upd => {\n    \n    msg.payload = upd;\n    \n    //>трекер>\n        let end_node_time = new Date().getTime();\n        let duration = end_node_time - start_node_time;\n        let duration_step = end_node_time - last_node_end_time;\n        track.push({\n            \"steptitle\": steptitle,\n            \"start_node_time\": start_node_time,\n            \"end_node_time\": end_node_time,\n            \"duration_node\": duration,\n            \"duration_step\": duration_step\n        });\n        flow.set(\"track\", track);\n    //>трекер>\nnode.status({fill: \"green\", shape: \"ring\", text: start_node_time});\n    \n    node.send(msg);\n\n}).catch(error => {\n    \n    //>трекер>\n        let end_node_time = new Date().getTime();\n        let duration = end_node_time - start_node_time;\n        let duration_step = end_node_time - last_node_end_time;\n        track.push({\n            \"steptitle\": steptitle+\"-faile\",\n            \"start_node_time\": start_node_time,\n            \"end_node_time\": end_node_time,\n            \"duration\": duration,\n            \"duration_step\": duration_step,\n            \"error\": error\n        });\n        flow.set(\"track\", track);\n    //>трекер>\n    node.status({fill: \"red\", shape: \"ring\", text: error});\n    node.error(error);\n});",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 3050,
        "y": 2360,
        "wires": [
            [
                "208c29d9.3bb9de",
                "13b881dc.5f7fae"
            ]
        ],
        "icon": "font-awesome/fa-bolt"
    },
    {
        "id": "82e76eec.4698f",
        "type": "debug",
        "z": "5df15275.2888ec",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 2210,
        "y": 2660,
        "wires": []
    },
    {
        "id": "915da6cf.825428",
        "type": "function",
        "z": "5df15275.2888ec",
        "name": "tester",
        "func": "//<трекер<\n    let track = flow.get(\"track\");\n    let start_node_time = new Date().getTime();\n    let steptitle = node.name;\n\n    let laststep = track[track.length-1];\n    let last_node_end_time = laststep.end_node_time;\n//>трекер>\n\n\n    //>трекер>\n        let end_node_time = new Date().getTime();\n        let duration = end_node_time - start_node_time;\n        let duration_step = end_node_time - last_node_end_time;\n        track.push({\n            \"steptitle\": steptitle,\n            \"start_node_time\": start_node_time,\n            \"end_node_time\": end_node_time,\n            \"duration_node\": duration,\n            \"duration_step\": duration_step\n        });\n        flow.set(\"track\", track);\n    //>трекер>\nnode.status({fill: \"green\", shape: \"ring\", text: last_node_end_time});\n    \n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 1530,
        "y": 1940,
        "wires": [
            []
        ]
    },
    {
        "id": "5f69a953.e18b28",
        "type": "comment",
        "z": "5df15275.2888ec",
        "name": "FILLED",
        "info": "",
        "x": 2210,
        "y": 2540,
        "wires": []
    },
    {
        "id": "bc089647.c26d98",
        "type": "comment",
        "z": "5df15275.2888ec",
        "name": "CANCELED",
        "info": "",
        "x": 2230,
        "y": 2380,
        "wires": []
    },
    {
        "id": "509e478f.306ba8",
        "type": "function",
        "z": "5df15275.2888ec",
        "name": "change floors, finance ",
        "func": "//<трекер<\n    let track = flow.get(\"track\");\n    let start_node_time = new Date().getTime();\n    let steptitle = node.name;\n\n    let laststep = track[track.length-1];\n    let last_node_end_time = laststep.end_node_time;\n//>трекер>\nnode.warn(\"filled order \"+msg.bot.currentfloor[14]);      \nlet tempfin = Number(Number(msg.bot.finance.baseinorders) - Number(msg.bot.currentfloor[14])*Number(msg.bot.currentfloor[3]));\n\nlet tempfin2 = Number(Number(msg.bot.finance.quotanal) + Number(msg.bot.currentfloor[14]));\n\nmsg.bot.finance.baseinorders = tempfin.toFixed(msg.bot.settings.digitprice);\nmsg.bot.finance.quotanal = tempfin2.toFixed(msg.bot.settings.digitq);\n\nif (msg.bot.finance.baseinorders == -0) {msg.bot.finance.baseinorders = 0;}\nif (msg.bot.finance.basenal == -0) {msg.bot.finance.basenal = 0;}\n\nlet currentfloor = msg.bot.currentfloor;\ncurrentfloor[7] = 2;\n\n\nmsg.bot.floors[currentfloor[0]-1] = currentfloor;\n\nlet data = \"Ордер на покупку исполнен, ID - \"+msg.bot.currentfloor[8];\nconst tilog = global.get('tilog')(msg.bot.settings.botname,data);\ntilog;\n\n//>трекер>\n    let end_node_time = new Date().getTime();\n    let duration = end_node_time - start_node_time;\n    let duration_step = end_node_time - last_node_end_time;\n    track.push({\n        \"steptitle\": steptitle,\n        \"start_node_time\": start_node_time,\n        \"end_node_time\": end_node_time,\n        \"duration_node\": duration,\n        \"duration_step\": duration_step\n    });\n    flow.set(\"track\", track);\n//>трекер>\nnode.status({fill: \"green\", shape: \"ring\", text: start_node_time});\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 2400,
        "y": 2540,
        "wires": [
            [
                "57e6a67e.1f8ae8"
            ]
        ]
    },
    {
        "id": "57e6a67e.1f8ae8",
        "type": "function",
        "z": "5df15275.2888ec",
        "name": "update bot floors, finance",
        "func": "//<трекер<\n    let track = flow.get(\"track\");\n    let start_node_time = new Date().getTime();\n    let steptitle = node.name;\n\n    let laststep = track[track.length-1];\n    let last_node_end_time = laststep.end_node_time;\n//>трекер>\nlet volname = msg.bot.settings.userid+\"-bots:\"+msg.botname+\":data\";\nlet botdata = {\n    \"finance\":JSON.stringify(msg.bot.finance),\n    \"floors\":JSON.stringify(msg.bot.floors),\n    \"sales\":JSON.stringify(msg.bot.sales)\n    \n};\n\nconst upd = global.get('setbot_data')(volname, botdata);\n\nupd.then(upd => {\n    \n    msg.payload = upd;\n    \n    //>трекер>\n        let end_node_time = new Date().getTime();\n        let duration = end_node_time - start_node_time;\n        let duration_step = end_node_time - last_node_end_time;\n        track.push({\n            \"steptitle\": steptitle,\n            \"start_node_time\": start_node_time,\n            \"end_node_time\": end_node_time,\n            \"duration_node\": duration,\n            \"duration_step\": duration_step\n        });\n        flow.set(\"track\", track);\n    //>трекер>\n    node.status({fill: \"green\", shape: \"ring\", text: start_node_time});\n    \n    node.send(msg);\n\n}).catch(error => {\n    \n    //>трекер>\n        let end_node_time = new Date().getTime();\n        let duration = end_node_time - start_node_time;\n        let duration_step = end_node_time - last_node_end_time;\n        track.push({\n            \"steptitle\": steptitle+\"-faile\",\n            \"start_node_time\": start_node_time,\n            \"end_node_time\": end_node_time,\n            \"duration\": duration,\n            \"duration_step\": duration_step,\n            \"error\": error\n        });\n        flow.set(\"track\", track);\n    //>трекер>\n    node.status({fill: \"red\", shape: \"ring\", text: \"error\"});\n    node.error(error);\n});",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 2650,
        "y": 2540,
        "wires": [
            [
                "95441edd.0d929"
            ]
        ],
        "icon": "font-awesome/fa-bolt"
    },
    {
        "id": "95441edd.0d929",
        "type": "link out",
        "z": "5df15275.2888ec",
        "name": "",
        "links": [
            "e34a5b68.726ec8",
            "e3e1e22a.f958b"
        ],
        "x": 2815,
        "y": 2540,
        "wires": []
    },
    {
        "id": "b603cdb8.70c35",
        "type": "function",
        "z": "5df15275.2888ec",
        "name": "change floors, finance ",
        "func": "//<трекер<\n    let track = flow.get(\"track\");\n    let start_node_time = new Date().getTime();\n    let steptitle = node.name;\n\n    let laststep = track[track.length-1];\n    let last_node_end_time = laststep.end_node_time;\n//>трекер>\n node.warn(\"cancel order \"+msg.bot.currentfloor[14]);   \nlet tempfin = Number(Number(msg.bot.finance.baseinorders) - Number(msg.bot.currentfloor[14])*Number(msg.bot.currentfloor[3]));\nlet tempfin2 = Number(Number(msg.bot.finance.basenal) + Number(msg.bot.currentfloor[14])*Number(msg.bot.currentfloor[3]));\n\nmsg.bot.finance.baseinorders = tempfin.toFixed(msg.bot.settings.digitprice);\nmsg.bot.finance.basenal = tempfin2.toFixed(msg.bot.settings.digitprice);\n\nif (msg.bot.finance.baseinorders == -0) {msg.bot.finance.baseinorders = 0;}\nif (msg.bot.finance.basenal == -0) {msg.bot.finance.basenal = 0;}\n\nlet botname = msg.bot.settings.botname;\n\nlet data = \"Ордер на покупку отменен, ID - \"+msg.bot.currentfloor[8];\nconst tilog = global.get('tilog')(botname,data);\ntilog;\n\nlet currentfloor = msg.bot.currentfloor;\ncurrentfloor[7] = 0;\ncurrentfloor[8] = 0;\ncurrentfloor[14] = 0;\n\nmsg.bot.floors[currentfloor[0]-1] = currentfloor;\n\n    //>трекер>\n        let end_node_time = new Date().getTime();\n        let duration = end_node_time - start_node_time;\n        let duration_step = end_node_time - last_node_end_time;\n        track.push({\n            \"steptitle\": steptitle,\n            \"start_node_time\": start_node_time,\n            \"end_node_time\": end_node_time,\n            \"duration_node\": duration,\n            \"duration_step\": duration_step\n        });\n        flow.set(\"track\", track);\n    //>трекер>\nnode.status({fill: \"green\", shape: \"ring\", text: start_node_time});\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 2420,
        "y": 2000,
        "wires": [
            [
                "1ff82a47.746756"
            ]
        ]
    },
    {
        "id": "2eb7dc6.f57b024",
        "type": "comment",
        "z": "5df15275.2888ec",
        "name": "NEW",
        "info": "",
        "x": 2250,
        "y": 1940,
        "wires": []
    },
    {
        "id": "865095a3.2a59f8",
        "type": "switch",
        "z": "5df15275.2888ec",
        "name": "статус ордера",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "NEW",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "PARTIALLY_FILLED",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "CANCELED",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "FILLED",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "REJECTED",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "EXPIRED",
                "vt": "str"
            },
            {
                "t": "null"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 7,
        "x": 1960,
        "y": 2040,
        "wires": [
            [
                "753a36de.b9e428"
            ],
            [
                "753a36de.b9e428"
            ],
            [
                "b603cdb8.70c35"
            ],
            [
                "a488d768.190e48",
                "a3a3ff62.74a51"
            ],
            [
                "509b2051.1f238"
            ],
            [
                "509b2051.1f238"
            ],
            [
                "753a36de.b9e428"
            ]
        ]
    },
    {
        "id": "b55cd864.198818",
        "type": "function",
        "z": "5df15275.2888ec",
        "name": "prepare get order status",
        "func": "//<трекер<\n    let track = flow.get(\"track\");\n    let start_node_time = new Date().getTime();\n    let steptitle = node.name;\n\n    let laststep = track[track.length-1];\n    let last_node_end_time = laststep.end_node_time;\n//>трекер>\nlet orderid = msg.bot.currentfloor[8];\n\nmsg.moneta = msg.bot.settings.moneta;\nmsg.orderid = orderid;\n\n//msg.payload = [];\n//msg.topic = \"orders-status-\" + msg.bot.settings.userid + \":\" + moneta + \":\" + orderid;\n\n    //>трекер>\n        let end_node_time = new Date().getTime();\n        let duration = end_node_time - start_node_time;\n        let duration_step = end_node_time - last_node_end_time;\n        track.push({\n            \"steptitle\": steptitle,\n            \"start_node_time\": start_node_time,\n            \"end_node_time\": end_node_time,\n            \"duration_node\": duration,\n            \"duration_step\": duration_step\n        });\n        flow.set(\"track\", track);\n    //>трекер>\nnode.status({fill: \"green\", shape: \"ring\", text: orderid});\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 1530,
        "y": 2040,
        "wires": [
            [
                "3ddc1813.cf49b8"
            ]
        ],
        "inputLabels": [
            "orderid"
        ],
        "outputLabels": [
            "status"
        ],
        "icon": "node-red-contrib-binance/binance.png"
    },
    {
        "id": "6754e914.7614e8",
        "type": "link out",
        "z": "5df15275.2888ec",
        "name": "",
        "links": [
            "e34a5b68.726ec8",
            "e3e1e22a.f958b"
        ],
        "x": 2835,
        "y": 2000,
        "wires": []
    },
    {
        "id": "1ff82a47.746756",
        "type": "function",
        "z": "5df15275.2888ec",
        "name": "update bot floors, finance",
        "func": "//<трекер<\n    let track = flow.get(\"track\");\n    let start_node_time = new Date().getTime();\n    let steptitle = node.name;\n\n    let laststep = track[track.length-1];\n    let last_node_end_time = laststep.end_node_time;\n//>трекер>\nlet volname = msg.bot.settings.userid+\"-bots:\"+msg.botname+\":data\";\nlet botdata = {\n    \"finance\":JSON.stringify(msg.bot.finance),\n    \"floors\":JSON.stringify(msg.bot.floors),\n    \"sales\":JSON.stringify(msg.bot.sales)\n    \n};\n\nconst upd = global.get('setbot_data')(volname, botdata);\n\nupd.then(upd => {\n    \n    msg.payload = upd;\n    \n    //>трекер>\n        let end_node_time = new Date().getTime();\n        let duration = end_node_time - start_node_time;\n        let duration_step = end_node_time - last_node_end_time;\n        track.push({\n            \"steptitle\": steptitle,\n            \"start_node_time\": start_node_time,\n            \"end_node_time\": end_node_time,\n            \"duration_node\": duration,\n            \"duration_step\": duration_step\n        });\n        flow.set(\"track\", track);\n    //>трекер>\nnode.status({fill: \"green\", shape: \"ring\", text: start_node_time});\n    \n    node.send(msg);\n\n}).catch(error => {\n    \n    //>трекер>\n        let end_node_time = new Date().getTime();\n        let duration = end_node_time - start_node_time;\n        let duration_step = end_node_time - last_node_end_time;\n        track.push({\n            \"steptitle\": steptitle+\"-faile\",\n            \"start_node_time\": start_node_time,\n            \"end_node_time\": end_node_time,\n            \"duration\": duration,\n            \"duration_step\": duration_step,\n            \"error\": error\n        });\n        flow.set(\"track\", track);\n    //>трекер>\n    node.status({fill: \"red\", shape: \"ring\", text: \"error\"});\n    node.error(error);\n});",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 2670,
        "y": 2000,
        "wires": [
            [
                "6754e914.7614e8"
            ]
        ],
        "icon": "font-awesome/fa-bolt"
    },
    {
        "id": "509b2051.1f238",
        "type": "debug",
        "z": "5df15275.2888ec",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 2210,
        "y": 2140,
        "wires": []
    },
    {
        "id": "b2c855fb.a42838",
        "type": "comment",
        "z": "5df15275.2888ec",
        "name": "FILLED",
        "info": "",
        "x": 2210,
        "y": 2060,
        "wires": []
    },
    {
        "id": "a59e428f.f4ee",
        "type": "comment",
        "z": "5df15275.2888ec",
        "name": "CANCELED",
        "info": "",
        "x": 2230,
        "y": 2000,
        "wires": []
    },
    {
        "id": "a488d768.190e48",
        "type": "function",
        "z": "5df15275.2888ec",
        "name": "change floors, finance ",
        "func": "//<трекер<\n    let track = flow.get(\"track\");\n    let start_node_time = new Date().getTime();\n    let steptitle = node.name;\n\n    let laststep = track[track.length-1];\n    let last_node_end_time = laststep.end_node_time;\n//>трекер>\n node.warn(\"filled order \"+msg.bot.currentfloor[14]);     \nlet tempfin = Number(Number(msg.bot.finance.baseinorders) - Number(msg.bot.currentfloor[14])*Number(msg.bot.currentfloor[3]));\n\nlet tempfin2 = Number(Number(msg.bot.finance.quotanal) + Number(msg.bot.currentfloor[14]));\n\nmsg.bot.finance.baseinorders = tempfin.toFixed(msg.bot.settings.digitprice);\nmsg.bot.finance.quotanal = tempfin2.toFixed(msg.bot.settings.digitq);\n\nif (msg.bot.finance.baseinorders == -0) {msg.bot.finance.baseinorders = 0;}\nif (msg.bot.finance.basenal == -0) {msg.bot.finance.basenal = 0;}\n\nlet currentfloor = msg.bot.currentfloor;\ncurrentfloor[7] = 2;\ncurrentfloor[10] =  Number(msg.bot.currentfloor[14])*Number(msg.bot.currentfloor[3]);\n\n\nmsg.bot.floors[currentfloor[0]-1] = currentfloor;\n\nlet data = \"Ордер на покупку исполнен, ID - \"+msg.bot.currentfloor[8];\nconst tilog = global.get('tilog')(msg.bot.settings.botname,data);\ntilog;\n\n//>трекер>\n    let end_node_time = new Date().getTime();\n    let duration = end_node_time - start_node_time;\n    let duration_step = end_node_time - last_node_end_time;\n    track.push({\n        \"steptitle\": steptitle,\n        \"start_node_time\": start_node_time,\n        \"end_node_time\": end_node_time,\n        \"duration_node\": duration,\n        \"duration_step\": duration_step\n    });\n    flow.set(\"track\", track);\n//>трекер>\nnode.status({fill: \"green\", shape: \"ring\", text: start_node_time});\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 2420,
        "y": 2080,
        "wires": [
            [
                "43fe1086.8d0d8"
            ]
        ]
    },
    {
        "id": "43fe1086.8d0d8",
        "type": "function",
        "z": "5df15275.2888ec",
        "name": "update bot floors, finance",
        "func": "//<трекер<\n    let track = flow.get(\"track\");\n    let start_node_time = new Date().getTime();\n    let steptitle = node.name;\n\n    let laststep = track[track.length-1];\n    let last_node_end_time = laststep.end_node_time;\n//>трекер>\nlet volname = msg.bot.settings.userid+\"-bots:\"+msg.botname+\":data\";\nlet botdata = {\n    \"finance\":JSON.stringify(msg.bot.finance),\n    \"floors\":JSON.stringify(msg.bot.floors),\n    \"sales\":JSON.stringify(msg.bot.sales)\n    \n};\n\nconst upd = global.get('setbot_data')(volname, botdata);\n\nupd.then(upd => {\n    \n    msg.payload = upd;\n    \n    //>трекер>\n        let end_node_time = new Date().getTime();\n        let duration = end_node_time - start_node_time;\n        let duration_step = end_node_time - last_node_end_time;\n        track.push({\n            \"steptitle\": steptitle,\n            \"start_node_time\": start_node_time,\n            \"end_node_time\": end_node_time,\n            \"duration_node\": duration,\n            \"duration_step\": duration_step\n        });\n        flow.set(\"track\", track);\n    //>трекер>\nnode.status({fill: \"green\", shape: \"ring\", text: start_node_time});\n    \n    node.send(msg);\n\n}).catch(error => {\n    \n    //>трекер>\n        let end_node_time = new Date().getTime();\n        let duration = end_node_time - start_node_time;\n        let duration_step = end_node_time - last_node_end_time;\n        track.push({\n            \"steptitle\": steptitle+\"-faile\",\n            \"start_node_time\": start_node_time,\n            \"end_node_time\": end_node_time,\n            \"duration\": duration,\n            \"duration_step\": duration_step,\n            \"error\": error\n        });\n        flow.set(\"track\", track);\n    //>трекер>\n    node.status({fill: \"red\", shape: \"ring\", text: \"error\"});\n    node.error(error);\n});",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 2670,
        "y": 2080,
        "wires": [
            [
                "ddabea75.dd1088"
            ]
        ],
        "icon": "font-awesome/fa-bolt"
    },
    {
        "id": "ddabea75.dd1088",
        "type": "link out",
        "z": "5df15275.2888ec",
        "name": "",
        "links": [
            "e34a5b68.726ec8",
            "e3e1e22a.f958b"
        ],
        "x": 2835,
        "y": 2080,
        "wires": []
    },
    {
        "id": "753a36de.b9e428",
        "type": "link out",
        "z": "5df15275.2888ec",
        "name": "",
        "links": [
            "e34a5b68.726ec8",
            "e3e1e22a.f958b"
        ],
        "x": 2175,
        "y": 1940,
        "wires": []
    },
    {
        "id": "e8c8331e.e7793",
        "type": "link out",
        "z": "5df15275.2888ec",
        "name": "",
        "links": [
            "e34a5b68.726ec8",
            "e3e1e22a.f958b"
        ],
        "x": 2175,
        "y": 2600,
        "wires": []
    },
    {
        "id": "adadc5c1.82cee8",
        "type": "comment",
        "z": "5df15275.2888ec",
        "name": "PARTIALLY_FILLED",
        "info": "",
        "x": 2410,
        "y": 1940,
        "wires": []
    },
    {
        "id": "a5cb775c.f42b28",
        "type": "comment",
        "z": "5df15275.2888ec",
        "name": "null",
        "info": "",
        "x": 2590,
        "y": 1940,
        "wires": []
    },
    {
        "id": "d4b164b1.ec0c48",
        "type": "function",
        "z": "5df15275.2888ec",
        "name": "check price for sale start",
        "func": "if (msg.bot.status.currentprice >= msg.bot.currentfloor[5]){\n    msg.bot.currentfloor[7] = 3;\n    \n\n    return [null,msg];\n    \n} else {\n    return [msg,null];\n}",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 1410,
        "y": 2700,
        "wires": [
            [
                "22a97a04.318866",
                "35d0c017.d03ff",
                "85951e38.64d9f"
            ],
            [
                "adf2a298.2e768"
            ]
        ]
    },
    {
        "id": "22a97a04.318866",
        "type": "link out",
        "z": "5df15275.2888ec",
        "name": "",
        "links": [
            "e34a5b68.726ec8",
            "e3e1e22a.f958b"
        ],
        "x": 1595,
        "y": 2660,
        "wires": []
    },
    {
        "id": "4a02d190.e7d87",
        "type": "function",
        "z": "5df15275.2888ec",
        "name": "setbot_status",
        "func": "//<трекер<\n    let track = flow.get(\"track\");\n    let start_node_time = new Date().getTime();\n    \n    let steptitle = node.name;\n\n    let laststep = track[track.length-1];\n    let last_node_end_time = laststep.end_node_time;\n//>трекер>\nmsg.topic = msg.bot.settings.userid+\"-bots:\"+msg.bot.settings.botname+\":status\";\nmsg.bot.status.updated = new Date().getTime();\nmsg.payload = JSON.stringify(msg.bot.status);\nconst upd = global.get('setbot_status')(msg.topic, msg.payload);\n\n\nupd.then(upd => {\n\n    //>трекер>\n        let end_node_time = new Date().getTime();\n        let duration = end_node_time - start_node_time;\n        let duration_step = end_node_time - last_node_end_time;\n        track.push({\n            \"steptitle\": steptitle,\n            \"start_node_time\": start_node_time,\n            \"end_node_time\": end_node_time,\n            \"duration_node\": duration,\n            \"duration_step\": duration_step\n        });\n        flow.set(\"track\", track);\n    //>трекер>\n    node.status({fill:\"green\",shape:\"dot\"});\n    node.send(msg);\n\n}).catch(error => {\n\n    //>трекер>\n        let end_node_time = new Date().getTime();\n        let duration = end_node_time - start_node_time;\n        let duration_step = end_node_time - last_node_end_time;\n        track.push({\n            \"steptitle\": steptitle+\"-faile\",\n            \"start_node_time\": start_node_time,\n            \"end_node_time\": end_node_time,\n            \"duration\": duration,\n            \"duration_step\": duration_step,\n            \"error\": error\n        });\n        flow.set(\"track\", track);\n    //>трекер>\n    node.status({fill:\"red\",shape:\"dot\"}); \n    node.error(error);\n});",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 480,
        "y": 2120,
        "wires": [
            [
                "91ce6bcb.4660c8"
            ]
        ],
        "icon": "font-awesome/fa-bolt"
    },
    {
        "id": "3eef8d0b.468082",
        "type": "function",
        "z": "5df15275.2888ec",
        "g": "c625f482.ef7058",
        "name": "setbot_ttp()",
        "func": "",
        "outputs": 1,
        "noerr": 0,
        "initialize": "\nlet setbot_ttp = function (botname = msg.topic, ttp = msg.payload) {\n    \n    let promise = new Promise((resolve, reject) => {\n        msg.resolve = resolve;\n        msg.reject = reject;\n    });\n    \n\n    msg.topic = botname;\n    msg.payload = ttp;\n\n    node.send(Object.assign({}, msg));\n    \n    return promise;\n};\n\nglobal.set('setbot_ttp', setbot_ttp);",
        "finalize": "",
        "x": 1110,
        "y": 440,
        "wires": [
            [
                "e0daded4.e68d9"
            ]
        ]
    },
    {
        "id": "5799f4ed.f46bec",
        "type": "inject",
        "z": "5df15275.2888ec",
        "g": "c625f482.ef7058",
        "name": "botname, ttp",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "x": 910,
        "y": 440,
        "wires": [
            [
                "3eef8d0b.468082"
            ]
        ]
    },
    {
        "id": "dd20db68.d00b68",
        "type": "function",
        "z": "5df15275.2888ec",
        "g": "c625f482.ef7058",
        "name": "resolve",
        "func": "msg.resolve(msg.payload);\n\n// reject\n// setTimeout(function () {\n//     msg.reject({message: 'Could not request joke'});\n// }, 2000);",
        "outputs": "0",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 1500,
        "y": 440,
        "wires": []
    },
    {
        "id": "e0daded4.e68d9",
        "type": "redis-command",
        "z": "5df15275.2888ec",
        "g": "c625f482.ef7058",
        "server": "f120eab2.0a60a8",
        "command": "getset",
        "name": "",
        "topic": "",
        "params": "[]",
        "paramsType": "json",
        "payloadType": "json",
        "block": false,
        "x": 1310,
        "y": 440,
        "wires": [
            [
                "dd20db68.d00b68"
            ]
        ]
    },
    {
        "id": "c51d3999.c7a808",
        "type": "link out",
        "z": "5df15275.2888ec",
        "name": "",
        "links": [
            "e34a5b68.726ec8",
            "e3e1e22a.f958b"
        ],
        "x": 1075,
        "y": 2700,
        "wires": []
    },
    {
        "id": "3ca95c2c.4bc654",
        "type": "function",
        "z": "5df15275.2888ec",
        "name": "tester",
        "func": "//<трекер<\n    let track = flow.get(\"track\");\n    let start_node_time = new Date().getTime();\n    let steptitle = node.name;\n\n    let laststep = track[track.length-1];\n    let last_node_end_time = laststep.end_node_time;\n//>трекер>\n\n\n    //>трекер>\n        let end_node_time = new Date().getTime();\n        let duration = end_node_time - start_node_time;\n        let duration_step = end_node_time - last_node_end_time;\n        track.push({\n            \"steptitle\": steptitle,\n            \"start_node_time\": start_node_time,\n            \"end_node_time\": end_node_time,\n            \"duration_node\": duration,\n            \"duration_step\": duration_step\n        });\n        flow.set(\"track\", track);\n    //>трекер>\nnode.status({fill: \"green\", shape: \"ring\", text: last_node_end_time});\n    \n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 1090,
        "y": 2620,
        "wires": [
            []
        ]
    },
    {
        "id": "8b633602.aac0d8",
        "type": "function",
        "z": "5df15275.2888ec",
        "name": "tester",
        "func": "//<трекер<\n    let track = flow.get(\"track\");\n    let start_node_time = new Date().getTime();\n    let steptitle = node.name;\n\n    let laststep = track[track.length-1];\n    let last_node_end_time = laststep.end_node_time;\n//>трекер>\n\n\n    //>трекер>\n        let end_node_time = new Date().getTime();\n        let duration = end_node_time - start_node_time;\n        let duration_step = end_node_time - last_node_end_time;\n        track.push({\n            \"steptitle\": steptitle,\n            \"start_node_time\": start_node_time,\n            \"end_node_time\": end_node_time,\n            \"duration_node\": duration,\n            \"duration_step\": duration_step\n        });\n        flow.set(\"track\", track);\n    //>трекер>\nnode.status({fill: \"green\", shape: \"ring\", text: last_node_end_time});\n    \n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 1150,
        "y": 2380,
        "wires": [
            []
        ]
    },
    {
        "id": "35d0c017.d03ff",
        "type": "function",
        "z": "5df15275.2888ec",
        "name": "tester",
        "func": "//<трекер<\n    let track = flow.get(\"track\");\n    let start_node_time = new Date().getTime();\n    let steptitle = node.name;\n\n    let laststep = track[track.length-1];\n    let last_node_end_time = laststep.end_node_time;\n//>трекер>\n\n\n    //>трекер>\n        let end_node_time = new Date().getTime();\n        let duration = end_node_time - start_node_time;\n        let duration_step = end_node_time - last_node_end_time;\n        track.push({\n            \"steptitle\": steptitle,\n            \"start_node_time\": start_node_time,\n            \"end_node_time\": end_node_time,\n            \"duration_node\": duration,\n            \"duration_step\": duration_step\n        });\n        flow.set(\"track\", track);\n    //>трекер>\nnode.status({fill: \"green\", shape: \"ring\", text: last_node_end_time});\n    \n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 1630,
        "y": 2620,
        "wires": [
            []
        ]
    },
    {
        "id": "aa865712.dd6a08",
        "type": "debug",
        "z": "5df15275.2888ec",
        "g": "8fac538c.5d4a48",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1350,
        "y": 1140,
        "wires": []
    },
    {
        "id": "3b6f26a5.932aba",
        "type": "debug",
        "z": "5df15275.2888ec",
        "g": "8fac538c.5d4a48",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1210,
        "y": 1140,
        "wires": []
    },
    {
        "id": "cefaef13.fdbe38",
        "type": "debug",
        "z": "5df15275.2888ec",
        "g": "9234522a.3a33c",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 4470,
        "y": 1380,
        "wires": []
    },
    {
        "id": "8cb56aa3.a4d61",
        "type": "function",
        "z": "5df15275.2888ec",
        "name": "tester",
        "func": "//<трекер<\n    let track = flow.get(\"track\");\n    let start_node_time = new Date().getTime();\n    let steptitle = node.name;\n\n    let laststep = track[track.length-1];\n    let last_node_end_time = laststep.end_node_time;\n//>трекер>\n\n\n    //>трекер>\n        let end_node_time = new Date().getTime();\n        let duration = end_node_time - start_node_time;\n        let duration_step = end_node_time - last_node_end_time;\n        track.push({\n            \"steptitle\": steptitle,\n            \"start_node_time\": start_node_time,\n            \"end_node_time\": end_node_time,\n            \"duration_node\": duration,\n            \"duration_step\": duration_step\n        });\n        flow.set(\"track\", track);\n    //>трекер>\nnode.status({fill: \"green\", shape: \"ring\", text: last_node_end_time});\n    \n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 1110,
        "y": 2000,
        "wires": [
            []
        ]
    },
    {
        "id": "294d5d95.011cc2",
        "type": "trigger",
        "z": "5df15275.2888ec",
        "name": "",
        "op1": "1",
        "op2": "0",
        "op1type": "str",
        "op2type": "str",
        "duration": "-200",
        "extend": false,
        "overrideDelay": false,
        "units": "ms",
        "reset": "",
        "bytopic": "all",
        "topic": "topic",
        "outputs": 1,
        "x": 740,
        "y": 3240,
        "wires": [
            [
                "62651732.3226"
            ]
        ]
    },
    {
        "id": "c36ca6a8.9f843",
        "type": "delay",
        "z": "5df15275.2888ec",
        "name": "",
        "pauseType": "delay",
        "timeout": "10",
        "timeoutUnits": "milliseconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "x": 530,
        "y": 3240,
        "wires": [
            [
                "294d5d95.011cc2"
            ]
        ]
    },
    {
        "id": "6fc4c6e7.21c5f",
        "type": "function",
        "z": "5df15275.2888ec",
        "name": "stop",
        "func": "msg.reset = true;\nmsg.payload = \"\";\nmsg.topic = \"\";\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 510,
        "y": 3300,
        "wires": [
            [
                "294d5d95.011cc2",
                "52d3da5.b1dbaa4"
            ]
        ]
    },
    {
        "id": "edfd9789.f09838",
        "type": "redis-in",
        "z": "5df15275.2888ec",
        "server": "f120eab2.0a60a8",
        "command": "subscribe",
        "name": "",
        "topic": "ttp-stop",
        "obj": true,
        "timeout": 0,
        "x": 170,
        "y": 3300,
        "wires": [
            [
                "6fc4c6e7.21c5f",
                "5f8da53c.1cd85c"
            ]
        ]
    },
    {
        "id": "30acf010.0f83d8",
        "type": "comment",
        "z": "5df15275.2888ec",
        "name": "Семафор = \"Занято\"",
        "info": "",
        "x": 1360,
        "y": 3160,
        "wires": []
    },
    {
        "id": "d8ce7d1.15ff7",
        "type": "function",
        "z": "5df15275.2888ec",
        "name": "busy === false ",
        "func": "\n\nif (msg.bot.ttp.ttpbusy == false) {\n\n    node.status({fill:\"green\",shape:\"dot\"});\n    \n    return [msg, null];\n}\n\nelse {\n\n    let id = msg.bot.settings.botname+\"-ttp\";\n    msg.payload = [];\n\n    var count = flow.get(id) || 0;\n    count += 1;\n\n\n    node.status({fill:\"blue\",shape:\"dot\"});\n\n\n    if (count > 10) {\n        \n        \n        msg.topic = msg.bot.settings.userid+\"-bots:\"+msg.bot.settings.botname+\":ttp\";\n        msg.bot.ttp.ttpbusy = false;\n        msg.payload = JSON.stringify(msg.bot.ttp);\n        const upd = global.get('setbot_ttp')(msg.topic, msg.payload);\n        \n        \n        upd.then(upd => {\n        \n            flow.set(id, 0);\n           \n            node.warn(\"reset busy ttp:\" + id);\n            node.status({fill:\"green\",shape:\"dot\"});\n            node.send(msg);\n        \n        }).catch(error => {\n        \n            node.status({fill:\"red\",shape:\"dot\"}); \n            node.error(error);\n        });\n\n    }\n    flow.set(id, count);\n    return [null, msg];\n}\n\n\n\n\n\n",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 1140,
        "y": 3240,
        "wires": [
            [
                "4c9e1e77.0c26f8",
                "7aa3252e.c30aec"
            ],
            [
                "e98fc2d8.a9c1d8"
            ]
        ],
        "icon": "font-awesome/fa-bolt"
    },
    {
        "id": "4c9e1e77.0c26f8",
        "type": "debug",
        "z": "5df15275.2888ec",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1370,
        "y": 3200,
        "wires": []
    },
    {
        "id": "e98fc2d8.a9c1d8",
        "type": "debug",
        "z": "5df15275.2888ec",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1230,
        "y": 3300,
        "wires": []
    },
    {
        "id": "5175b9b9.500208",
        "type": "redis-in",
        "z": "5df15275.2888ec",
        "server": "f120eab2.0a60a8",
        "command": "subscribe",
        "name": "",
        "topic": "ttp-pilot",
        "obj": true,
        "timeout": 0,
        "x": 170,
        "y": 3240,
        "wires": [
            [
                "f1e8ffca.319c1"
            ]
        ]
    },
    {
        "id": "f1e8ffca.319c1",
        "type": "function",
        "z": "5df15275.2888ec",
        "name": "start ttp",
        "func": "//<трекер<\n    ////>только для стартовой ноды>\n        var track = [];\n        let start_track_time = new Date().getTime();\n        let start_node_time = start_track_time;\n        let steptitle = node.name;\n    ////>только для стартовой ноды>\n//>трекер>\n\n\n\nmsg.bot=msg.payload.bot\nmsg.payload = [];\n\n\n//>трекер>\n    let end_node_time = new Date().getTime();\n    let duration = end_node_time - start_node_time;\n    track.push({\n        \"steptitle\": steptitle,\n        \"start_node_time\": start_node_time,\n        \"end_node_time\": end_node_time,\n        \"duration_node\": duration,\n        \"duration_step\": 0\n    });\n\n    flow.set(\"track_ttp\", track);\n//>трекер>\nnode.status({ fill: \"green\", shape: \"ring\", text: duration });\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 320,
        "y": 3240,
        "wires": [
            [
                "c36ca6a8.9f843",
                "8e8783eb.9932a8"
            ]
        ]
    },
    {
        "id": "d27e4307.e0bf58",
        "type": "function",
        "z": "5df15275.2888ec",
        "name": "",
        "func": "let bot = {\"settings\":{\"botname\":\"BNBUSDT-1623875864\",\"isrunning\":false,\"handyzapretnazakup\":false,\"comment\":null,\"quotacoin\":\"BNB\",\"basecoin\":\"USDT\",\"moneta\":\"BNBUSDT\",\"digitq\":\"4\",\"digitprice\":\"2\",\"minprice\":\"300\",\"maxprice\":\"400\",\"profitproc\":\"0.3\",\"ordersize\":\"12\",\"ofsetbottom\":\"0.05\",\"ofsettop\":\"0.05\",\"ma1\":3,\"ma2\":30,\"maxpriceforzakup\":null,\"minpriceforzakup\":null,\"userid\":\"d3fmoh2rVoVNgIcpLTFZBE0jHnI2\"},\"status\":{\"currentprice\":\"352.61000000\",\"lastprice\":-1,\"currentfloor\":30,\"lastfloor\":-1,\"sr_ma_big\":350.94441666666677,\"sr_ma_small\":352.2633333333333,\"rezhim\":\"МА - закуп разрешен\",\"updated\":1623879597136},\"zapret_na_zakup\":false,\"floors\":[[1,300,301.65,300.15,300.59999999999997,300.74999999999994,301.5,0,0,0,0,0,0,0,0],[2,301.65,303.30907499999995,301.800825,302.25329999999997,302.40412499999996,303.15824999999995,0,0,0,0,0,0,0,0],[3,303.30907499999995,304.9772749124999,303.46072953749996,303.91569315,304.0673476875,304.82562037499997,0,0,0,0,0,0,0,0],[4,304.9772749124999,306.65464992451865,305.1297635499562,305.58722946232496,305.7397180997812,306.50216128706245,0,0,0,0,0,0,0,0],[5,306.65464992451865,308.3412504991035,306.8079772494809,307.2679592243677,307.42128654933,308.18792317414125,0,0,0,0,0,0,0,0],[6,308.3412504991035,310.0371273768486,308.4954211243531,308.9579330001017,309.11210362535127,309.882956751599,0,0,0,0,0,0,0,0],[7,310.0371273768486,311.7423315774213,310.19214594053705,310.65720163160233,310.81222019529076,311.58731301373285,0,0,0,0,0,0,0,0],[8,311.7423315774213,313.4569144010971,311.89820274321,312.3658162405761,312.52168740636483,313.3010432353084,0,0,0,0,0,0,0,0],[9,313.4569144010971,315.18092743030314,313.6136428582976,314.08382822989927,314.2405566870998,315.02419897310256,0,0,0,0,0,0,0,0],[10,315.18092743030314,316.9144225311698,315.3385178940183,315.81128928516375,315.9688797488789,316.7568320674547,0,0,0,0,0,0,0,0],[11,316.9144225311698,318.65745185509127,317.0728797424354,317.5482513762322,317.7067085874978,318.49899464382565,0,0,0,0,0,0,0,0],[12,318.65745185509127,320.4100678402943,318.8167805810188,319.2947667588014,319.45409548472895,320.2507391143667,0,0,0,0,0,0,0,0],[13,320.4100678402943,322.1723232134159,320.5702728742144,321.0508879759749,321.211093009895,322.01211817949576,0,0,0,0,0,0,0,0],[14,322.1723232134159,323.9442709910897,322.3334093750226,322.8166678598427,322.9777540214494,323.783184829483,0,0,0,0,0,0,0,0],[15,323.9442709910897,325.7259644815407,324.10624312658524,324.5921595330719,324.7541316685674,325.56399234604515,0,0,0,0,0,0,0,0],[16,325.7259644815407,327.5174572861892,325.88882746378147,326.37741641050377,326.54027939274454,327.3545943039484,0,0,0,0,0,0,0,0],[17,327.5174572861892,329.31880330126324,327.6812160148323,328.17249220076155,328.3362509294046,329.1550445726201,0,0,0,0,0,0,0,0],[18,329.31880330126324,331.13005671942017,329.48346270291387,329.97744090786574,330.14210030951637,330.96539731776954,0,0,0,0,0,0,0,0],[19,331.13005671942017,332.95127203137696,331.2956217477799,331.792316832859,331.9578818612187,332.78570700301725,0,0,0,0,0,0,0,0],[20,332.95127203137696,334.7825040275495,333.1177476673926,333.61717457543966,333.7836502114553,334.6160283915338,0,0,0,0,0,0,0,0],[21,334.7825040275495,336.62380779970107,334.9498952795633,335.4520690356046,335.6194602876184,336.45641654768724,0,0,0,0,0,0,0,0],[22,336.62380779970107,338.4752387425994,336.7921197036009,337.29705541530046,337.4653673192003,338.30692683869955,0,0,0,0,0,0,0,0],[23,338.4752387425994,340.3368525556837,338.6444763619707,339.1521892200846,339.3214268394559,340.1676149363124,0,0,0,0,0,0,0,0],[24,340.3368525556837,342.20870524474,340.50702098196155,341.0175262607951,341.1876946870729,342.03853681846215,0,0,0,0,0,0,0,0],[25,342.20870524474,344.09085312358604,342.37980959736234,342.89312265522943,343.0642270078518,343.9197487709637,0,0,0,0,0,0,0,0],[26,344.09085312358604,345.9833528157658,344.26289855014784,344.7790348298332,344.951080256395,345.811307389204,0,0,0,0,0,0,0,0],[27,345.9833528157658,347.8862612562525,346.1563444921737,346.67531952139734,346.84831119780523,347.7132695798446,0,0,0,0,0,0,0,0],[28,347.8862612562525,349.7996356931619,348.0602043868806,348.582033778765,348.7559769093931,349.62569256253374,0,0,0,0,0,0,0,0],[29,349.7996356931619,351.7235336894743,349.9745355110085,350.4992349645483,350.6741347823949,351.54863387162777,1,2485867244,0,0,0,0,0,\"0.04100000\"],[30,351.7235336894743,353.65801312476646,351.89939545631904,352.42698075685325,352.602842523698,353.4821513579217,3,2485869227,0,0,0,0,0,\"0.04090000\"],[31,353.65801312476646,355.6031321969527,353.83484213132886,354.365329151016,354.5421581575784,355.4263031903903,0,0,0,0,0,0,0,0],[32,355.6031321969527,357.5589494240359,355.78093376305117,356.3143384613466,356.4921400274451,357.38114785793744,0,0,0,0,0,0,0,0],[33,357.5589494240359,359.52552364586813,357.73772889874795,358.274067322884,358.452846797596,359.3467441711561,0,0,0,0,0,0,0,0],[34,359.52552364586813,361.5029140259204,359.70528640769106,360.24457469315985,360.4243374549828,361.3231512640975,0,0,0,0,0,0,0,0],[35,361.5029140259204,363.491180053063,361.68366548293335,362.22591985397224,362.4066713109852,363.31042859605,0,0,0,0,0,0,0,0],[36,363.491180053063,365.49038154335483,363.6729256430895,364.2181624131691,364.39990800319566,365.3086359533283,0,0,0,0,0,0,0,0],[37,365.49038154335483,367.5005786418433,365.6731267341265,366.22136230644156,366.40410749721326,367.31783345107164,0,0,0,0,0,0,0,0],[38,367.5005786418433,369.5218318243734,367.6843289311642,368.235579799127,368.4193300884479,369.3380815350525,0,0,0,0,0,0,0,0],[39,369.5218318243734,371.5542018994075,369.7065927402856,370.2608754880222,370.4456364039344,371.3694409834953,0,0,0,0,0,0,0,0],[40,371.5542018994075,373.5977500098542,371.73997900035715,372.29731030320625,372.4830874041559,373.4119729089045,0,0,0,0,0,0,0,0],[41,373.5977500098542,375.6525376349084,373.78454888485913,374.3449455098739,374.53174438487883,375.4657387599035,0,0,0,0,0,0,0,0],[42,375.6525376349084,377.71862659190043,375.84036390372586,376.4038427101782,376.59166897899564,377.53080032308293,0,0,0,0,0,0,0,0],[43,377.71862659190043,379.7960790381559,377.9074859051964,378.47406384508423,378.6629231583802,379.60721972485993,0,0,0,0,0,0,0,0],[44,379.7960790381559,381.8849574728657,379.98597707767493,380.55567119623214,380.7455692357512,381.6950594333466,0,0,0,0,0,0,0,0],[45,381.8849574728657,383.9853247389665,382.07589995160214,382.64872738781145,382.83966986654787,383.79438226023,0,0,0,0,0,0,0,0],[46,383.9853247389665,386.0972440250308,384.177317401336,384.7532953884444,384.94528805081393,385.9052513626613,0,0,0,0,0,0,0,0],[47,386.0972440250308,388.22077886716846,386.2902926470433,386.86943851308087,387.06248713509336,388.02773024515596,0,0,0,0,0,0,0,0],[48,388.22077886716846,390.3559931509379,388.41488925660207,388.9972204249028,389.1913308143364,390.16188276150433,0,0,0,0,0,0,0,0],[49,390.3559931509379,392.502951113268,390.55117114751334,391.13670513723974,391.3318831338152,392.30777311669254,0,0,0,0,0,0,0,0],[50,392.502951113268,394.661717344391,392.6992025888246,393.2879570154945,393.4842084910511,394.4654658688343,0,0,0,0,0,0,0,0],[51,394.661717344391,396.83235678978514,394.8590482030632,395.4510407790798,395.648371637752,396.635025931113,0,0,0,0,0,0,0,0],[52,396.83235678978514,399.01493475212897,397.03077296818003,397.6260215033647,397.8244376817596,398.8165185737341,0,0,0,0,0,0,0,0],[53,399.01493475212897,401.2095168932657,399.21444221950503,399.8129646216332,400.0124720890093,401.0100094258896,0,0,0,0,0,0,0,0]],\"finance\":{\"startdepo\":\"120\",\"depo\":\"120\",\"quotanal\":\"0.0000\",\"quotainorders\":\"0.04\",\"basenal\":\"91.26\",\"baseinorders\":\"14.35\",\"profittoday\":0},\"sales\":{\"today\":[],\"days\":[],\"all\":[]},\"currentfloor\":[30,351.7235336894743,353.65801312476646,351.89939545631904,352.42698075685325,352.602842523698,353.4821513579217,3,2485869227,0,0,0,0,0,\"0.04090000\"],\"ttp\":{\"raschstopprice\":0,\"curstop\":0,\"curorderid\":0,\"quantity\":0.0409,\"ttpbusy\":false,\"sold\":false}};\nmsg.payload.bot = bot;\nmsg.bot = bot;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 180,
        "y": 3120,
        "wires": [
            [
                "f1e8ffca.319c1"
            ]
        ]
    },
    {
        "id": "1165917.3c751ef",
        "type": "inject",
        "z": "5df15275.2888ec",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 140,
        "y": 3060,
        "wires": [
            [
                "d27e4307.e0bf58"
            ]
        ]
    },
    {
        "id": "e236519.ebcd2b",
        "type": "inject",
        "z": "5df15275.2888ec",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 500,
        "y": 3400,
        "wires": [
            [
                "6fc4c6e7.21c5f"
            ]
        ]
    },
    {
        "id": "8e8783eb.9932a8",
        "type": "debug",
        "z": "5df15275.2888ec",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 390,
        "y": 3100,
        "wires": []
    },
    {
        "id": "7aa3252e.c30aec",
        "type": "function",
        "z": "5df15275.2888ec",
        "name": "setbot_ttp_busy",
        "func": "\nmsg.topic = msg.bot.settings.userid+\"-bots:\"+msg.bot.settings.botname+\":ttp\";\nmsg.bot.ttp.ttpbusy = true;\nmsg.payload = JSON.stringify(msg.bot.ttp);\nconst upd = global.get('setbot_ttp')(msg.topic, msg.payload);\n\n\nupd.then(upd => {\n\n   \n    node.status({fill:\"green\",shape:\"dot\"});\n    node.send(msg);\n\n}).catch(error => {\n\n    \n    node.status({fill:\"red\",shape:\"dot\"}); \n    node.error(error);\n});",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 1360,
        "y": 3240,
        "wires": [
            [
                "f690c3ac.0028f8"
            ]
        ],
        "icon": "font-awesome/fa-bolt"
    },
    {
        "id": "fa6bf889.5a7bb8",
        "type": "debug",
        "z": "5df15275.2888ec",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 210,
        "y": 3940,
        "wires": []
    },
    {
        "id": "82403975.6e94f8",
        "type": "function",
        "z": "5df15275.2888ec",
        "name": "setbot_ttp_free",
        "func": "\nmsg.topic = msg.bot.settings.userid+\"-bots:\"+msg.bot.settings.botname+\":ttp\";\nmsg.bot.ttp.ttpbusy = false;\nmsg.payload = JSON.stringify(msg.bot.ttp);\nconst upd = global.get('setbot_ttp')(msg.topic, msg.payload);\n\n\nupd.then(upd => {\n\n   \n    node.status({fill:\"green\",shape:\"dot\"});\n    node.send(msg);\n\n}).catch(error => {\n\n    \n    node.status({fill:\"red\",shape:\"dot\"}); \n    node.error(error);\n});",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 1740,
        "y": 3060,
        "wires": [
            []
        ],
        "icon": "font-awesome/fa-bolt"
    },
    {
        "id": "62651732.3226",
        "type": "function",
        "z": "5df15275.2888ec",
        "name": "getbot_ttp",
        "func": "\nconst gb = global.get('getbot_ttp')(msg.bot.settings.botname);\n\ngb.then(gb => {\n    msg.bot.ttp = JSON.parse(gb);\n    \nnode.status({fill: \"green\", shape: \"ring\"});\n\n    node.send(msg);\n\n}).catch(error => {\n    \n    \n    node.status({fill: \"red\", shape: \"ring\", text: \"error\"});\n    node.error(error);\n});",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 950,
        "y": 3240,
        "wires": [
            [
                "d8ce7d1.15ff7",
                "9c1d60bc.9c10a"
            ]
        ]
    },
    {
        "id": "21fd6400.791a5c",
        "type": "function",
        "z": "5df15275.2888ec",
        "name": "getprice",
        "func": "//<трекер<\n    let track = flow.get(\"track\");\n    let start_node_time = new Date().getTime();\n    let steptitle = node.name;\n\n    let laststep = track[track.length-1];\n    let last_node_end_time = laststep.end_node_time;\n//>трекер>\nlet moneta = msg.bot.settings.moneta;\n\nconst gp = global.get('getprice')(moneta);\n\ngp.then(gp => {\n    \n    msg.bot.status.currentprice = gp;\n    \n    //>трекер>\n        let end_node_time = new Date().getTime();\n        let duration = end_node_time - start_node_time;\n        let duration_step = end_node_time - last_node_end_time;\n        track.push({\n            \"steptitle\": steptitle,\n            \"start_node_time\": start_node_time,\n            \"end_node_time\": end_node_time,\n            \"duration_node\": duration,\n            \"duration_step\": duration_step\n        });\n        flow.set(\"track\", track);\n    //>трекер>\n    node.status({fill:\"green\",shape:\"dot\"});\n    node.send(msg);\n\n}).catch(error => {\n    \n    //>трекер>\n        let end_node_time = new Date().getTime();\n        let duration = end_node_time - start_node_time;\n        let duration_step = end_node_time - last_node_end_time;\n        track.push({\n            \"steptitle\": steptitle+\"-faile\",\n            \"start_node_time\": start_node_time,\n            \"end_node_time\": end_node_time,\n            \"duration\": duration,\n            \"duration_step\": duration_step,\n            \"error\": error\n        });\n        flow.set(\"track\", track);\n    //>трекер>\n    node.status({fill:\"red\",shape:\"dot\"});\n    node.error(error);\n});",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 400,
        "y": 3860,
        "wires": [
            [
                "a5b7e74f.3c0f3",
                "d8447c26.bb4dc8"
            ]
        ]
    },
    {
        "id": "a5b7e74f.3c0f3",
        "type": "debug",
        "z": "5df15275.2888ec",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 390,
        "y": 3920,
        "wires": []
    },
    {
        "id": "fc85758d.8d2df",
        "type": "comment",
        "z": "5df15275.2888ec",
        "name": "ситуация",
        "info": "когда stopsell частично заполнился, но потом цена отросла и бот хочет подвинуть ордер дальше вверх. \nПроблема будет если остаток меньше минимума лота.\nСейчас такой ордер мы просто оставляем висеть до заполненности.\nМожно пока в телеграмм о таких случаях стучать, чтобы хозяин вручную разруливал, но по уму надо двигать ордер, на ходу меняя quantity с соответствующей проекцией во floors",
        "x": 2200,
        "y": 3760,
        "wires": []
    },
    {
        "id": "d8447c26.bb4dc8",
        "type": "function",
        "z": "5df15275.2888ec",
        "name": "calculate stop price",
        "func": "\nlet currentprice = Number(msg.bot.status.currentprice);\nmsg.bot.ttp.raschstopprice = Number(Number(currentprice - currentprice / 100 * msg.bot.settings.ofsettop).toFixed(msg.bot.settings.digitprice));\nmsg.bot.ttp.curstop = Number(msg.bot.ttp.curstop || 0);\nmsg.bot.ttp.curorderid = Number(msg.bot.ttp.curorderid);\nmsg.bot.ttp.quantity = Number(msg.bot.ttp.quantity);\n\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 590,
        "y": 3860,
        "wires": [
            [
                "a722e8db.2c325",
                "26027bc2.33c794"
            ]
        ]
    },
    {
        "id": "a722e8db.2c325",
        "type": "switch",
        "z": "5df15275.2888ec",
        "name": "raschstopprice ? curstop",
        "property": "bot.ttp.raschstopprice",
        "propertyType": "msg",
        "rules": [
            {
                "t": "gt",
                "v": "bot.ttp.curstop",
                "vt": "msg"
            },
            {
                "t": "lte",
                "v": "bot.ttp.curstop",
                "vt": "msg"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 830,
        "y": 3860,
        "wires": [
            [
                "f1698912.6340a8",
                "1c171f80.1804b9",
                "8847d1d6.5d69e"
            ],
            [
                "be946091.5d45f8",
                "cd12e545.316a28",
                "3239545c.3e2e34"
            ]
        ]
    },
    {
        "id": "f1698912.6340a8",
        "type": "switch",
        "z": "5df15275.2888ec",
        "name": "order id > 0 ",
        "property": "bot.ttp.curorderid",
        "propertyType": "msg",
        "rules": [
            {
                "t": "gt",
                "v": "0",
                "vt": "num"
            },
            {
                "t": "eq",
                "v": "0",
                "vt": "num"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 1110,
        "y": 3780,
        "wires": [
            [
                "c2d48d0d.bbc81",
                "4287fbb4.86f9e4"
            ],
            [
                "a43159c7.39907",
                "65afe27.430071c"
            ]
        ]
    },
    {
        "id": "be946091.5d45f8",
        "type": "function",
        "z": "5df15275.2888ec",
        "name": "prepare get ttp order status",
        "func": "//<трекер<\n    let track = flow.get(\"track\");\n    let start_node_time = new Date().getTime();\n    let steptitle = node.name;\n\n    let laststep = track[track.length-1];\n    let last_node_end_time = laststep.end_node_time;\n//>трекер>\n\nlet moneta = msg.bot.settings.moneta;\nlet orderid = msg.bot.ttp.curorderid;\n\nmsg.payload = [];\nmsg.topic = \"orders-status-\" + msg.bot.settings.userid + \":\" + moneta + \":\" + orderid;\n\n\n\n    //>трекер>\n        let end_node_time = new Date().getTime();\n        let duration = end_node_time - start_node_time;\n        let duration_step = end_node_time - last_node_end_time;\n        track.push({\n            \"steptitle\": steptitle,\n            \"start_node_time\": start_node_time,\n            \"end_node_time\": end_node_time,\n            \"duration_node\": duration,\n            \"duration_step\": duration_step\n        });\n        flow.set(\"track\", track);\n    //>трекер>\nnode.status({fill: \"green\", shape: \"ring\", text: orderid});\nreturn msg;\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 1160,
        "y": 4140,
        "wires": [
            [
                "d4366464.6e9bb"
            ]
        ],
        "inputLabels": [
            "orderid"
        ],
        "outputLabels": [
            "status"
        ],
        "icon": "node-red-contrib-binance/binance.png"
    },
    {
        "id": "d4366464.6e9bb",
        "type": "redis-command",
        "z": "5df15275.2888ec",
        "server": "f120eab2.0a60a8",
        "command": "GET",
        "name": "get order status",
        "topic": "msg.payload",
        "params": "[]",
        "paramsType": "json",
        "payloadType": "json",
        "block": false,
        "x": 1400,
        "y": 4140,
        "wires": [
            [
                "99a8c35e.da191",
                "b8d94599.8e5b7"
            ]
        ]
    },
    {
        "id": "99a8c35e.da191",
        "type": "switch",
        "z": "5df15275.2888ec",
        "name": "статус ордера",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "NEW",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "PARTIALLY_FILLED",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "CANCELED",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "FILLED",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "REJECTED",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "EXPIRED",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 6,
        "x": 1620,
        "y": 4140,
        "wires": [
            [
                "1abd2f20.e65061",
                "7b5bb07a.3966c8",
                "2343abca.a6e05c"
            ],
            [
                "f99e723c.db2d7",
                "2343abca.a6e05c"
            ],
            [
                "a527c2ac.97582",
                "f7b6dbb5.36b318",
                "4d0eee3f.645d18"
            ],
            [
                "3be7b05c.965fc8",
                "c21ed480.50cd28"
            ],
            [
                "9c45c5de.720128",
                "ba137d19.a93268",
                "ab47cdd8.3462a8"
            ],
            [
                "9c45c5de.720128",
                "ba137d19.a93268"
            ]
        ]
    },
    {
        "id": "91d80510.dfa2b",
        "type": "comment",
        "z": "5df15275.2888ec",
        "name": "NEW",
        "info": "",
        "x": 1850,
        "y": 4000,
        "wires": []
    },
    {
        "id": "eb56ec34.5e2418",
        "type": "comment",
        "z": "5df15275.2888ec",
        "name": "CANCELED",
        "info": "",
        "x": 2070,
        "y": 4140,
        "wires": []
    },
    {
        "id": "c2454f15.39dea8",
        "type": "comment",
        "z": "5df15275.2888ec",
        "name": "FILLED",
        "info": "",
        "x": 1850,
        "y": 4200,
        "wires": []
    },
    {
        "id": "ebf8abe7.34ee4",
        "type": "comment",
        "z": "5df15275.2888ec",
        "name": "REJECTED или EXPIRED",
        "info": "",
        "x": 1910,
        "y": 4340,
        "wires": []
    },
    {
        "id": "b4663fc9.774b9",
        "type": "comment",
        "z": "5df15275.2888ec",
        "name": "PARTIALLY_FILLED",
        "info": "",
        "x": 2010,
        "y": 4000,
        "wires": []
    },
    {
        "id": "3be7b05c.965fc8",
        "type": "function",
        "z": "5df15275.2888ec",
        "name": "set sold",
        "func": "msg.bot.ttp.sold = true;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 2040,
        "y": 4200,
        "wires": [
            [
                "844a5c76.d26658",
                "28f62589.1de13a",
                "d9d63754.4e87c8"
            ]
        ]
    },
    {
        "id": "844a5c76.d26658",
        "type": "debug",
        "z": "5df15275.2888ec",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 2210,
        "y": 4240,
        "wires": []
    },
    {
        "id": "a527c2ac.97582",
        "type": "link out",
        "z": "5df15275.2888ec",
        "name": "заперещено закупать",
        "links": [
            "47e3fbaf.e02fb4",
            "ab5cef16.762b3",
            "fd4caf2b.2d9e58"
        ],
        "x": 2175,
        "y": 4120,
        "wires": []
    },
    {
        "id": "6da07a32.a830d4",
        "type": "link out",
        "z": "5df15275.2888ec",
        "name": "заперещено закупать",
        "links": [
            "47e3fbaf.e02fb4",
            "ab5cef16.762b3",
            "fd4caf2b.2d9e58"
        ],
        "x": 3295,
        "y": 4080,
        "wires": []
    },
    {
        "id": "1abd2f20.e65061",
        "type": "debug",
        "z": "5df15275.2888ec",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1850,
        "y": 3920,
        "wires": []
    },
    {
        "id": "c21ed480.50cd28",
        "type": "debug",
        "z": "5df15275.2888ec",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 2030,
        "y": 4260,
        "wires": []
    },
    {
        "id": "c2d48d0d.bbc81",
        "type": "function",
        "z": "5df15275.2888ec",
        "name": "prepare get ttp order status",
        "func": "//<трекер<\n    let track = flow.get(\"track\");\n    let start_node_time = new Date().getTime();\n    let steptitle = node.name;\n\n    let laststep = track[track.length-1];\n    let last_node_end_time = laststep.end_node_time;\n//>трекер>\n\nlet moneta = msg.bot.settings.moneta;\nlet orderid = msg.bot.ttp.curorderid;\n\nmsg.payload = [];\nmsg.topic = \"orders-status-\" + msg.bot.settings.userid + \":\" + moneta + \":\" + orderid;\n\n\n\n    //>трекер>\n        let end_node_time = new Date().getTime();\n        let duration = end_node_time - start_node_time;\n        let duration_step = end_node_time - last_node_end_time;\n        track.push({\n            \"steptitle\": steptitle,\n            \"start_node_time\": start_node_time,\n            \"end_node_time\": end_node_time,\n            \"duration_node\": duration,\n            \"duration_step\": duration_step\n        });\n        flow.set(\"track\", track);\n    //>трекер>\nnode.status({fill: \"green\", shape: \"ring\", text: orderid});\nreturn msg;\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 1360,
        "y": 3720,
        "wires": [
            [
                "4af265e4.0d1a3c"
            ]
        ],
        "inputLabels": [
            "orderid"
        ],
        "outputLabels": [
            "status"
        ],
        "icon": "node-red-contrib-binance/binance.png"
    },
    {
        "id": "4af265e4.0d1a3c",
        "type": "redis-command",
        "z": "5df15275.2888ec",
        "server": "f120eab2.0a60a8",
        "command": "GET",
        "name": "get order status",
        "topic": "msg.payload",
        "params": "[]",
        "paramsType": "json",
        "payloadType": "json",
        "block": false,
        "x": 1580,
        "y": 3720,
        "wires": [
            [
                "d7809508.8035a",
                "ea81bdbd.c8cb8"
            ]
        ]
    },
    {
        "id": "8a478854.63a198",
        "type": "switch",
        "z": "5df15275.2888ec",
        "name": "status NEW ?",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "true"
            },
            {
                "t": "false"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 1940,
        "y": 3720,
        "wires": [
            [
                "e68beec2.286ec8"
            ],
            [
                "ebb62d38.7c53c8",
                "8a3bbe0b.219b9"
            ]
        ]
    },
    {
        "id": "d7809508.8035a",
        "type": "function",
        "z": "5df15275.2888ec",
        "name": "prepare data",
        "func": "if (msg.payload == \"NEW\") {\n    msg.payload = true;\n}\nelse {\n    msg.payload = false;\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 1770,
        "y": 3720,
        "wires": [
            [
                "8a478854.63a198",
                "9d3988d2.118d58"
            ]
        ]
    },
    {
        "id": "26e2daab.54b4f6",
        "type": "function",
        "z": "5df15275.2888ec",
        "name": "set stop sell order",
        "func": "//msg.curstop = Number(msg.bot.ttp.curstop);\n\nmsg.bot.ttp.quantity = msg.bot.ttp.quantity || 0;\n\nfunction parseApiError(error) {\n  if (error.body) {\n    try {\n      var resp = JSON.parse(error.body);\n      return resp.msg;\n    } catch (error) {/* pass thru */}\n  }\n  return \"Unknown error. Status code: \"+error.statsCode;\n}\n\nlet LBinance = global.get('gBinance');\n//node.warn(LBinance);\nlet key = global.get('key');\nlet secret = global.get('secret');\n\nlet binance = new LBinance().options({\n\tAPIKEY: key,\n\tAPISECRET: secret,\n\treconnect: false,\n\tuseServerTime: true\n});\n\nlet moneta = msg.bot.settings.moneta;\nlet quantity = (Number(msg.bot.ttp.quantity)).toFixed(msg.bot.settings.digitq);\n\nlet priceb = (Number((msg.bot.ttp.raschstopprice - msg.bot.ttp.raschstopprice / 100 * msg.bot.settings.ofsetbottom))).toFixed(msg.bot.settings.digitprice);\nlet stopprice = (Number(msg.bot.ttp.raschstopprice)).toFixed(msg.bot.settings.digitprice);\n\n\nnode.warn(\"q:\"+quantity);\nnode.warn(\"p:\"+priceb);\nnode.warn(\"sp:\"+stopprice);\nbinance.useServerTime(function() {\n binance.sell(moneta, quantity, priceb, { stopPrice: stopprice, type: \"STOP_LOSS_LIMIT\" }, function (err, resp) {\n          if (err) {\n            var errorMsg = parseApiError(err);\n            node.error(errorMsg, msg);\n            node.status({fill: \"red\", shape: \"ring\", text: errorMsg});\n            node.send(msg);\n            \n            \n          }\n          if (resp) {\n                        msg.bot.ttp.curorderid = resp.orderId;\n                        msg.bot.ttp.curstop = stopprice;\n                        msg.bot.ttp.quantity = quantity;\n                        node.send(msg);\n          }\n          node.status({}); //clear status message\n\n          \n          \n          //return;\n        })\n});",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 2470,
        "y": 3660,
        "wires": [
            [
                "dffed29e.b91ee",
                "eb6c36c7.d20ab8"
            ]
        ],
        "inputLabels": [
            "orderid, moneta"
        ],
        "outputLabels": [
            "status"
        ],
        "icon": "font-awesome/fa-compress"
    },
    {
        "id": "d51f367a.75ebc8",
        "type": "debug",
        "z": "5df15275.2888ec",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 4050,
        "y": 3040,
        "wires": []
    },
    {
        "id": "e68beec2.286ec8",
        "type": "function",
        "z": "5df15275.2888ec",
        "name": "cancel stopsell order if exist",
        "func": "\nfunction parseApiError(error) {\n  if (error.body) {\n    try {\n      var resp = JSON.parse(error.body);\n      return resp.msg;\n    } catch (error) {/* pass thru */}\n  }\n  return \"Unknown error. Status code: \"+error.statsCode;\n}\n\nlet LBinance = global.get('gBinance');\n//node.warn(LBinance);\nlet key = global.get('key');\nlet secret = global.get('secret');\n\nlet binance = new LBinance().options({\n\tAPIKEY: key,\n\tAPISECRET: secret,\n\treconnect: false,\n\tuseServerTime: true\n});\n\nlet moneta = msg.bot.settings.moneta;\nlet orderid = msg.bot.ttp.curorderid;\n\n//msg.payload = \"qjson.status\";\n\nbinance.useServerTime(function() {\n    binance.cancel(moneta, orderid, (err, resp) => {\n     // console.info(\"Limit Buy response\", response);\n     // console.info(\"order id: \" + response.orderId);\n        if (err) {\n            var errorMsg = parseApiError(err) + \", moneta:\" + moneta;\n            node.error(errorMsg, msg);\n            node.status({fill: \"red\", shape: \"ring\", text: errorMsg});\n            \n            \n            \n            node.send(msg);\n            // ;\n        \n        }\n        if (resp) {\n            //msg.orderid = resp.orderId;\n            msg.resp = resp;\n            node.status({fill: \"green\", shape: \"ring\"});\n            \n            \n            let tempfin = Number(Number(msg.bot.finance.baseinorders) - Number(msg.bot.status.currentfloor[14])*Number(msg.bot.status.currentfloor[3]));\n            let tempfin2 = Number(Number(msg.bot.finance.basenal) + Number(msg.bot.status.currentfloor[14])*Number(msg.bot.status.currentfloor[3]));\n            \n            msg.bot.finance.baseinorders = tempfin.toFixed(msg.bot.settings.digitprice);\n            msg.bot.finance.basenal = tempfin2.toFixed(msg.bot.settings.digitprice);\n            \n            \n            node.send(msg);\n            //return [null,msg];\n                    \n        }\n        //node.status({}); //clear status message\n    })\n});\n\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 2220,
        "y": 3660,
        "wires": [
            [
                "26e2daab.54b4f6",
                "71686c85.5605a4"
            ]
        ]
    },
    {
        "id": "71686c85.5605a4",
        "type": "debug",
        "z": "5df15275.2888ec",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 2290,
        "y": 3620,
        "wires": []
    },
    {
        "id": "a43159c7.39907",
        "type": "function",
        "z": "5df15275.2888ec",
        "name": "set stop sell order",
        "func": "//msg.curstop = Number(msg.bot.ttp.curstop);\n\nmsg.bot.ttp.quantity = msg.bot.ttp.quantity || 0;\n\nfunction parseApiError(error) {\n  if (error.body) {\n    try {\n      var resp = JSON.parse(error.body);\n      return resp.msg;\n    } catch (error) {/* pass thru */}\n  }\n  return \"Unknown error. Status code: \"+error.statsCode;\n}\n\nlet LBinance = global.get('gBinance');\n//node.warn(LBinance);\nlet key = global.get('key');\nlet secret = global.get('secret');\n\nlet binance = new LBinance().options({\n\tAPIKEY: key,\n\tAPISECRET: secret,\n\treconnect: false,\n\tuseServerTime: true\n});\n\nlet moneta = msg.bot.settings.moneta;\nlet quantity = (Number(msg.bot.ttp.quantity)).toFixed(msg.bot.settings.digitq);\n\nlet priceb = (Number((msg.bot.ttp.raschstopprice - msg.bot.ttp.raschstopprice / 100 * msg.bot.settings.ofsetbottom))).toFixed(msg.bot.settings.digitprice);\nlet stopprice = (Number(msg.bot.ttp.raschstopprice)).toFixed(msg.bot.settings.digitprice);\n\n\nnode.warn(\"q:\"+quantity);\nnode.warn(\"p:\"+priceb);\nnode.warn(\"sp:\"+stopprice);\nbinance.useServerTime(function() {\n binance.sell(moneta, quantity, priceb, { stopPrice: stopprice, type: \"STOP_LOSS_LIMIT\" }, function (err, resp) {\n          if (err) {\n            var errorMsg = parseApiError(err);\n            node.error(errorMsg, msg);\n            node.status({fill: \"red\", shape: \"ring\", text: errorMsg});\n             node.send(msg);\n            \n            \n          }\n          if (resp) {\n                        msg.bot.ttp.curorderid = resp.orderId;\n                        msg.bot.ttp.curstop = stopprice;\n                        msg.bot.ttp.quantity = quantity;\n                         node.send(msg);\n          }\n          node.status({}); //clear status message\n\n          \n         \n          //return;\n        })\n    \n});\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 1330,
        "y": 3820,
        "wires": [
            [
                "5f4c791a.9861c"
            ]
        ],
        "inputLabels": [
            "orderid, moneta"
        ],
        "outputLabels": [
            "status"
        ],
        "icon": "font-awesome/fa-compress"
    },
    {
        "id": "26027bc2.33c794",
        "type": "debug",
        "z": "5df15275.2888ec",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 610,
        "y": 3920,
        "wires": []
    },
    {
        "id": "5f4c791a.9861c",
        "type": "function",
        "z": "5df15275.2888ec",
        "name": "setbot_ttp",
        "func": "//<трекер<\n    let track = flow.get(\"track\");\n    let start_node_time = new Date().getTime();\n    \n    let steptitle = node.name;\n\n    let laststep = track[track.length-1];\n    let last_node_end_time = laststep.end_node_time;\n//>трекер>\nmsg.topic = msg.bot.settings.userid+\"-bots:\"+msg.bot.settings.botname+\":ttp\";\n\nmsg.payload = JSON.stringify(msg.bot.ttp);\nconst upd = global.get('setbot_ttp')(msg.topic, msg.payload);\n\n\nupd.then(upd => {\n\n    //>трекер>\n        let end_node_time = new Date().getTime();\n        let duration = end_node_time - start_node_time;\n        let duration_step = end_node_time - last_node_end_time;\n        track.push({\n            \"steptitle\": steptitle,\n            \"start_node_time\": start_node_time,\n            \"end_node_time\": end_node_time,\n            \"duration_node\": duration,\n            \"duration_step\": duration_step\n        });\n        flow.set(\"track\", track);\n    //>трекер>\n    node.status({fill:\"green\",shape:\"dot\"});\n    node.send(msg);\n\n}).catch(error => {\n\n    //>трекер>\n        let end_node_time = new Date().getTime();\n        let duration = end_node_time - start_node_time;\n        let duration_step = end_node_time - last_node_end_time;\n        track.push({\n            \"steptitle\": steptitle+\"-faile\",\n            \"start_node_time\": start_node_time,\n            \"end_node_time\": end_node_time,\n            \"duration\": duration,\n            \"duration_step\": duration_step,\n            \"error\": error\n        });\n        flow.set(\"track\", track);\n    //>трекер>\n    node.status({fill:\"red\",shape:\"dot\"}); \n    node.error(error);\n});",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 1550,
        "y": 3820,
        "wires": [
            [
                "d547cd92.0c54d",
                "9c79e520.9495b"
            ]
        ],
        "icon": "font-awesome/fa-bolt"
    },
    {
        "id": "dffed29e.b91ee",
        "type": "function",
        "z": "5df15275.2888ec",
        "name": "setbot_ttp",
        "func": "//<трекер<\n    let track = flow.get(\"track\");\n    let start_node_time = new Date().getTime();\n    \n    let steptitle = node.name;\n\n    let laststep = track[track.length-1];\n    let last_node_end_time = laststep.end_node_time;\n//>трекер>\nmsg.topic = msg.bot.settings.userid+\"-bots:\"+msg.bot.settings.botname+\":ttp\";\n\nmsg.payload = JSON.stringify(msg.bot.ttp);\nconst upd = global.get('setbot_ttp')(msg.topic, msg.payload);\n\n\nupd.then(upd => {\n\n    //>трекер>\n        let end_node_time = new Date().getTime();\n        let duration = end_node_time - start_node_time;\n        let duration_step = end_node_time - last_node_end_time;\n        track.push({\n            \"steptitle\": steptitle,\n            \"start_node_time\": start_node_time,\n            \"end_node_time\": end_node_time,\n            \"duration_node\": duration,\n            \"duration_step\": duration_step\n        });\n        flow.set(\"track\", track);\n    //>трекер>\n    node.status({fill:\"green\",shape:\"dot\"});\n    node.send(msg);\n\n}).catch(error => {\n\n    //>трекер>\n        let end_node_time = new Date().getTime();\n        let duration = end_node_time - start_node_time;\n        let duration_step = end_node_time - last_node_end_time;\n        track.push({\n            \"steptitle\": steptitle+\"-faile\",\n            \"start_node_time\": start_node_time,\n            \"end_node_time\": end_node_time,\n            \"duration\": duration,\n            \"duration_step\": duration_step,\n            \"error\": error\n        });\n        flow.set(\"track\", track);\n    //>трекер>\n    node.status({fill:\"red\",shape:\"dot\"}); \n    node.error(error);\n});",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 2670,
        "y": 3660,
        "wires": [
            [
                "d4b57e1c.669fd8",
                "6403f47f.b10c44"
            ]
        ],
        "icon": "font-awesome/fa-bolt"
    },
    {
        "id": "cd12e545.316a28",
        "type": "debug",
        "z": "5df15275.2888ec",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1090,
        "y": 4000,
        "wires": []
    },
    {
        "id": "9c45c5de.720128",
        "type": "debug",
        "z": "5df15275.2888ec",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 2030,
        "y": 4400,
        "wires": []
    },
    {
        "id": "b8d94599.8e5b7",
        "type": "debug",
        "z": "5df15275.2888ec",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1450,
        "y": 4100,
        "wires": []
    },
    {
        "id": "d547cd92.0c54d",
        "type": "link out",
        "z": "5df15275.2888ec",
        "name": "заперещено закупать",
        "links": [
            "47e3fbaf.e02fb4",
            "ab5cef16.762b3",
            "fd4caf2b.2d9e58"
        ],
        "x": 1675,
        "y": 3820,
        "wires": []
    },
    {
        "id": "ebb62d38.7c53c8",
        "type": "link out",
        "z": "5df15275.2888ec",
        "name": "заперещено закупать",
        "links": [
            "fd4caf2b.2d9e58"
        ],
        "x": 2115,
        "y": 3760,
        "wires": []
    },
    {
        "id": "d4b57e1c.669fd8",
        "type": "link out",
        "z": "5df15275.2888ec",
        "name": "заперещено закупать",
        "links": [
            "fd4caf2b.2d9e58"
        ],
        "x": 2795,
        "y": 3660,
        "wires": []
    },
    {
        "id": "fd4caf2b.2d9e58",
        "type": "link in",
        "z": "5df15275.2888ec",
        "name": "ttp-pilot-end",
        "links": [
            "6da07a32.a830d4",
            "a527c2ac.97582",
            "bf77a991.3bd89",
            "d4b57e1c.669fd8",
            "d547cd92.0c54d",
            "ebb62d38.7c53c8",
            "3a1dfbef.5e67ec",
            "ba137d19.a93268",
            "2343abca.a6e05c",
            "172f6a3a.7a6aa6",
            "5b3b6b9d.75f874",
            "132b272b.6ab609",
            "99ab4ba3.dc9ae8",
            "dee7cce5.8e846",
            "fbbe4d70.f0912"
        ],
        "x": 1655,
        "y": 3240,
        "wires": [
            [
                "6186089a.82589"
            ]
        ]
    },
    {
        "id": "6186089a.82589",
        "type": "function",
        "z": "5df15275.2888ec",
        "name": "setbot_ttp_free",
        "func": "\nmsg.topic = msg.bot.settings.userid+\"-bots:\"+msg.bot.settings.botname+\":ttp\";\nmsg.bot.ttp.ttpbusy = false;\nmsg.payload = JSON.stringify(msg.bot.ttp);\nconst upd = global.get('setbot_ttp')(msg.topic, msg.payload);\n\n\nupd.then(upd => {\n\n   \n    node.status({fill:\"green\",shape:\"dot\"});\n    node.send(msg);\n\n}).catch(error => {\n\n    \n    node.status({fill:\"red\",shape:\"dot\"}); \n    node.error(error);\n});",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 1800,
        "y": 3240,
        "wires": [
            [
                "9556b8a8.257798"
            ]
        ],
        "icon": "font-awesome/fa-bolt"
    },
    {
        "id": "eb783101.e13f08",
        "type": "link in",
        "z": "5df15275.2888ec",
        "name": "",
        "links": [
            "f690c3ac.0028f8"
        ],
        "x": 175,
        "y": 3860,
        "wires": [
            [
                "fa6bf889.5a7bb8",
                "21fd6400.791a5c"
            ]
        ]
    },
    {
        "id": "f7b6dbb5.36b318",
        "type": "debug",
        "z": "5df15275.2888ec",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1930,
        "y": 4140,
        "wires": []
    },
    {
        "id": "9c1d60bc.9c10a",
        "type": "debug",
        "z": "5df15275.2888ec",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 970,
        "y": 3180,
        "wires": []
    },
    {
        "id": "c0331d12.6a72c",
        "type": "link out",
        "z": "5df15275.2888ec",
        "name": "",
        "links": [
            "e34a5b68.726ec8",
            "e3e1e22a.f958b"
        ],
        "x": 2155,
        "y": 2700,
        "wires": []
    },
    {
        "id": "8c661975.7e3eb",
        "type": "debug",
        "z": "5df15275.2888ec",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 2190,
        "y": 4000,
        "wires": []
    },
    {
        "id": "7b5bb07a.3966c8",
        "type": "function",
        "z": "5df15275.2888ec",
        "name": "tester",
        "func": "//<трекер<\n    let track = flow.get(\"track\");\n    let start_node_time = new Date().getTime();\n    let steptitle = node.name;\n\n    let laststep = track[track.length-1];\n    let last_node_end_time = laststep.end_node_time;\n//>трекер>\n\n\n    //>трекер>\n        let end_node_time = new Date().getTime();\n        let duration = end_node_time - start_node_time;\n        let duration_step = end_node_time - last_node_end_time;\n        track.push({\n            \"steptitle\": steptitle,\n            \"start_node_time\": start_node_time,\n            \"end_node_time\": end_node_time,\n            \"duration_node\": duration,\n            \"duration_step\": duration_step\n        });\n        flow.set(\"track\", track);\n    //>трекер>\nnode.status({fill: \"green\", shape: \"ring\", text: last_node_end_time});\n    \n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 1850,
        "y": 3960,
        "wires": [
            []
        ]
    },
    {
        "id": "f99e723c.db2d7",
        "type": "function",
        "z": "5df15275.2888ec",
        "name": "tester",
        "func": "//<трекер<\n    let track = flow.get(\"track\");\n    let start_node_time = new Date().getTime();\n    let steptitle = node.name;\n\n    let laststep = track[track.length-1];\n    let last_node_end_time = laststep.end_node_time;\n//>трекер>\n\n\n    //>трекер>\n        let end_node_time = new Date().getTime();\n        let duration = end_node_time - start_node_time;\n        let duration_step = end_node_time - last_node_end_time;\n        track.push({\n            \"steptitle\": steptitle,\n            \"start_node_time\": start_node_time,\n            \"end_node_time\": end_node_time,\n            \"duration_node\": duration,\n            \"duration_step\": duration_step\n        });\n        flow.set(\"track\", track);\n    //>трекер>\nnode.status({fill: \"green\", shape: \"ring\", text: last_node_end_time});\n    \n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 2010,
        "y": 3960,
        "wires": [
            []
        ]
    },
    {
        "id": "4d0eee3f.645d18",
        "type": "function",
        "z": "5df15275.2888ec",
        "name": "tester",
        "func": "//<трекер<\n    let track = flow.get(\"track\");\n    let start_node_time = new Date().getTime();\n    let steptitle = node.name;\n\n    let laststep = track[track.length-1];\n    let last_node_end_time = laststep.end_node_time;\n//>трекер>\n\n\n    //>трекер>\n        let end_node_time = new Date().getTime();\n        let duration = end_node_time - start_node_time;\n        let duration_step = end_node_time - last_node_end_time;\n        track.push({\n            \"steptitle\": steptitle,\n            \"start_node_time\": start_node_time,\n            \"end_node_time\": end_node_time,\n            \"duration_node\": duration,\n            \"duration_step\": duration_step\n        });\n        flow.set(\"track\", track);\n    //>трекер>\nnode.status({fill: \"green\", shape: \"ring\", text: last_node_end_time});\n    \n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 2050,
        "y": 4080,
        "wires": [
            []
        ]
    },
    {
        "id": "ba137d19.a93268",
        "type": "link out",
        "z": "5df15275.2888ec",
        "name": "заперещено закупать",
        "links": [
            "47e3fbaf.e02fb4",
            "ab5cef16.762b3",
            "fd4caf2b.2d9e58"
        ],
        "x": 1695,
        "y": 4300,
        "wires": []
    },
    {
        "id": "ab47cdd8.3462a8",
        "type": "function",
        "z": "5df15275.2888ec",
        "name": "tester",
        "func": "//<трекер<\n    let track = flow.get(\"track\");\n    let start_node_time = new Date().getTime();\n    let steptitle = node.name;\n\n    let laststep = track[track.length-1];\n    let last_node_end_time = laststep.end_node_time;\n//>трекер>\n\n\n    //>трекер>\n        let end_node_time = new Date().getTime();\n        let duration = end_node_time - start_node_time;\n        let duration_step = end_node_time - last_node_end_time;\n        track.push({\n            \"steptitle\": steptitle,\n            \"start_node_time\": start_node_time,\n            \"end_node_time\": end_node_time,\n            \"duration_node\": duration,\n            \"duration_step\": duration_step\n        });\n        flow.set(\"track\", track);\n    //>трекер>\nnode.status({fill: \"green\", shape: \"ring\", text: last_node_end_time});\n    \n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 1830,
        "y": 4440,
        "wires": [
            []
        ]
    },
    {
        "id": "1cd4ec9e.a768bb",
        "type": "function",
        "z": "5df15275.2888ec",
        "name": "tester",
        "func": "//<трекер<\n    let track = flow.get(\"track\");\n    let start_node_time = new Date().getTime();\n    let steptitle = node.name;\n\n    let laststep = track[track.length-1];\n    let last_node_end_time = laststep.end_node_time;\n//>трекер>\n\n\n    //>трекер>\n        let end_node_time = new Date().getTime();\n        let duration = end_node_time - start_node_time;\n        let duration_step = end_node_time - last_node_end_time;\n        track.push({\n            \"steptitle\": steptitle,\n            \"start_node_time\": start_node_time,\n            \"end_node_time\": end_node_time,\n            \"duration_node\": duration,\n            \"duration_step\": duration_step\n        });\n        flow.set(\"track\", track);\n    //>трекер>\nnode.status({fill: \"green\", shape: \"ring\", text: last_node_end_time});\n    \n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 1830,
        "y": 4480,
        "wires": [
            []
        ]
    },
    {
        "id": "1c171f80.1804b9",
        "type": "function",
        "z": "5df15275.2888ec",
        "name": "tester",
        "func": "//<трекер<\n    let track = flow.get(\"track\");\n    let start_node_time = new Date().getTime();\n    let steptitle = node.name;\n\n    let laststep = track[track.length-1];\n    let last_node_end_time = laststep.end_node_time;\n//>трекер>\n\n\n    //>трекер>\n        let end_node_time = new Date().getTime();\n        let duration = end_node_time - start_node_time;\n        let duration_step = end_node_time - last_node_end_time;\n        track.push({\n            \"steptitle\": steptitle,\n            \"start_node_time\": start_node_time,\n            \"end_node_time\": end_node_time,\n            \"duration_node\": duration,\n            \"duration_step\": duration_step\n        });\n        flow.set(\"track\", track);\n    //>трекер>\nnode.status({fill: \"green\", shape: \"ring\", text: last_node_end_time});\n    \n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 1090,
        "y": 3740,
        "wires": [
            []
        ]
    },
    {
        "id": "3239545c.3e2e34",
        "type": "function",
        "z": "5df15275.2888ec",
        "name": "tester",
        "func": "//<трекер<\n    let track = flow.get(\"track\");\n    let start_node_time = new Date().getTime();\n    let steptitle = node.name;\n\n    let laststep = track[track.length-1];\n    let last_node_end_time = laststep.end_node_time;\n//>трекер>\n\n\n    //>трекер>\n        let end_node_time = new Date().getTime();\n        let duration = end_node_time - start_node_time;\n        let duration_step = end_node_time - last_node_end_time;\n        track.push({\n            \"steptitle\": steptitle,\n            \"start_node_time\": start_node_time,\n            \"end_node_time\": end_node_time,\n            \"duration_node\": duration,\n            \"duration_step\": duration_step\n        });\n        flow.set(\"track\", track);\n    //>трекер>\nnode.status({fill: \"green\", shape: \"ring\", text: last_node_end_time});\n    \n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 1090,
        "y": 4100,
        "wires": [
            []
        ]
    },
    {
        "id": "2343abca.a6e05c",
        "type": "link out",
        "z": "5df15275.2888ec",
        "name": "заперещено закупать",
        "links": [
            "fd4caf2b.2d9e58"
        ],
        "x": 1815,
        "y": 4040,
        "wires": []
    },
    {
        "id": "28f62589.1de13a",
        "type": "function",
        "z": "5df15275.2888ec",
        "name": "tester",
        "func": "//<трекер<\n    let track = flow.get(\"track\");\n    let start_node_time = new Date().getTime();\n    let steptitle = node.name;\n\n    let laststep = track[track.length-1];\n    let last_node_end_time = laststep.end_node_time;\n//>трекер>\n\n\n    //>трекер>\n        let end_node_time = new Date().getTime();\n        let duration = end_node_time - start_node_time;\n        let duration_step = end_node_time - last_node_end_time;\n        track.push({\n            \"steptitle\": steptitle,\n            \"start_node_time\": start_node_time,\n            \"end_node_time\": end_node_time,\n            \"duration_node\": duration,\n            \"duration_step\": duration_step\n        });\n        flow.set(\"track\", track);\n    //>трекер>\nnode.status({fill: \"green\", shape: \"ring\", text: last_node_end_time});\n    \n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 2190,
        "y": 4300,
        "wires": [
            []
        ]
    },
    {
        "id": "f7d0483.943af38",
        "type": "function",
        "z": "5df15275.2888ec",
        "name": "setbot_ttp",
        "func": "//<трекер<\n    let track = flow.get(\"track\");\n    let start_node_time = new Date().getTime();\n    \n    let steptitle = node.name;\n\n    let laststep = track[track.length-1];\n    let last_node_end_time = laststep.end_node_time;\n//>трекер>\nmsg.topic = msg.bot.settings.userid+\"-bots:\"+msg.bot.settings.botname+\":ttp\";\n\nmsg.payload = JSON.stringify(msg.bot.ttp);\nconst upd = global.get('setbot_ttp')(msg.topic, msg.payload);\n\n\nupd.then(upd => {\n\n    //>трекер>\n        let end_node_time = new Date().getTime();\n        let duration = end_node_time - start_node_time;\n        let duration_step = end_node_time - last_node_end_time;\n        track.push({\n            \"steptitle\": steptitle,\n            \"start_node_time\": start_node_time,\n            \"end_node_time\": end_node_time,\n            \"duration_node\": duration,\n            \"duration_step\": duration_step\n        });\n        flow.set(\"track\", track);\n    //>трекер>\n    node.status({fill:\"green\",shape:\"dot\"});\n    node.send(msg);\n\n}).catch(error => {\n\n    //>трекер>\n        let end_node_time = new Date().getTime();\n        let duration = end_node_time - start_node_time;\n        let duration_step = end_node_time - last_node_end_time;\n        track.push({\n            \"steptitle\": steptitle+\"-faile\",\n            \"start_node_time\": start_node_time,\n            \"end_node_time\": end_node_time,\n            \"duration\": duration,\n            \"duration_step\": duration_step,\n            \"error\": error\n        });\n        flow.set(\"track\", track);\n    //>трекер>\n    node.status({fill:\"red\",shape:\"dot\"}); \n    node.error(error);\n});",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 2910,
        "y": 4480,
        "wires": [
            []
        ],
        "icon": "font-awesome/fa-bolt"
    },
    {
        "id": "52d3da5.b1dbaa4",
        "type": "debug",
        "z": "5df15275.2888ec",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 670,
        "y": 3340,
        "wires": []
    },
    {
        "id": "e675297d.3373f8",
        "type": "function",
        "z": "5df15275.2888ec",
        "name": "change floors, finance ",
        "func": "//<трекер<\n    let track = flow.get(\"track\");\n    let start_node_time = new Date().getTime();\n    let steptitle = node.name;\n\n    let laststep = track[track.length-1];\n    let last_node_end_time = laststep.end_node_time;\n//>трекер>\n\nlet currentfloor = msg.bot.currentfloor;\ncurrentfloor[7] = 1;\ncurrentfloor[8] = msg.resp.orderId;\ncurrentfloor[14] = msg.resp.origQty;\n\nmsg.bot.floors[currentfloor[0]-1] = currentfloor;\n\nmsg.bot.finance.baseinorders = (Number(Number(msg.bot.finance.baseinorders) + Number(msg.resp.origQty) * Number(msg.resp.price))).toFixed(msg.bot.settings.digitprice);\nmsg.bot.finance.basenal = (Number(Number(msg.bot.finance.basenal) - Number(msg.resp.origQty) * Number(msg.resp.price))).toFixed(msg.bot.settings.digitprice);\n\n    //>трекер>\n        let end_node_time = new Date().getTime();\n        let duration = end_node_time - start_node_time;\n        let duration_step = end_node_time - last_node_end_time;\n        track.push({\n            \"steptitle\": steptitle,\n            \"start_node_time\": start_node_time,\n            \"end_node_time\": end_node_time,\n            \"duration_node\": duration,\n            \"duration_step\": duration_step\n        });\n        flow.set(\"track\", track);\n    //>трекер>\nnode.status({fill: \"green\", shape: \"ring\", text: currentfloor[0]});\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 3300,
        "y": 3940,
        "wires": [
            []
        ]
    },
    {
        "id": "9c79e520.9495b",
        "type": "debug",
        "z": "5df15275.2888ec",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1590,
        "y": 3780,
        "wires": []
    },
    {
        "id": "6403f47f.b10c44",
        "type": "debug",
        "z": "5df15275.2888ec",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 2830,
        "y": 3560,
        "wires": []
    },
    {
        "id": "317ffc4b.f9f944",
        "type": "http in",
        "z": "5df15275.2888ec",
        "g": "8b69f61d.c89028",
        "name": "",
        "url": "/bot_delete",
        "method": "post",
        "upload": false,
        "swaggerDoc": "",
        "x": 4020,
        "y": 80,
        "wires": [
            [
                "70ea442f.d8d06c",
                "35298c0e.de04e4"
            ]
        ]
    },
    {
        "id": "2da38506.59c15a",
        "type": "redis-command",
        "z": "5df15275.2888ec",
        "g": "8b69f61d.c89028",
        "server": "f120eab2.0a60a8",
        "command": "hmset",
        "name": "",
        "topic": "",
        "params": "[]",
        "paramsType": "json",
        "payloadType": "json",
        "block": false,
        "x": 4510,
        "y": 80,
        "wires": [
            []
        ]
    },
    {
        "id": "cd9c83a2.b44c9",
        "type": "function",
        "z": "5df15275.2888ec",
        "g": "8b69f61d.c89028",
        "name": "prepare data for create bot",
        "func": "msg.topic = msg.payload.user_id_from_google+\"-bots:\"+msg.payload.botname+\":data\";\nlet botdata = {\"finance\":msg.payload.finance,\"floors\":msg.payload.floors,\"sales\":msg.payload.sales};\nmsg.payload = botdata;\nnode.status({fill:\"green\",shape:\"dot\"});\nreturn msg;\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 4280,
        "y": 80,
        "wires": [
            [
                "2da38506.59c15a"
            ]
        ]
    },
    {
        "id": "98e142f2.2387b",
        "type": "function",
        "z": "5df15275.2888ec",
        "g": "8b69f61d.c89028",
        "name": "prepare for get botlist",
        "func": "msg.botlistname = msg.payload.user_id_from_google+\"-botlist\";\nmsg.botname = msg.payload.botname;\nmsg.payload = msg.payload.user_id_from_google;\nnode.status({fill:\"green\",shape:\"dot\"});\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 4260,
        "y": 140,
        "wires": [
            [
                "9814b19b.3a9ff"
            ]
        ]
    },
    {
        "id": "9814b19b.3a9ff",
        "type": "function",
        "z": "5df15275.2888ec",
        "g": "8b69f61d.c89028",
        "name": "getbotlist",
        "func": "\nlet guid = msg.payload;\n\nconst gbl = global.get('getbotlist')(guid);\n\ngbl.then(gbl => {\n    \n    msg.payload = JSON.parse(gbl);\n    node.status({fill:\"green\",shape:\"dot\"});\n    node.send(msg);\n\n}).catch(error => {\n    node.status({fill:\"red\",shape:\"dot\"});\n    node.error(error);\n});",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 4460,
        "y": 140,
        "wires": [
            [
                "657e86cb.b16d68"
            ]
        ]
    },
    {
        "id": "657e86cb.b16d68",
        "type": "function",
        "z": "5df15275.2888ec",
        "g": "8b69f61d.c89028",
        "name": "prepare for add botlist",
        "func": "msg.topic = msg.botlistname;\n\nlet newbotlist = [];\nif (msg.payload == null) {\n    newbotlist = [msg.botname];\n} else {\n    let oldbotlist = msg.payload;\n    newbotlist = [...oldbotlist,msg.botname];\n    }\n\nmsg.payload = JSON.stringify(newbotlist);\nnode.status({fill:\"green\",shape:\"dot\"});\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 4660,
        "y": 140,
        "wires": [
            [
                "e3789e7.ad48a6"
            ]
        ]
    },
    {
        "id": "e3789e7.ad48a6",
        "type": "redis-command",
        "z": "5df15275.2888ec",
        "g": "8b69f61d.c89028",
        "server": "f120eab2.0a60a8",
        "command": "getset",
        "name": "",
        "topic": "",
        "params": "[]",
        "paramsType": "json",
        "payloadType": "json",
        "block": false,
        "x": 4870,
        "y": 140,
        "wires": [
            []
        ]
    },
    {
        "id": "70ea442f.d8d06c",
        "type": "http response",
        "z": "5df15275.2888ec",
        "g": "8b69f61d.c89028",
        "name": "",
        "statusCode": "200",
        "headers": {},
        "x": 4040,
        "y": 140,
        "wires": []
    },
    {
        "id": "c6f7047b.a7d5b8",
        "type": "function",
        "z": "5df15275.2888ec",
        "g": "8b69f61d.c89028",
        "name": "prepare for add bot status",
        "func": "msg.topic = msg.payload.user_id_from_google+\"-bots:\"+msg.payload.botname+\":status\";\nmsg.payload.status.updated = new Date().getTime();\nmsg.payload = msg.payload.status;\n\nnode.status({fill:\"green\",shape:\"dot\"});\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 4270,
        "y": 200,
        "wires": [
            [
                "b878da1d.130a08"
            ]
        ]
    },
    {
        "id": "b878da1d.130a08",
        "type": "redis-command",
        "z": "5df15275.2888ec",
        "g": "8b69f61d.c89028",
        "server": "f120eab2.0a60a8",
        "command": "getset",
        "name": "",
        "topic": "",
        "params": "[]",
        "paramsType": "json",
        "payloadType": "json",
        "block": false,
        "x": 4490,
        "y": 200,
        "wires": [
            []
        ]
    },
    {
        "id": "1b8e9eca.e770e1",
        "type": "function",
        "z": "5df15275.2888ec",
        "g": "8b69f61d.c89028",
        "name": "prepare for add bot settings",
        "func": "msg.topic = msg.payload.user_id_from_google+\"-bots:\"+msg.payload.botname+\":settings\";\n\nmsg.payload = msg.payload.settings;\n\nnode.status({fill:\"green\",shape:\"dot\"});\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 4280,
        "y": 260,
        "wires": [
            [
                "e7053289.ff4a1"
            ]
        ]
    },
    {
        "id": "e7053289.ff4a1",
        "type": "redis-command",
        "z": "5df15275.2888ec",
        "g": "8b69f61d.c89028",
        "server": "f120eab2.0a60a8",
        "command": "getset",
        "name": "",
        "topic": "",
        "params": "[]",
        "paramsType": "json",
        "payloadType": "json",
        "block": false,
        "x": 4510,
        "y": 260,
        "wires": [
            []
        ]
    },
    {
        "id": "12823fc.46bb5c",
        "type": "function",
        "z": "5df15275.2888ec",
        "g": "8b69f61d.c89028",
        "name": "prepare for add bot ttp",
        "func": "msg.topic = msg.payload.user_id_from_google+\"-bots:\"+msg.payload.botname+\":ttp\";\n\nmsg.payload = msg.payload.ttp;\n\nnode.status({fill:\"green\",shape:\"dot\"});\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 4260,
        "y": 320,
        "wires": [
            [
                "53c0296c.86d5e8"
            ]
        ]
    },
    {
        "id": "53c0296c.86d5e8",
        "type": "redis-command",
        "z": "5df15275.2888ec",
        "g": "8b69f61d.c89028",
        "server": "f120eab2.0a60a8",
        "command": "getset",
        "name": "",
        "topic": "",
        "params": "[]",
        "paramsType": "json",
        "payloadType": "json",
        "block": false,
        "x": 4470,
        "y": 320,
        "wires": [
            []
        ]
    },
    {
        "id": "567ea009.d6895",
        "type": "function",
        "z": "5df15275.2888ec",
        "g": "8b69f61d.c89028",
        "name": "prepare for add bot onoff",
        "func": "msg.topic = msg.payload.user_id_from_google+\"-bots:\"+msg.payload.botname+\":onoff\";\n\nmsg.payload = JSON.stringify(msg.payload.onoff);\n\nnode.status({fill:\"green\",shape:\"dot\"});\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 4270,
        "y": 380,
        "wires": [
            [
                "afeffd54.f2fdf"
            ]
        ]
    },
    {
        "id": "afeffd54.f2fdf",
        "type": "redis-command",
        "z": "5df15275.2888ec",
        "g": "8b69f61d.c89028",
        "server": "f120eab2.0a60a8",
        "command": "getset",
        "name": "",
        "topic": "",
        "params": "[]",
        "paramsType": "json",
        "payloadType": "json",
        "block": false,
        "x": 4470,
        "y": 380,
        "wires": [
            []
        ]
    },
    {
        "id": "addf44a8.eeead8",
        "type": "function",
        "z": "5df15275.2888ec",
        "g": "8b69f61d.c89028",
        "name": "prepare for add bot busy",
        "func": "msg.topic = msg.payload.user_id_from_google+\"-bots:\"+msg.payload.botname+\":busy\";\n\nmsg.payload = JSON.stringify(msg.payload.busy);\n\nnode.status({fill:\"green\",shape:\"dot\"});\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 4270,
        "y": 440,
        "wires": [
            [
                "38fa3076.5c174"
            ]
        ]
    },
    {
        "id": "38fa3076.5c174",
        "type": "redis-command",
        "z": "5df15275.2888ec",
        "g": "8b69f61d.c89028",
        "server": "f120eab2.0a60a8",
        "command": "getset",
        "name": "",
        "topic": "",
        "params": "[]",
        "paramsType": "json",
        "payloadType": "json",
        "block": false,
        "x": 4490,
        "y": 440,
        "wires": [
            []
        ]
    },
    {
        "id": "51dac58a.ae1ccc",
        "type": "function",
        "z": "5df15275.2888ec",
        "g": "8b69f61d.c89028",
        "name": "prepare for start_set",
        "func": "msg.topic = msg.payload.user_id_from_google+\"-bots:\"+msg.payload.botname+\":start_set\";\n\nmsg.payload = msg.payload.start_set;\n\nnode.status({fill:\"green\",shape:\"dot\"});\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 4260,
        "y": 500,
        "wires": [
            [
                "3b77b4a5.7373fc"
            ]
        ]
    },
    {
        "id": "3b77b4a5.7373fc",
        "type": "redis-command",
        "z": "5df15275.2888ec",
        "g": "8b69f61d.c89028",
        "server": "f120eab2.0a60a8",
        "command": "getset",
        "name": "",
        "topic": "",
        "params": "[]",
        "paramsType": "json",
        "payloadType": "json",
        "block": false,
        "x": 4490,
        "y": 500,
        "wires": [
            []
        ]
    },
    {
        "id": "35298c0e.de04e4",
        "type": "debug",
        "z": "5df15275.2888ec",
        "g": "8b69f61d.c89028",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 4010,
        "y": 220,
        "wires": []
    },
    {
        "id": "5f8da53c.1cd85c",
        "type": "debug",
        "z": "5df15275.2888ec",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 170,
        "y": 3360,
        "wires": []
    },
    {
        "id": "49b11422.104a8c",
        "type": "debug",
        "z": "5df15275.2888ec",
        "g": "5b21035.9c9f6fc",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 4570,
        "y": 1500,
        "wires": []
    },
    {
        "id": "8847d1d6.5d69e",
        "type": "debug",
        "z": "5df15275.2888ec",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1090,
        "y": 3820,
        "wires": []
    },
    {
        "id": "9d3988d2.118d58",
        "type": "debug",
        "z": "5df15275.2888ec",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1950,
        "y": 3640,
        "wires": []
    },
    {
        "id": "65afe27.430071c",
        "type": "function",
        "z": "5df15275.2888ec",
        "name": "tester",
        "func": "//<трекер<\n    let track = flow.get(\"track\");\n    let start_node_time = new Date().getTime();\n    let steptitle = node.name;\n\n    let laststep = track[track.length-1];\n    let last_node_end_time = laststep.end_node_time;\n//>трекер>\n\n\n    //>трекер>\n        let end_node_time = new Date().getTime();\n        let duration = end_node_time - start_node_time;\n        let duration_step = end_node_time - last_node_end_time;\n        track.push({\n            \"steptitle\": steptitle,\n            \"start_node_time\": start_node_time,\n            \"end_node_time\": end_node_time,\n            \"duration_node\": duration,\n            \"duration_step\": duration_step\n        });\n        flow.set(\"track\", track);\n    //>трекер>\nnode.status({fill: \"green\", shape: \"ring\", text: last_node_end_time});\n    \n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 1270,
        "y": 3880,
        "wires": [
            []
        ]
    },
    {
        "id": "4287fbb4.86f9e4",
        "type": "function",
        "z": "5df15275.2888ec",
        "name": "tester",
        "func": "//<трекер<\n    let track = flow.get(\"track\");\n    let start_node_time = new Date().getTime();\n    let steptitle = node.name;\n\n    let laststep = track[track.length-1];\n    let last_node_end_time = laststep.end_node_time;\n//>трекер>\n\n\n    //>трекер>\n        let end_node_time = new Date().getTime();\n        let duration = end_node_time - start_node_time;\n        let duration_step = end_node_time - last_node_end_time;\n        track.push({\n            \"steptitle\": steptitle,\n            \"start_node_time\": start_node_time,\n            \"end_node_time\": end_node_time,\n            \"duration_node\": duration,\n            \"duration_step\": duration_step\n        });\n        flow.set(\"track\", track);\n    //>трекер>\nnode.status({fill: \"green\", shape: \"ring\", text: last_node_end_time});\n    \n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 1270,
        "y": 3660,
        "wires": [
            []
        ]
    },
    {
        "id": "ac5c2d29.8544f",
        "type": "link in",
        "z": "5df15275.2888ec",
        "name": "",
        "links": [
            "258a6025.bcc3d",
            "6f1b2478.7c43ac",
            "10c52fed.06326",
            "5c2f710c.b0c9d"
        ],
        "x": 355,
        "y": 3360,
        "wires": [
            [
                "6fc4c6e7.21c5f"
            ]
        ]
    },
    {
        "id": "6182b5a9.c0565c",
        "type": "debug",
        "z": "5df15275.2888ec",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 2490,
        "y": 300,
        "wires": []
    },
    {
        "id": "a3a3ff62.74a51",
        "type": "debug",
        "z": "5df15275.2888ec",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 2370,
        "y": 2040,
        "wires": []
    },
    {
        "id": "42ef8125.86f6c",
        "type": "function",
        "z": "5df15275.2888ec",
        "name": "ttp finish",
        "func": "msg.bot.ttp.raschstopprice = 0;\nmsg.bot.ttp.curstop = 0;\nmsg.bot.ttp.curorderid = 0;\nmsg.bot.ttp.quantity = 0;\nmsg.bot.ttp.ttpbusy = false;\nmsg.bot.ttp.sold = false;\n\nmsg.topic = msg.bot.settings.userid+\"-bots:\"+msg.bot.settings.botname+\":ttp\";\n\nmsg.payload = JSON.stringify(msg.bot.ttp);\nconst upd = global.get('setbot_ttp')(msg.topic, msg.payload);\n\n\nupd.then(upd => {\n\n    msg.topic = [];\n    node.status({fill:\"green\",shape:\"dot\"});\n    node.send(msg);\n\n}).catch(error => {\n\n\n    node.status({fill:\"red\",shape:\"dot\"}); \n    node.error(error);\n});\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 2780,
        "y": 4360,
        "wires": [
            [
                "79e153.b708aeac",
                "5497402c.ad6ae",
                "6f1b2478.7c43ac"
            ]
        ]
    },
    {
        "id": "79e153.b708aeac",
        "type": "debug",
        "z": "5df15275.2888ec",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 2790,
        "y": 4320,
        "wires": []
    },
    {
        "id": "5497402c.ad6ae",
        "type": "redis-out",
        "z": "5df15275.2888ec",
        "server": "f120eab2.0a60a8",
        "command": "publish",
        "name": "",
        "topic": "ttp-stop",
        "obj": true,
        "x": 2980,
        "y": 4360,
        "wires": []
    },
    {
        "id": "6f1b2478.7c43ac",
        "type": "link out",
        "z": "5df15275.2888ec",
        "name": "заперещено закупать",
        "links": [
            "ac5c2d29.8544f"
        ],
        "x": 2995,
        "y": 4280,
        "wires": []
    },
    {
        "id": "40af92f7.07274c",
        "type": "inject",
        "z": "5df15275.2888ec",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 2860,
        "y": 4420,
        "wires": [
            [
                "5497402c.ad6ae"
            ]
        ]
    },
    {
        "id": "d27705fb.b4d258",
        "type": "function",
        "z": "5df15275.2888ec",
        "name": "update bot floors, finance",
        "func": "const sellprice = msg.bot.ttpprice\nlet comsa = Number(msg.payload);\nlet quantityall = msg.bot.ttp.quantity;\n\nnode.warn(\"finish ttp on floor \" + msg.bot.currentfloor[0]);\n\nlet tempfin = Number(Number(msg.bot.finance.quotainorders) - Number(msg.bot.ttp.quantity));\n\nlet tempfin2 = Number(Number(msg.bot.finance.basenal) + Number(msg.bot.ttp.quantity * Number(msg.payload)));\n\nmsg.bot.finance.quotainorders = tempfin.toFixed(msg.bot.settings.digitprice);\nmsg.bot.finance.basenal = tempfin2.toFixed(msg.bot.settings.digitq);\n\nif (msg.bot.finance.baseinorders == -0) { msg.bot.finance.baseinorders = 0; }\nif (msg.bot.finance.basenal == -0) { msg.bot.finance.basenal = 0; }\n\n \n\nlet currentfloor = msg.bot.currentfloor;\n\n//обнуление всех этажей со статусом 3\n\nvar floors = msg.bot.floors;\n\n    floors.forEach(function (item, i, floors) {\n\n        if (item[7] == 3) {\n            let buyprice = item[10];\n            let quantity = Number(item[14]);\n            //msg.bot.sales.today.push((sellprice-buyprice)*quantity);\n            \n            item[7] = 0;\n            item[8] = 0;\n            item[9] = 0;\n            item[10] = 0;\n            item[11] = 0;\n            item[12] = 0;\n            item[13] = 0;\n            item[14] = 0;\n        }\n\n\n    });\n\nmsg.bot.floors = floors;\n\nlet volname = msg.bot.settings.userid + \"-bots:\" + msg.botname + \":data\";\nlet botdata = {\n    \"finance\": JSON.stringify(msg.bot.finance),\n    \"floors\": JSON.stringify(msg.bot.floors),\n    \"sales\": JSON.stringify(msg.bot.sales)\n};\n\nconst upd = global.get('setbot_data')(volname, botdata);\n\nupd.then(upd => {\n\n    msg.payload = upd;\n\n    node.status({ fill: \"green\", shape: \"ring\", text: \"0k\" });\n    node.send(msg);\n\n}).catch(error => {\n\n    node.status({ fill: \"red\", shape: \"ring\", text: \"error\" });\n    node.error(error);\n});\n\n\n\n//function register_sdelka($buyprice, $sellprice, $quantity, $p, $c, $net){\n//\n//    global $zh;\n//    global $botsales;\n//\n  //  record_to_log($zh , \"$ \".$net.\" (buyprice \".$buyprice.\", sellprice \".$sellprice.\", quantity \".$quantity.\", profit \".$p.\", commision \".$c.\")\");\n//\n //   $arr = [$buyprice, $sellprice, $quantity, $p, $c, $net];\n  //  array_push($botsales[\"today\"], $arr);\n//    array_push($botsales[\"all\"], $arr);\n //   //push($botsales);\n  //  return true;\n//    \n//}\n\n\n\n//$quantity = $ordersellstatus[\"origQty\"]; \n //               $sellprice = $ordersellstatus[\"price\"];\n  //              $buyprice = $botfloors[$floor][10];\n  //              \n    //            $botfloors[$floor][13] = $sellprice;\n//\n  //              $p = $quantity*($sellprice - $buyprice);\n    //            $c = $quantity*($sellprice + $buyprice)/100*$commision;\n      //          $net = $p - $c;\n        //        $floorname = $floor + 1;\n          //      record_to_log($zh , \"Продали на этаже $floorname id $ordersellid -  $quantity по цене $sellprice\");\n            //    //record_to_log($zhtrade , \"sell;$sellprice;$quantity\");\n              //  register_sdelka($buyprice, $sellprice, $quantity, $p, $c, $net);",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 2570,
        "y": 4360,
        "wires": [
            [
                "a1b52467.3a3f38",
                "42ef8125.86f6c"
            ]
        ],
        "icon": "font-awesome/fa-bolt"
    },
    {
        "id": "a1b52467.3a3f38",
        "type": "debug",
        "z": "5df15275.2888ec",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 2610,
        "y": 4320,
        "wires": []
    },
    {
        "id": "d9d63754.4e87c8",
        "type": "function",
        "z": "5df15275.2888ec",
        "name": "prepare get ttp order price",
        "func": "\n\nlet moneta = msg.bot.settings.moneta;\nlet orderid = msg.bot.ttp.curorderid;\n\nmsg.payload = [];\nmsg.topic = \"orders-status-\" + msg.bot.settings.userid + \":\" + moneta + \":\" + orderid + \"-price\";\n\n\n\n\nnode.status({fill: \"green\", shape: \"ring\", text: orderid});\nreturn msg;\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 2440,
        "y": 4200,
        "wires": [
            [
                "ac60f1a8.5b5c4",
                "3992297f.b5e466"
            ]
        ],
        "inputLabels": [
            "orderid"
        ],
        "outputLabels": [
            "status"
        ],
        "icon": "node-red-contrib-binance/binance.png"
    },
    {
        "id": "ac60f1a8.5b5c4",
        "type": "redis-command",
        "z": "5df15275.2888ec",
        "server": "f120eab2.0a60a8",
        "command": "GET",
        "name": "get order status",
        "topic": "msg.payload",
        "params": "[]",
        "paramsType": "json",
        "payloadType": "json",
        "block": false,
        "x": 2700,
        "y": 4200,
        "wires": [
            [
                "2ea890b7.0e30e",
                "e90cffd8.f90fb"
            ]
        ]
    },
    {
        "id": "2ea890b7.0e30e",
        "type": "function",
        "z": "5df15275.2888ec",
        "name": "prepare get ttp order comsa",
        "func": "msg.bot.ttpprice = msg.payload;\n\nlet moneta = msg.bot.settings.moneta;\nlet orderid = msg.bot.ttp.curorderid;\n\nmsg.payload = [];\nmsg.topic = \"orders-status-\" + msg.bot.settings.userid + \":\" + moneta + \":\" + orderid + \"-comsa\";\n\n\n\n\nnode.status({fill: \"green\", shape: \"ring\", text: orderid});\nreturn msg;\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 2460,
        "y": 4260,
        "wires": [
            [
                "92f5dc20.e902c"
            ]
        ],
        "inputLabels": [
            "orderid"
        ],
        "outputLabels": [
            "status"
        ],
        "icon": "node-red-contrib-binance/binance.png"
    },
    {
        "id": "92f5dc20.e902c",
        "type": "redis-command",
        "z": "5df15275.2888ec",
        "server": "f120eab2.0a60a8",
        "command": "GET",
        "name": "get order status",
        "topic": "msg.payload",
        "params": "[]",
        "paramsType": "json",
        "payloadType": "json",
        "block": false,
        "x": 2700,
        "y": 4260,
        "wires": [
            [
                "d27705fb.b4d258"
            ]
        ]
    },
    {
        "id": "3992297f.b5e466",
        "type": "debug",
        "z": "5df15275.2888ec",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 2510,
        "y": 4160,
        "wires": []
    },
    {
        "id": "e90cffd8.f90fb",
        "type": "debug",
        "z": "5df15275.2888ec",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 2730,
        "y": 4160,
        "wires": []
    },
    {
        "id": "acd920f8.e2633",
        "type": "debug",
        "z": "5df15275.2888ec",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 2570,
        "y": 4440,
        "wires": []
    },
    {
        "id": "10c52fed.06326",
        "type": "link out",
        "z": "5df15275.2888ec",
        "name": "заперещено закупать",
        "links": [
            "ac5c2d29.8544f"
        ],
        "x": 2135,
        "y": 3240,
        "wires": []
    },
    {
        "id": "9556b8a8.257798",
        "type": "switch",
        "z": "5df15275.2888ec",
        "name": "is sold ?",
        "property": "bot.ttp.sold",
        "propertyType": "msg",
        "rules": [
            {
                "t": "true"
            },
            {
                "t": "false"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 2000,
        "y": 3240,
        "wires": [
            [
                "10c52fed.06326"
            ],
            []
        ]
    },
    {
        "id": "eb6c36c7.d20ab8",
        "type": "debug",
        "z": "5df15275.2888ec",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 2510,
        "y": 3620,
        "wires": []
    },
    {
        "id": "cac10d2c.dddd8",
        "type": "debug",
        "z": "5df15275.2888ec",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 2910,
        "y": 800,
        "wires": []
    },
    {
        "id": "ea81bdbd.c8cb8",
        "type": "debug",
        "z": "5df15275.2888ec",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1750,
        "y": 3640,
        "wires": []
    },
    {
        "id": "8a3bbe0b.219b9",
        "type": "debug",
        "z": "5df15275.2888ec",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 2090,
        "y": 3800,
        "wires": []
    },
    {
        "id": "21bd8b10.ef6684",
        "type": "function",
        "z": "5df15275.2888ec",
        "name": "get_ttp_q()",
        "func": "",
        "outputs": 1,
        "noerr": 0,
        "initialize": "let guid = global.get('guid');\n\n\nlet get_ttp_q = function (botname = msg.payload) {\n    \n    let promise = new Promise((resolve, reject) => {\n        msg.resolve = resolve;\n        msg.reject = reject;\n    });\n    \n\n    msg.topic = guid+\"-bots:\"+botname+\":ttpq\";\n    msg.payload = [];\n\n    node.send(Object.assign({}, msg));\n    \n    return promise;\n};\n\nglobal.set('get_ttp_q', get_ttp_q);",
        "finalize": "",
        "x": 1070,
        "y": 620,
        "wires": [
            [
                "13a96a9c.9c1275"
            ]
        ]
    },
    {
        "id": "32d4b8b1.77def8",
        "type": "inject",
        "z": "5df15275.2888ec",
        "g": "c625f482.ef7058",
        "name": "botname",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "x": 900,
        "y": 620,
        "wires": [
            [
                "21bd8b10.ef6684"
            ]
        ]
    },
    {
        "id": "6caa2100.198ba",
        "type": "function",
        "z": "5df15275.2888ec",
        "name": "resolve",
        "func": "msg.resolve(msg.payload);\n\n// reject\n// setTimeout(function () {\n//     msg.reject({message: 'Could not request joke'});\n// }, 2000);",
        "outputs": "0",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 1460,
        "y": 620,
        "wires": []
    },
    {
        "id": "13a96a9c.9c1275",
        "type": "redis-command",
        "z": "5df15275.2888ec",
        "server": "f120eab2.0a60a8",
        "command": "GET",
        "name": "get ttp q",
        "topic": "msg.payload",
        "params": "[]",
        "paramsType": "json",
        "payloadType": "json",
        "block": false,
        "x": 1280,
        "y": 620,
        "wires": [
            [
                "6caa2100.198ba"
            ]
        ]
    },
    {
        "id": "7b28a869.162e18",
        "type": "function",
        "z": "5df15275.2888ec",
        "g": "c625f482.ef7058",
        "name": "set_ttp_q()",
        "func": "",
        "outputs": 1,
        "noerr": 0,
        "initialize": "let guid = global.get('guid');\nlet set_ttp_q = function (botname = msg.topic, ttpq = msg.payload) {\n    \n    let promise = new Promise((resolve, reject) => {\n        msg.resolve = resolve;\n        msg.reject = reject;\n    });\n    \n\n    msg.topic = guid+\"-bots:\"+botname+\":ttpq\";\n    msg.payload = ttpq;\n\n    node.send(Object.assign({}, msg));\n    \n    return promise;\n};\n\nglobal.set('set_ttp_q', set_ttp_q);",
        "finalize": "",
        "x": 1110,
        "y": 680,
        "wires": [
            [
                "5775cffa.8e5f8"
            ]
        ]
    },
    {
        "id": "4c173f0f.94538",
        "type": "inject",
        "z": "5df15275.2888ec",
        "g": "c625f482.ef7058",
        "name": "botname, ttpq",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "x": 920,
        "y": 680,
        "wires": [
            [
                "7b28a869.162e18"
            ]
        ]
    },
    {
        "id": "e7904fa1.77f64",
        "type": "function",
        "z": "5df15275.2888ec",
        "g": "c625f482.ef7058",
        "name": "resolve",
        "func": "msg.resolve(msg.payload);\n\n// reject\n// setTimeout(function () {\n//     msg.reject({message: 'Could not request joke'});\n// }, 2000);",
        "outputs": "0",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 1480,
        "y": 680,
        "wires": []
    },
    {
        "id": "5775cffa.8e5f8",
        "type": "redis-command",
        "z": "5df15275.2888ec",
        "g": "c625f482.ef7058",
        "server": "f120eab2.0a60a8",
        "command": "getset",
        "name": "",
        "topic": "",
        "params": "[]",
        "paramsType": "json",
        "payloadType": "json",
        "block": false,
        "x": 1290,
        "y": 680,
        "wires": [
            [
                "e7904fa1.77f64"
            ]
        ]
    },
    {
        "id": "adf2a298.2e768",
        "type": "function",
        "z": "5df15275.2888ec",
        "name": "setbot_ttp_q",
        "func": "//<трекер<\n    let track = flow.get(\"track\");\n    let start_node_time = new Date().getTime();\n    \n    let steptitle = node.name;\n\n    let laststep = track[track.length-1];\n    let last_node_end_time = laststep.end_node_time;\n//>трекер>\n\nlet currentfloor = msg.bot.currentfloor;\nlet guid = global.get('guid');\nlet botname = msg.bot.settings.botname;\n\nmsg.topic = botname;\nmsg.payload = JSON.stringify(currentfloor[14]);\n\nconst upd = global.get('set_ttp_q')(msg.topic, msg.payload);\n\nupd.then(upd => {\n\n    //>трекер>\n        let end_node_time = new Date().getTime();\n        let duration = end_node_time - start_node_time;\n        let duration_step = end_node_time - last_node_end_time;\n        track.push({\n            \"steptitle\": steptitle,\n            \"start_node_time\": start_node_time,\n            \"end_node_time\": end_node_time,\n            \"duration_node\": duration,\n            \"duration_step\": duration_step\n        });\n        flow.set(\"track\", track);\n    //>трекер>\n    node.status({fill:\"green\",shape:\"dot\"});\n    node.send(msg);\n\n}).catch(error => {\n\n    //>трекер>\n        let end_node_time = new Date().getTime();\n        let duration = end_node_time - start_node_time;\n        let duration_step = end_node_time - last_node_end_time;\n        track.push({\n            \"steptitle\": steptitle+\"-faile\",\n            \"start_node_time\": start_node_time,\n            \"end_node_time\": end_node_time,\n            \"duration\": duration,\n            \"duration_step\": duration_step,\n            \"error\": error\n        });\n        flow.set(\"track\", track);\n    //>трекер>\n    node.status({fill:\"red\",shape:\"dot\"}); \n    node.error(error);\n    node.send(msg);\n});",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 1650,
        "y": 2720,
        "wires": [
            [
                "265f010f.b71d0e"
            ]
        ],
        "icon": "font-awesome/fa-bolt"
    },
    {
        "id": "265f010f.b71d0e",
        "type": "function",
        "z": "5df15275.2888ec",
        "name": "change floors, finance, ttp",
        "func": "//<трекер<\n    let track = flow.get(\"track\");\n    let start_node_time = new Date().getTime();\n    let steptitle = node.name;\n\n    let laststep = track[track.length-1];\n    let last_node_end_time = laststep.end_node_time;\n//>трекер>\nnode.warn(\"start ttp on floor \"+msg.bot.currentfloor[0]);     \n\nlet tempfin = Number(Number(msg.bot.finance.quotainorders) + Number(msg.bot.currentfloor[14]));\n\nlet tempfin2 = Number(Number(msg.bot.finance.quotanal) - Number(msg.bot.currentfloor[14]));\n\nmsg.bot.finance.quotainorders = tempfin.toFixed(msg.bot.settings.digitprice);\nmsg.bot.finance.quotanal = tempfin2.toFixed(msg.bot.settings.digitq);\n\nif (msg.bot.finance.baseinorders == -0) {msg.bot.finance.baseinorders = 0;}\nif (msg.bot.finance.basenal == -0) {msg.bot.finance.basenal = 0;}\n\nlet currentfloor = msg.bot.currentfloor;\ncurrentfloor[7] = 3;\n\n\nmsg.bot.floors[currentfloor[0]-1] = currentfloor;\n\n\n\n//>трекер>\n    let end_node_time = new Date().getTime();\n    let duration = end_node_time - start_node_time;\n    let duration_step = end_node_time - last_node_end_time;\n    track.push({\n        \"steptitle\": steptitle,\n        \"start_node_time\": start_node_time,\n        \"end_node_time\": end_node_time,\n        \"duration_node\": duration,\n        \"duration_step\": duration_step\n    });\n    flow.set(\"track\", track);\n//>трекер>\nnode.status({fill: \"green\", shape: \"ring\", text: start_node_time});\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 1870,
        "y": 2720,
        "wires": [
            [
                "ff787c55.b3b9e"
            ]
        ]
    },
    {
        "id": "8f71fdf8.2081f",
        "type": "link out",
        "z": "5df15275.2888ec",
        "name": "",
        "links": [
            "e34a5b68.726ec8",
            "e3e1e22a.f958b"
        ],
        "x": 2115,
        "y": 2760,
        "wires": []
    },
    {
        "id": "ff787c55.b3b9e",
        "type": "function",
        "z": "5df15275.2888ec",
        "name": "setbot_data",
        "func": "//<трекер<\n    let track = flow.get(\"track\");\n    let start_node_time = new Date().getTime();\n    let steptitle = node.name;\n\n    let laststep = track[track.length-1];\n    let last_node_end_time = laststep.end_node_time;\n//>трекер>\nlet volname = msg.bot.settings.userid+\"-bots:\"+msg.botname+\":data\";\nlet botdata = {\n    \"finance\":JSON.stringify(msg.bot.finance),\n    \"floors\":JSON.stringify(msg.bot.floors),\n    \"sales\":JSON.stringify(msg.bot.sales)\n    \n};\n\nconst upd = global.get('setbot_data')(volname, botdata);\n\nupd.then(upd => {\n    \n    msg.payload = upd;\n    \n    //>трекер>\n        let end_node_time = new Date().getTime();\n        let duration = end_node_time - start_node_time;\n        let duration_step = end_node_time - last_node_end_time;\n        track.push({\n            \"steptitle\": steptitle,\n            \"start_node_time\": start_node_time,\n            \"end_node_time\": end_node_time,\n            \"duration_node\": duration,\n            \"duration_step\": duration_step\n        });\n        flow.set(\"track\", track);\n    //>трекер>\n    node.status({fill: \"green\", shape: \"ring\", text: start_node_time});\n    \n    node.send(msg);\n\n}).catch(error => {\n    \n    //>трекер>\n        let end_node_time = new Date().getTime();\n        let duration = end_node_time - start_node_time;\n        let duration_step = end_node_time - last_node_end_time;\n        track.push({\n            \"steptitle\": steptitle+\"-faile\",\n            \"start_node_time\": start_node_time,\n            \"end_node_time\": end_node_time,\n            \"duration\": duration,\n            \"duration_step\": duration_step,\n            \"error\": error\n        });\n        flow.set(\"track\", track);\n    //>трекер>\n    node.status({fill: \"red\", shape: \"ring\", text: \"error\"});\n    node.error(error);\n});",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 1990,
        "y": 2760,
        "wires": [
            [
                "8f71fdf8.2081f"
            ]
        ],
        "icon": "font-awesome/fa-bolt"
    },
    {
        "id": "8cc08f5b.14782",
        "type": "function",
        "z": "2a761808.610238",
        "name": "duration",
        "func": "    let trackname = \"ttp-track-\"+msg.botname;\n    let track = flow.get(trackname);\n\nlet laststep = track[track.length-1];\nlet firststep = track[0];\nlet last_node_end_time = laststep.end_node_time;\nlet first_node_start_time = firststep.start_node_time;\n\nlet duration = last_node_end_time - first_node_start_time;\n//node.warn(duration);\nmsg.payload = duration;\n    \nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 3260,
        "y": 360,
        "wires": [
            [
                "96646ac9.fc77d8",
                "60eb6ef5.3e20b"
            ]
        ]
    },
    {
        "id": "96646ac9.fc77d8",
        "type": "debug",
        "z": "2a761808.610238",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 3430,
        "y": 400,
        "wires": []
    },
    {
        "id": "60eb6ef5.3e20b",
        "type": "ui_chart",
        "z": "2a761808.610238",
        "name": "",
        "group": "f244fee6.d2627",
        "order": 0,
        "width": "4",
        "height": "7",
        "label": "ttp track",
        "chartType": "line",
        "legend": "false",
        "xformat": "ss",
        "interpolate": "cubic",
        "nodata": "",
        "dot": true,
        "ymin": "",
        "ymax": "",
        "removeOlder": "10",
        "removeOlderPoints": "40",
        "removeOlderUnit": "1",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": true,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9a244f",
            "#c5b0d5"
        ],
        "outputs": 1,
        "x": 3420,
        "y": 360,
        "wires": [
            []
        ]
    },
    {
        "id": "9f535577.3cdc98",
        "type": "debug",
        "z": "2a761808.610238",
        "g": "c7dcb289.e5232",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 3030,
        "y": 380,
        "wires": []
    },
    {
        "id": "203e6ef2.430c62",
        "type": "comment",
        "z": "2a761808.610238",
        "g": "c7dcb289.e5232",
        "name": "Финиш трека. Семафор = \"Свободно\"",
        "info": "",
        "x": 3000,
        "y": 260,
        "wires": []
    },
    {
        "id": "26cad534.28973a",
        "type": "function",
        "z": "2a761808.610238",
        "g": "c7dcb289.e5232",
        "name": "setttp_free",
        "func": "//<трекер<\n    let trackname = \"ttp-track-\"+msg.botname;\n    let track = flow.get(trackname);\n    let start_node_time = new Date().getTime();\n    let steptitle = node.name;\n\n    let laststep = track[track.length-1];\n    let last_node_end_time = laststep.end_node_time;\n    \n    let firststep = track[0];\n    let first_node_start_time = firststep.start_node_time;\n    \n    let duration_track = last_node_end_time - first_node_start_time;\n//>трекер>\n\nconst upd = global.get('setttp_free')(msg.botname);\n\nupd.then(upd => {\n\n    //>трекер>\n        let end_node_time = new Date().getTime();\n        let duration = end_node_time - start_node_time;\n        let duration_step = end_node_time - last_node_end_time;\n        track.push({\n            \"steptitle\": steptitle,\n            \"start_node_time\": start_node_time,\n            \"end_node_time\": end_node_time,\n            \"duration_node\": duration,\n            \"duration_step\": duration_track //только для финишной ноды\n        });\n\n        \n        flow.set(trackname, track);\n        \n        flow.set(msg.botname, 0);\n    //>трекер>\n    node.status({fill:\"green\",shape:\"dot\"});\n    \n    node.send(msg);\n\n}).catch(error => {\n    //>трекер>\n        let end_node_time = new Date().getTime();\n        let duration = end_node_time - start_node_time;\n        let duration_step = end_node_time - last_node_end_time;\n        track.push({\n            \"steptitle\": steptitle+\"-faile\",\n            \"start_node_time\": start_node_time,\n            \"end_node_time\": end_node_time,\n            \"duration\": duration,\n            \"duration_step\": duration_step,\n            \"error\": error\n        });\n        flow.set(trackname, track);\n    //>трекер>\n    node.status({fill:\"red\",shape:\"dot\"});\n\n    node.error(error);\n});",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 3010,
        "y": 320,
        "wires": [
            [
                "9f535577.3cdc98",
                "8cc08f5b.14782"
            ]
        ],
        "icon": "font-awesome/fa-bolt"
    },
    {
        "id": "d4c6b3ea.b0118",
        "type": "comment",
        "z": "2a761808.610238",
        "g": "74e1a04.6df746",
        "name": "Старт трека",
        "info": "",
        "x": 430,
        "y": 320,
        "wires": []
    },
    {
        "id": "a0ad9ee6.aa105",
        "type": "trigger",
        "z": "2a761808.610238",
        "g": "74e1a04.6df746",
        "name": "",
        "op1": "1",
        "op2": "0",
        "op1type": "str",
        "op2type": "str",
        "duration": "-250",
        "extend": false,
        "overrideDelay": false,
        "units": "ms",
        "reset": "",
        "bytopic": "all",
        "topic": "topic",
        "outputs": 1,
        "x": 780,
        "y": 380,
        "wires": [
            [
                "da5d3bc9.d65b18"
            ]
        ]
    },
    {
        "id": "4c9d9272.a06d2c",
        "type": "delay",
        "z": "2a761808.610238",
        "g": "74e1a04.6df746",
        "name": "",
        "pauseType": "delay",
        "timeout": "2",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "x": 560,
        "y": 380,
        "wires": [
            [
                "a0ad9ee6.aa105"
            ]
        ]
    },
    {
        "id": "ddf77463.b02678",
        "type": "function",
        "z": "2a761808.610238",
        "g": "74e1a04.6df746",
        "name": "stop",
        "func": "msg.reset = true;\nmsg.payload = \"\";\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 550,
        "y": 440,
        "wires": [
            [
                "a0ad9ee6.aa105"
            ]
        ]
    },
    {
        "id": "599eef92.8ee31",
        "type": "redis-in",
        "z": "2a761808.610238",
        "g": "74e1a04.6df746",
        "server": "f120eab2.0a60a8",
        "command": "subscribe",
        "name": "",
        "topic": "stop",
        "obj": true,
        "timeout": 0,
        "x": 410,
        "y": 440,
        "wires": [
            [
                "ddf77463.b02678"
            ]
        ]
    },
    {
        "id": "799698b0.78a948",
        "type": "redis-in",
        "z": "2a761808.610238",
        "g": "74e1a04.6df746",
        "server": "f120eab2.0a60a8",
        "command": "subscribe",
        "name": "",
        "topic": "start",
        "obj": true,
        "timeout": 0,
        "x": 410,
        "y": 380,
        "wires": [
            [
                "4c9d9272.a06d2c"
            ]
        ]
    },
    {
        "id": "fe8b13e1.db5bf",
        "type": "redis-in",
        "z": "2a761808.610238",
        "g": "74e1a04.6df746",
        "server": "f120eab2.0a60a8",
        "command": "subscribe",
        "name": "",
        "topic": "start1",
        "obj": true,
        "timeout": 0,
        "x": 830,
        "y": 320,
        "wires": [
            [
                "da5d3bc9.d65b18"
            ]
        ]
    },
    {
        "id": "10d73930.850c67",
        "type": "comment",
        "z": "2a761808.610238",
        "g": "74e1a04.6df746",
        "name": "Семафор = \"Занято\"",
        "info": "",
        "x": 2460,
        "y": 300,
        "wires": []
    },
    {
        "id": "2e524180.ede67e",
        "type": "function",
        "z": "2a761808.610238",
        "g": "74e1a04.6df746",
        "name": "start ttp",
        "func": "//<трекер<\n    ////>только для стартовой ноды>\n        var track = [];\n        let start_track_time = new Date().getTime();\n        let start_node_time = start_track_time;\n        let steptitle = node.name;\n    ////>только для стартовой ноды>\n//>трекер>\n\n\n\nmsg.payload = global.get('guid');\n\n\n//>трекер>\n\n\n    let end_node_time = new Date().getTime();\n    let duration = end_node_time - start_node_time;\n    track.push({\n        \"steptitle\": steptitle,\n        \"start_node_time\": start_node_time,\n        \"end_node_time\": end_node_time,\n        \"duration_node\": duration,\n        \"duration_step\": 0\n    });\n    let trackname = \"ttp-track-\"+msg.botname;\n    flow.set(trackname, track);\n//>трекер>\nnode.status({ fill: \"green\", shape: \"ring\", text: duration });\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 2280,
        "y": 380,
        "wires": [
            [
                "3e882d4e.c91df2"
            ]
        ]
    },
    {
        "id": "da5d3bc9.d65b18",
        "type": "function",
        "z": "2a761808.610238",
        "g": "74e1a04.6df746",
        "name": "getbotlist",
        "func": "let guid = global.get('guid');\n\nconst gbl = global.get('getbotlist')(guid);\n\ngbl.then(gbl => {\n    \n    msg.payload = gbl;\n    \n    node.status({fill:\"green\",shape:\"dot\"});\n    node.send(msg);\n\n}).catch(error => {\n    \n    node.status({fill:\"red\",shape:\"dot\"});\n    node.error(error);\n});",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 980,
        "y": 380,
        "wires": [
            [
                "461d3964.de54f8",
                "7e462ed6.19cfd"
            ]
        ]
    },
    {
        "id": "461d3964.de54f8",
        "type": "json",
        "z": "2a761808.610238",
        "g": "74e1a04.6df746",
        "name": "",
        "property": "payload",
        "action": "obj",
        "pretty": false,
        "x": 1130,
        "y": 380,
        "wires": [
            [
                "5b61698e.e6e8b8"
            ]
        ]
    },
    {
        "id": "5b61698e.e6e8b8",
        "type": "split",
        "z": "2a761808.610238",
        "g": "74e1a04.6df746",
        "name": "",
        "splt": "1",
        "spltType": "len",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "x": 1270,
        "y": 380,
        "wires": [
            [
                "f18cbfd9.f0367"
            ]
        ]
    },
    {
        "id": "f18cbfd9.f0367",
        "type": "function",
        "z": "2a761808.610238",
        "g": "74e1a04.6df746",
        "name": "getbot_onoff",
        "func": "\n\nlet botname = msg.payload;\nmsg.botname = botname;\n\nconst gb = global.get('getbot_onoff')(botname);\n\ngb.then(gb => {\n    \n    msg.payload = JSON.parse(gb);\n    \n    node.status({fill:\"green\",shape:\"dot\"});\n    node.send(msg);\n\n}).catch(error => {\n    \n    node.status({fill:\"red\",shape:\"dot\"});\n    node.error(error);\n});",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 1410,
        "y": 380,
        "wires": [
            [
                "3d559730.32d2c8"
            ]
        ]
    },
    {
        "id": "3d559730.32d2c8",
        "type": "filter",
        "z": "2a761808.610238",
        "g": "74e1a04.6df746",
        "name": "filter off",
        "property": "payload",
        "propertyType": "msg",
        "asArray": false,
        "itemProperty": "",
        "itemPropertyType": "item",
        "rules": [
            {
                "t": "true",
                "output": 1
            }
        ],
        "checkall": "true",
        "outputs": 1,
        "x": 1580,
        "y": 380,
        "wires": [
            [
                "f347b3fa.86c68"
            ]
        ]
    },
    {
        "id": "f347b3fa.86c68",
        "type": "function",
        "z": "2a761808.610238",
        "g": "74e1a04.6df746",
        "name": "get_ttp_q",
        "func": "\n\nconst gb = global.get('get_ttp_q')(msg.botname);\n\ngb.then(gb => {\n    \n    msg.ttpq = JSON.parse(gb) || 0;\n    \n\n    node.status({fill:\"green\",shape:\"dot\"});\n    \n    \n    node.send(msg);\n\n}).catch(error => {\n    \n\n    node.status({fill:\"red\",shape:\"dot\"});\n    \n    node.error(error);\n});",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 1740,
        "y": 380,
        "wires": [
            [
                "3c03470a.507ec8"
            ]
        ]
    },
    {
        "id": "e7cd9c55.03487",
        "type": "function",
        "z": "2a761808.610238",
        "g": "74e1a04.6df746",
        "name": "busy === false ",
        "func": "\n\nif (msg.payload === false) {\n   \n    node.status({fill:\"green\",shape:\"dot\"});\n    \n    return [msg, null];\n}\n\nelse {\n\n    let id = msg.botname;\n    msg.payload = [];\n\n    var count = flow.get(id) || 0;\n    count += 1;\n\n    node.status({fill:\"blue\",shape:\"dot\"});\n\n\n    if (count > 6) {\n        const upd = global.get('setttp_free')(id);\n   \n        let trackname = \"ttp-track-\"+msg.botname;\n        let lasttrack = JSON.stringify(flow.get(trackname) || \"\", null, '\\t');\n        \n        \n        //запись в журнал\n        let botname = \"syslog.txt\";\n        let data = \"Сброс ttp \"+msg.botname+\" \\n \"+lasttrack;\n        const syslog = global.get('tilog')(botname,data);\n        syslog;\n        \n        let botname2 = msg.botname;\n        let data2 = \"Сброс ttp busy \\n \"+lasttrack;\n        const tilog = global.get('tilog')(botname2,data2);\n        tilog;\n        //запись в журнал\n\n        upd.then(upd => {\n            \n\n            node.status({fill:\"red\",shape:\"dot\"});\n            \n            flow.set(id, 0);\n            node.warn(\"reset ttp busy:\" + id);\n\n        }).catch(error => {\n            node.error(error);\n        });\n\n    }\n    flow.set(id, count);\n    return [null, msg];\n}\n\n\n\n\n\n",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 2100,
        "y": 380,
        "wires": [
            [
                "2e524180.ede67e"
            ],
            [
                "8ff82160.e2aa7"
            ]
        ],
        "icon": "font-awesome/fa-bolt"
    },
    {
        "id": "7e462ed6.19cfd",
        "type": "debug",
        "z": "2a761808.610238",
        "g": "74e1a04.6df746",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1070,
        "y": 320,
        "wires": []
    },
    {
        "id": "3e882d4e.c91df2",
        "type": "function",
        "z": "2a761808.610238",
        "g": "74e1a04.6df746",
        "name": "setttp_busy",
        "func": "//<трекер<\n    let trackname = \"ttp-track-\"+msg.botname;\n    let track = flow.get(trackname);\n    let start_node_time = new Date().getTime();\n    let steptitle = node.name;\n\n    let laststep = track[track.length-1];\n    let last_node_end_time = laststep.end_node_time;\n//>трекер>\n\nconst upd = global.get('setttp_busy')(msg.botname);\n\nupd.then(upd => {\n\n    //>трекер>\n        let end_node_time = new Date().getTime();\n        let duration = end_node_time - start_node_time;\n        let duration_step = end_node_time - last_node_end_time;\n        track.push({\n            \"steptitle\": steptitle,\n            \"start_node_time\": start_node_time,\n            \"end_node_time\": end_node_time,\n            \"duration_node\": duration,\n            \"duration_step\": duration_step\n        });\n        flow.set(trackname, track);\n    //>трекер>\n    node.status({fill:\"green\",shape:\"dot\"});\n    \n    node.send(msg);\n\n}).catch(error => {\n    \n    //>трекер>\n        let end_node_time = new Date().getTime();\n        let duration = end_node_time - start_node_time;\n        let duration_step = end_node_time - last_node_end_time;\n        track.push({\n            \"steptitle\": steptitle+\"-faile\",\n            \"start_node_time\": start_node_time,\n            \"end_node_time\": end_node_time,\n            \"duration\": duration,\n            \"duration_step\": duration_step,\n            \"error\": error\n        });\n        flow.set(trackname, track);\n    //>трекер>\n    node.status({fill:\"red\",shape:\"dot\"});\n    node.error(error);\n});",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 2450,
        "y": 380,
        "wires": [
            [
                "1494284.0d799d8",
                "14218f4f.622ba1",
                "ccbca6c6.392f58"
            ]
        ],
        "icon": "font-awesome/fa-bolt"
    },
    {
        "id": "1494284.0d799d8",
        "type": "debug",
        "z": "2a761808.610238",
        "g": "74e1a04.6df746",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 2470,
        "y": 340,
        "wires": []
    },
    {
        "id": "8ff82160.e2aa7",
        "type": "debug",
        "z": "2a761808.610238",
        "g": "74e1a04.6df746",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 2170,
        "y": 440,
        "wires": []
    },
    {
        "id": "ad12b785.28a248",
        "type": "function",
        "z": "5df15275.2888ec",
        "name": "getttp_busy()",
        "func": "",
        "outputs": 1,
        "noerr": 0,
        "initialize": "let guid = global.get('guid');\n\n\nlet getttp_busy = function (botname = msg.payload) {\n    \n    let promise = new Promise((resolve, reject) => {\n        msg.resolve = resolve;\n        msg.reject = reject;\n    });\n    \n\n    msg.topic = guid+\"-bots:\"+botname+\":ttpbusy\";\n    msg.payload = [];\n\n    node.send(Object.assign({}, msg));\n    \n    return promise;\n};\n\nglobal.set('getttp_busy', getttp_busy);",
        "finalize": "",
        "x": 310,
        "y": 620,
        "wires": [
            [
                "1fbec662.47207a"
            ]
        ]
    },
    {
        "id": "c71e397c.950708",
        "type": "inject",
        "z": "5df15275.2888ec",
        "name": "botname",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "x": 140,
        "y": 620,
        "wires": [
            [
                "ad12b785.28a248"
            ]
        ]
    },
    {
        "id": "e8138704.566608",
        "type": "function",
        "z": "5df15275.2888ec",
        "name": "resolve",
        "func": "msg.resolve(msg.payload);\n\n// reject\n// setTimeout(function () {\n//     msg.reject({message: 'Could not request joke'});\n// }, 2000);",
        "outputs": "0",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 700,
        "y": 620,
        "wires": []
    },
    {
        "id": "1fbec662.47207a",
        "type": "redis-command",
        "z": "5df15275.2888ec",
        "server": "f120eab2.0a60a8",
        "command": "GET",
        "name": "get ttp busy",
        "topic": "msg.payload",
        "params": "[]",
        "paramsType": "json",
        "payloadType": "json",
        "block": false,
        "x": 510,
        "y": 620,
        "wires": [
            [
                "e8138704.566608"
            ]
        ]
    },
    {
        "id": "f99b5c1c.7331f",
        "type": "function",
        "z": "5df15275.2888ec",
        "name": "setttp_busy()",
        "func": "",
        "outputs": 1,
        "noerr": 0,
        "initialize": "let guid = global.get('guid');\n\nlet setttp_busy = function (botname = msg.topic) {\n    \n    let promise = new Promise((resolve, reject) => {\n        msg.resolve = resolve;\n        msg.reject = reject;\n    });\n    \n     msg.topic = guid+\"-bots:\"+botname+\":ttpbusy\";\n    msg.payload = \"true\";\n\n    node.send(Object.assign({}, msg));\n    \n    return promise;\n};\n\nglobal.set('setttp_busy', setttp_busy);",
        "finalize": "",
        "x": 310,
        "y": 680,
        "wires": [
            [
                "aab0c85.ef39438"
            ]
        ]
    },
    {
        "id": "3aeb9fba.62023",
        "type": "inject",
        "z": "5df15275.2888ec",
        "name": "botname",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "x": 140,
        "y": 680,
        "wires": [
            [
                "f99b5c1c.7331f"
            ]
        ]
    },
    {
        "id": "723c4563.27929c",
        "type": "function",
        "z": "5df15275.2888ec",
        "name": "resolve",
        "func": "msg.resolve(msg.payload);\n\n// reject\n// setTimeout(function () {\n//     msg.reject({message: 'Could not request joke'});\n// }, 2000);",
        "outputs": "0",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 700,
        "y": 680,
        "wires": []
    },
    {
        "id": "aab0c85.ef39438",
        "type": "redis-command",
        "z": "5df15275.2888ec",
        "server": "f120eab2.0a60a8",
        "command": "getset",
        "name": "",
        "topic": "",
        "params": "[]",
        "paramsType": "json",
        "payloadType": "json",
        "block": false,
        "x": 510,
        "y": 680,
        "wires": [
            [
                "723c4563.27929c"
            ]
        ]
    },
    {
        "id": "25e06abb.c85db6",
        "type": "function",
        "z": "5df15275.2888ec",
        "name": "setttp_free()",
        "func": "",
        "outputs": 1,
        "noerr": 0,
        "initialize": "let guid = global.get('guid');\n\nlet setttp_free = function (botname = msg.topic) {\n    \n    let promise = new Promise((resolve, reject) => {\n        msg.resolve = resolve;\n        msg.reject = reject;\n    });\n    \n    msg.topic = guid+\"-bots:\"+botname+\":ttpbusy\";\n    msg.payload = \"false\";\n\n    node.send(Object.assign({}, msg));\n    \n    return promise;\n};\n\nglobal.set('setttp_free', setttp_free);",
        "finalize": "",
        "x": 310,
        "y": 740,
        "wires": [
            [
                "9645aa68.b48878"
            ]
        ]
    },
    {
        "id": "89e6754d.d02338",
        "type": "inject",
        "z": "5df15275.2888ec",
        "name": "botname",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "x": 140,
        "y": 740,
        "wires": [
            [
                "25e06abb.c85db6"
            ]
        ]
    },
    {
        "id": "2b86e90f.d5bac6",
        "type": "function",
        "z": "5df15275.2888ec",
        "g": "c625f482.ef7058",
        "name": "resolve",
        "func": "msg.resolve(msg.payload);\n\n// reject\n// setTimeout(function () {\n//     msg.reject({message: 'Could not request joke'});\n// }, 2000);",
        "outputs": "0",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 700,
        "y": 740,
        "wires": []
    },
    {
        "id": "9645aa68.b48878",
        "type": "redis-command",
        "z": "5df15275.2888ec",
        "server": "f120eab2.0a60a8",
        "command": "getset",
        "name": "",
        "topic": "",
        "params": "[]",
        "paramsType": "json",
        "payloadType": "json",
        "block": false,
        "x": 510,
        "y": 740,
        "wires": [
            [
                "2b86e90f.d5bac6"
            ]
        ]
    },
    {
        "id": "ccd55cdb.7ed72",
        "type": "link in",
        "z": "2a761808.610238",
        "name": "",
        "links": [
            "6686db1e.4b1904",
            "1cd1edd3.c1f1d2",
            "c5493216.68ad1",
            "4dfef6b5.251a18",
            "1d26132c.06016d",
            "b0d5adc0.69eab",
            "4b4fa1ce.2d444",
            "bcd1d88e.da80d8",
            "db26ef3b.7f5f6"
        ],
        "x": 2775,
        "y": 320,
        "wires": [
            [
                "26cad534.28973a",
                "2ebe95ca.a5fdaa"
            ]
        ]
    },
    {
        "id": "14218f4f.622ba1",
        "type": "link out",
        "z": "2a761808.610238",
        "name": "",
        "links": [
            "e9ac4d38.5faef",
            "e84c68c5.b035e8"
        ],
        "x": 2375,
        "y": 320,
        "wires": []
    },
    {
        "id": "3c03470a.507ec8",
        "type": "function",
        "z": "2a761808.610238",
        "g": "74e1a04.6df746",
        "name": "getttp_busy",
        "func": "\n\nconst gb = global.get('getttp_busy')(msg.botname);\n\ngb.then(gb => {\n    \n    msg.payload = JSON.parse(gb);\n    \n\n    node.status({fill:\"green\",shape:\"dot\"});\n    \n    \n    node.send(msg);\n\n}).catch(error => {\n    \n\n    node.status({fill:\"red\",shape:\"dot\"});\n    \n    node.error(error);\n});",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 1910,
        "y": 380,
        "wires": [
            [
                "e7cd9c55.03487"
            ]
        ]
    },
    {
        "id": "6ae38ed.612797",
        "type": "inject",
        "z": "2a761808.610238",
        "g": "115b1d61.ba4ba3",
        "name": " stop",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "reset",
                "v": "true",
                "vt": "bool"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 610,
        "y": 100,
        "wires": [
            [
                "9539cd06.048d1"
            ]
        ]
    },
    {
        "id": "9539cd06.048d1",
        "type": "redis-out",
        "z": "2a761808.610238",
        "g": "115b1d61.ba4ba3",
        "server": "f120eab2.0a60a8",
        "command": "publish",
        "name": "",
        "topic": "stop",
        "obj": false,
        "x": 610,
        "y": 140,
        "wires": []
    },
    {
        "id": "61edcde5.92f5f4",
        "type": "inject",
        "z": "2a761808.610238",
        "g": "115b1d61.ba4ba3",
        "name": "start",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 190,
        "y": 100,
        "wires": [
            [
                "4ea4b575.92fb0c"
            ]
        ]
    },
    {
        "id": "4ea4b575.92fb0c",
        "type": "redis-out",
        "z": "2a761808.610238",
        "g": "115b1d61.ba4ba3",
        "server": "f120eab2.0a60a8",
        "command": "publish",
        "name": "",
        "topic": "start",
        "obj": false,
        "x": 190,
        "y": 140,
        "wires": []
    },
    {
        "id": "8d2ce50.2e70018",
        "type": "inject",
        "z": "2a761808.610238",
        "g": "115b1d61.ba4ba3",
        "name": "start1",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 370,
        "y": 100,
        "wires": [
            [
                "bdd4eff7.879af"
            ]
        ]
    },
    {
        "id": "bdd4eff7.879af",
        "type": "redis-out",
        "z": "2a761808.610238",
        "g": "115b1d61.ba4ba3",
        "server": "f120eab2.0a60a8",
        "command": "publish",
        "name": "",
        "topic": "start1",
        "obj": false,
        "x": 370,
        "y": 140,
        "wires": []
    },
    {
        "id": "dfef6495.a62e98",
        "type": "debug",
        "z": "2a761808.610238",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 150,
        "y": 880,
        "wires": []
    },
    {
        "id": "8cc76823.4b4e68",
        "type": "function",
        "z": "2a761808.610238",
        "name": "getprice",
        "func": "//<трекер<\n    let trackname = \"ttp-track-\"+msg.botname;\n    let track = flow.get(trackname);\n    let start_node_time = new Date().getTime();\n    let steptitle = node.name;\n\n    let laststep = track[track.length-1];\n    let last_node_end_time = laststep.end_node_time;\n//>трекер>\nlet moneta = msg.bot.settings.moneta;\n\nconst gp = global.get('getprice')(moneta);\n\ngp.then(gp => {\n    \n    msg.bot.ttp.currentprice = gp;\n    \n    //>трекер>\n        let end_node_time = new Date().getTime();\n        let duration = end_node_time - start_node_time;\n        let duration_step = end_node_time - last_node_end_time;\n        track.push({\n            \"steptitle\": steptitle,\n            \"start_node_time\": start_node_time,\n            \"end_node_time\": end_node_time,\n            \"duration_node\": duration,\n            \"duration_step\": duration_step\n        });\n        flow.set(trackname, track);\n    //>трекер>\n    node.status({fill:\"green\",shape:\"dot\"});\n    node.send(msg);\n\n}).catch(error => {\n    \n    //>трекер>\n        let end_node_time = new Date().getTime();\n        let duration = end_node_time - start_node_time;\n        let duration_step = end_node_time - last_node_end_time;\n        track.push({\n            \"steptitle\": steptitle+\"-faile\",\n            \"start_node_time\": start_node_time,\n            \"end_node_time\": end_node_time,\n            \"duration\": duration,\n            \"duration_step\": duration_step,\n            \"error\": error\n        });\n        flow.set(trackname, track);\n    //>трекер>\n    node.status({fill:\"red\",shape:\"dot\"});\n    node.error(error);\n});",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 740,
        "y": 940,
        "wires": [
            [
                "a8b94df7.7a189",
                "62c4398c.2e9318"
            ]
        ]
    },
    {
        "id": "a8b94df7.7a189",
        "type": "debug",
        "z": "2a761808.610238",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 890,
        "y": 900,
        "wires": []
    },
    {
        "id": "fb58c58.87c1938",
        "type": "comment",
        "z": "2a761808.610238",
        "name": "ситуация",
        "info": "когда stopsell частично заполнился, но потом цена отросла и бот хочет подвинуть ордер дальше вверх. \nПроблема будет если остаток меньше минимума лота.\nСейчас такой ордер мы просто оставляем висеть до заполненности.\nМожно пока в телеграмм о таких случаях стучать, чтобы хозяин вручную разруливал, но по уму надо двигать ордер, на ходу меняя quantity с соответствующей проекцией во floors",
        "x": 3040,
        "y": 880,
        "wires": []
    },
    {
        "id": "62c4398c.2e9318",
        "type": "function",
        "z": "2a761808.610238",
        "name": "calculate stop price and quantity",
        "func": "\nlet currentprice = Number(msg.bot.ttp.currentprice);\nmsg.bot.ttp.raschstopprice = Number(Number(currentprice - currentprice / 100 * msg.bot.settings.ofsettop).toFixed(msg.bot.settings.digitprice));\nmsg.bot.ttp.curstop = Number(msg.bot.ttp.curstop || 0);\nmsg.bot.ttp.curorderid = Number(msg.bot.ttp.curorderid);\n\n\nmsg.bot.ttp.quantity = Number(msg.bot.ttp.quantity) + Number(msg.ttpq);\n\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 980,
        "y": 940,
        "wires": [
            [
                "3cfe83ca.3b1c1c",
                "2f9f396e.884876"
            ]
        ]
    },
    {
        "id": "d9cd8b69.9e4298",
        "type": "switch",
        "z": "2a761808.610238",
        "name": "raschstopprice ? curstop",
        "property": "bot.ttp.raschstopprice",
        "propertyType": "msg",
        "rules": [
            {
                "t": "gt",
                "v": "bot.ttp.curstop",
                "vt": "msg"
            },
            {
                "t": "lte",
                "v": "bot.ttp.curstop",
                "vt": "msg"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 1570,
        "y": 940,
        "wires": [
            [
                "75de299e.39af68",
                "d36ac308.31104"
            ],
            [
                "22ce871e.981968",
                "d74f254.44f36d8"
            ]
        ]
    },
    {
        "id": "75de299e.39af68",
        "type": "switch",
        "z": "2a761808.610238",
        "name": "order id > 0 ",
        "property": "bot.ttp.curorderid",
        "propertyType": "msg",
        "rules": [
            {
                "t": "gt",
                "v": "0",
                "vt": "num"
            },
            {
                "t": "eq",
                "v": "0",
                "vt": "num"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 1950,
        "y": 900,
        "wires": [
            [
                "8512490.cbc97b8"
            ],
            [
                "b63e592d.fd0258"
            ]
        ]
    },
    {
        "id": "22ce871e.981968",
        "type": "function",
        "z": "2a761808.610238",
        "name": "prepare get ttp order status",
        "func": "//<трекер<\n    let trackname = \"ttp-track-\"+msg.botname;\n    let track = flow.get(trackname);\n    let start_node_time = new Date().getTime();\n    let steptitle = node.name;\n\n    let laststep = track[track.length-1];\n    let last_node_end_time = laststep.end_node_time;\n//>трекер>\nlet moneta = msg.bot.settings.moneta;\nmsg.moneta = moneta;\nlet orderid = msg.bot.ttp.curorderid\nmsg.orderid = orderid;\n\n \nmsg.topic = \"orders-status-\" + msg.bot.settings.userid + \":\" + moneta + \":\" + orderid;\n\n\n\n    //>трекер>\n        let end_node_time = new Date().getTime();\n        let duration = end_node_time - start_node_time;\n        let duration_step = end_node_time - last_node_end_time;\n        track.push({\n            \"steptitle\": steptitle,\n            \"start_node_time\": start_node_time,\n            \"end_node_time\": end_node_time,\n            \"duration_node\": duration,\n            \"duration_step\": duration_step\n        });\n        flow.set(trackname, track);\n    //>трекер>\nnode.status({fill: \"green\", shape: \"ring\", text: orderid});\nreturn msg;\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 1940,
        "y": 1520,
        "wires": [
            [
                "d65fadb6.35c73"
            ]
        ],
        "inputLabels": [
            "orderid"
        ],
        "outputLabels": [
            "status"
        ],
        "icon": "node-red-contrib-binance/binance.png"
    },
    {
        "id": "d1ff77a2.4fa0d8",
        "type": "switch",
        "z": "2a761808.610238",
        "name": "статус ордера",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "NEW",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "PARTIALLY_FILLED",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "CANCELED",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "FILLED",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "REJECTED",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "EXPIRED",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 6,
        "x": 2400,
        "y": 1520,
        "wires": [
            [
                "20812514.c92caa",
                "1d26132c.06016d"
            ],
            [
                "1d26132c.06016d"
            ],
            [
                "dde31f58.2a26c",
                "b0d5adc0.69eab"
            ],
            [
                "b5bd6f90.f563b",
                "427396ec.791098"
            ],
            [
                "487d47c0.c7ede8",
                "4b4fa1ce.2d444"
            ],
            [
                "487d47c0.c7ede8",
                "4b4fa1ce.2d444"
            ]
        ]
    },
    {
        "id": "4534916e.904b6",
        "type": "comment",
        "z": "2a761808.610238",
        "name": "NEW",
        "info": "",
        "x": 2630,
        "y": 1380,
        "wires": []
    },
    {
        "id": "587bbf9a.07aa8",
        "type": "comment",
        "z": "2a761808.610238",
        "name": "CANCELED",
        "info": "",
        "x": 2850,
        "y": 1520,
        "wires": []
    },
    {
        "id": "f4e2a24.f2c696",
        "type": "comment",
        "z": "2a761808.610238",
        "name": "FILLED",
        "info": "",
        "x": 2630,
        "y": 1580,
        "wires": []
    },
    {
        "id": "cb0cab38.a71d88",
        "type": "comment",
        "z": "2a761808.610238",
        "name": "REJECTED или EXPIRED",
        "info": "",
        "x": 2690,
        "y": 1720,
        "wires": []
    },
    {
        "id": "b6e46ae5.962f68",
        "type": "comment",
        "z": "2a761808.610238",
        "name": "PARTIALLY_FILLED",
        "info": "",
        "x": 2790,
        "y": 1380,
        "wires": []
    },
    {
        "id": "b5bd6f90.f563b",
        "type": "function",
        "z": "2a761808.610238",
        "name": "set sold",
        "func": "msg.bot.ttp.sold = true;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 2820,
        "y": 1580,
        "wires": [
            [
                "be5acd7a.49384",
                "e4485160.d6d2d"
            ]
        ]
    },
    {
        "id": "be5acd7a.49384",
        "type": "debug",
        "z": "2a761808.610238",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 2990,
        "y": 1620,
        "wires": []
    },
    {
        "id": "20812514.c92caa",
        "type": "debug",
        "z": "2a761808.610238",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 2630,
        "y": 1300,
        "wires": []
    },
    {
        "id": "427396ec.791098",
        "type": "debug",
        "z": "2a761808.610238",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 2810,
        "y": 1640,
        "wires": []
    },
    {
        "id": "3f419d0e.63d7e2",
        "type": "switch",
        "z": "2a761808.610238",
        "name": "status NEW ?",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "true"
            },
            {
                "t": "false"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 2780,
        "y": 840,
        "wires": [
            [
                "4e9b52a8.6339fc"
            ],
            [
                "3b67ca17.09d026",
                "c5493216.68ad1"
            ]
        ]
    },
    {
        "id": "e21a46d3.0d0cd8",
        "type": "function",
        "z": "2a761808.610238",
        "name": "prepare data",
        "func": "if (msg.payload == \"NEW\") {\n    msg.payload = true;\n}\nelse {\n    msg.payload = false;\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 2610,
        "y": 840,
        "wires": [
            [
                "3f419d0e.63d7e2",
                "f81dfd6c.f5b49"
            ]
        ]
    },
    {
        "id": "ff59f044.05302",
        "type": "function",
        "z": "2a761808.610238",
        "name": "set stop sell order",
        "func": "//msg.curstop = Number(msg.bot.ttp.curstop);\n\nmsg.bot.ttp.quantity = msg.bot.ttp.quantity || 0;\n\nfunction parseApiError(error) {\n  if (error.body) {\n    try {\n      var resp = JSON.parse(error.body);\n      return resp.msg;\n    } catch (error) {/* pass thru */}\n  }\n  return \"Unknown error. Status code: \"+error.statsCode;\n}\n\nlet LBinance = global.get('gBinance');\n//node.warn(LBinance);\nlet key = global.get('key');\nlet secret = global.get('secret');\n\nlet binance = new LBinance().options({\n\tAPIKEY: key,\n\tAPISECRET: secret,\n\treconnect: false,\n\tuseServerTime: true\n});\n\nlet moneta = msg.bot.settings.moneta;\nlet quantity = (Number(msg.bot.ttp.quantity)).toFixed(msg.bot.settings.digitq);\n\nlet priceb = (Number((msg.bot.ttp.raschstopprice - msg.bot.ttp.raschstopprice / 100 * msg.bot.settings.ofsetbottom))).toFixed(msg.bot.settings.digitprice);\nlet stopprice = (Number(msg.bot.ttp.raschstopprice)).toFixed(msg.bot.settings.digitprice);\n\n\nnode.warn(\"q:\"+quantity);\nnode.warn(\"p:\"+priceb);\nnode.warn(\"sp:\"+stopprice);\nbinance.useServerTime(function() {\n binance.sell(moneta, quantity, priceb, { stopPrice: stopprice, type: \"STOP_LOSS_LIMIT\" }, function (err, resp) {\n          if (err) {\n            var errorMsg = parseApiError(err);\n            node.error(errorMsg, msg);\n            node.status({fill: \"red\", shape: \"ring\", text: errorMsg});\n            node.send(msg);\n            \n            \n          }\n          if (resp) {\n                        msg.bot.ttp.curorderid = resp.orderId;\n                        msg.bot.ttp.curstop = stopprice;\n                        msg.bot.ttp.quantity = quantity;\n                        node.send(msg);\n          }\n          node.status({}); //clear status message\n\n          \n          \n          //return;\n        })\n});",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 3310,
        "y": 780,
        "wires": [
            [
                "a501d430.a110d8",
                "bc452645.1f3798"
            ]
        ],
        "inputLabels": [
            "orderid, moneta"
        ],
        "outputLabels": [
            "status"
        ],
        "icon": "font-awesome/fa-compress"
    },
    {
        "id": "4e9b52a8.6339fc",
        "type": "function",
        "z": "2a761808.610238",
        "name": "cancel stopsell order if exist",
        "func": "\nfunction parseApiError(error) {\n  if (error.body) {\n    try {\n      var resp = JSON.parse(error.body);\n      return resp.msg;\n    } catch (error) {/* pass thru */}\n  }\n  return \"Unknown error. Status code: \"+error.statsCode;\n}\n\nlet LBinance = global.get('gBinance');\n//node.warn(LBinance);\nlet key = global.get('key');\nlet secret = global.get('secret');\n\nlet binance = new LBinance().options({\n\tAPIKEY: key,\n\tAPISECRET: secret,\n\treconnect: false,\n\tuseServerTime: true\n});\n\nlet moneta = msg.bot.settings.moneta;\nlet orderid = msg.bot.ttp.curorderid;\n\n//msg.payload = \"qjson.status\";\n\nbinance.useServerTime(function() {\n    binance.cancel(moneta, orderid, (err, resp) => {\n     // console.info(\"Limit Buy response\", response);\n     // console.info(\"order id: \" + response.orderId);\n        if (err) {\n            var errorMsg = parseApiError(err) + \", moneta:\" + moneta;\n            node.error(errorMsg, msg);\n            node.status({fill: \"red\", shape: \"ring\", text: errorMsg});\n            \n            \n            \n            node.send(msg);\n            // ;\n        \n        }\n        if (resp) {\n            //msg.orderid = resp.orderId;\n            msg.resp = resp;\n            node.status({fill: \"green\", shape: \"ring\"});\n            \n            \n            let tempfin = Number(Number(msg.bot.finance.baseinorders) - Number(msg.bot.ttp.quantity)*Number(msg.bot.ttp.curstop));\n            let tempfin2 = Number(Number(msg.bot.finance.basenal) + Number(msg.bot.ttp.quantity)*Number(msg.bot.ttp.curstop));\n            \n            msg.bot.finance.baseinorders = tempfin.toFixed(msg.bot.settings.digitprice);\n            msg.bot.finance.basenal = tempfin2.toFixed(msg.bot.settings.digitprice);\n            \n            \n            node.send(msg);\n            //return [null,msg];\n                    \n        }\n        //node.status({}); //clear status message\n    })\n});\n\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 3060,
        "y": 780,
        "wires": [
            [
                "ff59f044.05302",
                "6e7cbbc0.0e0694"
            ]
        ]
    },
    {
        "id": "6e7cbbc0.0e0694",
        "type": "debug",
        "z": "2a761808.610238",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 3130,
        "y": 740,
        "wires": []
    },
    {
        "id": "b63e592d.fd0258",
        "type": "function",
        "z": "2a761808.610238",
        "name": "set stop sell order",
        "func": "//msg.curstop = Number(msg.bot.ttp.curstop);\n\nmsg.bot.ttp.quantity = msg.bot.ttp.quantity || 0;\n\nfunction parseApiError(error) {\n  if (error.body) {\n    try {\n      var resp = JSON.parse(error.body);\n      return resp.msg;\n    } catch (error) {/* pass thru */}\n  }\n  return \"Unknown error. Status code: \"+error.statsCode;\n}\n\nlet LBinance = global.get('gBinance');\n//node.warn(LBinance);\nlet key = global.get('key');\nlet secret = global.get('secret');\n\nlet binance = new LBinance().options({\n\tAPIKEY: key,\n\tAPISECRET: secret,\n\treconnect: false,\n\tuseServerTime: true\n});\n\nlet moneta = msg.bot.settings.moneta;\nlet quantity = (Number(msg.bot.ttp.quantity)).toFixed(msg.bot.settings.digitq);\n\nlet priceb = (Number((msg.bot.ttp.raschstopprice - msg.bot.ttp.raschstopprice / 100 * msg.bot.settings.ofsetbottom))).toFixed(msg.bot.settings.digitprice);\nlet stopprice = (Number(msg.bot.ttp.raschstopprice)).toFixed(msg.bot.settings.digitprice);\n\n\nnode.warn(\"q:\"+quantity);\nnode.warn(\"p:\"+priceb);\nnode.warn(\"sp:\"+stopprice);\nbinance.useServerTime(function() {\n binance.sell(moneta, quantity, priceb, { stopPrice: stopprice, type: \"STOP_LOSS_LIMIT\" }, function (err, resp) {\n          if (err) {\n            var errorMsg = parseApiError(err);\n            node.error(errorMsg, msg);\n            node.status({fill: \"red\", shape: \"ring\", text: errorMsg});\n             node.send(msg);\n            \n            \n          }\n          if (resp) {\n                        msg.bot.ttp.curorderid = resp.orderId;\n                        msg.bot.ttp.curstop = stopprice;\n                        msg.bot.ttp.quantity = quantity;\n                         node.send(msg);\n          }\n          node.status({}); //clear status message\n\n          \n         \n          //return;\n        })\n    \n});\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 2170,
        "y": 940,
        "wires": [
            [
                "81dc0016.b7633"
            ]
        ],
        "inputLabels": [
            "orderid, moneta"
        ],
        "outputLabels": [
            "status"
        ],
        "icon": "font-awesome/fa-compress"
    },
    {
        "id": "3cfe83ca.3b1c1c",
        "type": "debug",
        "z": "2a761808.610238",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1070,
        "y": 780,
        "wires": []
    },
    {
        "id": "81dc0016.b7633",
        "type": "function",
        "z": "2a761808.610238",
        "name": "setbot_ttp",
        "func": "//<трекер<\n    let trackname = \"ttp-track-\"+msg.botname;\n    let track = flow.get(trackname);\n    let start_node_time = new Date().getTime();\n    \n    let steptitle = node.name;\n\n    let laststep = track[track.length-1];\n    let last_node_end_time = laststep.end_node_time;\n//>трекер>\nmsg.topic = msg.bot.settings.userid+\"-bots:\"+msg.bot.settings.botname+\":ttp\";\n\nmsg.payload = JSON.stringify(msg.bot.ttp);\nconst upd = global.get('setbot_ttp')(msg.topic, msg.payload);\n\n\nupd.then(upd => {\n\n    //>трекер>\n        let end_node_time = new Date().getTime();\n        let duration = end_node_time - start_node_time;\n        let duration_step = end_node_time - last_node_end_time;\n        track.push({\n            \"steptitle\": steptitle,\n            \"start_node_time\": start_node_time,\n            \"end_node_time\": end_node_time,\n            \"duration_node\": duration,\n            \"duration_step\": duration_step\n        });\n        flow.set(trackname, track);\n    //>трекер>\n    node.status({fill:\"green\",shape:\"dot\"});\n    \n    let botname = msg.botname;\n    let datamsg = \"выставили ttp ордер\";\n    const tilog = global.get('tilog')(botname,datamsg);\n    tilog;\n    \n    node.send(msg);\n\n}).catch(error => {\n\n    //>трекер>\n        let end_node_time = new Date().getTime();\n        let duration = end_node_time - start_node_time;\n        let duration_step = end_node_time - last_node_end_time;\n        track.push({\n            \"steptitle\": steptitle+\"-faile\",\n            \"start_node_time\": start_node_time,\n            \"end_node_time\": end_node_time,\n            \"duration\": duration,\n            \"duration_step\": duration_step,\n            \"error\": error\n        });\n        flow.set(trackname, track);\n    //>трекер>\n    node.status({fill:\"red\",shape:\"dot\"}); \n    node.error(error);\n});",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 2390,
        "y": 940,
        "wires": [
            [
                "ca692531.aee2a8",
                "4dfef6b5.251a18"
            ]
        ],
        "icon": "font-awesome/fa-bolt"
    },
    {
        "id": "a501d430.a110d8",
        "type": "function",
        "z": "2a761808.610238",
        "name": "setbot_ttp",
        "func": "//<трекер<\n    let trackname = \"ttp-track-\"+msg.botname;\n    let track = flow.get(trackname);\n    let start_node_time = new Date().getTime();\n    \n    let steptitle = node.name;\n\n    let laststep = track[track.length-1];\n    let last_node_end_time = laststep.end_node_time;\n//>трекер>\nmsg.topic = msg.bot.settings.userid+\"-bots:\"+msg.bot.settings.botname+\":ttp\";\n\nmsg.payload = JSON.stringify(msg.bot.ttp);\nconst upd = global.get('setbot_ttp')(msg.topic, msg.payload);\n\n\nupd.then(upd => {\n\n    //>трекер>\n        let end_node_time = new Date().getTime();\n        let duration = end_node_time - start_node_time;\n        let duration_step = end_node_time - last_node_end_time;\n        track.push({\n            \"steptitle\": steptitle,\n            \"start_node_time\": start_node_time,\n            \"end_node_time\": end_node_time,\n            \"duration_node\": duration,\n            \"duration_step\": duration_step\n        });\n        flow.set(trackname, track);\n    //>трекер>\n    \n    let botname = msg.botname;\n    let datamsg = \"переставили ttp ордер\";\n    const tilog = global.get('tilog')(botname,datamsg);\n    tilog;\n    \n    node.status({fill:\"green\",shape:\"dot\"});\n    node.send(msg);\n\n}).catch(error => {\n\n    //>трекер>\n        let end_node_time = new Date().getTime();\n        let duration = end_node_time - start_node_time;\n        let duration_step = end_node_time - last_node_end_time;\n        track.push({\n            \"steptitle\": steptitle+\"-faile\",\n            \"start_node_time\": start_node_time,\n            \"end_node_time\": end_node_time,\n            \"duration\": duration,\n            \"duration_step\": duration_step,\n            \"error\": error\n        });\n        flow.set(trackname, track);\n    //>трекер>\n    node.status({fill:\"red\",shape:\"dot\"}); \n    node.error(error);\n});",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 3510,
        "y": 780,
        "wires": [
            [
                "9d01f02a.6407",
                "1cd1edd3.c1f1d2"
            ]
        ],
        "icon": "font-awesome/fa-bolt"
    },
    {
        "id": "d74f254.44f36d8",
        "type": "debug",
        "z": "2a761808.610238",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1870,
        "y": 1380,
        "wires": []
    },
    {
        "id": "487d47c0.c7ede8",
        "type": "debug",
        "z": "2a761808.610238",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 2810,
        "y": 1780,
        "wires": []
    },
    {
        "id": "dd2eff30.71a16",
        "type": "debug",
        "z": "2a761808.610238",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 2230,
        "y": 1480,
        "wires": []
    },
    {
        "id": "e84c68c5.b035e8",
        "type": "link in",
        "z": "2a761808.610238",
        "name": "",
        "links": [
            "14218f4f.622ba1"
        ],
        "x": 95,
        "y": 940,
        "wires": [
            [
                "dfef6495.a62e98",
                "d968ccc2.a1915"
            ]
        ]
    },
    {
        "id": "dde31f58.2a26c",
        "type": "debug",
        "z": "2a761808.610238",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 2710,
        "y": 1520,
        "wires": []
    },
    {
        "id": "3b94541d.3ade6c",
        "type": "debug",
        "z": "2a761808.610238",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 2970,
        "y": 1380,
        "wires": []
    },
    {
        "id": "ca692531.aee2a8",
        "type": "debug",
        "z": "2a761808.610238",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 2430,
        "y": 900,
        "wires": []
    },
    {
        "id": "9d01f02a.6407",
        "type": "debug",
        "z": "2a761808.610238",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 3530,
        "y": 740,
        "wires": []
    },
    {
        "id": "d36ac308.31104",
        "type": "debug",
        "z": "2a761808.610238",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1930,
        "y": 940,
        "wires": []
    },
    {
        "id": "f81dfd6c.f5b49",
        "type": "debug",
        "z": "2a761808.610238",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 2790,
        "y": 760,
        "wires": []
    },
    {
        "id": "14be27d6.273e48",
        "type": "function",
        "z": "2a761808.610238",
        "name": "ttp finish",
        "func": "//<трекер<\n    let trackname = \"ttp-track-\"+msg.botname;\n    let track = flow.get(trackname);\n    let start_node_time = new Date().getTime();\n    let steptitle = node.name;\n\n    let laststep = track[track.length-1];\n    let last_node_end_time = laststep.end_node_time;\n//>трекер>\n\nmsg.bot.ttp.raschstopprice = 0;\nmsg.bot.ttp.curstop = 0;\nmsg.bot.ttp.curorderid = 0;\nmsg.bot.ttp.quantity = 0;\nmsg.bot.ttp.ttpbusy = false;\nmsg.bot.ttp.sold = false;\nmsg.bot.ttp.currentprice = 0;\n\n\nmsg.topic = msg.bot.settings.userid+\"-bots:\"+msg.bot.settings.botname+\":ttp\";\n\nmsg.payload = JSON.stringify(msg.bot.ttp);\nconst upd = global.get('setbot_ttp')(msg.topic, msg.payload);\n\n\nupd.then(upd => {\n\n    msg.topic = [];\n    \n        //>трекер>\n        let end_node_time = new Date().getTime();\n        let duration = end_node_time - start_node_time;\n        let duration_step = end_node_time - last_node_end_time;\n        track.push({\n            \"steptitle\": steptitle,\n            \"start_node_time\": start_node_time,\n            \"end_node_time\": end_node_time,\n            \"duration_node\": duration,\n            \"duration_step\": duration_step\n        });\n        flow.set(trackname, track);\n    //>трекер>\n    \n    let botname = msg.botname;\n    let datamsg = \"ttp finish\";\n    const tilog = global.get('tilog')(botname,datamsg);\n    tilog;\n    \n    node.status({fill:\"green\",shape:\"dot\"});\n    node.send(msg);\n\n}).catch(error => {\n\n\n    //>трекер>\n        let end_node_time = new Date().getTime();\n        let duration = end_node_time - start_node_time;\n        let duration_step = end_node_time - last_node_end_time;\n        track.push({\n            \"steptitle\": steptitle+\"-faile\",\n            \"start_node_time\": start_node_time,\n            \"end_node_time\": end_node_time,\n            \"duration\": duration,\n            \"duration_step\": duration_step,\n            \"error\": error\n        });\n        flow.set(trackname, track);\n    //>трекер>\n    node.status({fill:\"red\",shape:\"dot\"}); \n    node.error(error);\n});\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 3560,
        "y": 1740,
        "wires": [
            [
                "d44906f6.bf8848",
                "bcd1d88e.da80d8"
            ]
        ]
    },
    {
        "id": "d44906f6.bf8848",
        "type": "debug",
        "z": "2a761808.610238",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 3570,
        "y": 1700,
        "wires": []
    },
    {
        "id": "73657060.c09f3",
        "type": "function",
        "z": "2a761808.610238",
        "name": "update bot floors, finance, sales",
        "func": "const sellprice = msg.bot.ttpprice\nlet comsa = Number(msg.payload);\nlet quantityall = msg.bot.ttp.quantity;\n\nnode.warn(\"finish ttp on floor \");\n\nlet tempfin = Number(Number(msg.bot.finance.quotainorders) - Number(msg.bot.ttp.quantity));\n\nlet tempfin2 = Number(Number(msg.bot.finance.basenal) + (Number(msg.bot.ttp.quantity)- Number(msg.bot.ttp.quantity * Number(msg.payload))) * Number(msg.bot.ttpprice));\n\nmsg.bot.finance.quotainorders = tempfin.toFixed(msg.bot.settings.digitprice);\nmsg.bot.finance.basenal = tempfin2.toFixed(msg.bot.settings.digitq);\n\nif (msg.bot.finance.baseinorders == -0) { msg.bot.finance.baseinorders = 0; }\nif (msg.bot.finance.basenal == -0) { msg.bot.finance.basenal = 0; }\n\n \n\nlet currentfloor = msg.bot.currentfloor;\n\n//обнуление всех этажей со статусом 3\n\nvar floors = msg.bot.floors;\n\n    floors.forEach(function (item, i, floors) {\n\n        if (item[7] == 3) {\n            let buyprice = item[10];\n            let quantity = Number(item[14]);\n            msg.bot.sales.today.push((sellprice-buyprice)*quantity);\n            \n            item[7] = 0;\n            item[8] = 0;\n            item[9] = 0;\n            item[10] = 0;\n            item[11] = 0;\n            item[12] = 0;\n            item[13] = 0;\n            item[14] = 0;\n        }\n\n\n    });\n\nmsg.bot.floors = floors;\n\n\nlet volname = msg.bot.settings.userid + \"-bots:\" + msg.botname + \":data\";\nlet botdata = {\n    \"finance\": JSON.stringify(msg.bot.finance),\n    \"floors\": JSON.stringify(msg.bot.floors),\n    \"sales\": JSON.stringify(msg.bot.sales)\n\n};\n\nconst upd = global.get('setbot_data')(volname, botdata);\n\nupd.then(upd => {\n\n    msg.payload = upd;\n\n\n    node.status({ fill: \"green\", shape: \"ring\", text: \"0k\" });\n\n    node.send(msg);\n\n}).catch(error => {\n\n\n    node.status({ fill: \"red\", shape: \"ring\", text: \"error\" });\n    node.error(error);\n});",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 3310,
        "y": 1740,
        "wires": [
            [
                "27708697.64545a",
                "14be27d6.273e48"
            ]
        ],
        "icon": "font-awesome/fa-bolt"
    },
    {
        "id": "27708697.64545a",
        "type": "debug",
        "z": "2a761808.610238",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 3390,
        "y": 1700,
        "wires": []
    },
    {
        "id": "e4485160.d6d2d",
        "type": "function",
        "z": "2a761808.610238",
        "name": "prepare get ttp order price",
        "func": "\n\nlet moneta = msg.bot.settings.moneta;\nlet orderid = msg.bot.ttp.curorderid;\n\nmsg.payload = [];\nmsg.topic = \"orders-status-\" + msg.bot.settings.userid + \":\" + moneta + \":\" + orderid + \"-price\";\n\n\n\n\nnode.status({fill: \"green\", shape: \"ring\", text: orderid});\nreturn msg;\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 3220,
        "y": 1580,
        "wires": [
            [
                "609e4747.ed43d8",
                "e4dcf502.4624e8"
            ]
        ],
        "inputLabels": [
            "orderid"
        ],
        "outputLabels": [
            "status"
        ],
        "icon": "node-red-contrib-binance/binance.png"
    },
    {
        "id": "609e4747.ed43d8",
        "type": "redis-command",
        "z": "2a761808.610238",
        "server": "f120eab2.0a60a8",
        "command": "GET",
        "name": "get order status",
        "topic": "msg.payload",
        "params": "[]",
        "paramsType": "json",
        "payloadType": "json",
        "block": false,
        "x": 3480,
        "y": 1580,
        "wires": [
            [
                "5363504.bb8c6b",
                "787721f9.31529"
            ]
        ]
    },
    {
        "id": "5363504.bb8c6b",
        "type": "function",
        "z": "2a761808.610238",
        "name": "prepare get ttp order comsa",
        "func": "msg.bot.ttpprice = msg.payload;\n\nlet moneta = msg.bot.settings.moneta;\nlet orderid = msg.bot.ttp.curorderid;\n\nmsg.payload = [];\nmsg.topic = \"orders-status-\" + msg.bot.settings.userid + \":\" + moneta + \":\" + orderid + \"-comsa\";\n\n\n\n\nnode.status({fill: \"green\", shape: \"ring\", text: orderid});\nreturn msg;\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 3240,
        "y": 1640,
        "wires": [
            [
                "60ff720b.4d65bc"
            ]
        ],
        "inputLabels": [
            "orderid"
        ],
        "outputLabels": [
            "status"
        ],
        "icon": "node-red-contrib-binance/binance.png"
    },
    {
        "id": "60ff720b.4d65bc",
        "type": "redis-command",
        "z": "2a761808.610238",
        "server": "f120eab2.0a60a8",
        "command": "GET",
        "name": "get order status",
        "topic": "msg.payload",
        "params": "[]",
        "paramsType": "json",
        "payloadType": "json",
        "block": false,
        "x": 3480,
        "y": 1640,
        "wires": [
            [
                "73657060.c09f3"
            ]
        ]
    },
    {
        "id": "e4dcf502.4624e8",
        "type": "debug",
        "z": "2a761808.610238",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 3290,
        "y": 1540,
        "wires": []
    },
    {
        "id": "787721f9.31529",
        "type": "debug",
        "z": "2a761808.610238",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 3510,
        "y": 1540,
        "wires": []
    },
    {
        "id": "bc452645.1f3798",
        "type": "debug",
        "z": "2a761808.610238",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 3350,
        "y": 740,
        "wires": []
    },
    {
        "id": "8c006fac.a924",
        "type": "debug",
        "z": "2a761808.610238",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 2590,
        "y": 760,
        "wires": []
    },
    {
        "id": "3b67ca17.09d026",
        "type": "debug",
        "z": "2a761808.610238",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 2930,
        "y": 920,
        "wires": []
    },
    {
        "id": "f690c3ac.0028f8",
        "type": "link out",
        "z": "5df15275.2888ec",
        "name": "",
        "links": [
            "eb783101.e13f08"
        ],
        "x": 1495,
        "y": 3240,
        "wires": []
    },
    {
        "id": "1cd1edd3.c1f1d2",
        "type": "link out",
        "z": "2a761808.610238",
        "name": "",
        "links": [
            "ccd55cdb.7ed72"
        ],
        "x": 3695,
        "y": 760,
        "wires": []
    },
    {
        "id": "c5493216.68ad1",
        "type": "link out",
        "z": "2a761808.610238",
        "name": "",
        "links": [
            "ccd55cdb.7ed72"
        ],
        "x": 3135,
        "y": 880,
        "wires": []
    },
    {
        "id": "4dfef6b5.251a18",
        "type": "link out",
        "z": "2a761808.610238",
        "name": "",
        "links": [
            "ccd55cdb.7ed72"
        ],
        "x": 2575,
        "y": 940,
        "wires": []
    },
    {
        "id": "1d26132c.06016d",
        "type": "link out",
        "z": "2a761808.610238",
        "name": "",
        "links": [
            "ccd55cdb.7ed72"
        ],
        "x": 2595,
        "y": 1420,
        "wires": []
    },
    {
        "id": "b0d5adc0.69eab",
        "type": "link out",
        "z": "2a761808.610238",
        "name": "",
        "links": [
            "ccd55cdb.7ed72"
        ],
        "x": 3015,
        "y": 1500,
        "wires": []
    },
    {
        "id": "4b4fa1ce.2d444",
        "type": "link out",
        "z": "2a761808.610238",
        "name": "",
        "links": [
            "ccd55cdb.7ed72"
        ],
        "x": 2535,
        "y": 1680,
        "wires": []
    },
    {
        "id": "bcd1d88e.da80d8",
        "type": "link out",
        "z": "2a761808.610238",
        "name": "",
        "links": [
            "ccd55cdb.7ed72"
        ],
        "x": 3675,
        "y": 1740,
        "wires": []
    },
    {
        "id": "d968ccc2.a1915",
        "type": "function",
        "z": "2a761808.610238",
        "name": "getbot_settings",
        "func": "//<трекер<\n    let trackname = \"ttp-track-\"+msg.botname;\n    let track = flow.get(trackname);\n    let start_node_time = new Date().getTime();\n    let steptitle = node.name;\n\n    let laststep = track[track.length-1];\n    let last_node_end_time = laststep.end_node_time;\n//>трекер>\n\nlet bot = {};\nmsg.bot = bot;\nconst gb = global.get('getbot_settings')(msg.botname);\n\ngb.then(gb => {\n    \n    msg.bot.settings = JSON.parse(gb);\n    \n    //>трекер>\n        let end_node_time = new Date().getTime();\n        let duration = end_node_time - start_node_time;\n        let duration_step = end_node_time - last_node_end_time;\n        track.push({\n            \"steptitle\": steptitle,\n            \"start_node_time\": start_node_time,\n            \"end_node_time\": end_node_time,\n            \"duration_node\": duration,\n            \"duration_step\": duration_step\n        });\n        flow.set(trackname, track);\n    //>трекер>\n    node.status({fill:\"green\",shape:\"dot\"});\n    \n    node.send(msg);\n\n}).catch(error => {\n    \n    //>трекер>\n        let end_node_time = new Date().getTime();\n        let duration = end_node_time - start_node_time;\n        let duration_step = end_node_time - last_node_end_time;\n        track.push({\n            \"steptitle\": steptitle+\"-faile\",\n            \"start_node_time\": start_node_time,\n            \"end_node_time\": end_node_time,\n            \"duration\": duration,\n            \"duration_step\": duration_step,\n            \"error\": error\n        });\n        flow.set(trackname, track);\n    //>трекер>\n    node.status({fill:\"red\",shape:\"dot\"});\n    \n    node.error(error);\n});",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 220,
        "y": 940,
        "wires": [
            [
                "31599a11.e73036"
            ]
        ]
    },
    {
        "id": "b725a5cd.6eb798",
        "type": "function",
        "z": "2a761808.610238",
        "name": "getbot_ttp",
        "func": "\nconst gb = global.get('getbot_ttp')(msg.bot.settings.botname);\n\ngb.then(gb => {\n    msg.bot.ttp = JSON.parse(gb);\n    \nnode.status({fill: \"green\", shape: \"ring\"});\n\n    node.send(msg);\n\n}).catch(error => {\n    \n    \n    node.status({fill: \"red\", shape: \"ring\", text: \"error\"});\n    node.error(error);\n});",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 570,
        "y": 940,
        "wires": [
            [
                "8cc76823.4b4e68",
                "101ffeb5.6d8b01"
            ]
        ]
    },
    {
        "id": "91267b22.6af548",
        "type": "switch",
        "z": "2a761808.610238",
        "name": "quantity > 0",
        "property": "bot.ttp.quantity",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "0",
                "vt": "num"
            },
            {
                "t": "gt",
                "v": "0",
                "vt": "num"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 1540,
        "y": 860,
        "wires": [
            [
                "db26ef3b.7f5f6",
                "303b541f.e3d47c"
            ],
            [
                "d9cd8b69.9e4298"
            ]
        ]
    },
    {
        "id": "db26ef3b.7f5f6",
        "type": "link out",
        "z": "2a761808.610238",
        "name": "",
        "links": [
            "ccd55cdb.7ed72"
        ],
        "x": 1695,
        "y": 780,
        "wires": []
    },
    {
        "id": "101ffeb5.6d8b01",
        "type": "debug",
        "z": "2a761808.610238",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 610,
        "y": 860,
        "wires": []
    },
    {
        "id": "31599a11.e73036",
        "type": "function",
        "z": "2a761808.610238",
        "name": "getbot_data",
        "func": "//<трекер<\n    let trackname = \"ttp-track-\"+msg.botname;\n    let track = flow.get(trackname);\n    let start_node_time = new Date().getTime();\n    let steptitle = node.name;\n\n    let laststep = track[track.length-1];\n    let last_node_end_time = laststep.end_node_time;\n//>трекер>\n\nlet botname = msg.botname;\n\nconst gb = global.get('getbot_data')(botname);\n\ngb.then(gb => {\n    //node.warn(gb);\n    let bot = {...msg.bot,\n        \"floors\":JSON.parse(gb.floors),\n        \"finance\":JSON.parse(gb.finance),\n        \"sales\":JSON.parse(gb.sales)\n    };\n    msg.bot = bot;\n    \n    //>трекер>\n        let end_node_time = new Date().getTime();\n        let duration = end_node_time - start_node_time;\n        let duration_step = end_node_time - last_node_end_time;\n        track.push({\n            \"steptitle\": steptitle,\n            \"start_node_time\": start_node_time,\n            \"end_node_time\": end_node_time,\n            \"duration_node\": duration,\n            \"duration_step\": duration_step\n        });\n        flow.set(trackname, track);\n    //>трекер>\n    node.status({fill:\"green\",shape:\"dot\"});\n    node.send(msg);\n\n}).catch(error => {\n        //>трекер>\n        let end_node_time = new Date().getTime();\n        let duration = end_node_time - start_node_time;\n        let duration_step = end_node_time - last_node_end_time;\n        track.push({\n            \"steptitle\": steptitle+\"-faile\",\n            \"start_node_time\": start_node_time,\n            \"end_node_time\": end_node_time,\n            \"duration\": duration,\n            \"duration_step\": duration_step,\n            \"error\": error\n        });\n        flow.set(trackname, track);\n    //>трекер>\n    node.status({fill:\"red\",shape:\"dot\"});\n    node.error(error);\n});",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 410,
        "y": 940,
        "wires": [
            [
                "b725a5cd.6eb798"
            ]
        ]
    },
    {
        "id": "2f9f396e.884876",
        "type": "function",
        "z": "2a761808.610238",
        "name": "setttp_q 0",
        "func": "//<трекер<\n    let trackname = \"ttp-track-\"+msg.botname;\n    let track = flow.get(trackname);\n    let start_node_time = new Date().getTime();\n    \n    let steptitle = node.name;\n\n    let laststep = track[track.length-1];\n    let last_node_end_time = laststep.end_node_time;\n//>трекер>\nmsg.topic = msg.bot.settings.botname;\n\nconst upd = global.get('set_ttp_q')(msg.topic, \"0\");\n\n\nupd.then(upd => {\n\n    //>трекер>\n        let end_node_time = new Date().getTime();\n        let duration = end_node_time - start_node_time;\n        let duration_step = end_node_time - last_node_end_time;\n        track.push({\n            \"steptitle\": steptitle,\n            \"start_node_time\": start_node_time,\n            \"end_node_time\": end_node_time,\n            \"duration_node\": duration,\n            \"duration_step\": duration_step\n        });\n        flow.set(trackname, track);\n    //>трекер>\n    node.status({fill:\"green\",shape:\"dot\"});\n    node.send(msg);\n\n}).catch(error => {\n\n    //>трекер>\n        let end_node_time = new Date().getTime();\n        let duration = end_node_time - start_node_time;\n        let duration_step = end_node_time - last_node_end_time;\n        track.push({\n            \"steptitle\": steptitle+\"-faile\",\n            \"start_node_time\": start_node_time,\n            \"end_node_time\": end_node_time,\n            \"duration\": duration,\n            \"duration_step\": duration_step,\n            \"error\": error\n        });\n        flow.set(trackname, track);\n    //>трекер>\n    node.status({fill:\"red\",shape:\"dot\"}); \n    node.error(error);\n});",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1240,
        "y": 940,
        "wires": [
            [
                "91267b22.6af548",
                "8384d5a2.b18e28"
            ]
        ],
        "icon": "font-awesome/fa-bolt"
    },
    {
        "id": "ccbca6c6.392f58",
        "type": "function",
        "z": "2a761808.610238",
        "g": "74e1a04.6df746",
        "name": "tester___",
        "func": "let start_node_time = new Date().getTime();\n\nnode.status({fill: \"green\", shape: \"ring\", text: start_node_time});\n    \n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 2480,
        "y": 440,
        "wires": [
            []
        ]
    },
    {
        "id": "11f5815b.2198c7",
        "type": "debug",
        "z": "5df15275.2888ec",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 2050,
        "y": 800,
        "wires": []
    },
    {
        "id": "231989f1.7a0efe",
        "type": "function",
        "z": "5f98db3a.7ab21c",
        "name": "set_buy_order()",
        "func": "",
        "outputs": 1,
        "noerr": 0,
        "initialize": "let guid = global.get('guid');\n\n\nlet set_buy_order = function (volname = msg.topic, data = msg.payload) {\n    \n    let promise = new Promise((resolve, reject) => {\n        msg.resolve = resolve;\n        msg.reject = reject;\n    });\n    \n\n    msg.topic = volname;\n    msg.payload = data;\n\n    node.send(Object.assign({}, msg));\n    \n    return promise;\n};\n\nglobal.set('set_buy_order', set_buy_order);",
        "finalize": "",
        "x": 1400,
        "y": 80,
        "wires": [
            [
                "aa73240b.b25d98"
            ]
        ]
    },
    {
        "id": "25f57e72.c9eb0a",
        "type": "inject",
        "z": "5f98db3a.7ab21c",
        "name": "botname",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "x": 1220,
        "y": 80,
        "wires": [
            [
                "231989f1.7a0efe"
            ]
        ]
    },
    {
        "id": "caeb9ab1.ee6bb",
        "type": "function",
        "z": "5f98db3a.7ab21c",
        "name": "resolve",
        "func": "msg.resolve(msg.payload);\n\n// reject\n// setTimeout(function () {\n//     msg.reject({message: 'Could not request joke'});\n// }, 2000);",
        "outputs": "0",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 1780,
        "y": 80,
        "wires": []
    },
    {
        "id": "aa73240b.b25d98",
        "type": "redis-command",
        "z": "5f98db3a.7ab21c",
        "server": "f120eab2.0a60a8",
        "command": "hmset",
        "name": "",
        "topic": "",
        "params": "[]",
        "paramsType": "json",
        "payloadType": "json",
        "block": false,
        "x": 1590,
        "y": 80,
        "wires": [
            [
                "caeb9ab1.ee6bb"
            ]
        ]
    },
    {
        "id": "4b4af36b.c4905c",
        "type": "inject",
        "z": "5f98db3a.7ab21c",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 1960,
        "y": 80,
        "wires": [
            [
                "6f360750.44fe08"
            ]
        ]
    },
    {
        "id": "6f360750.44fe08",
        "type": "function",
        "z": "5f98db3a.7ab21c",
        "name": "",
        "func": "let t = \"qqq\";\nlet p = {q:1,a:2};\nconst gbl = global.get('set_buy_order')(t,p);\n\ngbl.then(gbl => {\n    \n\n    node.status({fill:\"green\",shape:\"dot\"});\n    node.send(msg);\n\n}).catch(error => {\n    \n\n    node.status({fill:\"red\",shape:\"dot\"});\n    \n    node.error(error);\n});",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 2110,
        "y": 80,
        "wires": [
            [
                "ba20ff78.d1b0a"
            ]
        ]
    },
    {
        "id": "ba20ff78.d1b0a",
        "type": "debug",
        "z": "5f98db3a.7ab21c",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 2270,
        "y": 80,
        "wires": []
    },
    {
        "id": "387fcf8a.76cff",
        "type": "function",
        "z": "5f98db3a.7ab21c",
        "g": "4a199c83.179e84",
        "name": "order_exec()",
        "func": "",
        "outputs": 1,
        "noerr": 0,
        "initialize": "let guid = global.get('guid');\n\n\nlet order_exec = function (cmd = msg.topic, data = msg.payload) {\n    \n    let promise = new Promise((resolve, reject) => {\n        msg.resolve = resolve;\n        msg.reject = reject;\n    });\n    \n\n    msg.topic = cmd;\n    msg.payload = data;\n    msg.bot = data.bot;\n    msg.botname = data.bot.settings.botname;\n    node.send(Object.assign({}, msg));\n    \n    return promise;\n};\n\nglobal.set('order_exec', order_exec);",
        "finalize": "",
        "x": 310,
        "y": 420,
        "wires": [
            [
                "ac3992bd.d4dd5"
            ]
        ]
    },
    {
        "id": "c985b525.212f78",
        "type": "inject",
        "z": "5f98db3a.7ab21c",
        "g": "4a199c83.179e84",
        "name": "cmd, data",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "x": 130,
        "y": 420,
        "wires": [
            [
                "387fcf8a.76cff"
            ]
        ]
    },
    {
        "id": "2bed7653.30adaa",
        "type": "function",
        "z": "5f98db3a.7ab21c",
        "g": "4a199c83.179e84",
        "name": "resolve",
        "func": "msg.resolve(msg.payload);\n\n// reject\n// setTimeout(function () {\n//     msg.reject({message: 'Could not request joke'});\n// }, 2000);",
        "outputs": "0",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 680,
        "y": 420,
        "wires": []
    },
    {
        "id": "56d868a8.14442",
        "type": "function",
        "z": "5f98db3a.7ab21c",
        "name": "",
        "func": "let t = \"qqqq\";\nlet p = {q:3,a:4};\nconst gbl = global.get('set_buy_order')(t,p);\n\ngbl.then(gbl => {\n    \n\n    node.status({fill:\"green\",shape:\"dot\"});\n    node.send(msg);\n\n}).catch(error => {\n    \n\n    node.status({fill:\"red\",shape:\"dot\"});\n    \n    node.error(error);\n});",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 1300,
        "y": 140,
        "wires": [
            []
        ]
    },
    {
        "id": "53f55eaa.16e338",
        "type": "inject",
        "z": "5f98db3a.7ab21c",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            },
            {
                "p": "bot",
                "v": "ww",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 3180,
        "y": 1240,
        "wires": [
            [
                "a9098e38.7393"
            ]
        ]
    },
    {
        "id": "ae951733.066bd",
        "type": "function",
        "z": "5f98db3a.7ab21c",
        "name": "orderexec",
        "func": "let cmd = \"setbuy\";\nlet data = {moneta:\"LINKDOWNSDT\", price: \"0.3180\", quantity: 50, bot: msg.bot};\nconst orderexec = global.get('order_exec')(cmd,data);\n\nlet botname = msg.bot.settings.botname;\n\nlet data2 = botname+\":\"+cmd+\": price:\"+data.price+\", quantity: \"+data.quantity;\nconst tilog = global.get('tilog')(botname,data2);\ntilog;\n\norderexec.then(orderexec => {\n    msg.orderexec = orderexec;\n    if (orderexec.statusCode === \"ok\"){\n        node.status({fill:\"green\",shape:\"dot\", text: orderexec.statusBody.orderId});\n        msg.bot = msg.orderexec.bot;\n        node.send(msg);\n        \n    } else {\n        node.status({fill:\"red\",shape:\"dot\"});\n        node.send(msg);\n    }\n    \n\n}).catch(error => {\n    \n    msg.error = error;\n    node.status({fill:\"red\",shape: \"ring\"});\n    \n    node.error(error);\n});",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 3080,
        "y": 1340,
        "wires": [
            [
                "510a8455.a89b84"
            ]
        ]
    },
    {
        "id": "c5e0a09d.da0f6",
        "type": "debug",
        "z": "5f98db3a.7ab21c",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 3410,
        "y": 1260,
        "wires": []
    },
    {
        "id": "ade3bf55.b02e3",
        "type": "switch",
        "z": "5f98db3a.7ab21c",
        "g": "4a199c83.179e84",
        "name": "cmd",
        "property": "topic",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "setbuy",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "cansel",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "setsell",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "marketsell",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "marketbuy",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 5,
        "x": 1020,
        "y": 520,
        "wires": [
            [
                "2cfa357e.60327a"
            ],
            [
                "241d62c4.835d6e"
            ],
            [
                "40b91664.72912"
            ],
            [
                "cc5b16dd.4820c8"
            ],
            [
                "46152e90.390ef8"
            ]
        ]
    },
    {
        "id": "9606b8d3.0957",
        "type": "comment",
        "z": "5f98db3a.7ab21c",
        "g": "4a199c83.179e84",
        "name": "setbuy",
        "info": "",
        "x": 1290,
        "y": 400,
        "wires": []
    },
    {
        "id": "2cfa357e.60327a",
        "type": "function",
        "z": "5f98db3a.7ab21c",
        "g": "4a199c83.179e84",
        "name": "set buy order on binance",
        "func": "\nfunction parseApiError(error) {\n  if (error.body) {\n    try {\n      var resp = JSON.parse(error.body);\n      return resp.msg;\n    } catch (error) {/* pass thru */}\n  }\n  return \"Unknown error. Status code: \"+error.statsCode;\n}\n\nlet LBinance = global.get('gBinance');\n//node.warn(LBinance);\nlet key = global.get('key');\nlet secret = global.get('secret');\n\n\nlet binance = new LBinance().options({\n\tAPIKEY: key,\n\tAPISECRET: secret,\n\tuseServerTime: true,\n\tadjustForTimeDifference: true \n});\n\n\n\n\nlet moneta = msg.payload.moneta;\nlet quantity = Number(msg.payload.quantity);\nlet price = Number(msg.payload.price);\nnode.warn(moneta+\" set buy order q = \"+quantity+\" p = \"+price);\n\n\n\n\nbinance.useServerTime(function() {\n    binance.buy(moneta, quantity, price, {type:'LIMIT'}, (err, resp) => {\n // console.info(\"Limit Buy response\", response);\n // console.info(\"order id: \" + response.orderId);\n    if (err) {\n        var errorMsg = parseApiError(err) + \", moneta:\" + moneta;\n        node.error(errorMsg, msg);\n\n        msg.err = err;\n        node.status({fill: \"red\", shape: \"ring\", text: errorMsg});\n        \n        node.send(msg);\n        //return [msg, null];\n    \n    }\n    if (resp) {\n        msg.orderid = resp.orderId;\n        msg.resp = resp;\n        node.status({fill: \"green\", shape: \"ring\", text: resp.orderId});\n        \n        node.send(msg);\n       // return [null,msg];\n                \n    }\n    //node.status({}); //clear status message\n});\n\t\n});",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "gBinance",
                "module": "node-binance-api"
            }
        ],
        "x": 1470,
        "y": 400,
        "wires": [
            [
                "be53914b.bf62b"
            ]
        ]
    },
    {
        "id": "40b91664.72912",
        "type": "function",
        "z": "5f98db3a.7ab21c",
        "g": "4a199c83.179e84",
        "name": "",
        "func": "\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 1420,
        "y": 540,
        "wires": [
            []
        ]
    },
    {
        "id": "cc5b16dd.4820c8",
        "type": "function",
        "z": "5f98db3a.7ab21c",
        "g": "4a199c83.179e84",
        "name": "",
        "func": "\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 1420,
        "y": 600,
        "wires": [
            []
        ]
    },
    {
        "id": "46152e90.390ef8",
        "type": "function",
        "z": "5f98db3a.7ab21c",
        "g": "4a199c83.179e84",
        "name": "",
        "func": "\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 1420,
        "y": 660,
        "wires": [
            []
        ]
    },
    {
        "id": "df242fa3.762dc",
        "type": "comment",
        "z": "5f98db3a.7ab21c",
        "g": "4a199c83.179e84",
        "name": "cansel",
        "info": "",
        "x": 1290,
        "y": 480,
        "wires": []
    },
    {
        "id": "f8fb32fa.8c38e",
        "type": "comment",
        "z": "5f98db3a.7ab21c",
        "g": "4a199c83.179e84",
        "name": "setsell",
        "info": "",
        "x": 1290,
        "y": 540,
        "wires": []
    },
    {
        "id": "7fc0c8c6.6d262",
        "type": "comment",
        "z": "5f98db3a.7ab21c",
        "g": "4a199c83.179e84",
        "name": "marketsell",
        "info": "",
        "x": 1280,
        "y": 600,
        "wires": []
    },
    {
        "id": "594b48ef.1a0e68",
        "type": "comment",
        "z": "5f98db3a.7ab21c",
        "g": "4a199c83.179e84",
        "name": "marketbuy",
        "info": "",
        "x": 1280,
        "y": 660,
        "wires": []
    },
    {
        "id": "8eca3137.03e0a8",
        "type": "switch",
        "z": "5f98db3a.7ab21c",
        "g": "4a199c83.179e84",
        "name": "work mode",
        "property": "workmode",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "binance",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "binance_backtest",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 730,
        "y": 700,
        "wires": [
            [
                "ade3bf55.b02e3"
            ],
            [
                "72c134ed.8f07cc"
            ]
        ]
    },
    {
        "id": "8af21b87.015cb",
        "type": "comment",
        "z": "5f98db3a.7ab21c",
        "g": "4a199c83.179e84",
        "name": "binance",
        "info": "",
        "x": 860,
        "y": 660,
        "wires": []
    },
    {
        "id": "90c4f7da.42c3b8",
        "type": "comment",
        "z": "5f98db3a.7ab21c",
        "g": "4a199c83.179e84",
        "name": "binance_backtest",
        "info": "",
        "x": 890,
        "y": 740,
        "wires": []
    },
    {
        "id": "ac3992bd.d4dd5",
        "type": "function",
        "z": "5f98db3a.7ab21c",
        "g": "4a199c83.179e84",
        "name": "get workmode",
        "func": "let workmode = global.get('workmode');\nmsg.workmode = workmode;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 540,
        "y": 700,
        "wires": [
            [
                "8eca3137.03e0a8",
                "4cfd5bbd.59f8dc"
            ]
        ]
    },
    {
        "id": "1adeb6d2.0028b1",
        "type": "function",
        "z": "5f98db3a.7ab21c",
        "g": "79e296b2.11a2d8",
        "name": "register work mode",
        "func": "let key = msg.payload;\n\nglobal.set('workmode',key);\n\n\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 350,
        "y": 80,
        "wires": [
            [
                "9a835f6c.6a1ab"
            ]
        ]
    },
    {
        "id": "174c55c9.364c72",
        "type": "inject",
        "z": "5f98db3a.7ab21c",
        "g": "79e296b2.11a2d8",
        "name": "workmode",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "binance",
        "payloadType": "str",
        "x": 130,
        "y": 60,
        "wires": [
            [
                "1adeb6d2.0028b1"
            ]
        ]
    },
    {
        "id": "af87984e.38efa8",
        "type": "ui_button",
        "z": "5f98db3a.7ab21c",
        "g": "79e296b2.11a2d8",
        "name": "",
        "group": "261e447.e94ad3c",
        "order": 1,
        "width": "4",
        "height": "1",
        "passthru": false,
        "label": "binance",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "icon": "",
        "payload": "binance",
        "payloadType": "str",
        "topic": "",
        "x": 100,
        "y": 100,
        "wires": [
            [
                "1adeb6d2.0028b1"
            ]
        ]
    },
    {
        "id": "af6bd09e.c7c798",
        "type": "ui_button",
        "z": "5f98db3a.7ab21c",
        "g": "79e296b2.11a2d8",
        "name": "",
        "group": "261e447.e94ad3c",
        "order": 1,
        "width": "4",
        "height": "1",
        "passthru": false,
        "label": "binance_backtest",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "icon": "",
        "payload": "binance_backtest",
        "payloadType": "str",
        "topic": "",
        "x": 130,
        "y": 140,
        "wires": [
            [
                "1adeb6d2.0028b1"
            ]
        ]
    },
    {
        "id": "9a835f6c.6a1ab",
        "type": "ui_text",
        "z": "5f98db3a.7ab21c",
        "g": "79e296b2.11a2d8",
        "group": "261e447.e94ad3c",
        "order": 2,
        "width": "4",
        "height": "1",
        "name": "",
        "label": "mode now",
        "format": "{{msg.payload}}",
        "layout": "row-spread",
        "x": 550,
        "y": 80,
        "wires": []
    },
    {
        "id": "4cfd5bbd.59f8dc",
        "type": "debug",
        "z": "5f98db3a.7ab21c",
        "g": "4a199c83.179e84",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 570,
        "y": 660,
        "wires": []
    },
    {
        "id": "d91e5b6e.e583c",
        "type": "function",
        "z": "5f98db3a.7ab21c",
        "g": "4a199c83.179e84",
        "name": "",
        "func": "let t = \"qqqq\";\nlet p = {q:3,a:4};\nconst gbl = global.get('set_buy_order')(t,p);\n\ngbl.then(gbl => {\n    \n\n    node.status({fill:\"green\",shape:\"dot\"});\n    node.send(msg);\n\n}).catch(error => {\n    \n\n    node.status({fill:\"red\",shape:\"dot\"});\n    \n    node.error(error);\n});",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 1820,
        "y": 820,
        "wires": [
            []
        ]
    },
    {
        "id": "72c134ed.8f07cc",
        "type": "switch",
        "z": "5f98db3a.7ab21c",
        "g": "4a199c83.179e84",
        "name": "cmd",
        "property": "topic",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "setbuy",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "cansel",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "setsell",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "marketsell",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "marketbuy",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 5,
        "x": 1020,
        "y": 900,
        "wires": [
            [
                "d9e1bbad.d8dc4"
            ],
            [
                "7d460277.6d43cc"
            ],
            [
                "83dab1d2.d3929"
            ],
            [
                "c2ee13d8.13fab8"
            ],
            [
                "4fd27ca5.37d60c"
            ]
        ]
    },
    {
        "id": "937d8df0.8d461",
        "type": "comment",
        "z": "5f98db3a.7ab21c",
        "g": "4a199c83.179e84",
        "name": "setbuy",
        "info": "",
        "x": 1290,
        "y": 800,
        "wires": []
    },
    {
        "id": "d9e1bbad.d8dc4",
        "type": "function",
        "z": "5f98db3a.7ab21c",
        "g": "4a199c83.179e84",
        "name": "",
        "func": "\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 1420,
        "y": 800,
        "wires": [
            [
                "f6791e2.e72656"
            ]
        ]
    },
    {
        "id": "7d460277.6d43cc",
        "type": "function",
        "z": "5f98db3a.7ab21c",
        "g": "4a199c83.179e84",
        "name": "",
        "func": "\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 1420,
        "y": 860,
        "wires": [
            [
                "4b18cb02.0baa0c"
            ]
        ]
    },
    {
        "id": "83dab1d2.d3929",
        "type": "function",
        "z": "5f98db3a.7ab21c",
        "g": "4a199c83.179e84",
        "name": "",
        "func": "\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 1420,
        "y": 920,
        "wires": [
            [
                "2827f6dd.5c7162"
            ]
        ]
    },
    {
        "id": "c2ee13d8.13fab8",
        "type": "function",
        "z": "5f98db3a.7ab21c",
        "g": "4a199c83.179e84",
        "name": "",
        "func": "\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 1420,
        "y": 980,
        "wires": [
            [
                "5f7186a8.0ea498"
            ]
        ]
    },
    {
        "id": "4fd27ca5.37d60c",
        "type": "function",
        "z": "5f98db3a.7ab21c",
        "g": "4a199c83.179e84",
        "name": "",
        "func": "\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 1420,
        "y": 1040,
        "wires": [
            [
                "e5d314a7.f6825"
            ]
        ]
    },
    {
        "id": "8044def5.ed945",
        "type": "comment",
        "z": "5f98db3a.7ab21c",
        "g": "4a199c83.179e84",
        "name": "cansel",
        "info": "",
        "x": 1290,
        "y": 860,
        "wires": []
    },
    {
        "id": "f52a6bcf.7d3728",
        "type": "comment",
        "z": "5f98db3a.7ab21c",
        "g": "4a199c83.179e84",
        "name": "setsell",
        "info": "",
        "x": 1290,
        "y": 920,
        "wires": []
    },
    {
        "id": "fa849ff6.802878",
        "type": "comment",
        "z": "5f98db3a.7ab21c",
        "g": "4a199c83.179e84",
        "name": "marketsell",
        "info": "",
        "x": 1280,
        "y": 980,
        "wires": []
    },
    {
        "id": "f38ba797.bdd398",
        "type": "comment",
        "z": "5f98db3a.7ab21c",
        "g": "4a199c83.179e84",
        "name": "marketbuy",
        "info": "",
        "x": 1280,
        "y": 1040,
        "wires": []
    },
    {
        "id": "f6791e2.e72656",
        "type": "debug",
        "z": "5f98db3a.7ab21c",
        "g": "4a199c83.179e84",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1630,
        "y": 800,
        "wires": []
    },
    {
        "id": "4b18cb02.0baa0c",
        "type": "debug",
        "z": "5f98db3a.7ab21c",
        "g": "4a199c83.179e84",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1630,
        "y": 860,
        "wires": []
    },
    {
        "id": "2827f6dd.5c7162",
        "type": "debug",
        "z": "5f98db3a.7ab21c",
        "g": "4a199c83.179e84",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1630,
        "y": 920,
        "wires": []
    },
    {
        "id": "5f7186a8.0ea498",
        "type": "debug",
        "z": "5f98db3a.7ab21c",
        "g": "4a199c83.179e84",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1630,
        "y": 980,
        "wires": []
    },
    {
        "id": "e5d314a7.f6825",
        "type": "debug",
        "z": "5f98db3a.7ab21c",
        "g": "4a199c83.179e84",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1630,
        "y": 1040,
        "wires": []
    },
    {
        "id": "be53914b.bf62b",
        "type": "function",
        "z": "5f98db3a.7ab21c",
        "g": "4a199c83.179e84",
        "name": "обработчик ошибок",
        "func": "if (msg.err) {\n    msg.payload.statusCode = \"not ok\";\n    msg.payload.statusBody = msg.err.body;\n    //node.warn(msg.err.statusCode)\n    \n\n    \n    \n    return [null,msg];\n} else {\n    msg.payload.statusCode = \"ok\";\n    msg.payload.statusBody = msg.resp;\n    return [msg,null];\n}\n\n\n\n",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 1720,
        "y": 400,
        "wires": [
            [
                "563d14b6.3a5db4"
            ],
            [
                "c0b46394.7bd6e"
            ]
        ]
    },
    {
        "id": "a9098e38.7393",
        "type": "function",
        "z": "5f98db3a.7ab21c",
        "name": "bot dump",
        "func": "msg.bot = {\"settings\":{\"botname\":\"LINKDOWNUSDT-1626469485\",\"isrunning\":false,\"handyzapretnazakup\":false,\"comment\":null,\"quotacoin\":\"LINKDOWN\",\"basecoin\":\"USDT\",\"moneta\":\"LINKDOWNUSDT\",\"digitq\":\"2\",\"digitprice\":\"4\",\"minprice\":\"0.2\",\"maxprice\":\"0.4\",\"profitproc\":\"0.8\",\"ordersize\":\"20\",\"ofsetbottom\":\"0.1\",\"ofsettop\":\"0.5\",\"ma1\":3,\"ma2\":30,\"maxpriceforzakup\":null,\"minpriceforzakup\":null,\"userid\":\"d3fmoh2rVoVNgIcpLTFZBE0jHnI2\"},\"status\":{\"currentprice\":\"0.32590000\",\"lastprice\":-1,\"currentfloor\":32,\"lastfloor\":-1,\"sr_ma_big\":-1,\"sr_ma_small\":-1,\"rezhim\":\"МА - закуп разрешен\",\"updated\":1626558939786},\"zapret_na_zakup\":false,\"floors\":[[1,0.2,0.2031,0.20020000000000002,0.2005,0.2015,0.20210000000000003,0,0,0,0,0,0,0,0],[2,0.2031,0.20624805000000002,0.20330310000000001,0.20360775,0.20462325,0.20523255,0,0,0,0,0,0,0,0],[3,0.20624805000000002,0.20944489477500003,0.20645429805,0.20676367012500002,0.20779491037500003,0.20841365452500002,0,0,0,0,0,0,0,0],[4,0.20944489477500003,0.21269129064401254,0.20965433966977504,0.20996850701193753,0.21101573148581254,0.21164406617013753,0,0,0,0,0,0,0,0],[5,0.21269129064401254,0.21598800564899473,0.21290398193465657,0.2132230188706226,0.21428647532384265,0.2149245491957747,0,0,0,0,0,0,0,0],[6,0.21598800564899473,0.21933581973655414,0.2162039936546437,0.2165279756631172,0.21760791569136217,0.21825587970830918,0,0,0,0,0,0,0,0],[7,0.21933581973655414,0.22273552494247073,0.21955515555629068,0.21988415928589553,0.2209808383845783,0.22163884584378796,0,0,0,0,0,0,0,0],[8,0.22273552494247073,0.22618792557907902,0.2229582604674132,0.22329236375482692,0.22440604137953926,0.22507424795436667,0,0,0,0,0,0,0,0],[9,0.22618792557907902,0.22969383842555474,0.2264141135046581,0.22675339539302672,0.22788433502092212,0.22856289879765934,0,0,0,0,0,0,0,0],[10,0.22969383842555474,0.23325409292115085,0.2299235322639803,0.23026807302161864,0.2314165422137464,0.23210562372902308,0,0,0,0,0,0,0,0],[11,0.23325409292115085,0.2368695313614287,0.233487347014072,0.23383722815345373,0.2350034986180595,0.23570326089682295,0,0,0,0,0,0,0,0],[12,0.2368695313614287,0.24054100909753084,0.23710640089279011,0.23746170518983226,0.2386460528466394,0.23935666144072368,0,0,0,0,0,0,0,0],[13,0.24054100909753084,0.24426939473854256,0.24078155010662838,0.2411423616202747,0.24234506666576236,0.24306668969305492,0,0,0,0,0,0,0,0],[14,0.24426939473854256,0.24805557035698997,0.2445136641332811,0.2448800682253889,0.24610141519908163,0.24683422338329725,0,0,0,0,0,0,0,0],[15,0.24805557035698997,0.2519004316975233,0.24830362592734695,0.24867570928288243,0.2499159871346674,0.25066015384573836,0,0,0,0,0,0,0,0],[16,0.2519004316975233,0.2558048883888349,0.25215233212922084,0.25253018277676714,0.2537896849352548,0.2545453862303473,0,0,0,0,0,0,0,0],[17,0.2558048883888349,0.25976986415886183,0.25606069327722375,0.256444400609807,0.25772342505175116,0.25849083971691766,0,0,0,0,0,0,0,0],[18,0.25976986415886183,0.2637962970533242,0.2600296340230207,0.260419288819259,0.26171813814005335,0.2624974477325299,0,0,0,0,0,0,0,0],[19,0.2637962970533242,0.2678851396576507,0.2640600933503775,0.26445578779595746,0.26577476928122407,0.2665661581723841,0,0,0,0,0,0,0,0],[20,0.2678851396576507,0.2720373593223443,0.26815302479730835,0.26855485250679484,0.2698942782050831,0.27069793362405603,0,0,0,0,0,0,0,0],[21,0.2720373593223443,0.27625393839184065,0.27230939668166665,0.2727174527206502,0.2740776395172619,0.27489375159522894,0,0,0,0,0,0,0,0],[22,0.27625393839184065,0.2805358744369142,0.2765301923302325,0.2769445732378203,0.2783258429297795,0.279154604744955,0,0,0,0,0,0,0,0],[23,0.2805358744369142,0.28488418049068637,0.28081641031135113,0.2812372141230065,0.2826398934951911,0.2834815011185018,0,0,0,0,0,0,0,0],[24,0.28488418049068637,0.289299885288292,0.28516906467117703,0.2855963909419131,0.2870208118443665,0.28787546438583855,0,0,0,0,0,0,0,0],[25,0.289299885288292,0.2937840335102605,0.2895891851735803,0.2900231350015127,0.2914696344279542,0.2923375340838191,0,0,0,0,0,0,0,0],[26,0.2937840335102605,0.29833768602966954,0.29407781754377077,0.29451849359403615,0.29598741376158744,0.29686876586211824,0,0,0,0,0,0,0,0],[27,0.29833768602966954,0.3029619201631294,0.2986360237156992,0.2990835302447437,0.30057521867489206,0.30147023173298104,0,0,0,0,0,0,0,0],[28,0.3029619201631294,0.3076578299256579,0.3032648820832925,0.3037193249635372,0.30523413456435283,0.30614302032484225,0,0,0,0,0,0,0,0],[29,0.3076578299256579,0.31242652628950557,0.3079654877555835,0.308426974500472,0.3099652636501003,0.3108882371398773,0,0,0,0,0,0,0,0],[30,0.31242652628950557,0.3172691374469929,0.31273895281579506,0.3132075926052293,0.31476972523667685,0.31570700481554537,0,0,0,0,0,0,0,0],[31,0.3172691374469929,0.3221868090774213,0.31758640658443993,0.31806231029061044,0.3196486559778454,0.3206004633901864,0,0,0,0,0,0,0,0],[32,0.3221868090774213,0.3271807046181213,0.32250899588649873,0.3229922761001149,0.324603210145502,0.32556977057273423,0,0,0,0,0,0,0,0],[33,0.3271807046181213,0.3322520055397022,0.32750788532273944,0.32799865637966663,0.32963455990275725,0.3306161020166116,0,0,0,0,0,0,0,0],[34,0.3322520055397022,0.3374019116255676,0.3325842575452419,0.33308263555355144,0.33474389558124995,0.3357406515978691,0,0,0,0,0,0,0,0],[35,0.3374019116255676,0.3426316412557639,0.33773931353719316,0.3382454164046315,0.33993242596275935,0.34094463169763606,0,0,0,0,0,0,0,0],[36,0.3426316412557639,0.34794243169522826,0.34297427289701965,0.3434882203589033,0.3452013785651821,0.3462292734889494,0,0,0,0,0,0,0,0],[37,0.34794243169522826,0.3533355393865043,0.3482903741269235,0.3488122877744663,0.35055199993294245,0.3515958272280282,0,0,0,0,0,0,0,0],[38,0.3533355393865043,0.3588122402469951,0.3536888749258908,0.35421887823497056,0.35598555593190306,0.3570455625500626,0,0,0,0,0,0,0,0],[39,0.3588122402469951,0.3643738299708235,0.35917105248724207,0.35970927084761256,0.36150333204884755,0.36257976876958853,0,0,0,0,0,0,0,0],[40,0.3643738299708235,0.3700216243353713,0.36473820380079436,0.3652847645457506,0.3671066336956047,0.3681997551855172,0,0,0,0,0,0,0,0],[41,0.3700216243353713,0.37575695951256954,0.37039164595970664,0.3709466783962097,0.37279678651788656,0.3739068513908927,0,0,0,0,0,0,0,0],[42,0.37575695951256954,0.38158119238501437,0.37613271647208213,0.376696351911351,0.37857513670891385,0.37970240758745155,0,0,0,0,0,0,0,0],[43,0.38158119238501437,0.3874957008669821,0.3819627735773994,0.3825351453659769,0.38444305132790196,0.385587794905057,0,0,0,0,0,0,0,0],[44,0.3874957008669821,0.3935018842304203,0.3878831965678491,0.38846444011914955,0.39040191862348445,0.3915644057260854,0,0,0,0,0,0,0,0],[45,0.3935018842304203,0.39960116343599184,0.39389538611465075,0.39448563894099636,0.39645314836214846,0.39763365401483974,0,0,0,0,0,0,0,0],[46,0.39960116343599184,0.4057949814692497,0.40000076459942785,0.40060016634458184,0.4025981721617618,0.4037969756520698,0,0,0,0,0,0,0,0]],\"finance\":{\"startdepo\":\"80\",\"depo\":\"80\",\"quotanal\":0,\"quotainorders\":0,\"basenal\":\"80\",\"baseinorders\":0,\"profittoday\":0},\"sales\":{\"today\":[],\"days\":[],\"all\":[]},\"currentfloor\":[32,0.3221868090774213,0.3271807046181213,0.32250899588649873,0.3229922761001149,0.324603210145502,0.32556977057273423,0,0,0,0,0,0,0,0]};\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 2880,
        "y": 1380,
        "wires": [
            [
                "ae951733.066bd"
            ]
        ]
    },
    {
        "id": "5a624a9b.734534",
        "type": "link in",
        "z": "5f98db3a.7ab21c",
        "g": "4a199c83.179e84",
        "name": "",
        "links": [
            "563d14b6.3a5db4",
            "c0b46394.7bd6e",
            "2253204.d02816",
            "874d8336.9507e"
        ],
        "x": 495,
        "y": 420,
        "wires": [
            [
                "2bed7653.30adaa"
            ]
        ]
    },
    {
        "id": "563d14b6.3a5db4",
        "type": "link out",
        "z": "5f98db3a.7ab21c",
        "g": "4a199c83.179e84",
        "name": "",
        "links": [
            "5a624a9b.734534",
            "17bad0f2.7af38f"
        ],
        "x": 1895,
        "y": 380,
        "wires": []
    },
    {
        "id": "c0b46394.7bd6e",
        "type": "link out",
        "z": "5f98db3a.7ab21c",
        "g": "4a199c83.179e84",
        "name": "",
        "links": [
            "5a624a9b.734534",
            "17bad0f2.7af38f"
        ],
        "x": 1895,
        "y": 420,
        "wires": []
    },
    {
        "id": "510a8455.a89b84",
        "type": "switch",
        "z": "5f98db3a.7ab21c",
        "name": "statusCode",
        "property": "orderexec.statusCode",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "ok",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "not ok",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 3250,
        "y": 1340,
        "wires": [
            [
                "c5e0a09d.da0f6",
                "80d227a6.d6aa4"
            ],
            [
                "34799da9.c6221a",
                "ae21d8bc.1a4f6"
            ]
        ]
    },
    {
        "id": "34799da9.c6221a",
        "type": "debug",
        "z": "5f98db3a.7ab21c",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 3430,
        "y": 1380,
        "wires": []
    },
    {
        "id": "d9186e74.22817",
        "type": "inject",
        "z": "654ea140.2275a8",
        "g": "3684cd36.8432c2",
        "name": "test",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 190,
        "y": 180,
        "wires": [
            [
                "389f73e5.59ca9c"
            ]
        ]
    },
    {
        "id": "389f73e5.59ca9c",
        "type": "function",
        "z": "654ea140.2275a8",
        "g": "3684cd36.8432c2",
        "name": "",
        "func": "msg.payload = [\"355\",\"356.3\",\"358\",\"360\"];\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 380,
        "y": 180,
        "wires": [
            [
                "95dd2e2c.06eea"
            ]
        ]
    },
    {
        "id": "95dd2e2c.06eea",
        "type": "split",
        "z": "654ea140.2275a8",
        "g": "3684cd36.8432c2",
        "name": "",
        "splt": "\\n",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "x": 570,
        "y": 180,
        "wires": [
            [
                "855d1e5e.112688"
            ]
        ]
    },
    {
        "id": "855d1e5e.112688",
        "type": "delay",
        "z": "654ea140.2275a8",
        "g": "3684cd36.8432c2",
        "name": "",
        "pauseType": "rate",
        "timeout": "2",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "2",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "x": 750,
        "y": 180,
        "wires": [
            [
                "1bb1a9a2.c72076"
            ]
        ]
    },
    {
        "id": "1bb1a9a2.c72076",
        "type": "function",
        "z": "654ea140.2275a8",
        "g": "3684cd36.8432c2",
        "name": "",
        "func": "     msg.topic = \"prices:BNBqUSDT\";\n\n    \nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 940,
        "y": 180,
        "wires": [
            [
                "8d1c9d05.67e5e8"
            ]
        ]
    },
    {
        "id": "5c14e61c.17df1",
        "type": "debug",
        "z": "654ea140.2275a8",
        "g": "3684cd36.8432c2",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1380,
        "y": 180,
        "wires": []
    },
    {
        "id": "10eab9fb.e22636",
        "type": "inject",
        "z": "654ea140.2275a8",
        "g": "3684cd36.8432c2",
        "name": "test",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 780,
        "y": 260,
        "wires": [
            [
                "a003933f.68583"
            ]
        ]
    },
    {
        "id": "a003933f.68583",
        "type": "function",
        "z": "654ea140.2275a8",
        "g": "3684cd36.8432c2",
        "name": "",
        "func": "msg.payload = \"355\";\nmsg.topic = \"prices:BNBqUSDT\";\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 970,
        "y": 260,
        "wires": [
            [
                "8d1c9d05.67e5e8"
            ]
        ]
    },
    {
        "id": "8d1c9d05.67e5e8",
        "type": "redis-command",
        "z": "654ea140.2275a8",
        "g": "3684cd36.8432c2",
        "server": "f120eab2.0a60a8",
        "command": "SET",
        "name": "",
        "topic": "",
        "params": "[]",
        "paramsType": "json",
        "payloadType": "json",
        "block": false,
        "x": 1170,
        "y": 200,
        "wires": [
            [
                "5c14e61c.17df1"
            ]
        ]
    },
    {
        "id": "eb0ebfc5.9889a",
        "type": "file",
        "z": "5f98db3a.7ab21c",
        "g": "4bf7491f.8e70b",
        "name": "",
        "filename": "",
        "appendNewline": true,
        "createDir": true,
        "overwriteFile": "false",
        "encoding": "none",
        "x": 650,
        "y": 240,
        "wires": [
            [
                "afaf3a2c.646c88"
            ]
        ]
    },
    {
        "id": "6868e3af.6c4b4c",
        "type": "function",
        "z": "5f98db3a.7ab21c",
        "g": "4bf7491f.8e70b",
        "name": "data prepare",
        "func": "var date = new Date();\n\nmsg.payload = date.toString().split('GMT')[0] +\" : \"+msg.payload;\nmsg.filename = \"/data/journals/\"+msg.topic+\".txt\";\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 490,
        "y": 240,
        "wires": [
            [
                "eb0ebfc5.9889a"
            ]
        ]
    },
    {
        "id": "6526e141.43af9",
        "type": "function",
        "z": "5f98db3a.7ab21c",
        "g": "4bf7491f.8e70b",
        "name": "tilog()",
        "func": "",
        "outputs": 1,
        "noerr": 0,
        "initialize": "let guid = global.get('guid');\n\n\nlet tilog = function (botname = msg.topic, data = msg.payload) {\n    \n    let promise = new Promise((resolve, reject) => {\n        msg.resolve = resolve;\n        msg.reject = reject;\n    });\n    \n\n    msg.topic = botname;\n    msg.payload = data;\n\n    node.send(Object.assign({}, msg));\n    \n    return promise;\n};\n\nglobal.set('tilog', tilog);",
        "finalize": "",
        "x": 330,
        "y": 240,
        "wires": [
            [
                "6868e3af.6c4b4c"
            ]
        ]
    },
    {
        "id": "eab25c49.10d9c8",
        "type": "inject",
        "z": "5f98db3a.7ab21c",
        "g": "4bf7491f.8e70b",
        "name": "botname, log msg",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "x": 150,
        "y": 240,
        "wires": [
            [
                "6526e141.43af9"
            ]
        ]
    },
    {
        "id": "afaf3a2c.646c88",
        "type": "function",
        "z": "5f98db3a.7ab21c",
        "g": "4bf7491f.8e70b",
        "name": "resolve",
        "func": "msg.resolve(msg.payload);\n\n// reject\n// setTimeout(function () {\n//     msg.reject({message: 'Could not request joke'});\n// }, 2000);",
        "outputs": "0",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 800,
        "y": 240,
        "wires": []
    },
    {
        "id": "9018737c.12e188",
        "type": "inject",
        "z": "5f98db3a.7ab21c",
        "g": "4bf7491f.8e70b",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 1020,
        "y": 240,
        "wires": [
            [
                "81a608ac.0eeab8"
            ]
        ]
    },
    {
        "id": "81a608ac.0eeab8",
        "type": "function",
        "z": "5f98db3a.7ab21c",
        "g": "4bf7491f.8e70b",
        "name": "tilog",
        "func": "let botname = \"LINKDOWNUSDT-1626469485\";\nlet data = \"dfdf\";\nconst tilog = global.get('tilog')(botname,data);\n\ntilog.then(tilog => {\n\n\n        node.status({fill:\"green\",shape:\"dot\"});\n    node.send(msg);\n     \n    \n\n}).catch(error => {\n    \n    msg.error = error;\n    node.status({fill:\"red\",shape: \"ring\"});\n    \n    node.error(error);\n});",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 1190,
        "y": 240,
        "wires": [
            [
                "d615849.c726078"
            ]
        ]
    },
    {
        "id": "d615849.c726078",
        "type": "debug",
        "z": "5f98db3a.7ab21c",
        "g": "4bf7491f.8e70b",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1350,
        "y": 240,
        "wires": []
    },
    {
        "id": "ae21d8bc.1a4f6",
        "type": "function",
        "z": "5f98db3a.7ab21c",
        "name": "tilog",
        "func": "let botname = msg.bot.settings.botname;\nlet data = \"Ошибка при выставлении ордера - \"+msg.orderexec.statusBody;\nconst tilog = global.get('tilog')(botname,data);\n\ntilog.then(tilog => {\n\n\n        node.status({fill:\"green\",shape:\"dot\"});\n    node.send(msg);\n     \n    \n\n}).catch(error => {\n    \n    msg.error = error;\n    node.status({fill:\"red\",shape: \"ring\"});\n    \n    node.error(error);\n});",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 3430,
        "y": 1420,
        "wires": [
            []
        ]
    },
    {
        "id": "46c542f6.8abcf4",
        "type": "function",
        "z": "5df15275.2888ec",
        "g": "5b21035.9c9f6fc",
        "name": "tilog",
        "func": "let botname = msg.payload.settings.botname;\nlet data = \"Сброс к стартовым настройкам\";\nconst tilog = global.get('tilog')(botname,data);\n\ntilog.then(tilog => {\n\n\n        node.status({fill:\"green\",shape:\"dot\"});\n    node.send(msg);\n     \n    \n\n}).catch(error => {\n    \n    msg.error = error;\n    node.status({fill:\"red\",shape: \"ring\"});\n    \n    node.error(error);\n});",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 4370,
        "y": 1920,
        "wires": [
            [
                "5ca44974.720a18"
            ]
        ]
    },
    {
        "id": "32fce615.5af6c2",
        "type": "function",
        "z": "5df15275.2888ec",
        "g": "8fac538c.5d4a48",
        "name": "syslog",
        "func": "let botname = \"syslog.txt\";\nlet data = \"Старт\";\nconst tilog = global.get('tilog')(botname,data);\n\ntilog.then(tilog => {\n\n\n        node.status({fill:\"green\",shape:\"dot\"});\n    node.send(msg);\n     \n    \n\n}).catch(error => {\n    \n    msg.error = error;\n    node.status({fill:\"red\",shape: \"ring\"});\n    \n    node.error(error);\n});",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 290,
        "y": 1160,
        "wires": [
            []
        ]
    },
    {
        "id": "8f9ec476.3b8e88",
        "type": "function",
        "z": "5df15275.2888ec",
        "g": "8fac538c.5d4a48",
        "name": "syslog",
        "func": "let botname = \"syslog.txt\";\nlet data = \"Стоп\";\nconst tilog = global.get('tilog')(botname,data);\n\ntilog.then(tilog => {\n\n\n        node.status({fill:\"green\",shape:\"dot\"});\n    node.send(msg);\n     \n    \n\n}).catch(error => {\n    \n    msg.error = error;\n    node.status({fill:\"red\",shape: \"ring\"});\n    \n    node.error(error);\n});",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 430,
        "y": 1280,
        "wires": [
            []
        ]
    },
    {
        "id": "5ca44974.720a18",
        "type": "function",
        "z": "5df15275.2888ec",
        "g": "5b21035.9c9f6fc",
        "name": "syslog",
        "func": "let botname = \"syslog.txt\";\nlet data = \"Сброс к стартовым настройкам \"+msg.payload.settings.botname;\nconst tilog = global.get('tilog')(botname,data);\n\ntilog.then(tilog => {\n\n\n        node.status({fill:\"green\",shape:\"dot\"});\n    node.send(msg);\n     \n    \n\n}).catch(error => {\n    \n    msg.error = error;\n    node.status({fill:\"red\",shape: \"ring\"});\n    \n    node.error(error);\n});",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 4510,
        "y": 1920,
        "wires": [
            []
        ]
    },
    {
        "id": "45106e21.e54d18",
        "type": "inject",
        "z": "5df15275.2888ec",
        "g": "4ca0454e.162644",
        "name": " stop",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "reset",
                "v": "true",
                "vt": "bool"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 2230,
        "y": 560,
        "wires": [
            [
                "90b3de3e.0f9138"
            ]
        ]
    },
    {
        "id": "90b3de3e.0f9138",
        "type": "redis-out",
        "z": "5df15275.2888ec",
        "g": "4ca0454e.162644",
        "server": "f120eab2.0a60a8",
        "command": "publish",
        "name": "",
        "topic": "stop",
        "obj": false,
        "x": 2230,
        "y": 600,
        "wires": []
    },
    {
        "id": "1cfbf41e.cf4f7c",
        "type": "inject",
        "z": "5df15275.2888ec",
        "g": "4ca0454e.162644",
        "name": "start",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 1810,
        "y": 560,
        "wires": [
            [
                "5723790d.977708"
            ]
        ]
    },
    {
        "id": "5723790d.977708",
        "type": "redis-out",
        "z": "5df15275.2888ec",
        "g": "4ca0454e.162644",
        "server": "f120eab2.0a60a8",
        "command": "publish",
        "name": "",
        "topic": "start",
        "obj": false,
        "x": 1810,
        "y": 600,
        "wires": []
    },
    {
        "id": "6d45b492.84bb6c",
        "type": "inject",
        "z": "5df15275.2888ec",
        "g": "4ca0454e.162644",
        "name": "start1",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 1990,
        "y": 560,
        "wires": [
            [
                "527a479c.295dc8"
            ]
        ]
    },
    {
        "id": "527a479c.295dc8",
        "type": "redis-out",
        "z": "5df15275.2888ec",
        "g": "4ca0454e.162644",
        "server": "f120eab2.0a60a8",
        "command": "publish",
        "name": "",
        "topic": "start1",
        "obj": false,
        "x": 1990,
        "y": 600,
        "wires": []
    },
    {
        "id": "30488a50.28a656",
        "type": "function",
        "z": "5f98db3a.7ab21c",
        "name": "",
        "func": "let botname = \"syslog.txt\";\n        let data = \"Сброс \"+msg.botname;\n        const tilog = global.get('tilog')(botname,data);\n        tilog;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 3210,
        "y": 1480,
        "wires": [
            [
                "97f0a07d.29e98"
            ]
        ]
    },
    {
        "id": "9fd3c7b9.995dd8",
        "type": "inject",
        "z": "5f98db3a.7ab21c",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 3070,
        "y": 1480,
        "wires": [
            [
                "30488a50.28a656"
            ]
        ]
    },
    {
        "id": "97f0a07d.29e98",
        "type": "debug",
        "z": "5f98db3a.7ab21c",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 3380,
        "y": 1480,
        "wires": []
    },
    {
        "id": "efc7fd64.6f06b8",
        "type": "function",
        "z": "5f98db3a.7ab21c",
        "g": "4a199c83.179e84",
        "name": "tilog",
        "func": "//запись в журнал\nlet botname = msg.bot.settings.botname;\nlet data = \"Ошибка при выставлении ордера на бирже - \"+msg.err.body;\n\nconst tilog = global.get('tilog')(botname,data);\n\ntilog;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 570,
        "y": 960,
        "wires": [
            []
        ]
    },
    {
        "id": "80d227a6.d6aa4",
        "type": "function",
        "z": "5f98db3a.7ab21c",
        "name": "tilog",
        "func": "let botname = msg.bot.settings.botname;\n\nlet data = \"Выставлен ордер - \"+msg.orderexec.statusBody.orderId;\nconst tilog = global.get('tilog')(botname,data);\n\ntilog.then(tilog => {\n\n\n        node.status({fill:\"green\",shape:\"dot\"});\n    node.send(msg);\n     \n    \n\n}).catch(error => {\n    \n    msg.error = error;\n    node.status({fill:\"red\",shape: \"ring\"});\n    \n    node.error(error);\n});",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 3410,
        "y": 1340,
        "wires": [
            []
        ]
    },
    {
        "id": "9c767365.195f58",
        "type": "debug",
        "z": "5f98db3a.7ab21c",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "x": 3230,
        "y": 820,
        "wires": []
    },
    {
        "id": "7811c1a3.aadcf8",
        "type": "debug",
        "z": "5f98db3a.7ab21c",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "x": 3230,
        "y": 880,
        "wires": []
    },
    {
        "id": "174aec60.3ee644",
        "type": "inject",
        "z": "5f98db3a.7ab21c",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "jjh:e",
        "payload": "{\"a\":1,\"b\":2}",
        "payloadType": "json",
        "x": 2580,
        "y": 880,
        "wires": [
            [
                "d1cb03f4.7abb68"
            ]
        ]
    },
    {
        "id": "bbb513dd.3573b",
        "type": "redis-in",
        "z": "5f98db3a.7ab21c",
        "server": "f120eab2.0a60a8",
        "command": "psubscribe",
        "name": "",
        "topic": "jjh:*",
        "obj": false,
        "timeout": 0,
        "x": 3000,
        "y": 820,
        "wires": [
            [
                "9c767365.195f58"
            ]
        ]
    },
    {
        "id": "535e8595.2af0fc",
        "type": "redis-in",
        "z": "5f98db3a.7ab21c",
        "server": "f120eab2.0a60a8",
        "command": "subscribe",
        "name": "",
        "topic": "TOPIC:OK",
        "obj": true,
        "timeout": 0,
        "x": 3000,
        "y": 880,
        "wires": [
            [
                "7811c1a3.aadcf8"
            ]
        ]
    },
    {
        "id": "d1cb03f4.7abb68",
        "type": "redis-out",
        "z": "5f98db3a.7ab21c",
        "server": "f120eab2.0a60a8",
        "command": "publish",
        "name": "",
        "topic": "",
        "obj": true,
        "x": 2740,
        "y": 880,
        "wires": []
    },
    {
        "id": "a7628168.861ce",
        "type": "redis-instance",
        "z": "5df15275.2888ec",
        "server": "f120eab2.0a60a8",
        "name": "",
        "topic": "redis",
        "location": "flow",
        "x": 1990,
        "y": 180,
        "wires": []
    },
    {
        "id": "daa898ee.e48da8",
        "type": "inject",
        "z": "5df15275.2888ec",
        "name": "d3fmoh2rVoVNgIcpLTFZBE0jHnI2",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "d3fmoh2rVoVNgIcpLTFZBE0jHnI2",
        "payloadType": "str",
        "x": 1960,
        "y": 420,
        "wires": [
            [
                "d073d696.0c367"
            ]
        ]
    },
    {
        "id": "d073d696.0c367",
        "type": "function",
        "z": "5df15275.2888ec",
        "name": "getbotlist",
        "func": "\nlet guid = msg.payload;\n\nconst gbl = global.get('getbotlist')(guid);\n\ngbl.then(gbl => {\n    \n    msg.payload = gbl;\n    node.send(msg);\n\n}).catch(error => {\n    node.error(error);\n});",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 2180,
        "y": 420,
        "wires": [
            [
                "d0cba81.323b658"
            ]
        ]
    },
    {
        "id": "d0cba81.323b658",
        "type": "debug",
        "z": "5df15275.2888ec",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 2350,
        "y": 420,
        "wires": []
    },
    {
        "id": "174109bc.94fd76",
        "type": "function",
        "z": "5df15275.2888ec",
        "name": "orderexec setbuy",
        "func": "//<трекер<\n    let track = flow.get(\"track\");\n    let start_node_time = new Date().getTime();\n    let steptitle = node.name;\n\n    let laststep = track[track.length-1];\n    let last_node_end_time = laststep.end_node_time;\n//>трекер>\n\nlet cmd = \"setbuy\";\nlet quantity = Number((Number(msg.bot.finance.depo)*Number(msg.bot.settings.ordersize)/100/msg.bot.status.currentprice).toFixed(msg.bot.settings.digitq));\nlet price = Number((msg.bot.currentfloor[3]).toFixed(msg.bot.settings.digitprice));\n\n\nlet data = {moneta:msg.bot.settings.moneta, price: price, quantity: quantity, bot: msg.bot};\nconst orderexec = global.get('order_exec')(cmd,data);\n\nlet botname = msg.bot.settings.botname;\n\nlet data2 = botname+\":\"+cmd+\": price:\"+data.price+\", quantity: \"+data.quantity;\nconst tilog = global.get('tilog')(botname,data2);\ntilog;\n\norderexec.then(orderexec => {\n    msg.orderexec = orderexec;\n    if (orderexec.statusCode === \"ok\"){\n        node.status({fill:\"green\",shape:\"dot\", text: orderexec.statusBody.orderId});\n        msg.bot = msg.orderexec.bot;\n        \n    //>трекер>\n        let end_node_time = new Date().getTime();\n        let duration = end_node_time - start_node_time;\n        let duration_step = end_node_time - last_node_end_time;\n        track.push({\n            \"steptitle\": steptitle,\n            \"start_node_time\": start_node_time,\n            \"end_node_time\": end_node_time,\n            \"duration_node\": duration,\n            \"duration_step\": duration_step\n        });\n        flow.set(\"track\", track);\n    //>трекер>\n        \n        node.send(msg);\n        \n    } else {\n        node.status({fill:\"red\",shape:\"dot\"});\n        \n    //>трекер>\n        let end_node_time = new Date().getTime();\n        let duration = end_node_time - start_node_time;\n        let duration_step = end_node_time - last_node_end_time;\n        track.push({\n            \"steptitle\": steptitle+\"-faile\",\n            \"start_node_time\": start_node_time,\n            \"end_node_time\": end_node_time,\n            \"duration\": duration,\n            \"duration_step\": duration_step,\n            \"error\": orderexec.statusBody\n        });\n        flow.set(\"track\", track);\n    //>трекер>\n        \n        node.send(msg);\n    }\n    \n\n}).catch(error => {\n    \n    msg.error = error;\n    node.status({fill:\"red\",shape: \"ring\"});\n    \n    node.error(error);\n});\n\n\n\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 1410,
        "y": 1800,
        "wires": [
            [
                "e607cce5.aa73c"
            ]
        ]
    },
    {
        "id": "e607cce5.aa73c",
        "type": "switch",
        "z": "5df15275.2888ec",
        "name": "statusCode",
        "property": "orderexec.statusCode",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "ok",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "not ok",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 1610,
        "y": 1800,
        "wires": [
            [
                "cbc68762.e60e78",
                "a49d131f.5a52d"
            ],
            [
                "1731cb49.0443ed"
            ]
        ]
    },
    {
        "id": "1d3d001f.71ad58",
        "type": "link out",
        "z": "5df15275.2888ec",
        "name": "",
        "links": [
            "e34a5b68.726ec8",
            "e3e1e22a.f958b"
        ],
        "x": 2235,
        "y": 1780,
        "wires": []
    },
    {
        "id": "1731cb49.0443ed",
        "type": "function",
        "z": "5df15275.2888ec",
        "name": "tilog",
        "func": "let botname = msg.bot.settings.botname;\nlet data = \"Ошибка при выставлении ордера - \"+msg.orderexec.statusBody;\nconst tilog = global.get('tilog')(botname,data);\n\ntilog.then(tilog => {\n\n\n        node.status({fill:\"green\",shape:\"dot\"});\n    node.send(msg);\n     \n    \n\n}).catch(error => {\n    \n    msg.error = error;\n    node.status({fill:\"red\",shape: \"ring\"});\n    \n    node.error(error);\n});",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 1630,
        "y": 1840,
        "wires": [
            [
                "21bac3f3.0c9a4c"
            ]
        ]
    },
    {
        "id": "21bac3f3.0c9a4c",
        "type": "link out",
        "z": "5df15275.2888ec",
        "name": "",
        "links": [
            "e34a5b68.726ec8",
            "e3e1e22a.f958b"
        ],
        "x": 1735,
        "y": 1840,
        "wires": []
    },
    {
        "id": "9a0212b.22ad2f",
        "type": "inject",
        "z": "5df15275.2888ec",
        "g": "3cd75c26.965da4",
        "name": " stop",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "reset",
                "v": "true",
                "vt": "bool"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 3070,
        "y": 1680,
        "wires": [
            [
                "ba11b816.73cd58"
            ]
        ]
    },
    {
        "id": "ba11b816.73cd58",
        "type": "redis-out",
        "z": "5df15275.2888ec",
        "g": "3cd75c26.965da4",
        "server": "f120eab2.0a60a8",
        "command": "publish",
        "name": "",
        "topic": "stop",
        "obj": false,
        "x": 3070,
        "y": 1720,
        "wires": []
    },
    {
        "id": "539b4f99.508ec8",
        "type": "inject",
        "z": "5df15275.2888ec",
        "g": "3cd75c26.965da4",
        "name": "start",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 2650,
        "y": 1680,
        "wires": [
            [
                "82b5feb8.b8894"
            ]
        ]
    },
    {
        "id": "82b5feb8.b8894",
        "type": "redis-out",
        "z": "5df15275.2888ec",
        "g": "3cd75c26.965da4",
        "server": "f120eab2.0a60a8",
        "command": "publish",
        "name": "",
        "topic": "start",
        "obj": false,
        "x": 2650,
        "y": 1720,
        "wires": []
    },
    {
        "id": "61f763b0.65d2b4",
        "type": "inject",
        "z": "5df15275.2888ec",
        "g": "3cd75c26.965da4",
        "name": "start1",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 2830,
        "y": 1680,
        "wires": [
            [
                "43e93874.b7141"
            ]
        ]
    },
    {
        "id": "43e93874.b7141",
        "type": "redis-out",
        "z": "5df15275.2888ec",
        "g": "3cd75c26.965da4",
        "server": "f120eab2.0a60a8",
        "command": "publish",
        "name": "",
        "topic": "start1",
        "obj": false,
        "x": 2830,
        "y": 1720,
        "wires": []
    },
    {
        "id": "5a3f403a.e52a98",
        "type": "debug",
        "z": "5df15275.2888ec",
        "g": "3e767551.3d299a",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 2370,
        "y": 1200,
        "wires": []
    },
    {
        "id": "241d62c4.835d6e",
        "type": "function",
        "z": "5f98db3a.7ab21c",
        "g": "4a199c83.179e84",
        "name": "cansel buy orders",
        "func": "\n\nfunction parseApiError(error) {\n  if (error.body) {\n    try {\n      var resp = JSON.parse(error.body);\n      return resp.msg;\n    } catch (error) {/* pass thru */}\n  }\n  return \"Unknown error. Status code: \"+error.statsCode;\n}\n\nlet LBinance = global.get('gBinance');\n//node.warn(LBinance);\nlet key = global.get('key');\nlet secret = global.get('secret');\n\nlet binance = new LBinance().options({\n\tAPIKEY: key,\n\tAPISECRET: secret,\n\treconnect: false,\n\tuseServerTime: true\n});\n\nlet moneta = msg.bot.settings.moneta;\nlet orderid = msg.payload.orderid;\n\n//msg.payload = \"qjson.status\";\n\nbinance.useServerTime(function() {\nbinance.cancel(moneta, orderid, (err, resp) => {\n // console.info(\"Limit Buy response\", response);\n // console.info(\"order id: \" + response.orderId);\n    if (err) {\n        var errorMsg = parseApiError(err) + \", moneta:\" + moneta;\n        node.error(errorMsg, msg);\n        \n\n\n    node.status({fill: \"red\", shape: \"ring\", text: errorMsg});\n    node.send(msg);\n        \n    \n    }\n    if (resp) {\n        msg.orderid = resp.orderId;\n        msg.resp = resp;\n        \n\n    node.status({fill: \"green\", shape: \"ring\"});\n    node.send(msg);\n        \n    }\n    //node.status({}); //clear status message\n})});\n\n\n\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 1450,
        "y": 480,
        "wires": [
            [
                "6f817e7d.c291c"
            ]
        ]
    },
    {
        "id": "c0de766a.ac5d58",
        "type": "function",
        "z": "5df15275.2888ec",
        "name": "orderexec cansel",
        "func": "//<трекер<\n    let track = flow.get(\"track\");\n    let start_node_time = new Date().getTime();\n    let steptitle = node.name;\n\n    let laststep = track[track.length-1];\n    let last_node_end_time = laststep.end_node_time;\n//>трекер>\n\nlet cmd = \"cansel\";\nlet quantity = Number((Number(msg.bot.finance.depo)*Number(msg.bot.settings.ordersize)/100/msg.bot.status.currentprice).toFixed(msg.bot.settings.digitq));\nlet price = Number((msg.bot.currentfloor[3]).toFixed(msg.bot.settings.digitprice));\n\nlet orderid = msg.bot.currentfloor[8];\n\nlet data = {moneta:msg.bot.settings.moneta, orderid: orderid, bot: msg.bot};\nconst orderexec = global.get('order_exec')(cmd,data);\n\nlet botname = msg.bot.settings.botname;\n\nlet data2 = botname+\":\"+cmd+\": orderid:\"+orderid;\nconst tilog = global.get('tilog')(botname,data2);\ntilog;\n\norderexec.then(orderexec => {\n    msg.orderexec = orderexec;\n    if (orderexec.statusCode === \"ok\"){\n        node.status({fill:\"green\",shape:\"dot\", text: orderexec.statusBody.orderId});\n        msg.bot = msg.orderexec.bot;\n        \n    //>трекер>\n        let end_node_time = new Date().getTime();\n        let duration = end_node_time - start_node_time;\n        let duration_step = end_node_time - last_node_end_time;\n        track.push({\n            \"steptitle\": steptitle,\n            \"start_node_time\": start_node_time,\n            \"end_node_time\": end_node_time,\n            \"duration_node\": duration,\n            \"duration_step\": duration_step\n        });\n        flow.set(\"track\", track);\n    //>трекер>\n        \n        node.send(msg);\n        \n    } else {\n        node.status({fill:\"red\",shape:\"dot\"});\n        \n    //>трекер>\n        let end_node_time = new Date().getTime();\n        let duration = end_node_time - start_node_time;\n        let duration_step = end_node_time - last_node_end_time;\n        track.push({\n            \"steptitle\": steptitle+\"-faile\",\n            \"start_node_time\": start_node_time,\n            \"end_node_time\": end_node_time,\n            \"duration\": duration,\n            \"duration_step\": duration_step,\n            \"error\": orderexec.statusBody\n        });\n        flow.set(\"track\", track);\n    //>трекер>\n        \n        node.send(msg);\n    }\n    \n\n}).catch(error => {\n    \n    msg.error = error;\n    node.status({fill:\"red\",shape: \"ring\"});\n    \n    node.error(error);\n});\n\n\n\n\n\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 2330,
        "y": 2300,
        "wires": [
            [
                "e19dfab8.b442f8",
                "6a429b44.9d8c54"
            ]
        ]
    },
    {
        "id": "e19dfab8.b442f8",
        "type": "switch",
        "z": "5df15275.2888ec",
        "name": "statusCode",
        "property": "orderexec.statusCode",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "ok",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "not ok",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 2530,
        "y": 2300,
        "wires": [
            [
                "599bb04c.9368d"
            ],
            [
                "fdfa4860.aa554"
            ]
        ]
    },
    {
        "id": "fdfa4860.aa554",
        "type": "function",
        "z": "5df15275.2888ec",
        "name": "tilog",
        "func": "let botname = msg.bot.settings.botname;\nlet data = \"Ошибка при снятии ордера - \"+msg.orderexec.statusBody;\nconst tilog = global.get('tilog')(botname,data);\n\ntilog.then(tilog => {\n\n\n        node.status({fill:\"green\",shape:\"dot\"});\n    node.send(msg);\n     \n    \n\n}).catch(error => {\n    \n    msg.error = error;\n    node.status({fill:\"red\",shape: \"ring\"});\n    \n    node.error(error);\n});",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 2510,
        "y": 2340,
        "wires": [
            [
                "fb59e9.14f76618"
            ]
        ]
    },
    {
        "id": "fb59e9.14f76618",
        "type": "link out",
        "z": "5df15275.2888ec",
        "name": "",
        "links": [
            "e34a5b68.726ec8",
            "e3e1e22a.f958b"
        ],
        "x": 2595,
        "y": 2340,
        "wires": []
    },
    {
        "id": "6f817e7d.c291c",
        "type": "function",
        "z": "5f98db3a.7ab21c",
        "g": "4a199c83.179e84",
        "name": "обработчик ошибок",
        "func": "if (msg.err) {\n    msg.payload.statusCode = \"not ok\";\n    msg.payload.statusBody = msg.err.body;\n    //node.warn(msg.err.statusCode)\n    \n\n    \n    \n    return [null,msg];\n} else {\n    msg.payload.statusCode = \"ok\";\n    msg.payload.statusBody = msg.resp;\n    return [msg,null];\n}\n\n\n\n",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 1680,
        "y": 480,
        "wires": [
            [
                "85f53fe7.0846f8",
                "2253204.d02816"
            ],
            [
                "9ebc7b79.d11ad8",
                "874d8336.9507e"
            ]
        ]
    },
    {
        "id": "85f53fe7.0846f8",
        "type": "debug",
        "z": "5f98db3a.7ab21c",
        "g": "4a199c83.179e84",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1990,
        "y": 460,
        "wires": []
    },
    {
        "id": "9ebc7b79.d11ad8",
        "type": "debug",
        "z": "5f98db3a.7ab21c",
        "g": "4a199c83.179e84",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1990,
        "y": 500,
        "wires": []
    },
    {
        "id": "2253204.d02816",
        "type": "link out",
        "z": "5f98db3a.7ab21c",
        "g": "4a199c83.179e84",
        "name": "",
        "links": [
            "5a624a9b.734534",
            "17bad0f2.7af38f"
        ],
        "x": 1895,
        "y": 460,
        "wires": []
    },
    {
        "id": "874d8336.9507e",
        "type": "link out",
        "z": "5f98db3a.7ab21c",
        "g": "4a199c83.179e84",
        "name": "",
        "links": [
            "5a624a9b.734534",
            "17bad0f2.7af38f"
        ],
        "x": 1895,
        "y": 500,
        "wires": []
    },
    {
        "id": "996dd87f.a47f",
        "type": "function",
        "z": "5df15275.2888ec",
        "g": "c2109678.33bc38",
        "name": "tilog",
        "func": "let botname2 = msg.botname;\n        let data2 = \"Перерасчет МА - \"+msg.bot.status.rezhim;\n        const tilog = global.get('tilog')(botname2,data2);\n        tilog;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 2950,
        "y": 940,
        "wires": [
            []
        ]
    },
    {
        "id": "208c29d9.3bb9de",
        "type": "debug",
        "z": "5df15275.2888ec",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 3090,
        "y": 2320,
        "wires": []
    },
    {
        "id": "cbc68762.e60e78",
        "type": "function",
        "z": "5df15275.2888ec",
        "name": "change floors, finance ",
        "func": "\nlet currentfloor = msg.bot.currentfloor;\ncurrentfloor[7] = 1;\ncurrentfloor[8] = msg.orderexec.statusBody.orderId;\ncurrentfloor[14] = msg.orderexec.statusBody.origQty;\n\nmsg.bot.floors[currentfloor[0]-1] = currentfloor;\n\nmsg.bot.finance.baseinorders = (Number(Number(msg.bot.finance.baseinorders) + Number(msg.orderexec.statusBody.origQty) * Number(msg.orderexec.statusBody.price))).toFixed(msg.bot.settings.digitprice);\nmsg.bot.finance.basenal = (Number(Number(msg.bot.finance.basenal) - Number(msg.orderexec.statusBody.origQty) * Number(msg.orderexec.statusBody.price))).toFixed(msg.bot.settings.digitprice);\n\nnode.status({fill: \"green\", shape: \"ring\", text: currentfloor[0]});\n\n\nlet data = \"Выставлен ордер - \"+currentfloor[8];\nconst tilog = global.get('tilog')(msg.bot.settings.botname,data);\ntilog;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 1820,
        "y": 1780,
        "wires": [
            [
                "fdd4ddb.bd8c92"
            ]
        ]
    },
    {
        "id": "fdd4ddb.bd8c92",
        "type": "function",
        "z": "5df15275.2888ec",
        "name": "update bot floors, finance",
        "func": "\nlet volname = msg.bot.settings.userid+\"-bots:\"+msg.bot.settings.botname+\":data\";\nlet botdata = {\n    \"finance\":JSON.stringify(msg.bot.finance),\n    \"floors\":JSON.stringify(msg.bot.floors),\n    \"sales\":JSON.stringify(msg.bot.sales)\n    \n};\n\nconst upd = global.get('setbot_data')(volname, botdata);\n\nupd.then(upd => {\n    \n   // msg.payload = upd;\n    \n\n    node.status({fill: \"green\", shape: \"ring\"});\n    \n    node.send(msg);\n\n}).catch(error => {\n    \n\n    node.status({fill: \"red\", shape: \"ring\", text: \"error\"});\n    node.error(error);\n});",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 2070,
        "y": 1780,
        "wires": [
            [
                "1d3d001f.71ad58"
            ]
        ],
        "icon": "font-awesome/fa-bolt"
    },
    {
        "id": "a49d131f.5a52d",
        "type": "debug",
        "z": "5df15275.2888ec",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1830,
        "y": 1720,
        "wires": []
    },
    {
        "id": "4f1b0c4c.215de4",
        "type": "function",
        "z": "5df15275.2888ec",
        "name": "",
        "func": "\n//function register_sdelka($buyprice, $sellprice, $quantity, $p, $c, $net){\n//\n//    global $zh;\n//    global $botsales;\n//\n  //  record_to_log($zh , \"$ \".$net.\" (buyprice \".$buyprice.\", sellprice \".$sellprice.\", quantity \".$quantity.\", profit \".$p.\", commision \".$c.\")\");\n//\n //   $arr = [$buyprice, $sellprice, $quantity, $p, $c, $net];\n  //  array_push($botsales[\"today\"], $arr);\n//    array_push($botsales[\"all\"], $arr);\n //   //push($botsales);\n  //  return true;\n//    \n//}\n\n\n\n//$quantity = $ordersellstatus[\"origQty\"]; \n //               $sellprice = $ordersellstatus[\"price\"];\n  //              $buyprice = $botfloors[$floor][10];\n  //              \n    //            $botfloors[$floor][13] = $sellprice;\n//\n  //              $p = $quantity*($sellprice - $buyprice);\n    //            $c = $quantity*($sellprice + $buyprice)/100*$commision;\n      //          $net = $p - $c;\n        //        $floorname = $floor + 1;\n          //      record_to_log($zh , \"Продали на этаже $floorname id $ordersellid -  $quantity по цене $sellprice\");\n            //    //record_to_log($zhtrade , \"sell;$sellprice;$quantity\");\n              //  register_sdelka($buyprice, $sellprice, $quantity, $p, $c, $net);\n                \n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 3110,
        "y": 4440,
        "wires": [
            []
        ]
    },
    {
        "id": "5ca0f6b4.508f98",
        "type": "inject",
        "z": "5df15275.2888ec",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 2880,
        "y": 1820,
        "wires": [
            []
        ]
    },
    {
        "id": "c369c728.090d38",
        "type": "function",
        "z": "5df15275.2888ec",
        "name": "",
        "func": "\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 3270,
        "y": 1860,
        "wires": [
            []
        ]
    },
    {
        "id": "130f3240.00961e",
        "type": "function",
        "z": "5f98db3a.7ab21c",
        "g": "8ff1d3c1.b9bf5",
        "name": "get_order_status()",
        "func": "",
        "outputs": 1,
        "noerr": 0,
        "initialize": "\n\n\nlet get_order_status = function (moneta = msg.moneta, orderid = msg.orderid) {\n    \n    let promise = new Promise((resolve, reject) => {\n        msg.resolve = resolve;\n        msg.reject = reject;\n    });\n    \n\n    msg.moneta = moneta;\n    msg.orderid = orderid;\n    \n    node.send(Object.assign({}, msg));\n    \n    return promise;\n};\n\nglobal.set('get_order_status', get_order_status);",
        "finalize": "",
        "x": 130,
        "y": 1320,
        "wires": [
            [
                "607a1476.9d2f3c"
            ]
        ]
    },
    {
        "id": "f4452587.561d48",
        "type": "inject",
        "z": "5f98db3a.7ab21c",
        "g": "8ff1d3c1.b9bf5",
        "name": "moneta,orderid",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "x": 140,
        "y": 1240,
        "wires": [
            [
                "130f3240.00961e"
            ]
        ]
    },
    {
        "id": "6b7c6b19.00a204",
        "type": "function",
        "z": "5f98db3a.7ab21c",
        "g": "8ff1d3c1.b9bf5",
        "name": "resolve",
        "func": "msg.resolve(msg.payload);\n// reject\n// setTimeout(function () {\n//     msg.reject({message: 'Could not request joke'});\n// }, 2000);",
        "outputs": "0",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 700,
        "y": 1240,
        "wires": []
    },
    {
        "id": "b1193833.175118",
        "type": "switch",
        "z": "5f98db3a.7ab21c",
        "g": "8ff1d3c1.b9bf5",
        "name": "work mode",
        "property": "workmode",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "binance",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "binance_backtest",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 310,
        "y": 1520,
        "wires": [
            [
                "b5f725fd.240e98",
                "13c65b3e.750f95"
            ],
            [
                "d73dab1c.a64828"
            ]
        ]
    },
    {
        "id": "efe6ca9d.d20898",
        "type": "comment",
        "z": "5f98db3a.7ab21c",
        "g": "8ff1d3c1.b9bf5",
        "name": "binance",
        "info": "",
        "x": 350,
        "y": 1460,
        "wires": []
    },
    {
        "id": "2ccabce5.3df754",
        "type": "comment",
        "z": "5f98db3a.7ab21c",
        "g": "8ff1d3c1.b9bf5",
        "name": "binance_backtest",
        "info": "",
        "x": 320,
        "y": 1580,
        "wires": []
    },
    {
        "id": "307f6fe7.76709",
        "type": "function",
        "z": "5f98db3a.7ab21c",
        "g": "8ff1d3c1.b9bf5",
        "name": "get workmode",
        "func": "let workmode = global.get('workmode');\nmsg.workmode = workmode;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 120,
        "y": 1520,
        "wires": [
            [
                "b1193833.175118"
            ]
        ]
    },
    {
        "id": "f83aa4a.5b36658",
        "type": "link in",
        "z": "5f98db3a.7ab21c",
        "g": "8ff1d3c1.b9bf5",
        "name": "",
        "links": [
            "840a8727.00fd28",
            "9fcdc428.e98b78",
            "6126ca08.741e74",
            "5419e44a.d5383c",
            "f6fb5868.e9bd18",
            "301639c.27435c6",
            "d73dab1c.a64828",
            "bf190e9d.225ad"
        ],
        "x": 575,
        "y": 1240,
        "wires": [
            [
                "6b7c6b19.00a204"
            ]
        ]
    },
    {
        "id": "cbab6ba1.0c9f68",
        "type": "function",
        "z": "5f98db3a.7ab21c",
        "name": "tilog",
        "func": "//запись в журнал\nlet botname = msg.bot.settings.botname;\nlet data = \"Ошибка при выставлении ордера на бирже - \"+msg.err.body;\n\nconst tilog = global.get('tilog')(botname,data);\n\ntilog;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 1410,
        "y": 1740,
        "wires": [
            []
        ]
    },
    {
        "id": "48d517fa.523898",
        "type": "function",
        "z": "5f98db3a.7ab21c",
        "name": "get orderstatus on binance",
        "func": "\nfunction parseApiError(error) {\n  if (error.body) {\n    try {\n      var resp = JSON.parse(error.body);\n      return resp.msg;\n    } catch (error) {/* pass thru */}\n  }\n  return \"Unknown error. Status code: \"+error.statsCode;\n}\n\nlet LBinance = global.get('gBinance');\n//node.warn(LBinance);\nlet key = global.get('key');\nlet secret = global.get('secret');\n\n\nlet binance = new LBinance().options({\n\tAPIKEY: key,\n\tAPISECRET: secret,\n\tuseServerTime: true,\n\tadjustForTimeDifference: true \n});\n\n\n\n\nlet moneta = msg.moneta;\nlet orderid = Number(msg.orderid);\n\nbinance.useServerTime(function() {\n    binance.orderStatus(moneta, orderid, (err, resp) => {\n // console.info(\"Limit Buy response\", response);\n // console.info(\"order id: \" + response.orderId);\n    if (err) {\n        var errorMsg = parseApiError(err) + \", moneta:\" + moneta;\n        node.error(errorMsg, msg);\n\n        msg.err = err;\n        node.status({fill: \"red\", shape: \"ring\", text: errorMsg});\n        \n        node.send(msg);\n        //return [msg, null];\n    \n    }\n    if (resp) {\n        msg.orderid = resp.orderId;\n        msg.resp = resp;\n        node.status({fill: \"green\", shape: \"ring\", text: resp.orderId});\n        \n        node.send(msg);\n       // return [null,msg];\n                \n    }\n    //node.status({}); //clear status message\n});\n\t\n});",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 1820,
        "y": 1140,
        "wires": [
            [
                "1ca2cc64.32af24"
            ]
        ]
    },
    {
        "id": "e9037d29.5aae6",
        "type": "inject",
        "z": "5f98db3a.7ab21c",
        "name": "",
        "props": [
            {
                "p": "orderid",
                "v": "222365055",
                "vt": "num"
            },
            {
                "p": "moneta",
                "v": "LINKDOWNUSDT",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 1610,
        "y": 1140,
        "wires": [
            [
                "48d517fa.523898"
            ]
        ]
    },
    {
        "id": "1ca2cc64.32af24",
        "type": "debug",
        "z": "5f98db3a.7ab21c",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 2030,
        "y": 1140,
        "wires": []
    },
    {
        "id": "b5f725fd.240e98",
        "type": "function",
        "z": "5f98db3a.7ab21c",
        "g": "8ff1d3c1.b9bf5",
        "name": "get orderstatus on binance",
        "func": "\nfunction parseApiError(error) {\n  if (error.body) {\n    try {\n      var resp = JSON.parse(error.body);\n      return resp.msg;\n    } catch (error) {/* pass thru */}\n  }\n  return \"Unknown error. Status code: \"+error.statsCode;\n}\n\nlet LBinance = global.get('gBinance');\n//node.warn(LBinance);\nlet key = global.get('key');\nlet secret = global.get('secret');\n\n\nlet binance = new LBinance().options({\n\tAPIKEY: key,\n\tAPISECRET: secret,\n\tuseServerTime: true,\n\tadjustForTimeDifference: true \n});\n\n\n\n\nlet moneta = msg.moneta;\nlet orderid = Number(msg.orderid);\n\nbinance.useServerTime(function() {\n    binance.orderStatus(moneta, orderid, (err, resp) => {\n // console.info(\"Limit Buy response\", response);\n // console.info(\"order id: \" + response.orderId);\n    if (err) {\n        var errorMsg = parseApiError(err) + \", moneta:\" + moneta;\n        node.error(errorMsg, msg);\n\n        msg.err = err;\n        node.status({fill: \"red\", shape: \"ring\", text: errorMsg});\n        \n        node.send(msg);\n        //return [msg, null];\n    \n    }\n    if (resp) {\n        msg.order_status = resp.status;\n        msg.resp = resp;\n        node.status({fill: \"green\", shape: \"ring\", text: resp.orderId});\n        \n        node.send(msg);\n       // return [null,msg];\n                \n    }\n    //node.status({}); //clear status message\n});\n\t\n});",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 540,
        "y": 1500,
        "wires": [
            [
                "ec0d7b62.22bf98"
            ]
        ]
    },
    {
        "id": "f6fb5868.e9bd18",
        "type": "link out",
        "z": "5f98db3a.7ab21c",
        "g": "8ff1d3c1.b9bf5",
        "name": "",
        "links": [
            "f83aa4a.5b36658"
        ],
        "x": 955,
        "y": 1520,
        "wires": []
    },
    {
        "id": "11ffcd5b.a4ed63",
        "type": "function",
        "z": "5f98db3a.7ab21c",
        "name": "get_order_status",
        "func": "let moneta = msg.moneta;\nlet orderid = Number(msg.orderid);\n\nconst get_order_status = global.get('get_order_status')(moneta, orderid);\n\nget_order_status.then(result => {\n    \n    msg.payload = result;\n  \n    node.status({fill:\"green\",shape:\"dot\"});\n    node.send(msg);\n\n}).catch(error => {\n    \n   \n    node.status({fill:\"red\",shape:\"dot\"});\n    node.error(error);\n});",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 670,
        "y": 1720,
        "wires": [
            [
                "53a1991e.1dabe8",
                "90050a7c.fc4408"
            ]
        ]
    },
    {
        "id": "5172c9e0.c487a8",
        "type": "debug",
        "z": "5f98db3a.7ab21c",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1090,
        "y": 1820,
        "wires": []
    },
    {
        "id": "e17eb612.d5dc78",
        "type": "function",
        "z": "5f98db3a.7ab21c",
        "name": "",
        "func": "\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 770,
        "y": 1920,
        "wires": [
            []
        ]
    },
    {
        "id": "b39241b2.2b1a6",
        "type": "inject",
        "z": "5f98db3a.7ab21c",
        "name": "",
        "props": [
            {
                "p": "orderid",
                "v": "221641058",
                "vt": "num"
            },
            {
                "p": "moneta",
                "v": "LINKDOWNUSDT",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 490,
        "y": 1720,
        "wires": [
            [
                "11ffcd5b.a4ed63"
            ]
        ]
    },
    {
        "id": "f5733ede.e177b",
        "type": "debug",
        "z": "5f98db3a.7ab21c",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1090,
        "y": 1680,
        "wires": []
    },
    {
        "id": "aa5ba0ae.49408",
        "type": "function",
        "z": "5f98db3a.7ab21c",
        "name": "get orderstatus on binance",
        "func": "\nfunction parseApiError(error) {\n  if (error.body) {\n    try {\n      var resp = JSON.parse(error.body);\n      return resp.msg;\n    } catch (error) {/* pass thru */}\n  }\n  return \"Unknown error. Status code: \"+error.statsCode;\n}\n\nlet LBinance = global.get('gBinance');\n//node.warn(LBinance);\nlet key = global.get('key');\nlet secret = global.get('secret');\n\n\nlet binance = new LBinance().options({\n\tAPIKEY: key,\n\tAPISECRET: secret,\n\tuseServerTime: true,\n\tadjustForTimeDifference: true \n});\n\n\n\n\nlet moneta = msg.moneta;\nlet orderid = Number(msg.orderid);\n\nbinance.useServerTime(function() {\n    binance.orderStatus(moneta, orderid, (err, resp) => {\n // console.info(\"Limit Buy response\", response);\n // console.info(\"order id: \" + response.orderId);\n    if (err) {\n        var errorMsg = parseApiError(err) + \", moneta:\" + moneta;\n        node.error(errorMsg, msg);\n\n        msg.err = err;\n        node.status({fill: \"red\", shape: \"ring\", text: errorMsg});\n        \n        node.send(msg);\n        //return [msg, null];\n    \n    }\n    if (resp) {\n        msg.orderid = resp.orderId;\n        msg.resp = resp;\n        node.status({fill: \"green\", shape: \"ring\", text: resp.orderId});\n        \n        node.send(msg);\n       // return [null,msg];\n                \n    }\n    //node.status({}); //clear status message\n});\n\t\n});",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 700,
        "y": 1980,
        "wires": [
            []
        ]
    },
    {
        "id": "ec0d7b62.22bf98",
        "type": "function",
        "z": "5f98db3a.7ab21c",
        "g": "8ff1d3c1.b9bf5",
        "name": "обработчик ошибок",
        "func": "if (msg.err) {\n    msg.statusCode = \"not ok\";\n    msg.statusBody = msg.err.body;\n    //node.warn(msg.err.statusCode)\n    \n\n    \n    \n    return [null,msg];\n} else {\n    msg.statusCode = \"ok\";\n    msg.statusBody = msg.resp;\n    return [msg,null];\n}\n\n\n\n",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 800,
        "y": 1500,
        "wires": [
            [
                "9a627e02.c4ed6"
            ],
            [
                "f6fb5868.e9bd18"
            ]
        ]
    },
    {
        "id": "53a1991e.1dabe8",
        "type": "switch",
        "z": "5f98db3a.7ab21c",
        "name": "statusCode",
        "property": "statusCode",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "ok",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "not ok",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 870,
        "y": 1720,
        "wires": [
            [
                "f5733ede.e177b"
            ],
            [
                "5172c9e0.c487a8"
            ]
        ]
    },
    {
        "id": "d90ca225.abdc7",
        "type": "function",
        "z": "5f98db3a.7ab21c",
        "name": "prepare get order status",
        "func": "\nlet guid = global.get('guid');\nlet moneta = msg.moneta;\nlet orderid = msg.orderid;\n\nmsg.payload = [];\nmsg.topic = \"orders-status-\" + guid + \":\" + moneta + \":\" + orderid;\n\nnode.status({fill: \"green\", shape: \"ring\", text: orderid});\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 610,
        "y": 2120,
        "wires": [
            [
                "1e8328c2.f08fc7"
            ]
        ],
        "inputLabels": [
            "orderid"
        ],
        "outputLabels": [
            "status"
        ],
        "icon": "node-red-contrib-binance/binance.png"
    },
    {
        "id": "1e8328c2.f08fc7",
        "type": "redis-command",
        "z": "5f98db3a.7ab21c",
        "server": "f120eab2.0a60a8",
        "command": "GET",
        "name": "get order status",
        "topic": "msg.payload",
        "params": "[]",
        "paramsType": "json",
        "payloadType": "json",
        "block": false,
        "x": 840,
        "y": 2120,
        "wires": [
            [
                "5f313dbb.efc5d4",
                "653d2cac.7bc3f4"
            ]
        ]
    },
    {
        "id": "d890b83e.661178",
        "type": "inject",
        "z": "5f98db3a.7ab21c",
        "name": "",
        "props": [
            {
                "p": "orderid",
                "v": "2216410581",
                "vt": "num"
            },
            {
                "p": "moneta",
                "v": "LINKDOWNUSDT",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 410,
        "y": 2120,
        "wires": [
            [
                "d90ca225.abdc7"
            ]
        ]
    },
    {
        "id": "653d2cac.7bc3f4",
        "type": "function",
        "z": "5f98db3a.7ab21c",
        "name": "обработчик ошибок",
        "func": "if (!msg.payload) {\n    msg.statusCode = \"not ok\";\n    msg.statusBody = msg.payload;\n    //node.warn(msg.err.statusCode)\n    \n\n    \n    \n    return [null,msg];\n} else {\n    msg.statusCode = \"ok\";\n    msg.statusBody = msg.payload;\n    return [msg,null];\n}\n\n\n\n",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 1060,
        "y": 2120,
        "wires": [
            [
                "727632ac.83dd2c"
            ],
            [
                "3fc152f3.1010be"
            ]
        ]
    },
    {
        "id": "5f313dbb.efc5d4",
        "type": "debug",
        "z": "5f98db3a.7ab21c",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 990,
        "y": 2040,
        "wires": []
    },
    {
        "id": "727632ac.83dd2c",
        "type": "debug",
        "z": "5f98db3a.7ab21c",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1150,
        "y": 2000,
        "wires": []
    },
    {
        "id": "3fc152f3.1010be",
        "type": "debug",
        "z": "5f98db3a.7ab21c",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1150,
        "y": 2180,
        "wires": []
    },
    {
        "id": "607a1476.9d2f3c",
        "type": "function",
        "z": "5f98db3a.7ab21c",
        "g": "8ff1d3c1.b9bf5",
        "name": "prepare get order status",
        "func": "\nlet guid = global.get('guid');\nlet moneta = msg.moneta;\nlet orderid = msg.orderid;\n\nmsg.payload = [];\nmsg.topic = \"orders-status-\" + guid + \":\" + moneta + \":\" + orderid;\n\nnode.status({fill: \"green\", shape: \"ring\", text: orderid});\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 370,
        "y": 1320,
        "wires": [
            [
                "d8222377.a5f0c"
            ]
        ],
        "inputLabels": [
            "orderid"
        ],
        "outputLabels": [
            "status"
        ],
        "icon": "node-red-contrib-binance/binance.png"
    },
    {
        "id": "d8222377.a5f0c",
        "type": "redis-command",
        "z": "5f98db3a.7ab21c",
        "g": "8ff1d3c1.b9bf5",
        "server": "f120eab2.0a60a8",
        "command": "GET",
        "name": "get order status",
        "topic": "msg.payload",
        "params": "[]",
        "paramsType": "json",
        "payloadType": "json",
        "block": false,
        "x": 600,
        "y": 1320,
        "wires": [
            [
                "f9b6f483.e38838"
            ]
        ]
    },
    {
        "id": "f9b6f483.e38838",
        "type": "function",
        "z": "5f98db3a.7ab21c",
        "g": "8ff1d3c1.b9bf5",
        "name": "обработчик ошибок",
        "func": "if (!msg.payload) {\n    msg.statusCode = \"not ok\";\n    msg.statusBody = msg.payload;\n    //node.warn(msg.err.statusCode)\n    \n\n    \n    \n    return [null,msg];\n} else {\n    msg.statusCode = \"ok\";\n    msg.statusBody = msg.payload;\n    return [msg,null];\n}\n\n\n\n",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 820,
        "y": 1320,
        "wires": [
            [
                "301639c.27435c6",
                "7c3b4244.df47fc"
            ],
            [
                "307f6fe7.76709"
            ]
        ]
    },
    {
        "id": "301639c.27435c6",
        "type": "link out",
        "z": "5f98db3a.7ab21c",
        "g": "8ff1d3c1.b9bf5",
        "name": "",
        "links": [
            "f83aa4a.5b36658"
        ],
        "x": 995,
        "y": 1300,
        "wires": []
    },
    {
        "id": "7c3b4244.df47fc",
        "type": "debug",
        "z": "5f98db3a.7ab21c",
        "g": "8ff1d3c1.b9bf5",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1070,
        "y": 1300,
        "wires": []
    },
    {
        "id": "d73dab1c.a64828",
        "type": "link out",
        "z": "5f98db3a.7ab21c",
        "g": "8ff1d3c1.b9bf5",
        "name": "",
        "links": [
            "f83aa4a.5b36658"
        ],
        "x": 435,
        "y": 1540,
        "wires": []
    },
    {
        "id": "8c2b136a.c18c",
        "type": "redis-command",
        "z": "5f98db3a.7ab21c",
        "g": "8ff1d3c1.b9bf5",
        "server": "f120eab2.0a60a8",
        "command": "getset",
        "name": "",
        "topic": "",
        "params": "[]",
        "paramsType": "json",
        "payloadType": "json",
        "block": false,
        "x": 1270,
        "y": 1480,
        "wires": [
            [
                "960e13d0.f7b41",
                "bf190e9d.225ad"
            ]
        ]
    },
    {
        "id": "bb1ad3fd.e2d78",
        "type": "comment",
        "z": "5f98db3a.7ab21c",
        "g": "8ff1d3c1.b9bf5",
        "name": "binance error",
        "info": "",
        "x": 1010,
        "y": 1540,
        "wires": []
    },
    {
        "id": "9a627e02.c4ed6",
        "type": "function",
        "z": "5f98db3a.7ab21c",
        "g": "8ff1d3c1.b9bf5",
        "name": "prepare get order status",
        "func": "\nlet guid = global.get('guid');\nlet moneta = msg.moneta;\nlet orderid = msg.orderid;\n\nmsg.payload = msg.order_status;\nmsg.topic = \"orders-status-\" + guid + \":\" + moneta + \":\" + orderid;\n\nnode.status({fill: \"green\", shape: \"ring\", text: orderid});\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 1050,
        "y": 1480,
        "wires": [
            [
                "8c2b136a.c18c"
            ]
        ],
        "inputLabels": [
            "orderid"
        ],
        "outputLabels": [
            "status"
        ],
        "icon": "node-red-contrib-binance/binance.png"
    },
    {
        "id": "960e13d0.f7b41",
        "type": "debug",
        "z": "5f98db3a.7ab21c",
        "g": "8ff1d3c1.b9bf5",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1290,
        "y": 1520,
        "wires": []
    },
    {
        "id": "bf190e9d.225ad",
        "type": "link out",
        "z": "5f98db3a.7ab21c",
        "g": "8ff1d3c1.b9bf5",
        "name": "",
        "links": [
            "f83aa4a.5b36658"
        ],
        "x": 1395,
        "y": 1480,
        "wires": []
    },
    {
        "id": "90050a7c.fc4408",
        "type": "debug",
        "z": "5f98db3a.7ab21c",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 770,
        "y": 1800,
        "wires": []
    },
    {
        "id": "39bc96c2.9bc51a",
        "type": "function",
        "z": "5df15275.2888ec",
        "name": "get_order_status",
        "func": "let moneta = msg.moneta;\nlet orderid = Number(msg.orderid);\n\nconst get_order_status = global.get('get_order_status')(moneta, orderid);\n\nget_order_status.then(result => {\n    \n    msg.payload = result;\n  \n    node.status({fill:\"green\",shape:\"dot\"});\n    node.send(msg);\n\n}).catch(error => {\n    \n   \n    node.status({fill:\"red\",shape:\"dot\"});\n    node.error(error);\n});",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 1750,
        "y": 2300,
        "wires": [
            [
                "ef979c72.74622"
            ]
        ]
    },
    {
        "id": "3ddc1813.cf49b8",
        "type": "function",
        "z": "5df15275.2888ec",
        "name": "get_order_status",
        "func": "let moneta = msg.moneta;\nlet orderid = Number(msg.orderid);\n\nconst get_order_status = global.get('get_order_status')(moneta, orderid);\n\nget_order_status.then(result => {\n    \n    msg.payload = result;\n  \n    node.status({fill:\"green\",shape:\"dot\"});\n    node.send(msg);\n\n}).catch(error => {\n    \n   \n    node.status({fill:\"red\",shape:\"dot\"});\n    node.error(error);\n});",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 1770,
        "y": 2040,
        "wires": [
            [
                "865095a3.2a59f8"
            ]
        ]
    },
    {
        "id": "283c3766.823b68",
        "type": "function",
        "z": "5df15275.2888ec",
        "name": "floors",
        "func": "let reversefloors = msg.bot.floors.reverse();\nmsg.payload = reversefloors.filter(function(floor) {\n    return (floor[7]!= 0);\n});\nreturn msg;\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 2790,
        "y": 1100,
        "wires": [
            [
                "e8fc4296.04f04",
                "ab58eb0c.082c28"
            ]
        ]
    },
    {
        "id": "e8fc4296.04f04",
        "type": "ui_table",
        "z": "5df15275.2888ec",
        "group": "a328c3be.7f91c8",
        "name": "",
        "order": 1,
        "width": "0",
        "height": "0",
        "columns": [
            {
                "field": "0",
                "title": "num",
                "width": "",
                "align": "left",
                "formatter": "plaintext",
                "formatterParams": {
                    "target": "_blank"
                }
            },
            {
                "field": "7",
                "title": "status",
                "width": "",
                "align": "left",
                "formatter": "plaintext",
                "formatterParams": {
                    "target": "_blank"
                }
            },
            {
                "field": "8",
                "title": "buy id",
                "width": "",
                "align": "left",
                "formatter": "plaintext",
                "formatterParams": {
                    "target": "_blank"
                }
            },
            {
                "field": "14",
                "title": "quantity",
                "width": "",
                "align": "left",
                "formatter": "plaintext",
                "formatterParams": {
                    "target": "_blank"
                }
            }
        ],
        "outputs": 0,
        "cts": false,
        "x": 2950,
        "y": 1080,
        "wires": []
    },
    {
        "id": "ab58eb0c.082c28",
        "type": "filter",
        "z": "5df15275.2888ec",
        "name": "filter off",
        "property": "payload[7]",
        "propertyType": "msg",
        "asArray": false,
        "itemProperty": "",
        "itemPropertyType": "item",
        "rules": [
            {
                "t": "neq",
                "v": "0",
                "vt": "num",
                "output": 1
            }
        ],
        "checkall": "true",
        "outputs": 1,
        "x": 2920,
        "y": 1120,
        "wires": [
            [
                "1dda6867.b90808"
            ]
        ]
    },
    {
        "id": "1dda6867.b90808",
        "type": "debug",
        "z": "5df15275.2888ec",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 3120,
        "y": 1080,
        "wires": []
    },
    {
        "id": "6a429b44.9d8c54",
        "type": "debug",
        "z": "5df15275.2888ec",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 2511,
        "y": 2239,
        "wires": []
    },
    {
        "id": "7f01fc9d.9aefb4",
        "type": "comment",
        "z": "5f98db3a.7ab21c",
        "name": "ситуация \\n робот думает, что статус new и шлет на биржу команду кансел, а кансел уже состоялся \\n (а робот про это не узнал) ",
        "info": "",
        "x": 2400,
        "y": 520,
        "wires": []
    },
    {
        "id": "438a4ff8.3b594",
        "type": "switch",
        "z": "5df15275.2888ec",
        "name": "service tick",
        "property": "service",
        "propertyType": "msg",
        "rules": [
            {
                "t": "false"
            },
            {
                "t": "true"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 1650,
        "y": 1440,
        "wires": [
            [
                "14ffa955.ed6edf"
            ],
            [
                "32f9e55c.c15c4a",
                "c687d087.0896d"
            ]
        ]
    },
    {
        "id": "32f9e55c.c15c4a",
        "type": "debug",
        "z": "5df15275.2888ec",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1690,
        "y": 1480,
        "wires": []
    },
    {
        "id": "5b97c329.3ad26c",
        "type": "comment",
        "z": "5df15275.2888ec",
        "name": "null",
        "info": "",
        "x": 2230,
        "y": 2700,
        "wires": []
    },
    {
        "id": "13b881dc.5f7fae",
        "type": "switch",
        "z": "5df15275.2888ec",
        "name": "bot.downfloor[7] = 1 ?",
        "property": "bot.downfloor[7]",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "1",
                "vt": "num"
            },
            {
                "t": "eq",
                "v": "0",
                "vt": "num"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 2340,
        "y": 2420,
        "wires": [
            [
                "b63c2dff.646ca",
                "d2df49d3.47eee8"
            ],
            [
                "f7b1bee6.22d7c"
            ]
        ]
    },
    {
        "id": "b63c2dff.646ca",
        "type": "debug",
        "z": "5df15275.2888ec",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 2290,
        "y": 2460,
        "wires": []
    },
    {
        "id": "1aec5f66.3b9261",
        "type": "function",
        "z": "5df15275.2888ec",
        "name": "change floors, finance ",
        "func": "//<трекер<\n    let track = flow.get(\"track\");\n    let start_node_time = new Date().getTime();\n    let steptitle = node.name;\n\n    let laststep = track[track.length-1];\n    let last_node_end_time = laststep.end_node_time;\n//>трекер>\n node.warn(\"cancel order \"+msg.bot.downfloor[14]);     \nlet tempfin = Number(Number(msg.bot.finance.baseinorders) - Number(msg.bot.downfloor[14])*Number(msg.bot.downfloor[3]));\nlet tempfin2 = Number(Number(msg.bot.finance.basenal) + Number(msg.bot.downfloor[14])*Number(msg.bot.downfloor[3]));\n\nmsg.bot.finance.baseinorders = tempfin.toFixed(msg.bot.settings.digitprice);\nmsg.bot.finance.basenal = tempfin2.toFixed(msg.bot.settings.digitprice);\n\nif (msg.bot.finance.baseinorders == -0) {msg.bot.finance.baseinorders = 0;}\nif (msg.bot.finance.basenal == -0) {msg.bot.finance.basenal = 0;}\n\nlet downfloor = msg.bot.downfloor;\n\n\n\nlet data = \"Ордер на покупку отменен, ID - \"+msg.bot.downfloor[8];\nconst tilog = global.get('tilog')(msg.bot.settings.botname,data);\ntilog;\n\n\n\n\ndownfloor[7] = 0;\ndownfloor[8] = 0;\ndownfloor[14] = 0;\n\nmsg.bot.floors[downfloor[0]-1] = downfloor;\n\n//>трекер>\n    let end_node_time = new Date().getTime();\n    let duration = end_node_time - start_node_time;\n    let duration_step = end_node_time - last_node_end_time;\n    track.push({\n        \"steptitle\": steptitle,\n        \"start_node_time\": start_node_time,\n        \"end_node_time\": end_node_time,\n        \"duration_node\": duration,\n        \"duration_step\": duration_step\n    });\n    flow.set(\"track\", track);\n//>трекер>\nnode.status({fill: \"green\", shape: \"ring\", text: start_node_time});\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 3040,
        "y": 2480,
        "wires": [
            [
                "21be6c0d.b69114"
            ]
        ]
    },
    {
        "id": "21be6c0d.b69114",
        "type": "function",
        "z": "5df15275.2888ec",
        "name": "update bot floors, finance",
        "func": "//<трекер<\n    let track = flow.get(\"track\");\n    let start_node_time = new Date().getTime();\n    let steptitle = node.name;\n\n    let laststep = track[track.length-1];\n    let last_node_end_time = laststep.end_node_time;\n//>трекер>\nlet volname = msg.bot.settings.userid+\"-bots:\"+msg.botname+\":data\";\nlet botdata = {\n    \"finance\":JSON.stringify(msg.bot.finance),\n    \"floors\":JSON.stringify(msg.bot.floors),\n    \"sales\":JSON.stringify(msg.bot.sales)\n    \n};\n\nconst upd = global.get('setbot_data')(volname, botdata);\n\nupd.then(upd => {\n    \n    msg.payload = upd;\n    \n    //>трекер>\n        let end_node_time = new Date().getTime();\n        let duration = end_node_time - start_node_time;\n        let duration_step = end_node_time - last_node_end_time;\n        track.push({\n            \"steptitle\": steptitle,\n            \"start_node_time\": start_node_time,\n            \"end_node_time\": end_node_time,\n            \"duration_node\": duration,\n            \"duration_step\": duration_step\n        });\n        flow.set(\"track\", track);\n    //>трекер>\nnode.status({fill: \"green\", shape: \"ring\", text: start_node_time});\n    \n    node.send(msg);\n\n}).catch(error => {\n    \n    //>трекер>\n        let end_node_time = new Date().getTime();\n        let duration = end_node_time - start_node_time;\n        let duration_step = end_node_time - last_node_end_time;\n        track.push({\n            \"steptitle\": steptitle+\"-faile\",\n            \"start_node_time\": start_node_time,\n            \"end_node_time\": end_node_time,\n            \"duration\": duration,\n            \"duration_step\": duration_step,\n            \"error\": error\n        });\n        flow.set(\"track\", track);\n    //>трекер>\n    node.status({fill: \"red\", shape: \"ring\", text: error});\n    node.error(error);\n});",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 3290,
        "y": 2480,
        "wires": [
            [
                "c793de15.5a226",
                "e7a3546e.921a88"
            ]
        ],
        "icon": "font-awesome/fa-bolt"
    },
    {
        "id": "d2df49d3.47eee8",
        "type": "function",
        "z": "5df15275.2888ec",
        "name": "orderexec cansel",
        "func": "//<трекер<\n    let track = flow.get(\"track\");\n    let start_node_time = new Date().getTime();\n    let steptitle = node.name;\n\n    let laststep = track[track.length-1];\n    let last_node_end_time = laststep.end_node_time;\n//>трекер>\n\nlet cmd = \"cansel\";\nlet quantity = Number((Number(msg.bot.finance.depo)*Number(msg.bot.settings.ordersize)/100/msg.bot.status.currentprice).toFixed(msg.bot.settings.digitq));\nlet price = Number((msg.bot.downfloor[3]).toFixed(msg.bot.settings.digitprice));\n\nlet orderid = msg.bot.downfloor[8];\n\nlet data = {moneta:msg.bot.settings.moneta, orderid: orderid, bot: msg.bot};\nconst orderexec = global.get('order_exec')(cmd,data);\n\nlet botname = msg.bot.settings.botname;\n\nlet data2 = botname+\":\"+cmd+\": orderid:\"+orderid;\nconst tilog = global.get('tilog')(botname,data2);\ntilog;\n\norderexec.then(orderexec => {\n    msg.orderexec = orderexec;\n    if (orderexec.statusCode === \"ok\"){\n        node.status({fill:\"green\",shape:\"dot\", text: orderexec.statusBody.orderId});\n        msg.bot = msg.orderexec.bot;\n        \n    //>трекер>\n        let end_node_time = new Date().getTime();\n        let duration = end_node_time - start_node_time;\n        let duration_step = end_node_time - last_node_end_time;\n        track.push({\n            \"steptitle\": steptitle,\n            \"start_node_time\": start_node_time,\n            \"end_node_time\": end_node_time,\n            \"duration_node\": duration,\n            \"duration_step\": duration_step\n        });\n        flow.set(\"track\", track);\n    //>трекер>\n        \n        node.send(msg);\n        \n    } else {\n        node.status({fill:\"red\",shape:\"dot\"});\n        \n    //>трекер>\n        let end_node_time = new Date().getTime();\n        let duration = end_node_time - start_node_time;\n        let duration_step = end_node_time - last_node_end_time;\n        track.push({\n            \"steptitle\": steptitle+\"-faile\",\n            \"start_node_time\": start_node_time,\n            \"end_node_time\": end_node_time,\n            \"duration\": duration,\n            \"duration_step\": duration_step,\n            \"error\": orderexec.statusBody\n        });\n        flow.set(\"track\", track);\n    //>трекер>\n        \n        node.send(msg);\n    }\n    \n\n}).catch(error => {\n    \n    msg.error = error;\n    node.status({fill:\"red\",shape: \"ring\"});\n    \n    node.error(error);\n});\n\n\n\n\n\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 2570,
        "y": 2420,
        "wires": [
            [
                "56d7e34c.16a63c",
                "b821aaeb.b99cb8"
            ]
        ]
    },
    {
        "id": "56d7e34c.16a63c",
        "type": "switch",
        "z": "5df15275.2888ec",
        "name": "statusCode",
        "property": "orderexec.statusCode",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "ok",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "not ok",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 2770,
        "y": 2420,
        "wires": [
            [
                "1aec5f66.3b9261"
            ],
            [
                "c709ae86.3b826"
            ]
        ]
    },
    {
        "id": "c709ae86.3b826",
        "type": "function",
        "z": "5df15275.2888ec",
        "name": "tilog",
        "func": "let botname = msg.bot.settings.botname;\nlet data = \"Ошибка при снятии ордера - \"+msg.orderexec.statusBody;\nconst tilog = global.get('tilog')(botname,data);\n\ntilog.then(tilog => {\n\n\n        node.status({fill:\"green\",shape:\"dot\"});\n    node.send(msg);\n     \n    \n\n}).catch(error => {\n    \n    msg.error = error;\n    node.status({fill:\"red\",shape: \"ring\"});\n    \n    node.error(error);\n});",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 2750,
        "y": 2460,
        "wires": [
            [
                "a0acd38.9f8573"
            ]
        ]
    },
    {
        "id": "a0acd38.9f8573",
        "type": "link out",
        "z": "5df15275.2888ec",
        "name": "",
        "links": [
            "e34a5b68.726ec8",
            "e3e1e22a.f958b"
        ],
        "x": 2835,
        "y": 2460,
        "wires": []
    },
    {
        "id": "c793de15.5a226",
        "type": "debug",
        "z": "5df15275.2888ec",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 3330,
        "y": 2440,
        "wires": []
    },
    {
        "id": "b821aaeb.b99cb8",
        "type": "debug",
        "z": "5df15275.2888ec",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 2590,
        "y": 2460,
        "wires": []
    },
    {
        "id": "f7b1bee6.22d7c",
        "type": "link out",
        "z": "5df15275.2888ec",
        "name": "",
        "links": [
            "e34a5b68.726ec8",
            "e3e1e22a.f958b"
        ],
        "x": 2475,
        "y": 2460,
        "wires": []
    },
    {
        "id": "c687d087.0896d",
        "type": "link out",
        "z": "5df15275.2888ec",
        "name": "",
        "links": [
            "e34a5b68.726ec8",
            "e3e1e22a.f958b"
        ],
        "x": 1795,
        "y": 1460,
        "wires": []
    },
    {
        "id": "d65fadb6.35c73",
        "type": "function",
        "z": "2a761808.610238",
        "name": "get_order_status",
        "func": "let moneta = msg.moneta;\nlet orderid = Number(msg.orderid);\n\nconst get_order_status = global.get('get_order_status')(moneta, orderid);\n\nget_order_status.then(result => {\n    \n    msg.payload = result;\n  \n    node.status({fill:\"green\",shape:\"dot\"});\n    node.send(msg);\n\n}).catch(error => {\n    \n   \n    node.status({fill:\"red\",shape:\"dot\"});\n    node.error(error);\n});",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 2190,
        "y": 1520,
        "wires": [
            [
                "d1ff77a2.4fa0d8",
                "dd2eff30.71a16"
            ]
        ]
    },
    {
        "id": "8512490.cbc97b8",
        "type": "function",
        "z": "2a761808.610238",
        "name": "prepare get ttp order status",
        "func": "//<трекер<\n    let trackname = \"ttp-track-\"+msg.botname;\n    let track = flow.get(trackname);\n    let start_node_time = new Date().getTime();\n    let steptitle = node.name;\n\n    let laststep = track[track.length-1];\n    let last_node_end_time = laststep.end_node_time;\n//>трекер>\nlet moneta = msg.bot.settings.moneta;\nmsg.moneta = moneta;\nlet orderid = msg.bot.ttp.curorderid\nmsg.orderid = orderid;\n\n \nmsg.topic = \"orders-status-\" + msg.bot.settings.userid + \":\" + moneta + \":\" + orderid;\n\n\n\n    //>трекер>\n        let end_node_time = new Date().getTime();\n        let duration = end_node_time - start_node_time;\n        let duration_step = end_node_time - last_node_end_time;\n        track.push({\n            \"steptitle\": steptitle,\n            \"start_node_time\": start_node_time,\n            \"end_node_time\": end_node_time,\n            \"duration_node\": duration,\n            \"duration_step\": duration_step\n        });\n        flow.set(trackname, track);\n    //>трекер>\nnode.status({fill: \"green\", shape: \"ring\", text: orderid});\nreturn msg;\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 2180,
        "y": 840,
        "wires": [
            [
                "515429a6.bb3a88"
            ]
        ],
        "inputLabels": [
            "orderid"
        ],
        "outputLabels": [
            "status"
        ],
        "icon": "node-red-contrib-binance/binance.png"
    },
    {
        "id": "515429a6.bb3a88",
        "type": "function",
        "z": "2a761808.610238",
        "name": "get_order_status",
        "func": "let moneta = msg.moneta;\nlet orderid = Number(msg.orderid);\n\nconst get_order_status = global.get('get_order_status')(moneta, orderid);\n\nget_order_status.then(result => {\n    \n    msg.payload = result;\n  \n    node.status({fill:\"green\",shape:\"dot\"});\n    node.send(msg);\n\n}).catch(error => {\n    \n   \n    node.status({fill:\"red\",shape:\"dot\"});\n    node.error(error);\n});",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 2430,
        "y": 840,
        "wires": [
            [
                "e21a46d3.0d0cd8"
            ]
        ]
    },
    {
        "id": "13c65b3e.750f95",
        "type": "debug",
        "z": "5f98db3a.7ab21c",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 690,
        "y": 1440,
        "wires": []
    },
    {
        "id": "85951e38.64d9f",
        "type": "debug",
        "z": "5df15275.2888ec",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1430,
        "y": 2560,
        "wires": []
    },
    {
        "id": "ef282a23.e47f38",
        "type": "inject",
        "z": "2a761808.610238",
        "g": "8e45b793.1a6e28",
        "name": " stop",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "reset",
                "v": "true",
                "vt": "bool"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 2450,
        "y": 1140,
        "wires": [
            [
                "f229ed26.96564"
            ]
        ]
    },
    {
        "id": "f229ed26.96564",
        "type": "redis-out",
        "z": "2a761808.610238",
        "g": "8e45b793.1a6e28",
        "server": "f120eab2.0a60a8",
        "command": "publish",
        "name": "",
        "topic": "stop",
        "obj": false,
        "x": 2450,
        "y": 1180,
        "wires": []
    },
    {
        "id": "e29a09ff.54e678",
        "type": "inject",
        "z": "2a761808.610238",
        "g": "8e45b793.1a6e28",
        "name": "start",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 2030,
        "y": 1140,
        "wires": [
            [
                "e0ba03e0.3324b"
            ]
        ]
    },
    {
        "id": "e0ba03e0.3324b",
        "type": "redis-out",
        "z": "2a761808.610238",
        "g": "8e45b793.1a6e28",
        "server": "f120eab2.0a60a8",
        "command": "publish",
        "name": "",
        "topic": "start",
        "obj": false,
        "x": 2030,
        "y": 1180,
        "wires": []
    },
    {
        "id": "c9312996.591418",
        "type": "inject",
        "z": "2a761808.610238",
        "g": "8e45b793.1a6e28",
        "name": "start1",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 2210,
        "y": 1140,
        "wires": [
            [
                "30a2f633.22ee6a"
            ]
        ]
    },
    {
        "id": "30a2f633.22ee6a",
        "type": "redis-out",
        "z": "2a761808.610238",
        "g": "8e45b793.1a6e28",
        "server": "f120eab2.0a60a8",
        "command": "publish",
        "name": "",
        "topic": "start1",
        "obj": false,
        "x": 2210,
        "y": 1180,
        "wires": []
    },
    {
        "id": "2ebe95ca.a5fdaa",
        "type": "function",
        "z": "2a761808.610238",
        "name": "tester___",
        "func": "let start_node_time = new Date().getTime();\n\nnode.status({fill: \"green\", shape: \"ring\", text: start_node_time});\n    \n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 2880,
        "y": 460,
        "wires": [
            []
        ]
    },
    {
        "id": "303b541f.e3d47c",
        "type": "function",
        "z": "2a761808.610238",
        "name": "tester___",
        "func": "let start_node_time = new Date().getTime();\n\nnode.status({fill: \"green\", shape: \"ring\", text: start_node_time});\n    \n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 1580,
        "y": 660,
        "wires": [
            []
        ]
    },
    {
        "id": "8384d5a2.b18e28",
        "type": "debug",
        "z": "2a761808.610238",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1370,
        "y": 800,
        "wires": []
    },
    {
        "id": "75a65c132350fa8c",
        "type": "inject",
        "z": "654ea140.2275a8",
        "name": "Inject",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "1",
        "payload": "",
        "payloadType": "date",
        "x": 1990,
        "y": 100,
        "wires": [
            [
                "9d843297c69edb35"
            ]
        ]
    },
    {
        "id": "9d843297c69edb35",
        "type": "switch",
        "z": "654ea140.2275a8",
        "name": "Context based routing",
        "property": "state",
        "propertyType": "flow",
        "rules": [
            {
                "t": "eq",
                "v": "1",
                "vt": "num"
            },
            {
                "t": "eq",
                "v": "2",
                "vt": "num"
            },
            {
                "t": "eq",
                "v": "3",
                "vt": "num"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 3,
        "x": 2200,
        "y": 100,
        "wires": [
            [
                "f732685880a7b21e"
            ],
            [
                "48eecbcca54274ae"
            ],
            [
                "a3064463264b56c6"
            ]
        ]
    },
    {
        "id": "f732685880a7b21e",
        "type": "debug",
        "z": "654ea140.2275a8",
        "name": "Output 1",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": true,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "payload",
        "statusType": "auto",
        "x": 2420,
        "y": 40,
        "wires": []
    },
    {
        "id": "48eecbcca54274ae",
        "type": "debug",
        "z": "654ea140.2275a8",
        "name": "Output 2",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": true,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "payload",
        "statusType": "auto",
        "x": 2420,
        "y": 100,
        "wires": []
    },
    {
        "id": "a3064463264b56c6",
        "type": "debug",
        "z": "654ea140.2275a8",
        "name": "Output 3",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": true,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "payload",
        "statusType": "auto",
        "x": 2420,
        "y": 160,
        "wires": []
    },
    {
        "id": "3f3adcb8b4b11d05",
        "type": "inject",
        "z": "654ea140.2275a8",
        "name": "Set state 0",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "0",
        "payloadType": "num",
        "x": 2000,
        "y": 180,
        "wires": [
            [
                "d26280a007a99d6e"
            ]
        ]
    },
    {
        "id": "f285a363abcced3b",
        "type": "inject",
        "z": "654ea140.2275a8",
        "name": "Set state 1",
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "1",
        "payloadType": "num",
        "x": 2000,
        "y": 220,
        "wires": [
            [
                "d26280a007a99d6e"
            ]
        ]
    },
    {
        "id": "a1a281fff45bb890",
        "type": "inject",
        "z": "654ea140.2275a8",
        "name": "Set state 2",
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "2",
        "payloadType": "num",
        "x": 2000,
        "y": 300,
        "wires": [
            [
                "d26280a007a99d6e"
            ]
        ]
    },
    {
        "id": "b9b6f31473a60931",
        "type": "inject",
        "z": "654ea140.2275a8",
        "name": "Set state 3",
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "3",
        "payloadType": "num",
        "x": 2000,
        "y": 340,
        "wires": [
            [
                "d26280a007a99d6e"
            ]
        ]
    },
    {
        "id": "d26280a007a99d6e",
        "type": "change",
        "z": "654ea140.2275a8",
        "name": "Set flow.state",
        "rules": [
            {
                "t": "set",
                "p": "state",
                "pt": "flow",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 2220,
        "y": 260,
        "wires": [
            []
        ]
    },
    {
        "id": "1ac479ddc35c3366",
        "type": "http in",
        "z": "654ea140.2275a8",
        "name": "",
        "url": "/panic",
        "method": "post",
        "upload": false,
        "swaggerDoc": "",
        "x": 1150,
        "y": 520,
        "wires": [
            [
                "67c0327e654d0681"
            ]
        ]
    },
    {
        "id": "67c0327e654d0681",
        "type": "debug",
        "z": "654ea140.2275a8",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1430,
        "y": 520,
        "wires": []
    },
    {
        "id": "0dfc499c523c8268",
        "type": "http in",
        "z": "654ea140.2275a8",
        "name": "",
        "url": "/webhook-tv",
        "method": "post",
        "upload": false,
        "swaggerDoc": "",
        "x": 290,
        "y": 500,
        "wires": [
            [
                "475286f97a618341"
            ]
        ]
    },
    {
        "id": "a99551d27947f125",
        "type": "debug",
        "z": "654ea140.2275a8",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 930,
        "y": 420,
        "wires": []
    },
    {
        "id": "475286f97a618341",
        "type": "function",
        "z": "654ea140.2275a8",
        "name": "",
        "func": "\nif (msg.payload.command == \"START\"){\nmsg.payload = [msg.payload.bot+\"-start\", \"1\"];\nmsg.topic = \"\";}\n\nif (msg.payload.command == \"PANICSALE\"){\nmsg.payload = [msg.payload.bot+\"-panicsale\", \"1\"];\nmsg.topic = \"\";}\n\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 640,
        "y": 460,
        "wires": [
            [
                "a99551d27947f125",
                "e2cda4221688851f"
            ]
        ]
    },
    {
        "id": "bebe9ac34c223bd9",
        "type": "inject",
        "z": "654ea140.2275a8",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 620,
        "y": 520,
        "wires": [
            []
        ]
    },
    {
        "id": "e2cda4221688851f",
        "type": "redis-command",
        "z": "654ea140.2275a8",
        "server": "f120eab2.0a60a8",
        "command": "set",
        "name": "set comand",
        "topic": "",
        "params": "[]",
        "paramsType": "json",
        "payloadType": "json",
        "block": false,
        "x": 770,
        "y": 400,
        "wires": [
            []
        ]
    },
    {
        "id": "cf2805a312d19e36",
        "type": "catch",
        "z": "654ea140.2275a8",
        "name": "",
        "scope": null,
        "uncaught": false,
        "x": 1440,
        "y": 60,
        "wires": [
            [
                "75469286c619f082"
            ]
        ]
    },
    {
        "id": "75469286c619f082",
        "type": "debug",
        "z": "654ea140.2275a8",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "x": 1590,
        "y": 60,
        "wires": []
    },
    {
        "id": "67c8ece5cd9a8e59",
        "type": "function",
        "z": "654ea140.2275a8",
        "name": "getPrice()",
        "func": "const price = global.get('getPrice')(msg.payload);\n\nprice.then(price => {\n    node.warn(price);\n}).catch(error => {\n    node.error(error);\n});",
        "outputs": "0",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 2100,
        "y": 600,
        "wires": []
    },
    {
        "id": "48cd1cb4ab4ed0f5",
        "type": "inject",
        "z": "654ea140.2275a8",
        "name": "get BTCUSDT price",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": "",
        "topic": "",
        "payload": "BTCUSDT",
        "payloadType": "str",
        "x": 1870,
        "y": 600,
        "wires": [
            [
                "67c8ece5cd9a8e59"
            ]
        ]
    },
    {
        "id": "2b66076a4d117550",
        "type": "function",
        "z": "654ea140.2275a8",
        "name": "getBusyStatus()",
        "func": "const busy = global.get('getBusyStatus')(msg.payload);\n\nbusy.then(busy => {\n    node.warn(busy);\n}).catch(error => {\n    node.error(error);\n});",
        "outputs": "0",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 2260,
        "y": 660,
        "wires": []
    },
    {
        "id": "7de6078a907198bb",
        "type": "inject",
        "z": "654ea140.2275a8",
        "name": "get 5fa1973ff1fb3f005e206671 busy status",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": "",
        "topic": "",
        "payload": "5fa1973ff1fb3f005e206671",
        "payloadType": "str",
        "x": 1940,
        "y": 660,
        "wires": [
            [
                "2b66076a4d117550"
            ]
        ]
    },
    {
        "id": "2c60a99c89e7b813",
        "type": "function",
        "z": "654ea140.2275a8",
        "name": "setBusyStatus()",
        "func": "const setbusy = global.get('setBusyStatus')(msg.payload);\n\nsetbusy.then(setbusy => {\n    node.warn(setbusy);\n}).catch(error => {\n    node.error(error);\n});",
        "outputs": "0",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 2180,
        "y": 720,
        "wires": []
    },
    {
        "id": "3887f6a49316b036",
        "type": "inject",
        "z": "654ea140.2275a8",
        "name": "set 5fa1973ff1fb3f005e206671 busy",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": "",
        "topic": "",
        "payload": "5fa1973ff1fb3f005e206671",
        "payloadType": "str",
        "x": 1920,
        "y": 720,
        "wires": [
            [
                "2c60a99c89e7b813"
            ]
        ]
    },
    {
        "id": "9d4264796c7213c8",
        "type": "function",
        "z": "654ea140.2275a8",
        "name": "setBusyStatusFree()",
        "func": "const busy = global.get('setBusyStatusFree')(msg.payload);\n\nbusy.then(busy => {\n    node.warn(busy);\n}).catch(error => {\n    node.error(error);\n});",
        "outputs": "0",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 2200,
        "y": 780,
        "wires": []
    },
    {
        "id": "49ab9606472b731d",
        "type": "inject",
        "z": "654ea140.2275a8",
        "name": "set 5fa1973ff1fb3f005e206671 free",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": "",
        "topic": "",
        "payload": "5fa1973ff1fb3f005e206671",
        "payloadType": "str",
        "x": 1920,
        "y": 780,
        "wires": [
            [
                "9d4264796c7213c8"
            ]
        ]
    },
    {
        "id": "9bdef1a106282610",
        "type": "comment",
        "z": "654ea140.2275a8",
        "name": "Tests",
        "info": "",
        "x": 1810,
        "y": 540,
        "wires": []
    },
    {
        "id": "f1330a6cbc42c1ae",
        "type": "function",
        "z": "654ea140.2275a8",
        "name": "setBusyStatusFree()",
        "func": "const busy = global.get('setBusyStatusFree')(msg.payload);\nmsg.id = msg.payload;\nbusy.then(busy => {\n    \n    msg.payload = \"free\"\n    node.send(msg);\n\n}).catch(error => {\n    node.error(error);\n});\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 2780,
        "y": 780,
        "wires": [
            [
                "48d159c870d4a71c"
            ]
        ]
    },
    {
        "id": "2d1896c0422eb95a",
        "type": "inject",
        "z": "654ea140.2275a8",
        "name": "set 5fa1973ff1fb3f005e206671 free",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": "",
        "topic": "",
        "payload": "5fa1973ff1fb3f005e206671",
        "payloadType": "str",
        "x": 2490,
        "y": 780,
        "wires": [
            [
                "f1330a6cbc42c1ae"
            ]
        ]
    },
    {
        "id": "48d159c870d4a71c",
        "type": "debug",
        "z": "654ea140.2275a8",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 3000,
        "y": 780,
        "wires": []
    },
    {
        "id": "a28cc42536c04d1d",
        "type": "function",
        "z": "654ea140.2275a8",
        "name": "setBusyStatus()",
        "func": "const busy = global.get('setBusyStatus')(msg.payload);\nmsg.id = msg.payload;\nbusy.then(busy => {\n    \n    msg.payload = \"busy\"\n    node.send(msg);\n\n}).catch(error => {\n    node.error(error);\n});\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 2760,
        "y": 720,
        "wires": [
            [
                "9cd816f1af5de3ec"
            ]
        ]
    },
    {
        "id": "73bd1bed7db2ba1b",
        "type": "inject",
        "z": "654ea140.2275a8",
        "name": "set 5fa1973ff1fb3f005e206671 busy",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": "",
        "topic": "",
        "payload": "5fa1973ff1fb3f005e206671",
        "payloadType": "str",
        "x": 2490,
        "y": 720,
        "wires": [
            [
                "a28cc42536c04d1d"
            ]
        ]
    },
    {
        "id": "9cd816f1af5de3ec",
        "type": "debug",
        "z": "654ea140.2275a8",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 3000,
        "y": 720,
        "wires": []
    },
    {
        "id": "acc4428f2fb3fb0d",
        "type": "function",
        "z": "654ea140.2275a8",
        "name": "getBusyStatus()",
        "func": "const busy = global.get('getBusyStatus')(msg.payload);\nmsg.id = msg.payload;\nbusy.then(busy => {\n    \n    msg.payload = busy;\n    node.send(msg);\n\n}).catch(error => {\n    node.error(error);\n});\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 2800,
        "y": 660,
        "wires": [
            [
                "de7c7189765e256e"
            ]
        ]
    },
    {
        "id": "fedeb3f463d27a90",
        "type": "inject",
        "z": "654ea140.2275a8",
        "name": "get 5fa1973ff1fb3f005e206671 free",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": "",
        "topic": "",
        "payload": "5fa1973ff1fb3f005e206671",
        "payloadType": "str",
        "x": 2530,
        "y": 660,
        "wires": [
            [
                "acc4428f2fb3fb0d"
            ]
        ]
    },
    {
        "id": "de7c7189765e256e",
        "type": "debug",
        "z": "654ea140.2275a8",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 3040,
        "y": 660,
        "wires": []
    },
    {
        "id": "605dc4f1cb4d751c",
        "type": "function",
        "z": "654ea140.2275a8",
        "name": "getPrice()",
        "func": "const price = global.get('getPrice')(msg.payload);\nmsg.id = msg.payload;\nprice.then(price => {\n    \n    msg.payload = price;\n    node.send(msg);\n\n}).catch(error => {\n    node.error(error);\n});\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 2780,
        "y": 600,
        "wires": [
            [
                "7406daae8f7258dc"
            ]
        ]
    },
    {
        "id": "27159891a4a46626",
        "type": "inject",
        "z": "654ea140.2275a8",
        "name": "BTCUSDT",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": "",
        "topic": "",
        "payload": "BTCUSDT",
        "payloadType": "str",
        "x": 2450,
        "y": 600,
        "wires": [
            [
                "605dc4f1cb4d751c"
            ]
        ]
    },
    {
        "id": "7406daae8f7258dc",
        "type": "debug",
        "z": "654ea140.2275a8",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 3040,
        "y": 600,
        "wires": []
    },
    {
        "id": "88a61f9197dc29d0",
        "type": "function",
        "z": "654ea140.2275a8",
        "name": "",
        "func": "let newset = {\"status\":{\n  \"curenntprice\": \"555\",\n}};\n//newset = JSON.stringify(newset);\n\n\nmsg.payload = newset;\nmsg.topic = msg.botid;\nmsg.headers = {};\nmsg.headers['accept'] = 'application/json';\nmsg.headers['Content-Type'] = 'application/json';\n\nreturn msg;\n\n\n\n//node.send(Object.assign({}, msg));\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 2120,
        "y": 880,
        "wires": [
            [
                "238c4d042d25a2ae"
            ]
        ]
    },
    {
        "id": "3a871137b359ef60",
        "type": "inject",
        "z": "654ea140.2275a8",
        "name": "",
        "props": [
            {
                "p": "botid",
                "v": "5fa4a9f6e4ef8c0024bbdcc0",
                "vt": "str"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "5fa4a9f6e4ef8c0024bbdcc0",
        "x": 1900,
        "y": 880,
        "wires": [
            [
                "88a61f9197dc29d0"
            ]
        ]
    },
    {
        "id": "38754b1cb091b6ab",
        "type": "debug",
        "z": "654ea140.2275a8",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 2490,
        "y": 880,
        "wires": []
    },
    {
        "id": "238c4d042d25a2ae",
        "type": "function",
        "z": "654ea140.2275a8",
        "name": "updateSettings",
        "func": "const upd = global.get('updateSettings')(msg.payload, msg.topic);\n\nupd.then(upd => {\n    \n    msg.payload = \"updated\"\n    node.send(msg);\n\n}).catch(error => {\n    node.error(error);\n});\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 2320,
        "y": 880,
        "wires": [
            [
                "38754b1cb091b6ab"
            ]
        ]
    },
    {
        "id": "ae69925bf872e0a5",
        "type": "http in",
        "z": "654ea140.2275a8",
        "name": "",
        "url": "/botdel",
        "method": "post",
        "upload": false,
        "swaggerDoc": "",
        "x": 310,
        "y": 800,
        "wires": [
            [
                "18fe55f588c26e67",
                "eb7794c1cb814c91"
            ]
        ]
    },
    {
        "id": "18fe55f588c26e67",
        "type": "debug",
        "z": "654ea140.2275a8",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 410,
        "y": 740,
        "wires": []
    },
    {
        "id": "eb7794c1cb814c91",
        "type": "switch",
        "z": "654ea140.2275a8",
        "name": "payload.event",
        "property": "payload.event",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "entry.create",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "entry.delete",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 510,
        "y": 800,
        "wires": [
            [
                "af74ada051729520",
                "4b1e924dd0810d5b"
            ],
            [
                "ddc46e85a5296a37",
                "83066aa930a24b0f"
            ]
        ]
    },
    {
        "id": "af74ada051729520",
        "type": "debug",
        "z": "654ea140.2275a8",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 690,
        "y": 740,
        "wires": []
    },
    {
        "id": "ddc46e85a5296a37",
        "type": "debug",
        "z": "654ea140.2275a8",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 670,
        "y": 900,
        "wires": []
    },
    {
        "id": "4b1e924dd0810d5b",
        "type": "function",
        "z": "654ea140.2275a8",
        "name": "",
        "func": "msg.payload = msg.payload.entry.botname;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 720,
        "y": 780,
        "wires": [
            [
                "5acbd7689d95e105"
            ]
        ]
    },
    {
        "id": "83066aa930a24b0f",
        "type": "function",
        "z": "654ea140.2275a8",
        "name": "",
        "func": "msg.payload = msg.payload.entry.botname;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 720,
        "y": 840,
        "wires": [
            [
                "20361aa68335597d"
            ]
        ]
    },
    {
        "id": "5acbd7689d95e105",
        "type": "debug",
        "z": "654ea140.2275a8",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 890,
        "y": 780,
        "wires": []
    },
    {
        "id": "20361aa68335597d",
        "type": "debug",
        "z": "654ea140.2275a8",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 890,
        "y": 840,
        "wires": []
    },
    {
        "id": "9b94d0f7e2218680",
        "type": "inject",
        "z": "654ea140.2275a8",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 240,
        "y": 1240,
        "wires": [
            [
                "e3c98802bb326cb1",
                "69cf1263e63ffb9e"
            ]
        ]
    },
    {
        "id": "e3c98802bb326cb1",
        "type": "function",
        "z": "654ea140.2275a8",
        "name": "",
        "func": "msg.payload = \"q\";\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 440,
        "y": 1360,
        "wires": [
            [
                "6cd667ca14f79390"
            ]
        ]
    },
    {
        "id": "b3585404a8d62943",
        "type": "debug",
        "z": "654ea140.2275a8",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 960,
        "y": 1300,
        "wires": []
    },
    {
        "id": "4bc7ae89f43b3966",
        "type": "function",
        "z": "654ea140.2275a8",
        "name": "",
        "func": "msg.payload = \"м\";\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 1340,
        "y": 1340,
        "wires": [
            [
                "f3578775f74b465b"
            ]
        ]
    },
    {
        "id": "2ddd1d39722bf8ba",
        "type": "function",
        "z": "654ea140.2275a8",
        "name": "",
        "func": "msg.payload = \"q\";\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 1340,
        "y": 1420,
        "wires": [
            [
                "5c7906467fcc2c47"
            ]
        ]
    },
    {
        "id": "3a147cb0d64c0e27",
        "type": "inject",
        "z": "654ea140.2275a8",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "a",
        "payloadType": "str",
        "x": 700,
        "y": 1120,
        "wires": [
            [
                "5c1293e15be74222"
            ]
        ]
    },
    {
        "id": "e560957f78422fa8",
        "type": "telegrambot-command",
        "z": "654ea140.2275a8",
        "d": true,
        "name": "",
        "bot": "848f142.6165868",
        "command": "/ee",
        "commandType": "str",
        "commandCase": false,
        "x": 870,
        "y": 1400,
        "wires": [
            [
                "c73c404df6ecd9c3"
            ]
        ]
    },
    {
        "id": "c73c404df6ecd9c3",
        "type": "telegrambot-switch",
        "z": "654ea140.2275a8",
        "d": true,
        "name": "",
        "bot": "848f142.6165868",
        "chatId": "454883204",
        "question": "Продолжаем?",
        "answers": [
            "Да",
            "Нет"
        ],
        "outputs": 2,
        "autoAnswerCallback": true,
        "timeoutValue": "",
        "timeoutUnits": "",
        "x": 1150,
        "y": 1380,
        "wires": [
            [
                "4bc7ae89f43b3966"
            ],
            [
                "2ddd1d39722bf8ba"
            ]
        ]
    },
    {
        "id": "69cf1263e63ffb9e",
        "type": "telegrambot-notify",
        "z": "654ea140.2275a8",
        "d": true,
        "name": "",
        "bot": "848f142.6165868",
        "chatId": "454883204",
        "message": "",
        "parseMode": "",
        "x": 520,
        "y": 1240,
        "wires": []
    },
    {
        "id": "6cd667ca14f79390",
        "type": "telegrambot-notify",
        "z": "654ea140.2275a8",
        "d": true,
        "name": "",
        "bot": "848f142.6165868",
        "chatId": "454883204",
        "message": "",
        "parseMode": "",
        "x": 620,
        "y": 1320,
        "wires": []
    },
    {
        "id": "f3578775f74b465b",
        "type": "telegrambot-notify",
        "z": "654ea140.2275a8",
        "d": true,
        "name": "",
        "bot": "848f142.6165868",
        "chatId": "454883204",
        "message": "",
        "parseMode": "",
        "x": 1560,
        "y": 1320,
        "wires": []
    },
    {
        "id": "5c7906467fcc2c47",
        "type": "telegrambot-notify",
        "z": "654ea140.2275a8",
        "d": true,
        "name": "",
        "bot": "848f142.6165868",
        "chatId": "454883204",
        "message": "",
        "parseMode": "",
        "x": 1540,
        "y": 1420,
        "wires": []
    },
    {
        "id": "5c1293e15be74222",
        "type": "telegrambot-payload",
        "z": "654ea140.2275a8",
        "d": true,
        "name": "",
        "bot": "848f142.6165868",
        "chatId": "454883204",
        "sendMethod": "sendChatAction",
        "payload": "",
        "x": 900,
        "y": 1220,
        "wires": [
            [
                "b3585404a8d62943"
            ]
        ]
    },
    {
        "id": "709ff4bb9097e2ea",
        "type": "debug",
        "z": "654ea140.2275a8",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 4150,
        "y": 2600,
        "wires": []
    },
    {
        "id": "a89da37df520bd32",
        "type": "debug",
        "z": "654ea140.2275a8",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 4730,
        "y": 3020,
        "wires": []
    },
    {
        "id": "430e6d6fa6f408c7",
        "type": "inject",
        "z": "654ea140.2275a8",
        "name": "",
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 4200,
        "y": 3020,
        "wires": [
            [
                "aead129e1cd0eef5"
            ]
        ]
    },
    {
        "id": "c32c284c0478a59d",
        "type": "inject",
        "z": "654ea140.2275a8",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"a\":1,\"b\":2}",
        "payloadType": "json",
        "x": 4210,
        "y": 2980,
        "wires": [
            [
                "aead129e1cd0eef5"
            ]
        ]
    },
    {
        "id": "010145f944be178d",
        "type": "inject",
        "z": "654ea140.2275a8",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 4200,
        "y": 3080,
        "wires": [
            [
                "06dcb0e86bea7b61"
            ]
        ]
    },
    {
        "id": "814c1963a5d30433",
        "type": "debug",
        "z": "654ea140.2275a8",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "x": 4710,
        "y": 3080,
        "wires": []
    },
    {
        "id": "a9859f27fca0b1a1",
        "type": "inject",
        "z": "654ea140.2275a8",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "[\"key\",\"value\"]",
        "payloadType": "json",
        "x": 4200,
        "y": 3140,
        "wires": [
            [
                "95e777e5fb0c6367",
                "30daf153b84ba5b8"
            ]
        ]
    },
    {
        "id": "30daf153b84ba5b8",
        "type": "debug",
        "z": "654ea140.2275a8",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 4710,
        "y": 3140,
        "wires": []
    },
    {
        "id": "d635c6e0d349e2e8",
        "type": "inject",
        "z": "654ea140.2275a8",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "key",
        "payload": "[\"value\"]",
        "payloadType": "json",
        "x": 4210,
        "y": 3200,
        "wires": [
            [
                "f06c252ff312626a"
            ]
        ]
    },
    {
        "id": "c7a586de12bc1ade",
        "type": "debug",
        "z": "654ea140.2275a8",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "x": 4710,
        "y": 3200,
        "wires": []
    },
    {
        "id": "20cf7f3fb480452c",
        "type": "inject",
        "z": "654ea140.2275a8",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "myHash",
        "payload": "{\"a\":1,\"b\":2}",
        "payloadType": "json",
        "x": 4230,
        "y": 3320,
        "wires": [
            [
                "7fcd1b69370fca7b"
            ]
        ]
    },
    {
        "id": "a99583b0d5e50c21",
        "type": "debug",
        "z": "654ea140.2275a8",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "x": 4710,
        "y": 3320,
        "wires": []
    },
    {
        "id": "6b3a84345ccba0c9",
        "type": "inject",
        "z": "654ea140.2275a8",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "false",
        "payloadType": "bool",
        "x": 4190,
        "y": 3380,
        "wires": [
            [
                "be12f4b4268d35eb"
            ]
        ]
    },
    {
        "id": "b059c51709b6e2af",
        "type": "debug",
        "z": "654ea140.2275a8",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "x": 4710,
        "y": 3380,
        "wires": []
    },
    {
        "id": "357d8f0c19cc3f61",
        "type": "inject",
        "z": "654ea140.2275a8",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "false",
        "payloadType": "bool",
        "x": 3490,
        "y": 3440,
        "wires": [
            [
                "6c01a0a6292930ba"
            ]
        ]
    },
    {
        "id": "1f04c37b21652103",
        "type": "debug",
        "z": "654ea140.2275a8",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "x": 4010,
        "y": 3440,
        "wires": []
    },
    {
        "id": "44b17afc79299ee8",
        "type": "inject",
        "z": "654ea140.2275a8",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 4200,
        "y": 3560,
        "wires": [
            [
                "cc36346be5ee3e37"
            ]
        ]
    },
    {
        "id": "04bcf3b3eeaf77f5",
        "type": "debug",
        "z": "654ea140.2275a8",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 4730,
        "y": 3560,
        "wires": []
    },
    {
        "id": "8420514277b7d14a",
        "type": "inject",
        "z": "654ea140.2275a8",
        "name": "",
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "false",
        "payloadType": "bool",
        "x": 3490,
        "y": 3500,
        "wires": [
            [
                "f77b83099f0b9381"
            ]
        ]
    },
    {
        "id": "d0aa886cb4de2051",
        "type": "debug",
        "z": "654ea140.2275a8",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "x": 4010,
        "y": 3500,
        "wires": []
    },
    {
        "id": "343f638ed6bbd494",
        "type": "inject",
        "z": "654ea140.2275a8",
        "name": "",
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 4200,
        "y": 3620,
        "wires": [
            [
                "09ba52616f5c01c9"
            ]
        ]
    },
    {
        "id": "3ac423f8e7d82180",
        "type": "debug",
        "z": "654ea140.2275a8",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "x": 4730,
        "y": 3620,
        "wires": []
    },
    {
        "id": "528923a1b18cb1b3",
        "type": "debug",
        "z": "654ea140.2275a8",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "x": 4730,
        "y": 2800,
        "wires": []
    },
    {
        "id": "1ac0ed6c116fccf2",
        "type": "debug",
        "z": "654ea140.2275a8",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "x": 4730,
        "y": 2860,
        "wires": []
    },
    {
        "id": "f9fba8328eadc647",
        "type": "inject",
        "z": "654ea140.2275a8",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "jjj:w",
        "payload": "{\"a\":1,\"b\":2}",
        "payloadType": "json",
        "x": 4080,
        "y": 2860,
        "wires": [
            [
                "b39f0596d9079b4e"
            ]
        ]
    },
    {
        "id": "25100e81f913d5da",
        "type": "inject",
        "z": "654ea140.2275a8",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "key",
        "payload": "[]",
        "payloadType": "json",
        "x": 4190,
        "y": 3680,
        "wires": [
            [
                "c06f5177a9014ced"
            ]
        ]
    },
    {
        "id": "4bd8b134e167cc99",
        "type": "debug",
        "z": "654ea140.2275a8",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "x": 4730,
        "y": 3680,
        "wires": []
    },
    {
        "id": "c4b2299d958f9f08",
        "type": "inject",
        "z": "654ea140.2275a8",
        "name": "",
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 4180,
        "y": 3780,
        "wires": [
            [
                "49b9d479537a38c3"
            ]
        ]
    },
    {
        "id": "49b9d479537a38c3",
        "type": "function",
        "z": "654ea140.2275a8",
        "name": "",
        "func": "let redis = context.flow.get('redis');\n\nredis.info().then((data)=>{\n    msg.payload = data\n    node.send(msg);\n})\n\n\nredis.call(\"anycmd\").then((data)=>{\n    msg.payload = data\n    node.send(msg);\n})",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 4410,
        "y": 3780,
        "wires": [
            [
                "cbabe1f15b346f78"
            ]
        ]
    },
    {
        "id": "cbabe1f15b346f78",
        "type": "debug",
        "z": "654ea140.2275a8",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "x": 4730,
        "y": 3780,
        "wires": []
    },
    {
        "id": "8687b9e29f834ef3",
        "type": "function",
        "z": "654ea140.2275a8",
        "name": "замер времени",
        "func": "\nmsg.est = new Date() - msg.start - 1000;\n//node.warn(msg.est);\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 1560,
        "y": 3260,
        "wires": [
            [
                "bbfc0ea2b8825d56"
            ]
        ]
    },
    {
        "id": "ba4a105188f8c68c",
        "type": "inject",
        "z": "654ea140.2275a8",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "",
        "topic": "",
        "payload": "Started!",
        "payloadType": "str",
        "x": 1840,
        "y": 3260,
        "wires": [
            [
                "dafb75bdee16be59"
            ]
        ]
    },
    {
        "id": "dafb75bdee16be59",
        "type": "debug",
        "z": "654ea140.2275a8",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 2010,
        "y": 3260,
        "wires": []
    },
    {
        "id": "c21e15a7ba328939",
        "type": "function",
        "z": "654ea140.2275a8",
        "name": "start timer",
        "func": "msg.start = new Date();\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 650,
        "y": 3260,
        "wires": [
            [
                "4ed3fd40d778fbd8"
            ]
        ]
    },
    {
        "id": "87be5bc3753dae51",
        "type": "trigger",
        "z": "654ea140.2275a8",
        "name": "",
        "op1": "",
        "op2": "0",
        "op1type": "pay",
        "op2type": "str",
        "duration": "-2",
        "extend": false,
        "units": "s",
        "reset": "",
        "bytopic": "all",
        "topic": "topic",
        "outputs": 1,
        "x": 560,
        "y": 3320,
        "wires": [
            [
                "c21e15a7ba328939"
            ]
        ]
    },
    {
        "id": "0bb83f61a1b8fc0b",
        "type": "inject",
        "z": "654ea140.2275a8",
        "name": "reset",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "reset",
                "v": "true",
                "vt": "bool"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 390,
        "y": 3340,
        "wires": [
            [
                "87be5bc3753dae51"
            ]
        ]
    },
    {
        "id": "7c351057d7e717ee",
        "type": "function",
        "z": "654ea140.2275a8",
        "name": "get order status",
        "func": "function parseApiError(error) {\n  if (error.body) {\n    try {\n      var resp = JSON.parse(error.body);\n      return resp.msg;\n    } catch (error) {/* pass thru */}\n  }\n  return \"Unknown error. Status code: \"+error.statsCode;\n}\n\nlet LBinance = global.get(\"gBinance\");\n\n\nlet binance = new LBinance().options({\n\tAPIKEY: \"1mUrLnaTdDiUHWQ2drxlQPnr0MqaJevIwJaqnEJFi5JIHLdTwLxTbnbMzMm5dj7i\",\n\tAPISECRET: \"exqgFmgHcb4Fr13JI6pDIpMTBXRDqzgbTelDoEikKRvzVU5KbB3F9iq9GPP2Onjn\",\n\t\"reconnect\": false\n});\n\nlet orderid = msg.orderid;\nlet moneta = msg.moneta;\n//node.warn(binance);\nbinance.orderStatus(moneta, orderid, function (error, qjson) {\n\tif (error) {\n\t\tvar errorMsg = parseApiError(error);\n\t\tnode.error(errorMsg);\n\t\tnode.status({ fill: \"red\", shape: \"ring\", text: errorMsg });\n\t\treturn;\n\t}\n    msg.st = qjson.status;\n\tnode.send(msg);\n\n\n});\n//msg.payload = \"qjson.status\";\nreturn;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 1200,
        "y": 3300,
        "wires": [
            [
                "ea58450d8877075f",
                "b1788c5e3835b372"
            ]
        ],
        "inputLabels": [
            "orderid, moneta"
        ],
        "outputLabels": [
            "status"
        ],
        "icon": "node-red-contrib-binance/binance.png"
    },
    {
        "id": "6b3dc15230ee91bd",
        "type": "debug",
        "z": "654ea140.2275a8",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 850,
        "y": 3320,
        "wires": []
    },
    {
        "id": "b1788c5e3835b372",
        "type": "function",
        "z": "654ea140.2275a8",
        "name": "cansel order",
        "func": "function parseApiError(error) {\n  if (error.body) {\n    try {\n      var resp = JSON.parse(error.body);\n      return resp.msg;\n    } catch (error) {/* pass thru */}\n  }\n  return \"Unknown error. Status code: \"+error.statsCode;\n}\n\nlet LBinance = global.get(\"gBinance\");\n\n\nlet binance = new LBinance().options({\n    APIKEY: \"1mUrLnaTdDiUHWQ2drxlQPnr0MqaJevIwJaqnEJFi5JIHLdTwLxTbnbMzMm5dj7i\",\n    APISECRET: \"exqgFmgHcb4Fr13JI6pDIpMTBXRDqzgbTelDoEikKRvzVU5KbB3F9iq9GPP2Onjn\",\n    \"reconnect\": false\n});\n\nlet orderid = msg.orderid;\nlet moneta = msg.moneta;\n//node.warn(binance);\n\nbinance.cancel(moneta, orderid, function (error, response) {\n                if (error) {\n                    var errorMsg = parseApiError(error);\n\t\t            node.error(errorMsg);\n\t            \tnode.status({ fill: \"red\", shape: \"ring\", text: errorMsg });\n\t            \treturn;\n\n                }\n                if (response) {\n                    \n                    node.send(msg);\n                }\n            });\n            \n//msg.payload = \"qjson.status\";\nreturn;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 1390,
        "y": 3260,
        "wires": [
            [
                "8687b9e29f834ef3"
            ]
        ],
        "inputLabels": [
            "orderid"
        ],
        "outputLabels": [
            "status"
        ],
        "icon": "node-red-contrib-binance/binance.png"
    },
    {
        "id": "e27951e924020fa9",
        "type": "inject",
        "z": "654ea140.2275a8",
        "name": "",
        "props": [
            {
                "p": "moneta",
                "v": "TRXUSDT",
                "vt": "str"
            },
            {
                "p": "payload.price",
                "v": "0.022",
                "vt": "str"
            },
            {
                "p": "payload.stopprice",
                "v": "0.025",
                "vt": "str"
            },
            {
                "p": "payload.quantity",
                "v": "1000",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 390,
        "y": 3260,
        "wires": [
            [
                "87be5bc3753dae51"
            ]
        ]
    },
    {
        "id": "4ed3fd40d778fbd8",
        "type": "function",
        "z": "654ea140.2275a8",
        "name": "stopsell order",
        "func": "function parseApiError(error) {\n\tif (error.body) {\n\t\ttry {\n\t\t\tvar resp = JSON.parse(error.body);\n\t\t\treturn resp.msg;\n\t\t} catch (error) {/* pass thru */ }\n\t}\n\treturn \"Unknown error. Status code: \" + error.statsCode;\n}\n\nlet LBinance = global.get(\"gBinance\");\n\n\nlet binance = new LBinance().options({\n\tAPIKEY: \"1mUrLnaTdDiUHWQ2drxlQPnr0MqaJevIwJaqnEJFi5JIHLdTwLxTbnbMzMm5dj7i\",\n\tAPISECRET: \"exqgFmgHcb4Fr13JI6pDIpMTBXRDqzgbTelDoEikKRvzVU5KbB3F9iq9GPP2Onjn\",\n\t\"reconnect\": false\n});\n\n\nlet moneta = msg.moneta;\nlet price = parseFloat(msg.payload.price);\nlet priceb = price;\nlet stopprice = parseFloat(msg.payload.stopprice);\nlet quantity = parseFloat(msg.payload.quantity);\n//node.warn(binance);\n\n\n\n\n binance.sell(moneta, quantity, priceb, { stopPrice: stopprice, type: \"STOP_LOSS_LIMIT\" }, function (err, resp) {\n          if (err) {\n            var errorMsg = parseApiError(err);\n            node.error(errorMsg, msg);\n            node.status({fill: \"red\", shape: \"ring\", text: errorMsg});\n            return;\n          }\n          node.status({}); //clear status message\n          msg.orderid = resp.orderId;\n          node.send(msg);\n        });\n\n\n\nreturn;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 860,
        "y": 3260,
        "wires": [
            [
                "6b3dc15230ee91bd",
                "e0d2f42aec526b13"
            ]
        ],
        "inputLabels": [
            "orderid"
        ],
        "outputLabels": [
            "status"
        ],
        "icon": "node-red-contrib-binance/binance.png"
    },
    {
        "id": "e0d2f42aec526b13",
        "type": "delay",
        "z": "654ea140.2275a8",
        "name": "",
        "pauseType": "delay",
        "timeout": "1",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "x": 1060,
        "y": 3260,
        "wires": [
            [
                "b1788c5e3835b372"
            ]
        ]
    },
    {
        "id": "ea58450d8877075f",
        "type": "debug",
        "z": "654ea140.2275a8",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1190,
        "y": 3340,
        "wires": []
    },
    {
        "id": "bbfc0ea2b8825d56",
        "type": "debug",
        "z": "654ea140.2275a8",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "est",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1560,
        "y": 3320,
        "wires": []
    },
    {
        "id": "08917b5d2b6cdc54",
        "type": "function",
        "z": "654ea140.2275a8",
        "name": "reset order id",
        "func": "\nmsg.payload = [msg.ttpprefix+\":curorderid\", 0];\nmsg.topic = \"\";\n\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 2470,
        "y": 3420,
        "wires": [
            [
                "13c7c341b9053792"
            ]
        ],
        "inputLabels": [
            "orderid"
        ],
        "outputLabels": [
            "status"
        ],
        "icon": "node-red-contrib-binance/binance.png"
    },
    {
        "id": "2f7831c14f3ef561",
        "type": "function",
        "z": "654ea140.2275a8",
        "name": "reset curstop",
        "func": "\nmsg.payload = [msg.ttpprefix+\":curstop\", 0];\nmsg.topic = \"\";\n\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 2470,
        "y": 3380,
        "wires": [
            [
                "71bc08f8a0d2aef6"
            ]
        ],
        "inputLabels": [
            "orderid"
        ],
        "outputLabels": [
            "status"
        ],
        "icon": "node-red-contrib-binance/binance.png"
    },
    {
        "id": "dd807b7eab7bce21",
        "type": "function",
        "z": "654ea140.2275a8",
        "name": "get order status",
        "func": "function parseApiError(error) {\n  if (error.body) {\n    try {\n      var resp = JSON.parse(error.body);\n      return resp.msg;\n    } catch (error) {/* pass thru */}\n  }\n  return \"Unknown error. Status code: \"+error.statsCode;\n}\n\nlet LBinance = global.get(\"gBinance\");\n\n\nlet binance = new LBinance().options({\n\tAPIKEY: \"1mUrLnaTdDiUHWQ2drxlQPnr0MqaJevIwJaqnEJFi5JIHLdTwLxTbnbMzMm5dj7i\",\n\tAPISECRET: \"exqgFmgHcb4Fr13JI6pDIpMTBXRDqzgbTelDoEikKRvzVU5KbB3F9iq9GPP2Onjn\",\n\t\"reconnect\": false\n});\n\nlet orderid = \"8200370\";\nlet moneta =  \"LINKDOWNUSDT\";\n//node.warn(binance);\nbinance.orderStatus(moneta, orderid, function (error, qjson) {\n\tif (error) {\n\t\tvar errorMsg = parseApiError(error);\n\t\tnode.error(errorMsg);\n\t\tnode.status({ fill: \"red\", shape: \"ring\", text: errorMsg });\n\t\treturn;\n\t}\n    msg.st = qjson.status;\n\tnode.send(msg);\n\n\n});\n//msg.payload = \"qjson.status\";\nreturn;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 2480,
        "y": 3260,
        "wires": [
            [
                "855ddabb541e68e5"
            ]
        ],
        "inputLabels": [
            "orderid, moneta"
        ],
        "outputLabels": [
            "status"
        ],
        "icon": "node-red-contrib-binance/binance.png"
    },
    {
        "id": "855ddabb541e68e5",
        "type": "debug",
        "z": "654ea140.2275a8",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "st",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 2680,
        "y": 3260,
        "wires": []
    },
    {
        "id": "956cc462a8bee26f",
        "type": "inject",
        "z": "654ea140.2275a8",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 2270,
        "y": 3260,
        "wires": [
            [
                "dd807b7eab7bce21"
            ]
        ]
    },
    {
        "id": "eb474464e11f8659",
        "type": "inject",
        "z": "654ea140.2275a8",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "0",
        "payloadType": "num",
        "x": 1570,
        "y": 2940,
        "wires": [
            [
                "c530355a45ee8d9d"
            ]
        ]
    },
    {
        "id": "c530355a45ee8d9d",
        "type": "rbe",
        "z": "654ea140.2275a8",
        "name": "report-by-exception",
        "func": "deadband",
        "gap": "",
        "start": "",
        "inout": "out",
        "property": "payload",
        "x": 1780,
        "y": 2960,
        "wires": [
            [
                "84e4a7fec7cb0a4f"
            ]
        ]
    },
    {
        "id": "84e4a7fec7cb0a4f",
        "type": "debug",
        "z": "654ea140.2275a8",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "x": 1990,
        "y": 2960,
        "wires": []
    },
    {
        "id": "9a8738bd10a9c118",
        "type": "inject",
        "z": "654ea140.2275a8",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "1",
        "payloadType": "num",
        "x": 1570,
        "y": 2980,
        "wires": [
            [
                "c530355a45ee8d9d"
            ]
        ]
    },
    {
        "id": "1341b6a1c19d287a",
        "type": "rbe",
        "z": "654ea140.2275a8",
        "name": "report-by-exception",
        "func": "deadband",
        "gap": "",
        "start": "",
        "inout": "out",
        "property": "payload",
        "x": 1790,
        "y": 2840,
        "wires": [
            []
        ]
    },
    {
        "id": "3b4463a3ae34678c",
        "type": "redis-in",
        "z": "654ea140.2275a8",
        "server": "f120eab2.0a60a8",
        "command": "blpop",
        "name": "",
        "topic": "test",
        "obj": false,
        "timeout": 0,
        "x": 4490,
        "y": 3020,
        "wires": [
            [
                "a89da37df520bd32"
            ]
        ]
    },
    {
        "id": "7b045200dd6beabf",
        "type": "redis-in",
        "z": "654ea140.2275a8",
        "server": "f120eab2.0a60a8",
        "command": "psubscribe",
        "name": "",
        "topic": "jjj:*",
        "obj": false,
        "timeout": 0,
        "x": 4500,
        "y": 2800,
        "wires": [
            [
                "528923a1b18cb1b3"
            ]
        ]
    },
    {
        "id": "e784d97863465d35",
        "type": "redis-in",
        "z": "654ea140.2275a8",
        "server": "f120eab2.0a60a8",
        "command": "subscribe",
        "name": "",
        "topic": "TOPIC:OK",
        "obj": true,
        "timeout": 0,
        "x": 4500,
        "y": 2860,
        "wires": [
            [
                "1ac0ed6c116fccf2"
            ]
        ]
    },
    {
        "id": "aead129e1cd0eef5",
        "type": "redis-out",
        "z": "654ea140.2275a8",
        "server": "f120eab2.0a60a8",
        "command": "rpush",
        "name": "",
        "topic": "test",
        "obj": true,
        "x": 4490,
        "y": 2980,
        "wires": []
    },
    {
        "id": "b39f0596d9079b4e",
        "type": "redis-out",
        "z": "654ea140.2275a8",
        "server": "f120eab2.0a60a8",
        "command": "publish",
        "name": "",
        "topic": "",
        "obj": true,
        "x": 4240,
        "y": 2860,
        "wires": []
    },
    {
        "id": "06dcb0e86bea7b61",
        "type": "redis-command",
        "z": "654ea140.2275a8",
        "server": "f120eab2.0a60a8",
        "command": "getset",
        "name": "",
        "topic": "timestamp",
        "params": "[]",
        "paramsType": "json",
        "payloadType": "json",
        "block": false,
        "x": 4470,
        "y": 3080,
        "wires": [
            [
                "814c1963a5d30433"
            ]
        ]
    },
    {
        "id": "95e777e5fb0c6367",
        "type": "redis-command",
        "z": "654ea140.2275a8",
        "server": "f120eab2.0a60a8",
        "command": "set",
        "name": "",
        "topic": "",
        "params": "[]",
        "paramsType": "json",
        "payloadType": "json",
        "block": false,
        "x": 4370,
        "y": 3160,
        "wires": [
            [
                "30daf153b84ba5b8"
            ]
        ]
    },
    {
        "id": "f06c252ff312626a",
        "type": "redis-command",
        "z": "654ea140.2275a8",
        "server": "f120eab2.0a60a8",
        "command": "getset",
        "name": "",
        "topic": "",
        "params": "[]",
        "paramsType": "json",
        "payloadType": "json",
        "block": false,
        "x": 4430,
        "y": 3200,
        "wires": [
            [
                "c7a586de12bc1ade"
            ]
        ]
    },
    {
        "id": "7fcd1b69370fca7b",
        "type": "redis-command",
        "z": "654ea140.2275a8",
        "server": "f120eab2.0a60a8",
        "command": "hmset",
        "name": "",
        "topic": "",
        "params": "[]",
        "paramsType": "json",
        "payloadType": "json",
        "block": false,
        "x": 4430,
        "y": 3320,
        "wires": [
            [
                "a99583b0d5e50c21"
            ]
        ]
    },
    {
        "id": "be12f4b4268d35eb",
        "type": "redis-command",
        "z": "654ea140.2275a8",
        "server": "f120eab2.0a60a8",
        "command": "hgetall",
        "name": "",
        "topic": "myHash",
        "params": "{}",
        "paramsType": "json",
        "payloadType": "json",
        "block": false,
        "x": 4460,
        "y": 3380,
        "wires": [
            [
                "b059c51709b6e2af"
            ]
        ]
    },
    {
        "id": "6c01a0a6292930ba",
        "type": "redis-command",
        "z": "654ea140.2275a8",
        "server": "f120eab2.0a60a8",
        "command": "sadd",
        "name": "",
        "topic": "mySet",
        "params": "[\"memberA\",\"memberB\",\"memberC\"]",
        "paramsType": "json",
        "payloadType": "json",
        "block": false,
        "x": 3750,
        "y": 3440,
        "wires": [
            [
                "1f04c37b21652103"
            ]
        ]
    },
    {
        "id": "f77b83099f0b9381",
        "type": "redis-command",
        "z": "654ea140.2275a8",
        "server": "f120eab2.0a60a8",
        "command": "sismember",
        "name": "",
        "topic": "mySet",
        "params": "[\"memberA\"]",
        "paramsType": "json",
        "payloadType": "json",
        "block": false,
        "x": 3770,
        "y": 3500,
        "wires": [
            [
                "d0aa886cb4de2051"
            ]
        ]
    },
    {
        "id": "c06f5177a9014ced",
        "type": "redis-command",
        "z": "654ea140.2275a8",
        "server": "f120eab2.0a60a8",
        "command": "del",
        "name": "",
        "topic": "",
        "params": "[]",
        "paramsType": "json",
        "payloadType": "json",
        "block": false,
        "x": 4420,
        "y": 3680,
        "wires": [
            [
                "4bd8b134e167cc99"
            ]
        ]
    },
    {
        "id": "71bc08f8a0d2aef6",
        "type": "redis-command",
        "z": "654ea140.2275a8",
        "server": "f120eab2.0a60a8",
        "command": "set",
        "name": "set curstop",
        "topic": "",
        "params": "[]",
        "paramsType": "json",
        "payloadType": "json",
        "block": false,
        "x": 2710,
        "y": 3380,
        "wires": [
            []
        ]
    },
    {
        "id": "13c7c341b9053792",
        "type": "redis-command",
        "z": "654ea140.2275a8",
        "server": "f120eab2.0a60a8",
        "command": "set",
        "name": "set curorderid",
        "topic": "",
        "params": "[]",
        "paramsType": "json",
        "payloadType": "json",
        "block": false,
        "x": 2720,
        "y": 3420,
        "wires": [
            []
        ]
    },
    {
        "id": "cc36346be5ee3e37",
        "type": "redis-lua-script",
        "z": "654ea140.2275a8",
        "server": "f120eab2.0a60a8",
        "name": "test",
        "keyval": 0,
        "func": "local text = \"Hello World\"\nreturn text",
        "stored": true,
        "block": false,
        "x": 4410,
        "y": 3560,
        "wires": [
            [
                "04bcf3b3eeaf77f5"
            ]
        ]
    },
    {
        "id": "09ba52616f5c01c9",
        "type": "redis-lua-script",
        "z": "654ea140.2275a8",
        "server": "f120eab2.0a60a8",
        "name": "test2",
        "keyval": 0,
        "func": "local text = \"Hello2222 World2222\"\nreturn text",
        "stored": false,
        "block": false,
        "x": 4410,
        "y": 3620,
        "wires": [
            [
                "3ac423f8e7d82180"
            ]
        ]
    },
    {
        "id": "a8d40c5c97ade992",
        "type": "redis-instance",
        "z": "654ea140.2275a8",
        "server": "f120eab2.0a60a8",
        "name": "",
        "topic": "redis",
        "location": "flow",
        "x": 4430,
        "y": 2700,
        "wires": []
    },
    {
        "id": "02ca96ddf821f4a4",
        "type": "catch",
        "z": "38c422f8.b82bf6",
        "g": "65abc86145e37427",
        "name": "",
        "scope": null,
        "uncaught": false,
        "x": 1040,
        "y": 3040,
        "wires": [
            [
                "8991e2fdf9687fd0"
            ]
        ]
    },
    {
        "id": "8991e2fdf9687fd0",
        "type": "debug",
        "z": "38c422f8.b82bf6",
        "g": "65abc86145e37427",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "x": 1190,
        "y": 3040,
        "wires": []
    },
    {
        "id": "bddd617cfebb090c",
        "type": "inject",
        "z": "38c422f8.b82bf6",
        "g": "65abc86145e37427",
        "name": "start",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            },
            {
                "p": "botname",
                "v": "payload.botname",
                "vt": "msg"
            },
            {
                "p": "start",
                "v": "",
                "vt": "date"
            },
            {
                "p": "userid",
                "v": "d3fmoh2rVoVNgIcpLTFZBE0jHnI2",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "botlist:d3fmoh2rVoVNgIcpLTFZBE0jHnI2",
        "payload": "{}",
        "payloadType": "json",
        "x": 216,
        "y": 3220,
        "wires": [
            []
        ]
    },
    {
        "id": "c52cd9aeca05e5e6",
        "type": "trigger",
        "z": "38c422f8.b82bf6",
        "g": "65abc86145e37427",
        "name": "",
        "op1": "",
        "op2": "0",
        "op1type": "pay",
        "op2type": "str",
        "duration": "-500",
        "extend": false,
        "units": "ms",
        "reset": "",
        "bytopic": "all",
        "topic": "topic",
        "outputs": 1,
        "x": 266,
        "y": 3100,
        "wires": [
            [
                "5d66ac9385b01ea0"
            ]
        ]
    },
    {
        "id": "01fcc97b9515e9ab",
        "type": "comment",
        "z": "38c422f8.b82bf6",
        "g": "65abc86145e37427",
        "name": "Получаем список ботов пользователя",
        "info": "Получаем список ботов пользователя",
        "x": 420,
        "y": 2658,
        "wires": []
    },
    {
        "id": "ad4a60911a1403c9",
        "type": "inject",
        "z": "38c422f8.b82bf6",
        "g": "65abc86145e37427",
        "name": "stop",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "reset",
                "v": "true",
                "vt": "bool"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 396,
        "y": 3220,
        "wires": [
            []
        ]
    },
    {
        "id": "4688647e1b4eb199",
        "type": "split",
        "z": "38c422f8.b82bf6",
        "g": "65abc86145e37427",
        "name": "split",
        "splt": ",",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "x": 313,
        "y": 2699,
        "wires": [
            [
                "c62ed669afc2a0b4"
            ]
        ]
    },
    {
        "id": "e4c5f4b0c0253c3e",
        "type": "json",
        "z": "38c422f8.b82bf6",
        "g": "65abc86145e37427",
        "name": "",
        "property": "payload",
        "action": "",
        "pretty": true,
        "x": 316,
        "y": 2780,
        "wires": [
            [
                "4688647e1b4eb199"
            ]
        ]
    },
    {
        "id": "c62ed669afc2a0b4",
        "type": "function",
        "z": "38c422f8.b82bf6",
        "g": "65abc86145e37427",
        "name": "name +\"-settings\";",
        "func": "var a = msg.payload[1]+\"-settings\";\nvar ttpprefix = msg.payload[1]+\":ttp\";\n//node.warn(a);\n//node.send(msg,false);\nmsg.botname =  msg.payload[1];\nmsg.ttpprefix = ttpprefix;\n\nmsg.payload = [];\nmsg.topic = a;\n\nreturn msg;",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 733,
        "y": 2699,
        "wires": [
            [
                "9c375352d389551a"
            ],
            []
        ]
    },
    {
        "id": "c786044a4b5a935e",
        "type": "comment",
        "z": "38c422f8.b82bf6",
        "g": "65abc86145e37427",
        "name": "для каждого бота - получение данных",
        "info": "",
        "x": 803,
        "y": 2658,
        "wires": []
    },
    {
        "id": "f7c9c5304874e49e",
        "type": "json",
        "z": "38c422f8.b82bf6",
        "g": "65abc86145e37427",
        "name": "",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 693,
        "y": 2819,
        "wires": [
            [
                "01d50ca9cf2bba93"
            ]
        ]
    },
    {
        "id": "01d50ca9cf2bba93",
        "type": "function",
        "z": "38c422f8.b82bf6",
        "g": "65abc86145e37427",
        "name": "",
        "func": "let moneta = msg.payload.quotacoin + msg.payload.basecoin;\nmsg.topic = \"prices:\"+moneta;\nmsg.moneta = moneta;\nmsg.digitq =  msg.payload.digitq;\nmsg.digitprice =  msg.payload.digitprice;\nmsg.minprice =  msg.payload.minprice;\nmsg.ofsetbottom =  msg.payload.ofsetbottom;\nmsg.ofsettop =  msg.payload.ofsettop;\nmsg.minpriceforzakup =  msg.payload.minpriceforzakup;\n\nmsg.payload = [];\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 703,
        "y": 2879,
        "wires": [
            [
                "57475fdf9f9f60f2"
            ]
        ]
    },
    {
        "id": "8a2e3a0791a0d916",
        "type": "function",
        "z": "38c422f8.b82bf6",
        "g": "65abc86145e37427",
        "name": "",
        "func": "msg.price = msg.payload;\nmsg.payload = [];\n\nmsg.topic = msg.ttpprefix + \":busy\";\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 703,
        "y": 2999,
        "wires": [
            [
                "f4f9592af024d221"
            ]
        ]
    },
    {
        "id": "8cc7eb367f3a8fac",
        "type": "function",
        "z": "38c422f8.b82bf6",
        "g": "65abc86145e37427",
        "name": "",
        "func": "msg.busy = msg.payload;\nmsg.payload = [];\n\nmsg.topic = msg.ttpprefix + \":curorderid\";\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 703,
        "y": 3119,
        "wires": [
            [
                "b08147814835dc59"
            ]
        ]
    },
    {
        "id": "ff060b00ec82c8fc",
        "type": "function",
        "z": "38c422f8.b82bf6",
        "g": "65abc86145e37427",
        "name": "",
        "func": "msg.curorderid = msg.payload;\nmsg.payload = [];\n\nmsg.topic = msg.ttpprefix + \":curstop\";\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 703,
        "y": 3239,
        "wires": [
            [
                "43afd4da2f71c8a2"
            ]
        ]
    },
    {
        "id": "6028609c703356b7",
        "type": "function",
        "z": "38c422f8.b82bf6",
        "g": "65abc86145e37427",
        "name": "",
        "func": "msg.curstop = msg.payload;\nmsg.payload = [];\n\nmsg.topic = msg.ttpprefix + \":issell\";\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 703,
        "y": 3359,
        "wires": [
            [
                "e94df4c1a132c681"
            ]
        ]
    },
    {
        "id": "49a619c80eacebf1",
        "type": "function",
        "z": "38c422f8.b82bf6",
        "g": "65abc86145e37427",
        "name": "",
        "func": "msg.issell = msg.payload;\nmsg.payload = [];\n\nmsg.topic = msg.ttpprefix + \":quantity\";\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 703,
        "y": 3479,
        "wires": [
            [
                "e46edbf631e5f603"
            ]
        ]
    },
    {
        "id": "b72e8c7f528d0831",
        "type": "function",
        "z": "38c422f8.b82bf6",
        "g": "65abc86145e37427",
        "name": "",
        "func": "msg.quantity = msg.payload;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 703,
        "y": 3599,
        "wires": [
            [
                "b219a84fb8d4f2bd"
            ]
        ]
    },
    {
        "id": "b219a84fb8d4f2bd",
        "type": "switch",
        "z": "38c422f8.b82bf6",
        "g": "65abc86145e37427",
        "name": "quantity check",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "gt",
                "v": "0",
                "vt": "num"
            },
            {
                "t": "lte",
                "v": "0",
                "vt": "num"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 1040,
        "y": 2820,
        "wires": [
            [
                "f2a856ab0123a165"
            ],
            [
                "0700e48ebd404370"
            ]
        ]
    },
    {
        "id": "cd0b32fd35e3ed8e",
        "type": "comment",
        "z": "38c422f8.b82bf6",
        "g": "65abc86145e37427",
        "name": "ttp pilot",
        "info": "",
        "x": 1010,
        "y": 2781,
        "wires": []
    },
    {
        "id": "04417acfb5681c89",
        "type": "function",
        "z": "38c422f8.b82bf6",
        "g": "65abc86145e37427",
        "name": "Вычисление raschstopprice",
        "func": "msg.curstop = Number(msg.curstop);\nmsg.raschstopprice = Number((msg.price - msg.price / 100 * msg.ofsettop).toFixed(msg.digitprice));\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 1700,
        "y": 2701,
        "wires": [
            [
                "0d9d174a2c748ac9"
            ]
        ]
    },
    {
        "id": "0d9d174a2c748ac9",
        "type": "switch",
        "z": "38c422f8.b82bf6",
        "g": "65abc86145e37427",
        "name": "если raschstopprice > curstop",
        "property": "msg.raschstopprice",
        "propertyType": "msg",
        "rules": [
            {
                "t": "gt",
                "v": "curstop",
                "vt": "msg"
            },
            {
                "t": "lt",
                "v": "curstop",
                "vt": "msg"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 2,
        "x": 1990,
        "y": 2701,
        "wires": [
            [
                "ac687b2e90f5a6e0"
            ],
            [
                "68e35febb8b0d3a7"
            ]
        ]
    },
    {
        "id": "d806cfbe67853d5c",
        "type": "comment",
        "z": "38c422f8.b82bf6",
        "g": "65abc86145e37427",
        "name": "запускаем ТТП / передвигаем ордер",
        "info": "",
        "x": 2333,
        "y": 2661,
        "wires": []
    },
    {
        "id": "dd700a3347c72114",
        "type": "comment",
        "z": "38c422f8.b82bf6",
        "g": "65abc86145e37427",
        "name": "слушаем статус ордера",
        "info": "",
        "x": 2296,
        "y": 3180,
        "wires": []
    },
    {
        "id": "32819bdde4a1252f",
        "type": "switch",
        "z": "38c422f8.b82bf6",
        "g": "65abc86145e37427",
        "name": "curorderid > 0 check",
        "property": "curorderid",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "0",
                "vt": "num"
            },
            {
                "t": "neq",
                "v": "0",
                "vt": "num"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 2473,
        "y": 2695,
        "wires": [
            [
                "745b5be109936ded"
            ],
            [
                "03203220f9154eb1"
            ]
        ]
    },
    {
        "id": "745b5be109936ded",
        "type": "function",
        "z": "38c422f8.b82bf6",
        "g": "65abc86145e37427",
        "name": "stopsell order",
        "func": "function parseApiError(error) {\n\tif (error.body) {\n\t\ttry {\n\t\t\tvar resp = JSON.parse(error.body);\n\t\t\treturn resp.msg;\n\t\t} catch (error) {/* pass thru */ }\n\t}\n\treturn \"Unknown error. Status code: \" + error.statsCode;\n}\n\nlet LBinance = global.get(\"gBinance\");\n\n\nlet binance = new LBinance().options({\n\tAPIKEY: \"1mUrLnaTdDiUHWQ2drxlQPnr0MqaJevIwJaqnEJFi5JIHLdTwLxTbnbMzMm5dj7i\",\n\tAPISECRET: \"exqgFmgHcb4Fr13JI6pDIpMTBXRDqzgbTelDoEikKRvzVU5KbB3F9iq9GPP2Onjn\",\n\t\"reconnect\": false\n});\n\n\nlet priceb = parseFloat((msg.raschstopprice - msg.raschstopprice / 100 * msg.ofsetbottom).toFixed(msg.digitprice));\nlet stopprice = parseFloat(msg.raschstopprice);\n\nlet moneta = msg.moneta;\n\nlet quantity = parseFloat(msg.quantity);\n//node.warn(binance);\n\n\n\n\n binance.sell(moneta, quantity, priceb, { stopPrice: stopprice, type: \"STOP_LOSS_LIMIT\" }, function (err, resp) {\n          if (err) {\n            var errorMsg = parseApiError(err) + \", moneta:\" + moneta;\n            node.error(errorMsg, msg);\n            node.status({fill: \"red\", shape: \"ring\", text: errorMsg});\n            node.send(msg);\n          return;\n            \n          }\n          if (resp) {\n                        msg.orderid = resp.orderId;\n                        msg.curstop = stopprice;\n                        node.status({fill: \"green\", shape: \"ring\", text: resp.orderId});\n          }\n          //node.status({}); //clear status message\n\n          \n          node.send(msg);\n          return;\n        });\n\n    \n    \n\n\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 2709,
        "y": 2689,
        "wires": [
            [
                "8f3a882648aea9f9",
                "28c1e96f1f24aa80",
                "6b8035484dfbfa64"
            ]
        ],
        "inputLabels": [
            "orderid"
        ],
        "outputLabels": [
            "status"
        ],
        "icon": "font-awesome/fa-bolt"
    },
    {
        "id": "aed76f84102c42e9",
        "type": "comment",
        "z": "38c422f8.b82bf6",
        "g": "65abc86145e37427",
        "name": "стартуем ттп",
        "info": "",
        "x": 2699,
        "y": 2655,
        "wires": []
    },
    {
        "id": "c2952a37558ba43c",
        "type": "comment",
        "z": "38c422f8.b82bf6",
        "g": "65abc86145e37427",
        "name": "Передвигаем ордер",
        "info": "",
        "x": 2729,
        "y": 2856,
        "wires": []
    },
    {
        "id": "a042d1827f09adb9",
        "type": "function",
        "z": "38c422f8.b82bf6",
        "g": "65abc86145e37427",
        "name": "Let Free!",
        "func": "\nmsg.busy = \"0\";\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 3440,
        "y": 2689,
        "wires": [
            [
                "336f036a2466ce6c"
            ]
        ]
    },
    {
        "id": "03203220f9154eb1",
        "type": "function",
        "z": "38c422f8.b82bf6",
        "g": "65abc86145e37427",
        "name": "cansel order",
        "func": "function parseApiError(error) {\n  if (error.body) {\n    try {\n      var resp = JSON.parse(error.body);\n      return resp.msg;\n    } catch (error) {/* pass thru */}\n  }\n  return \"Unknown error. Status code: \"+error.statsCode;\n}\n\nlet LBinance = global.get(\"gBinance\");\n\n\nlet binance = new LBinance().options({\n    APIKEY: \"1mUrLnaTdDiUHWQ2drxlQPnr0MqaJevIwJaqnEJFi5JIHLdTwLxTbnbMzMm5dj7i\",\n    APISECRET: \"exqgFmgHcb4Fr13JI6pDIpMTBXRDqzgbTelDoEikKRvzVU5KbB3F9iq9GPP2Onjn\",\n    \"reconnect\": false\n});\n\nlet orderid = msg.curorderid;\nlet moneta = msg.moneta;\n//node.warn(binance);\n\n    binance.cancel(moneta, orderid, function (error, response) {\n                    if (error) {\n                        var errorMsg = parseApiError(error);\n                        errorMsg = errorMsg + \":\" + orderid;\n    \t\t            node.error(errorMsg);\n    \t            \tnode.status({ fill: \"red\", shape: \"ring\", text: errorMsg });\n    \t            \tnode.send(msg);\n    \t            \treturn;\n    \n                    }\n                    if (response) {\n                        \n                        node.send(msg);\n                        return;\n                    }\n                });\n\n            \n//msg.payload = \"qjson.status\";\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 2699,
        "y": 2890,
        "wires": [
            [
                "b0d7da571edc62ed",
                "6b8035484dfbfa64",
                "b4edba730c39373e"
            ]
        ],
        "inputLabels": [
            "orderid"
        ],
        "outputLabels": [
            "status"
        ],
        "icon": "node-red-contrib-binance/binance.png"
    },
    {
        "id": "8f3a882648aea9f9",
        "type": "function",
        "z": "38c422f8.b82bf6",
        "g": "65abc86145e37427",
        "name": "parse order id",
        "func": "\nmsg.payload = [msg.ttpprefix+\":curorderid\", msg.orderid];\nmsg.topic = \"\";\n\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 2909,
        "y": 2689,
        "wires": [
            [
                "46e6a94f837f5191"
            ]
        ],
        "inputLabels": [
            "orderid"
        ],
        "outputLabels": [
            "status"
        ],
        "icon": "node-red-contrib-binance/binance.png"
    },
    {
        "id": "28c1e96f1f24aa80",
        "type": "function",
        "z": "38c422f8.b82bf6",
        "g": "65abc86145e37427",
        "name": "parse curstop",
        "func": "\nmsg.payload = [msg.ttpprefix+\":curstop\", msg.curstop];\nmsg.topic = \"\";\n\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 2910,
        "y": 2736,
        "wires": [
            [
                "ce733a2821cc60fd"
            ]
        ],
        "inputLabels": [
            "orderid"
        ],
        "outputLabels": [
            "status"
        ],
        "icon": "node-red-contrib-binance/binance.png"
    },
    {
        "id": "e08c432df06f1406",
        "type": "debug",
        "z": "38c422f8.b82bf6",
        "g": "65abc86145e37427",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": true,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "payload",
        "statusType": "auto",
        "x": 4010,
        "y": 2749,
        "wires": []
    },
    {
        "id": "b0d7da571edc62ed",
        "type": "function",
        "z": "38c422f8.b82bf6",
        "g": "65abc86145e37427",
        "name": "stopsell order",
        "func": "function parseApiError(error) {\n\tif (error.body) {\n\t\ttry {\n\t\t\tvar resp = JSON.parse(error.body);\n\t\t\treturn resp.msg;\n\t\t} catch (error) {/* pass thru */ }\n\t}\n\treturn \"Unknown error. Status code: \" + error.statsCode;\n}\n\nlet LBinance = global.get(\"gBinance\");\n\n\nlet binance = new LBinance().options({\n\tAPIKEY: \"1mUrLnaTdDiUHWQ2drxlQPnr0MqaJevIwJaqnEJFi5JIHLdTwLxTbnbMzMm5dj7i\",\n\tAPISECRET: \"exqgFmgHcb4Fr13JI6pDIpMTBXRDqzgbTelDoEikKRvzVU5KbB3F9iq9GPP2Onjn\",\n\t\"reconnect\": false\n});\n\n\nlet priceb = parseFloat((msg.raschstopprice - msg.raschstopprice / 100 * msg.ofsetbottom).toFixed(msg.digitprice));\nlet stopprice = parseFloat(msg.raschstopprice);\n\nlet moneta = msg.moneta;\n\nlet quantity = parseFloat(msg.quantity);\n//node.warn(binance);\n\n\n\n\n binance.sell(moneta, quantity, priceb, { stopPrice: stopprice, type: \"STOP_LOSS_LIMIT\" }, function (err, resp) {\n          if (err) {\n            var errorMsg = parseApiError(err);\n            node.error(errorMsg, msg);\n            node.status({fill: \"red\", shape: \"ring\", text: errorMsg});\n            \n          }\n          if (resp) {\n                        msg.orderid = resp.orderId;\n                        msg.curstop = stopprice;\n          }\n          node.status({}); //clear status message\n\n          \n          node.send(msg);\n          return;\n        });\n\n\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 2889,
        "y": 2890,
        "wires": [
            [
                "1dfa15c8c74befdf",
                "ce525bcc40a8ad16"
            ]
        ],
        "inputLabels": [
            "orderid"
        ],
        "outputLabels": [
            "status"
        ],
        "icon": "font-awesome/fa-bolt"
    },
    {
        "id": "1dfa15c8c74befdf",
        "type": "function",
        "z": "38c422f8.b82bf6",
        "g": "65abc86145e37427",
        "name": "parse order id",
        "func": "\nmsg.payload = [msg.ttpprefix+\":curorderid\", msg.orderid];\nmsg.topic = \"\";\n\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 3109,
        "y": 2890,
        "wires": [
            [
                "c25efd1ae2c4b1d7"
            ]
        ],
        "inputLabels": [
            "orderid"
        ],
        "outputLabels": [
            "status"
        ],
        "icon": "node-red-contrib-binance/binance.png"
    },
    {
        "id": "ce525bcc40a8ad16",
        "type": "function",
        "z": "38c422f8.b82bf6",
        "g": "65abc86145e37427",
        "name": "parse curstop",
        "func": "\nmsg.payload = [msg.ttpprefix+\":curstop\", msg.curstop];\nmsg.topic = \"\";\n\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 3109,
        "y": 2850,
        "wires": [
            [
                "692595dc34ca3716"
            ]
        ],
        "inputLabels": [
            "orderid"
        ],
        "outputLabels": [
            "status"
        ],
        "icon": "node-red-contrib-binance/binance.png"
    },
    {
        "id": "c00547ab3dee8cd8",
        "type": "switch",
        "z": "38c422f8.b82bf6",
        "g": "65abc86145e37427",
        "name": "",
        "property": "st",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "FILLED",
                "vt": "str"
            },
            {
                "t": "neq",
                "v": "FILLED",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 2493,
        "y": 3221,
        "wires": [
            [
                "c97b45dc2cc2c1a9"
            ],
            []
        ]
    },
    {
        "id": "c97b45dc2cc2c1a9",
        "type": "function",
        "z": "38c422f8.b82bf6",
        "g": "65abc86145e37427",
        "name": "prepare issel 1",
        "func": "\nmsg.payload = [msg.ttpprefix+\":issell\", \"1\"];\nmsg.topic = \"\";\n\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 2663,
        "y": 3214,
        "wires": [
            [
                "13dd6f8a558abb83"
            ]
        ],
        "inputLabels": [
            "orderid"
        ],
        "outputLabels": [
            "status"
        ],
        "icon": "node-red-contrib-binance/binance.png"
    },
    {
        "id": "5d66ac9385b01ea0",
        "type": "delay",
        "z": "38c422f8.b82bf6",
        "g": "65abc86145e37427",
        "name": "",
        "pauseType": "rate",
        "timeout": "5",
        "timeoutUnits": "seconds",
        "rate": "2",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": true,
        "x": 476,
        "y": 3100,
        "wires": [
            [
                "76c93ffb5cad7f1f"
            ]
        ]
    },
    {
        "id": "6b8035484dfbfa64",
        "type": "debug",
        "z": "38c422f8.b82bf6",
        "g": "65abc86145e37427",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 2890,
        "y": 3000,
        "wires": []
    },
    {
        "id": "a307da0f1e6f2f6c",
        "type": "function",
        "z": "38c422f8.b82bf6",
        "g": "65abc86145e37427",
        "name": "pepare busy 0",
        "func": "\nmsg.payload = [msg.ttpprefix+\":busy\", \"0\"];\nmsg.topic = \"\";\n\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 3800,
        "y": 2689,
        "wires": [
            [
                "6dcf9aa5f7d0b71f",
                "e08c432df06f1406"
            ]
        ],
        "inputLabels": [
            "orderid"
        ],
        "outputLabels": [
            "status"
        ],
        "icon": "node-red-contrib-binance/binance.png"
    },
    {
        "id": "b4edba730c39373e",
        "type": "function",
        "z": "38c422f8.b82bf6",
        "g": "65abc86145e37427",
        "name": "prepare order id 0",
        "func": "\nmsg.payload = [msg.ttpprefix+\":curorderid\", \"0\"];\nmsg.topic = \"\";\n\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 2899,
        "y": 2936,
        "wires": [
            [
                "3e41f820bb89714a"
            ]
        ],
        "inputLabels": [
            "orderid"
        ],
        "outputLabels": [
            "status"
        ],
        "icon": "node-red-contrib-binance/binance.png"
    },
    {
        "id": "de3f9b07e95ddd36",
        "type": "switch",
        "z": "38c422f8.b82bf6",
        "g": "65abc86145e37427",
        "name": "busy check",
        "property": "busy",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "0",
                "vt": "str"
            },
            {
                "t": "neq",
                "v": "0",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 1279,
        "y": 2707,
        "wires": [
            [
                "1de9b5ec745f8bb3"
            ],
            []
        ]
    },
    {
        "id": "7246563096b8b5a5",
        "type": "function",
        "z": "38c422f8.b82bf6",
        "g": "65abc86145e37427",
        "name": "prepare busy 1",
        "func": "\nmsg.payload = [msg.ttpprefix+\":busy\", \"1\"];\nmsg.topic = \"\";\n\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 2263,
        "y": 2821,
        "wires": [
            [
                "6e8a19435159f0e8",
                "9f0a67199929ef6e"
            ]
        ],
        "inputLabels": [
            "orderid"
        ],
        "outputLabels": [
            "status"
        ],
        "icon": "node-red-contrib-binance/binance.png"
    },
    {
        "id": "0700e48ebd404370",
        "type": "function",
        "z": "38c422f8.b82bf6",
        "g": "65abc86145e37427",
        "name": "Let Free!",
        "func": "msg.busy = \"0\";\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 1280,
        "y": 2920,
        "wires": [
            [
                "0f53143be5e10912"
            ]
        ]
    },
    {
        "id": "0f53143be5e10912",
        "type": "function",
        "z": "38c422f8.b82bf6",
        "g": "65abc86145e37427",
        "name": "pepare busy 0",
        "func": "\nmsg.payload = [msg.ttpprefix+\":busy\", \"0\"];\nmsg.topic = \"\";\n\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 1440,
        "y": 2920,
        "wires": [
            [
                "299557d0dc38653b"
            ]
        ],
        "inputLabels": [
            "orderid"
        ],
        "outputLabels": [
            "status"
        ],
        "icon": "node-red-contrib-binance/binance.png"
    },
    {
        "id": "1de9b5ec745f8bb3",
        "type": "delay",
        "z": "38c422f8.b82bf6",
        "g": "65abc86145e37427",
        "name": "",
        "pauseType": "rate",
        "timeout": "5",
        "timeoutUnits": "seconds",
        "rate": "2",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": true,
        "x": 1450,
        "y": 2701,
        "wires": [
            [
                "04417acfb5681c89"
            ]
        ]
    },
    {
        "id": "336f036a2466ce6c",
        "type": "delay",
        "z": "38c422f8.b82bf6",
        "g": "65abc86145e37427",
        "name": "",
        "pauseType": "delay",
        "timeout": "25",
        "timeoutUnits": "milliseconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "x": 3610,
        "y": 2689,
        "wires": [
            [
                "a307da0f1e6f2f6c"
            ]
        ]
    },
    {
        "id": "68e35febb8b0d3a7",
        "type": "delay",
        "z": "38c422f8.b82bf6",
        "g": "65abc86145e37427",
        "name": "",
        "pauseType": "delay",
        "timeout": "400",
        "timeoutUnits": "milliseconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "x": 2073,
        "y": 3221,
        "wires": [
            [
                "e9becf0373ab58d8"
            ]
        ]
    },
    {
        "id": "ac687b2e90f5a6e0",
        "type": "function",
        "z": "38c422f8.b82bf6",
        "g": "65abc86145e37427",
        "name": "Let Busy!",
        "func": "msg.busy = \"1\";\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 2244,
        "y": 2695,
        "wires": [
            [
                "7246563096b8b5a5",
                "32819bdde4a1252f"
            ]
        ]
    },
    {
        "id": "9f0a67199929ef6e",
        "type": "debug",
        "z": "38c422f8.b82bf6",
        "g": "65abc86145e37427",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 2450,
        "y": 2780,
        "wires": []
    },
    {
        "id": "e9becf0373ab58d8",
        "type": "function",
        "z": "38c422f8.b82bf6",
        "g": "65abc86145e37427",
        "name": "",
        "func": "let orderid = msg.curorderid;\nlet moneta = msg.moneta;\nlet userid = msg.userid;\n\n\nmsg.topic = \"orders-status-\" + userid + \":\" + moneta +\":\"+orderid;\nmsg.payload = [];\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 2170,
        "y": 3540,
        "wires": [
            [
                "c49aaa1f81e85c6b"
            ]
        ]
    },
    {
        "id": "9de0ad9a47f01fc2",
        "type": "debug",
        "z": "38c422f8.b82bf6",
        "g": "65abc86145e37427",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": true,
        "tostatus": true,
        "complete": "true",
        "targetType": "full",
        "statusVal": "payload",
        "statusType": "auto",
        "x": 2730,
        "y": 3540,
        "wires": []
    },
    {
        "id": "d3e550c14491e618",
        "type": "inject",
        "z": "38c422f8.b82bf6",
        "g": "65abc86145e37427",
        "name": "",
        "props": [
            {
                "p": "curorderid",
                "v": "2274007",
                "vt": "str"
            },
            {
                "p": "userid",
                "v": "d3fmoh2rVoVNgIcpLTFZBE0jHnI2",
                "vt": "str"
            },
            {
                "p": "moneta",
                "v": "SUNUSDT",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 1980,
        "y": 3540,
        "wires": [
            [
                "e9becf0373ab58d8"
            ]
        ]
    },
    {
        "id": "9d11ebd49f3516cb",
        "type": "function",
        "z": "38c422f8.b82bf6",
        "g": "65abc86145e37427",
        "name": "",
        "func": "msg.st = msg.payload;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 2560,
        "y": 3450,
        "wires": [
            [
                "9de0ad9a47f01fc2",
                "c00547ab3dee8cd8"
            ]
        ]
    },
    {
        "id": "f2a856ab0123a165",
        "type": "switch",
        "z": "38c422f8.b82bf6",
        "g": "65abc86145e37427",
        "name": "check issel",
        "property": "issell",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "0",
                "vt": "num"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 1190,
        "y": 2760,
        "wires": [
            [
                "de3f9b07e95ddd36"
            ]
        ]
    },
    {
        "id": "133e5dc32e1851e6",
        "type": "function",
        "z": "38c422f8.b82bf6",
        "g": "65abc86145e37427",
        "name": "",
        "func": "\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 1910,
        "y": 2620,
        "wires": [
            [
                "6f9f36c263f31e80"
            ]
        ]
    },
    {
        "id": "6f9f36c263f31e80",
        "type": "debug",
        "z": "38c422f8.b82bf6",
        "g": "65abc86145e37427",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 2080,
        "y": 2620,
        "wires": []
    },
    {
        "id": "76c93ffb5cad7f1f",
        "type": "redis-command",
        "z": "38c422f8.b82bf6",
        "g": "65abc86145e37427",
        "server": "f120eab2.0a60a8",
        "command": "GET",
        "name": "get mybots",
        "topic": "",
        "params": "[]",
        "paramsType": "json",
        "payloadType": "json",
        "block": false,
        "x": 336,
        "y": 2860,
        "wires": [
            [
                "e4c5f4b0c0253c3e"
            ]
        ]
    },
    {
        "id": "9c375352d389551a",
        "type": "redis-command",
        "z": "38c422f8.b82bf6",
        "g": "65abc86145e37427",
        "server": "f120eab2.0a60a8",
        "command": "GET",
        "name": "get bot settings",
        "topic": "msg.topic",
        "params": "[]",
        "paramsType": "json",
        "payloadType": "json",
        "block": false,
        "x": 723,
        "y": 2759,
        "wires": [
            [
                "f7c9c5304874e49e"
            ]
        ]
    },
    {
        "id": "57475fdf9f9f60f2",
        "type": "redis-command",
        "z": "38c422f8.b82bf6",
        "g": "65abc86145e37427",
        "server": "f120eab2.0a60a8",
        "command": "GET",
        "name": "get currentprice",
        "topic": "msg.topic",
        "params": "[]",
        "paramsType": "json",
        "payloadType": "json",
        "block": false,
        "x": 723,
        "y": 2939,
        "wires": [
            [
                "8a2e3a0791a0d916"
            ]
        ]
    },
    {
        "id": "f4f9592af024d221",
        "type": "redis-command",
        "z": "38c422f8.b82bf6",
        "g": "65abc86145e37427",
        "server": "f120eab2.0a60a8",
        "command": "GET",
        "name": "get ttp:busy",
        "topic": "msg.topic",
        "params": "[]",
        "paramsType": "json",
        "payloadType": "json",
        "block": false,
        "x": 713,
        "y": 3059,
        "wires": [
            [
                "8cc7eb367f3a8fac"
            ]
        ]
    },
    {
        "id": "b08147814835dc59",
        "type": "redis-command",
        "z": "38c422f8.b82bf6",
        "g": "65abc86145e37427",
        "server": "f120eab2.0a60a8",
        "command": "GET",
        "name": "get ttp:curorderid",
        "topic": "msg.topic",
        "params": "[]",
        "paramsType": "json",
        "payloadType": "json",
        "block": false,
        "x": 733,
        "y": 3179,
        "wires": [
            [
                "ff060b00ec82c8fc"
            ]
        ]
    },
    {
        "id": "43afd4da2f71c8a2",
        "type": "redis-command",
        "z": "38c422f8.b82bf6",
        "g": "65abc86145e37427",
        "server": "f120eab2.0a60a8",
        "command": "GET",
        "name": "get ttp:curstop",
        "topic": "msg.topic",
        "params": "[]",
        "paramsType": "json",
        "payloadType": "json",
        "block": false,
        "x": 723,
        "y": 3299,
        "wires": [
            [
                "6028609c703356b7"
            ]
        ]
    },
    {
        "id": "e94df4c1a132c681",
        "type": "redis-command",
        "z": "38c422f8.b82bf6",
        "g": "65abc86145e37427",
        "server": "f120eab2.0a60a8",
        "command": "GET",
        "name": "get ttp:issell",
        "topic": "msg.topic",
        "params": "[]",
        "paramsType": "json",
        "payloadType": "json",
        "block": false,
        "x": 713,
        "y": 3419,
        "wires": [
            [
                "49a619c80eacebf1"
            ]
        ]
    },
    {
        "id": "e46edbf631e5f603",
        "type": "redis-command",
        "z": "38c422f8.b82bf6",
        "g": "65abc86145e37427",
        "server": "f120eab2.0a60a8",
        "command": "GET",
        "name": "get ttp:quantity",
        "topic": "msg.topic",
        "params": "[]",
        "paramsType": "json",
        "payloadType": "json",
        "block": false,
        "x": 723,
        "y": 3539,
        "wires": [
            [
                "b72e8c7f528d0831"
            ]
        ]
    },
    {
        "id": "46e6a94f837f5191",
        "type": "redis-command",
        "z": "38c422f8.b82bf6",
        "g": "65abc86145e37427",
        "server": "f120eab2.0a60a8",
        "command": "set",
        "name": "set curorderid",
        "topic": "",
        "params": "[]",
        "paramsType": "json",
        "payloadType": "json",
        "block": false,
        "x": 3092,
        "y": 2689,
        "wires": [
            [
                "a042d1827f09adb9"
            ]
        ]
    },
    {
        "id": "ce733a2821cc60fd",
        "type": "redis-command",
        "z": "38c422f8.b82bf6",
        "g": "65abc86145e37427",
        "server": "f120eab2.0a60a8",
        "command": "set",
        "name": "set curstop",
        "topic": "",
        "params": "[]",
        "paramsType": "json",
        "payloadType": "json",
        "block": false,
        "x": 3083,
        "y": 2736,
        "wires": [
            []
        ]
    },
    {
        "id": "c25efd1ae2c4b1d7",
        "type": "redis-command",
        "z": "38c422f8.b82bf6",
        "g": "65abc86145e37427",
        "server": "f120eab2.0a60a8",
        "command": "set",
        "name": "set curorderid",
        "topic": "",
        "params": "[]",
        "paramsType": "json",
        "payloadType": "json",
        "block": false,
        "x": 3292,
        "y": 2890,
        "wires": [
            [
                "a042d1827f09adb9"
            ]
        ]
    },
    {
        "id": "692595dc34ca3716",
        "type": "redis-command",
        "z": "38c422f8.b82bf6",
        "g": "65abc86145e37427",
        "server": "f120eab2.0a60a8",
        "command": "set",
        "name": "set curstop",
        "topic": "",
        "params": "[]",
        "paramsType": "json",
        "payloadType": "json",
        "block": false,
        "x": 3282,
        "y": 2850,
        "wires": [
            []
        ]
    },
    {
        "id": "13dd6f8a558abb83",
        "type": "redis-command",
        "z": "38c422f8.b82bf6",
        "g": "65abc86145e37427",
        "server": "f120eab2.0a60a8",
        "command": "set",
        "name": "set issell 1",
        "topic": "",
        "params": "[]",
        "paramsType": "json",
        "payloadType": "json",
        "block": false,
        "x": 2853,
        "y": 3214,
        "wires": [
            []
        ]
    },
    {
        "id": "6dcf9aa5f7d0b71f",
        "type": "redis-command",
        "z": "38c422f8.b82bf6",
        "g": "65abc86145e37427",
        "server": "f120eab2.0a60a8",
        "command": "set",
        "name": "set busy 0",
        "topic": "",
        "params": "[]",
        "paramsType": "json",
        "payloadType": "json",
        "block": false,
        "x": 3990,
        "y": 2689,
        "wires": [
            []
        ]
    },
    {
        "id": "3e41f820bb89714a",
        "type": "redis-command",
        "z": "38c422f8.b82bf6",
        "g": "65abc86145e37427",
        "server": "f120eab2.0a60a8",
        "command": "set",
        "name": "set curorderid 0",
        "topic": "",
        "params": "[]",
        "paramsType": "json",
        "payloadType": "json",
        "block": false,
        "x": 3129,
        "y": 2936,
        "wires": [
            []
        ]
    },
    {
        "id": "6e8a19435159f0e8",
        "type": "redis-command",
        "z": "38c422f8.b82bf6",
        "g": "65abc86145e37427",
        "server": "f120eab2.0a60a8",
        "command": "set",
        "name": "set busy 1",
        "topic": "",
        "params": "[]",
        "paramsType": "json",
        "payloadType": "json",
        "block": false,
        "x": 2453,
        "y": 2821,
        "wires": [
            []
        ]
    },
    {
        "id": "299557d0dc38653b",
        "type": "redis-command",
        "z": "38c422f8.b82bf6",
        "g": "65abc86145e37427",
        "server": "f120eab2.0a60a8",
        "command": "set",
        "name": "set busy 0",
        "topic": "",
        "params": "[]",
        "paramsType": "json",
        "payloadType": "json",
        "block": false,
        "x": 1610,
        "y": 2921,
        "wires": [
            []
        ]
    },
    {
        "id": "c49aaa1f81e85c6b",
        "type": "redis-command",
        "z": "38c422f8.b82bf6",
        "g": "65abc86145e37427",
        "server": "f120eab2.0a60a8",
        "command": "GET",
        "name": "get order status",
        "topic": "msg.topic",
        "params": "[]",
        "paramsType": "json",
        "payloadType": "json",
        "block": false,
        "x": 2340,
        "y": 3540,
        "wires": [
            [
                "9d11ebd49f3516cb"
            ]
        ]
    }
]