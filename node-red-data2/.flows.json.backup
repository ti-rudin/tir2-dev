[
    {
        "id": "5df15275.2888ec",
        "type": "tab",
        "label": "MAIN",
        "disabled": false,
        "info": "нормально прописать логирование\nбэктест\nмежду этажами не знает какое ордер проверять?\nнаращивание ттп\nпроскальзывание ттп\n\nдребезг при выставлении/отмене buy ордеров\nрегистрация сделки\nпроверка этажа\nдописать ордерэкзек на ттп"
    },
    {
        "id": "2a761808.610238",
        "type": "tab",
        "label": "TTP",
        "disabled": false,
        "info": ""
    },
    {
        "id": "901cd11f1c81ce5d",
        "type": "tab",
        "label": "PubSub CORE",
        "disabled": false,
        "info": ""
    },
    {
        "id": "5f98db3a.7ab21c",
        "type": "tab",
        "label": "API",
        "disabled": false,
        "info": ""
    },
    {
        "id": "654ea140.2275a8",
        "type": "tab",
        "label": "heap",
        "disabled": true,
        "info": ""
    },
    {
        "id": "ef9c825cf92ee31b",
        "type": "tab",
        "label": "sandbox",
        "disabled": true,
        "info": ""
    },
    {
        "id": "aa608523e76bb32e",
        "type": "tab",
        "label": "Flow 1",
        "disabled": true,
        "info": ""
    },
    {
        "id": "476b070518efd452",
        "type": "tab",
        "label": "Flow 2 ttp",
        "disabled": true,
        "info": ""
    },
    {
        "id": "90fc9ad8367cb513",
        "type": "subflow",
        "name": "floor check",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 40,
                "y": 40,
                "wires": [
                    {
                        "id": "7d43d6c58501d4d2"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 680,
                "y": 40,
                "wires": [
                    {
                        "id": "cf818f1f6ec91c1b",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [],
        "meta": {},
        "color": "#DDAA99"
    },
    {
        "id": "cde16a2385b7b659",
        "type": "subflow",
        "name": "floor service",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 40,
                "y": 40,
                "wires": [
                    {
                        "id": "88bc4eddafd64975"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 380,
                "y": 40,
                "wires": [
                    {
                        "id": "8c8e6e2242d53271",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [],
        "meta": {},
        "color": "#DDAA99"
    },
    {
        "id": "3c980e5965444d95",
        "type": "subflow",
        "name": "update_data",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 50,
                "y": 30,
                "wires": [
                    {
                        "id": "b41f1cae0fda56f6"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 160,
                "y": 30,
                "wires": [
                    {
                        "id": "1cfdac89cf38a974",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [],
        "meta": {},
        "color": "#DDAA99"
    },
    {
        "id": "79e296b2.11a2d8",
        "type": "group",
        "z": "5f98db3a.7ab21c",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "1adeb6d2.0028b1",
            "174c55c9.364c72",
            "af87984e.38efa8",
            "af6bd09e.c7c798",
            "9a835f6c.6a1ab"
        ],
        "x": 1694,
        "y": 419,
        "w": 632,
        "h": 162
    },
    {
        "id": "3684cd36.8432c2",
        "type": "group",
        "z": "654ea140.2275a8",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "d9186e74.22817",
            "389f73e5.59ca9c",
            "95dd2e2c.06eea",
            "855d1e5e.112688",
            "1bb1a9a2.c72076",
            "5c14e61c.17df1",
            "10eab9fb.e22636",
            "a003933f.68583",
            "8d1c9d05.67e5e8"
        ],
        "x": 94,
        "y": 139
    },
    {
        "id": "4bf7491f.8e70b",
        "type": "group",
        "z": "5f98db3a.7ab21c",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "eb0ebfc5.9889a",
            "6868e3af.6c4b4c",
            "6526e141.43af9",
            "eab25c49.10d9c8",
            "afaf3a2c.646c88",
            "9018737c.12e188",
            "81a608ac.0eeab8",
            "d615849.c726078",
            "04c874ce359ca023"
        ],
        "x": -6,
        "y": 719,
        "w": 1612,
        "h": 122
    },
    {
        "id": "8ff1d3c1.b9bf5",
        "type": "group",
        "z": "5f98db3a.7ab21c",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "130f3240.00961e",
            "f4452587.561d48",
            "6b7c6b19.00a204",
            "b1193833.175118",
            "efe6ca9d.d20898",
            "2ccabce5.3df754",
            "307f6fe7.76709",
            "f83aa4a.5b36658",
            "b5f725fd.240e98",
            "f6fb5868.e9bd18",
            "ec0d7b62.22bf98",
            "607a1476.9d2f3c",
            "d8222377.a5f0c",
            "f9b6f483.e38838",
            "301639c.27435c6",
            "7c3b4244.df47fc",
            "d73dab1c.a64828",
            "8c2b136a.c18c",
            "bb1ad3fd.e2d78",
            "9a627e02.c4ed6",
            "960e13d0.f7b41",
            "bf190e9d.225ad",
            "13c65b3e.750f95"
        ],
        "x": 94,
        "y": 1839,
        "w": 1422,
        "h": 422
    },
    {
        "id": "a0a5df595c9dd619",
        "type": "group",
        "z": "5f98db3a.7ab21c",
        "name": "Functions",
        "style": {
            "fill": "#3f3f3f",
            "label": true,
            "color": "#ffffff"
        },
        "nodes": [
            "e6ec9254f36610c0",
            "25f5507bc50a674d",
            "0046aff6b2b50e2e",
            "dc0f18c849449aed",
            "efc4f70eea514ec7",
            "dabee9685cb54b6d",
            "1e7b29c971fa62f5",
            "94cc69cd5a219c7d",
            "0fa5699070a6108e",
            "296c00e5d3e99fbb",
            "9c05c136a91dbfdf",
            "243c1bf582b64002",
            "b760680d27a6dd1d",
            "1f4861ade1a88327",
            "382a503f4e67ab59",
            "2f422e4d0ce76250",
            "3ea20577e61d637e",
            "41032c7d5c5dd176",
            "b7aba5b37ed37139",
            "70ed2b2d70d9944d",
            "246eff8809325a29",
            "c643f8c7edc72be1",
            "e42a384d2534d732",
            "c00bedacd35da1c0",
            "7a5997cacf7a8bce",
            "bf6e252fdcd88a55",
            "029f8854d99d2799",
            "696678b09fed07b3",
            "ccc3aeede3d8a8b3",
            "12b0d6644ffae05b",
            "65f41478d829a80f",
            "475e4953b0e1f1d3",
            "7d6a7893273afcaa",
            "5b4a4b752fd5b8ce",
            "50d957a47610c2d0",
            "d3d2d3d7a6bbdff7",
            "3ef68805d9b584b8",
            "7c08b0b5b7bcfd86",
            "b18e0afd2ba78b89",
            "18a329d0d3f925a9",
            "c6f57dbe2564edbd",
            "a7d6b85bafb33975",
            "a713b8aa07e16e63",
            "dd10f10ea4f57a40",
            "8812bbd571059ab4",
            "c012203851d0ebcd",
            "3bef7797c26b1a5f",
            "c154464254f3387d",
            "be9d5b5c3682927e",
            "35682148fb7efa9b",
            "95fb43b5354257c0",
            "c0646124a302aa2c",
            "8746db723c6bc2f6",
            "1e82a89aecf97004",
            "7d955c944482dd1f",
            "a919a353f7b0be87",
            "1fe131c4d12aa0bf",
            "20fb3198225f6a9e",
            "0af2f0d1357e3a82",
            "a3dce78903158487",
            "bbe4e1e92aa2f964",
            "2b492f081698596f",
            "a26a29ba43723e01",
            "c3289de2ea50e5ea",
            "1b8e8f2b9e955bc3",
            "9a443f63d0615ef9",
            "447c87dceb07fc6e",
            "dc41b6b6c1974b34",
            "cc793ccb2692b6f7",
            "184f6029b46bff83",
            "a387bc9ca753da20",
            "e2bef8f03e88fbc4",
            "74dfccbf45336d82",
            "426d2443aff4e59c",
            "8d958d67db6f443f",
            "2c2b920d47617035",
            "c83061d2301328bd",
            "f86ec00ad5b25698",
            "cba8e515781d3119",
            "2a1dbc968d324ddf"
        ],
        "x": 34,
        "y": 19,
        "w": 1552,
        "h": 682
    },
    {
        "id": "89e4eb3d636bee6a",
        "type": "group",
        "z": "5df15275.2888ec",
        "style": {
            "stroke": "#2e333a",
            "stroke-opacity": "1",
            "fill": "#383c45",
            "fill-opacity": "0.5",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "133c3e4a.687a62",
            "a7ef7b74.1301e8",
            "9f82a757.25f3d",
            "51b45a57.49dad4",
            "51350500.94f214",
            "1d3cd462.fdc43c",
            "283c3766.823b68",
            "e8fc4296.04f04",
            "ab58eb0c.082c28",
            "1dda6867.b90808",
            "c57e23b7fabe24c4"
        ],
        "x": 2534,
        "y": 879,
        "w": 992,
        "h": 202
    },
    {
        "id": "071ea57d613d087c",
        "type": "group",
        "z": "5df15275.2888ec",
        "style": {
            "stroke": "#2e333a",
            "stroke-opacity": "1",
            "fill": "#383c45",
            "fill-opacity": "0.5",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "7ee8ada7.9818bc",
            "e0440623.2ec6e",
            "a359f524.2e00e8",
            "cf20b67b.cbc6e",
            "a0142b1a.f25d9",
            "941fc9d2.76b05",
            "8040b017.7a26f8",
            "189b2b68.7c485d",
            "842e37da.0d09"
        ],
        "x": 2654,
        "y": 1139,
        "w": 892,
        "h": 202
    },
    {
        "id": "e83aa13614517c81",
        "type": "group",
        "z": "5df15275.2888ec",
        "style": {
            "stroke": "#2e333a",
            "stroke-opacity": "1",
            "fill": "#383c45",
            "fill-opacity": "0.5",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "9a0212b.22ad2f",
            "ba11b816.73cd58",
            "539b4f99.508ec8",
            "82b5feb8.b8894",
            "61f763b0.65d2b4",
            "43e93874.b7141"
        ],
        "x": 2274,
        "y": 519,
        "w": 592,
        "h": 122
    },
    {
        "id": "1ce3921709fe3854",
        "type": "group",
        "z": "5f98db3a.7ab21c",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "21cd38c62816a61a",
            "706ef63f71911a28",
            "c3c8988a2d41da9d",
            "dafb284cdbee5b85",
            "069368e0e41b2930",
            "7d60ad5d2b1469ca",
            "7702b10795ca03ab",
            "bc33c7343d313967",
            "6ad6229364d77d98",
            "e4417424e3402b18",
            "9b1329708a558923",
            "fcdb9a4daa60f79c",
            "7bf553b6ac41dbff",
            "15d00d9b61e5f412",
            "6f9323097fd2040a",
            "98598b6ee6e8c253",
            "a70d36fb58746ff1",
            "2f7973fbc8c3e5fd",
            "787ee7eacaa0bf2f",
            "895a95157b57f221",
            "527f5893eeafc366"
        ],
        "x": 2554,
        "y": 39,
        "w": 1052,
        "h": 502
    },
    {
        "id": "f8a5c66461864831",
        "type": "group",
        "z": "5df15275.2888ec",
        "name": "",
        "style": {
            "label": true,
            "fill": "#3f5787",
            "fill-opacity": "0.37"
        },
        "nodes": [
            "6eeb48f31cdc5453",
            "cc6dddd66c6674e8",
            "3b0849514abc86d6",
            "eebc64656127b52b",
            "b289a42dbd554719",
            "3e4dcaaa699a170c",
            "a7628168.861ce"
        ],
        "x": 54,
        "y": 59,
        "w": 792,
        "h": 122
    },
    {
        "id": "a6e4d859c0057b6f",
        "type": "group",
        "z": "5f98db3a.7ab21c",
        "name": "",
        "style": {
            "label": true,
            "fill": "#3f5787",
            "fill-opacity": "0.37"
        },
        "nodes": [
            "f0645618c2050fce",
            "565eaf27c4c6892e",
            "e430451f890fe527",
            "a4c3cc7bc8fa2565",
            "519959ee89f04190",
            "d952c932bb5874af",
            "c4cf96930d013efb"
        ],
        "x": 2494,
        "y": 1699,
        "w": 792,
        "h": 122
    },
    {
        "id": "586e39dc007e0cae",
        "type": "group",
        "z": "2a761808.610238",
        "name": "",
        "style": {
            "label": true,
            "fill": "#3f5787",
            "fill-opacity": "0.37"
        },
        "nodes": [
            "2a35dba40cf875c4",
            "6900be342c7e23c4",
            "b9d560ba6b28bfe4",
            "c759fe83d1d68801",
            "1451734fb0602bf7",
            "c447c89d479e742a",
            "dd73e1c4557a5e65"
        ],
        "x": 1674,
        "y": 979,
        "w": 792,
        "h": 122
    },
    {
        "id": "8a452b1de9e087aa",
        "type": "group",
        "z": "5f98db3a.7ab21c",
        "style": {
            "stroke": "#2e333a",
            "stroke-opacity": "1",
            "fill": "#383c45",
            "fill-opacity": "0.5",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "25e6c65f2f6568ee",
            "8e32192ecced4af9",
            "d252aac0e03336f6",
            "cac2d5e9466e8f59",
            "46931deb362dccab",
            "eb94008bbe99e1a5",
            "fc532f8a3c02ad09",
            "68c731b8655af003",
            "3c54d00c2b5d1331",
            "9ed4d5038250d1db",
            "f934e581f21edc8d",
            "2a35df248651359d",
            "ce20d0a5a42d71b8",
            "16f60c9e05c72bee",
            "1e7fa667be4955e4",
            "c9f367c4c3c3a340",
            "68f426595975577a",
            "880c05f45c81c65f",
            "f4dd7d500c4c6287",
            "e5b3f65c64087091"
        ],
        "x": 2554,
        "y": 579,
        "w": 1052,
        "h": 502
    },
    {
        "id": "b1c9866420e73130",
        "type": "group",
        "z": "5f98db3a.7ab21c",
        "style": {
            "stroke": "#2e333a",
            "stroke-opacity": "1",
            "fill": "#383c45",
            "fill-opacity": "0.5",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "12956f0cc39cecca",
            "11a4d1c2a44c2e16",
            "afd3deeae4d81bc8",
            "f1795e2079ad790a",
            "e54f6abd7ef3a04a",
            "a2fba486886cf22e",
            "b8a5c62032bf8a3a",
            "43efea3d8f426bec",
            "2c8bdda9aab7d259",
            "aff96d6cd010b51b",
            "a96ba302000af312",
            "5944b81ec7e464fc",
            "7cb62ba82bd10479",
            "a968529fa548aff7",
            "f3d9f7caf8eb7213",
            "673c67310929e64a",
            "bb31b6f014975fd6",
            "f2d22858e4a7c429",
            "26f6329ebf714e14",
            "9f0a5643b5b416e8"
        ],
        "x": 2654,
        "y": 1859,
        "w": 692,
        "h": 562
    },
    {
        "id": "5bb9e782aa7a8a39",
        "type": "group",
        "z": "ef9c825cf92ee31b",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "f53ee5d9f220a88d",
            "1eee4bb3826e5fd5",
            "6f9d8e318bc68156",
            "60c3f24953796285",
            "da168ca5fd0a44bc",
            "3dda45cf48cd23cb",
            "6701a1fe594203d5",
            "fbebe343712c4db1",
            "142a08cea70917c4"
        ],
        "x": 314,
        "y": 479
    },
    {
        "id": "7a59f38fd450bc7d",
        "type": "group",
        "z": "654ea140.2275a8",
        "style": {
            "stroke": "#2e333a",
            "stroke-opacity": "1",
            "fill": "#383c45",
            "fill-opacity": "0.5",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "6bd09445ea4cfa5d",
            "8ea14c0c4254702d",
            "1c1561bf79d84f5e",
            "7a89f79851e3fc19",
            "96e86140a0d370e4",
            "cdbdd8e65652e3b2",
            "a012b4f4fc85f98c",
            "c6c39dcb7d895ddf",
            "a90ab6ee4120c6a2",
            "f71d1ca52f7148c9",
            "f3d40cd94bf7d8a0",
            "2cea6a146451bd26",
            "3889576055e4c23d",
            "0fb624218c2007e5",
            "fe4f4c121afe87c6",
            "32b6aaeab9305494",
            "1372785db49fe674",
            "f554d352967975a2",
            "45022e6cd5d6f461",
            "04c3a69de7fcc892",
            "55bc90e605e1cfc4",
            "d2cfd33757bb3510",
            "0c611d59b0b33741",
            "7fc1d6c34498924f",
            "7f47b2ddd7c4d760",
            "20cd1e0df469fde7",
            "d07e29cc7696cb8c",
            "e2f50e5dd6bd8293",
            "3df425e238c0d1da",
            "2ace1a8c5d56d7fb",
            "b301048f945266e9",
            "f6755d5ca47d8a1c",
            "b2649467a02170a2",
            "d64be0547902d730",
            "e850dfccd699dcdb",
            "db2ab2b36d0491f6",
            "c55a262c8df9a1d7",
            "0d8119922d0693a3",
            "7f61934422e27f95",
            "446153795da90d76",
            "8af930a1b87f39c6",
            "b260528d5ba032dc",
            "51d6f38d11893094",
            "77930cad44b21fb9",
            "ed90264248f8fa19",
            "bae47583a4cbccac",
            "ac4ac8fa94ec4d39",
            "991366fdffaad269",
            "482e3d85ed1f80fb",
            "04f838f4dcf92c27",
            "84de70195e8eeec9",
            "197f2eae23350bde",
            "072c1d3a07edfbfb",
            "d2965d20fb057ea3",
            "97c944361390ef7f",
            "159777891efadb83",
            "04e23e81161e4a2f",
            "d108b7f4de207c72",
            "1ee59cd0dcc3c69b",
            "6460e25babb0c7cc",
            "e0a18e1cc9e2532d",
            "563d3c7cf2cd4b45"
        ],
        "x": 194,
        "y": 1519
    },
    {
        "id": "c54480d87a18b156",
        "type": "group",
        "z": "654ea140.2275a8",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "f640acc7df5a7f1c",
            "9d1e34b27b37fdd4",
            "331bd8926b5fe7f0",
            "3fb2e4e22e831909"
        ],
        "x": 1414,
        "y": 339
    },
    {
        "id": "6d6802907a34719d",
        "type": "group",
        "z": "654ea140.2275a8",
        "style": {
            "stroke": "#2e333a",
            "stroke-opacity": "1",
            "fill": "#383c45",
            "fill-opacity": "0.5",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "1dfc59494b056a73",
            "e0c6df4acdc09987",
            "4beb6bee89191b2c",
            "6e676bce0149a568",
            "bece6d1bf84db0e5",
            "075add5232111063",
            "4da801b7823b5aa0",
            "8f8c6d4e6b670c18",
            "1f80872966579308",
            "d2462558caae9bf4",
            "33c339510a7ccd51",
            "e65ef98d1295b092",
            "e70da76f151fb410",
            "fcbcf0e05abbda11",
            "7c4eaeecf6d76197",
            "0b5582c012edbab5",
            "ec3532237df3d45d",
            "3662a85f7fdb2d18",
            "629a66d95364d694",
            "ce7dd270ab70fc59",
            "863c12030905b90b",
            "475d4281a5f72ba7",
            "90c965319d8e34ae",
            "2f5c8b721830107a",
            "23caaa7d4da5a6a1",
            "c193d63a633ed422",
            "0ee1d8650fcf42ad",
            "0d36353a3648f681",
            "be92eae3c497607e",
            "e5f26a3b2f160247",
            "0ac214621e21b21c",
            "d864f9e0173130c1",
            "30c99e0ffe8f381c",
            "d34a51ee4207c39b",
            "4afe7cf87488fade",
            "a397a8c340a5abac",
            "4d770b76a15022e4",
            "4d43f920cbc01357",
            "6b472db8a26e881f",
            "fd0d13b23b95cafc",
            "4ab36d4af5ef3a05",
            "665fb17c22667fc8",
            "b2e04c7fe56786bb",
            "8296b2a9118bb691",
            "f546192afeaa4eda",
            "5ab6a3bcae284753",
            "89c44489038ab0e4",
            "86da9b3847237ec1",
            "87f059d7cba7c146",
            "5ab5a242ff8647ee",
            "998942bb43d20db8",
            "61f3c56bf5b1d0ad",
            "16aa10e995b20267",
            "62e85e3917296c6c",
            "7ab04c7bf934d908",
            "9e31ae86227c8207",
            "5128d1e7c48ca858",
            "ac46bb0276956f73",
            "50a6cb97e1d9a45f",
            "000deb87a0348c69",
            "67831fc8c9a40edf",
            "f1be1df36da23a6e",
            "6b588e688c3d99f6",
            "a552b6406b9ee3da",
            "f1ead0e62bbb5074",
            "6d207d038eeaad2c",
            "132fb542b7e7a88d",
            "c3b88926069614ae",
            "b1c98d94ab07d052",
            "768bb7560e26759d",
            "0824abbc13f177f2",
            "ed5921c36d15b09e",
            "6e1b7f28c9f6481f",
            "8761f23b64d7a2f9",
            "978fe36d9c01fa64",
            "315a6dc929402e0e"
        ],
        "x": 20,
        "y": 3699
    },
    {
        "id": "1af578fa0e07ad5a",
        "type": "group",
        "z": "5f98db3a.7ab21c",
        "style": {
            "stroke": "#2e333a",
            "stroke-opacity": "1",
            "fill": "#383c45",
            "fill-opacity": "0.5",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "20e930bc4e51c612",
            "b36749c7a3e1b3d0",
            "250d741d8a5745e6",
            "b4a4e83ed0643f2c",
            "f33e9568474183b7",
            "577c5da19353e540",
            "bf1c13c6979ef555",
            "d3749cac89a0e2c9"
        ],
        "x": 2494,
        "y": 1179,
        "w": 1352,
        "h": 82
    },
    {
        "id": "7f9b2dd857a6dfb2",
        "type": "group",
        "z": "5f98db3a.7ab21c",
        "style": {
            "stroke": "#2e333a",
            "stroke-opacity": "1",
            "fill": "#383c45",
            "fill-opacity": "0.5",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "01ec9d5a0db3072d",
            "617b3f35705cc9e4",
            "a79a0e925695b95b",
            "47e93aedcfbe3a73",
            "792187aede59b6ac"
        ],
        "x": 2474,
        "y": 1299,
        "w": 1332,
        "h": 82
    },
    {
        "id": "9364657534c1325f",
        "type": "group",
        "z": "5f98db3a.7ab21c",
        "style": {
            "stroke": "#2e333a",
            "stroke-opacity": "1",
            "fill": "#383c45",
            "fill-opacity": "0.5",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "7669643f6654329b",
            "ef2d9f7d62da9638",
            "62dad41be283ec5d"
        ],
        "x": 2514,
        "y": 1439,
        "w": 792,
        "h": 82
    },
    {
        "id": "a2350d1c1b2611d2",
        "type": "group",
        "z": "5f98db3a.7ab21c",
        "style": {
            "stroke": "#2e333a",
            "stroke-opacity": "1",
            "fill": "#383c45",
            "fill-opacity": "0.5",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "6edabced39e8ae30",
            "0f71f73828a4d664",
            "f2b2077b7903a0bf"
        ],
        "x": 2534,
        "y": 1539,
        "w": 792,
        "h": 82
    },
    {
        "id": "5cf80cfa258dfe5b",
        "type": "group",
        "z": "901cd11f1c81ce5d",
        "name": "",
        "style": {
            "label": true,
            "fill": "#3f5787",
            "fill-opacity": "0.37"
        },
        "nodes": [
            "4020a2430d5b3cfb",
            "21ba2e59916313a2",
            "f20f76f59629adc2",
            "5d2efe22cf62c1cd",
            "22860af12b84149d",
            "79ac04bc884585a0",
            "e4eeb03c78ec0577"
        ],
        "x": 214,
        "y": 39,
        "w": 792,
        "h": 122
    },
    {
        "id": "b3c2073060265260",
        "type": "group",
        "z": "aa608523e76bb32e",
        "style": {
            "stroke": "#2e333a",
            "stroke-opacity": "1",
            "fill": "#383c45",
            "fill-opacity": "0.5",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "90f190c6bb0181cf",
            "b19d1af0ec51f5f9",
            "5f6a22967b74ea92",
            "ad9170df43804eb1",
            "176f90fd0e8dd63f",
            "d207ea32f3462e0d",
            "bc15ae6a3cd8bd9d",
            "a8b6a4a24eb9b044",
            "21f0c7079facaed4"
        ],
        "x": 2354,
        "y": 719
    },
    {
        "id": "3652595e4dbe64b8",
        "type": "group",
        "z": "aa608523e76bb32e",
        "name": "Расчет и регистрация МА",
        "style": {
            "label": true
        },
        "nodes": [
            "b83e78d7646ccec4",
            "bb349c20cfb2f917",
            "b0f9cad57124b76b",
            "40635dae7a5b27bc",
            "a895462d73185a7a",
            "59399a1b3ddaf724",
            "39f8c193c97b8c4c",
            "12d19f43b91c9412",
            "a614713741d4206a",
            "9615e127848816c1",
            "3b6e35b0b0f85959",
            "576cc0c4bcfa1270",
            "12979bb10572f963",
            "21741104b1c6ebf0",
            "d01152d531f38899",
            "9038633804e5cf32"
        ],
        "x": 14,
        "y": 239,
        "info": "Раз в 10 секунд выборка активных ботов, расчет МА, регистрация значений"
    },
    {
        "id": "6e143f4c404de0c0",
        "type": "group",
        "z": "aa608523e76bb32e",
        "style": {
            "stroke": "#2e333a",
            "stroke-opacity": "1",
            "fill": "#383c45",
            "fill-opacity": "0.5",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "f7abb61a21731640",
            "49cd39f1c0ff30ed",
            "681eb1a0fb01db89",
            "e6489ba7801d2470",
            "7c0b6c3b3fbbf050",
            "8e04bb7da48a1bd4",
            "c5f02583e873f1ad",
            "82abc2cd12a182c2",
            "f4f7e6a5637d10a9",
            "c54ad2d2fbc18d31"
        ],
        "x": 2394,
        "y": 459
    },
    {
        "id": "cc1e358ffcdcb6f5",
        "type": "group",
        "z": "aa608523e76bb32e",
        "style": {
            "stroke": "#2e333a",
            "stroke-opacity": "1",
            "fill": "#383c45",
            "fill-opacity": "0.5",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "043fc5ddf2d98d78",
            "d6f26758d0a1b75b",
            "2ab3c7b048e0466b",
            "2bf11cfb68e94e52",
            "bf8dd1f027f4b378",
            "6eacd5963b50dc15",
            "59c46e1375b8372a",
            "3fe89f51e99183d6",
            "0886877529092c3f",
            "d2148bf29790dc51",
            "0352570368368083",
            "0fc591a98c9d1a6a",
            "211dfdfe24894da6",
            "316df6b785a2b949",
            "7fcae21684eead67",
            "b97cf38cba75682f",
            "d07564e00689101f",
            "a8db300f4ca0f579",
            "3b85159e0cbdfc50",
            "8997fd87d44fea11",
            "1d7ec925a626478d",
            "318c5dd096b9cd56"
        ],
        "x": 14,
        "y": 459
    },
    {
        "id": "ad7d64bcaaac9c06",
        "type": "group",
        "z": "aa608523e76bb32e",
        "style": {
            "stroke": "#2e333a",
            "stroke-opacity": "1",
            "fill": "#383c45",
            "fill-opacity": "0.5",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "9e606dea4881403f",
            "094df78e7c0966ed",
            "782aff6a5882d7fa",
            "dfd037e71f23b16d",
            "f262853aa528cd2f",
            "c25b346707dac2ac"
        ],
        "x": 1274,
        "y": 1799
    },
    {
        "id": "6504333180454769",
        "type": "group",
        "z": "aa608523e76bb32e",
        "name": "",
        "style": {
            "label": true,
            "fill": "#3f5787",
            "fill-opacity": "0.37"
        },
        "nodes": [
            "fd39d0b5129e61e0",
            "3f3c529387944d04",
            "05d3650686e812cb",
            "ec346f295542edc4",
            "4e350476cd17623f",
            "f32e44bd2984a09c",
            "aafdf287f8eece3e"
        ],
        "x": 1194,
        "y": -1
    },
    {
        "id": "7cf2ce1ee9aa09a0",
        "type": "group",
        "z": "5df15275.2888ec",
        "name": "Расчет и регистрация МА",
        "style": {
            "label": true
        },
        "nodes": [
            "d0265ad83b72f060",
            "55cdeaeec842ce3d",
            "400760a195d1bbab",
            "8686597324b188ac",
            "698a84fcef79c165",
            "2bb16b5c84c65822",
            "80f8ee4855b60755",
            "5e3edac3f8d7b5e6",
            "098806a63c0b488e",
            "e7c80281db2cb5f7",
            "b082667c299cc83e",
            "c3754613797a5259",
            "7b66467d81ab2834",
            "f8cd782d3223fa1e",
            "907b2cc664741e24"
        ],
        "x": 54,
        "y": 679,
        "w": 1972,
        "h": 162
    },
    {
        "id": "d4a5f2307ef8b222",
        "type": "group",
        "z": "5df15275.2888ec",
        "name": "Трек логика",
        "style": {
            "label": true
        },
        "nodes": [
            "a911e390.b5d95",
            "95a19c1d.39bae",
            "302b86fd.feef2a",
            "438a4ff8.3b594",
            "e13296672e19d0a8",
            "0197100c154f4aa9",
            "72e46f8aeb6442f9",
            "f61923546f307623",
            "96b4f32d26754311",
            "de14383a32655d5c",
            "0ff0634f1d848d61",
            "3cca40b6fb3f74a7",
            "a22493fd4828f6e2",
            "b519994e581e8bdd",
            "537dc01b45bda0bc",
            "43b759ee534eaeb9",
            "e940ea9779e7f564",
            "3ca4a7878a84e004",
            "d2defd5285e34ff1",
            "0080451aaafcadd8",
            "b72d192f770419d4",
            "2805425bf5dafbb8",
            "cc8bbb08a6ac0af2",
            "41d7ddab1cfc50b4",
            "2869480f6ddecc85",
            "120969bfc4862a7d",
            "1eb94b3ec3aae58d",
            "8ada0320.0af298",
            "fe5f4964aa470c3b"
        ],
        "x": 34,
        "y": 1299,
        "w": 1952,
        "h": 522
    },
    {
        "id": "90093d1f3e82603a",
        "type": "group",
        "z": "476b070518efd452",
        "name": "",
        "style": {
            "label": true,
            "fill": "#3f5787",
            "fill-opacity": "0.37"
        },
        "nodes": [
            "13434474d217e175",
            "dd362a5efada30f0",
            "69218c86cfb23eee",
            "75b12400e93abb55",
            "7d0e92a293453128",
            "3802babc0bf4e041",
            "ac0b473ca8f11faf"
        ],
        "x": 1434,
        "y": 59
    },
    {
        "id": "5063e471deb87919",
        "type": "group",
        "z": "476b070518efd452",
        "name": "",
        "style": {
            "label": true,
            "fill": "#3f5787",
            "fill-opacity": "0.37"
        },
        "nodes": [
            "7ee13f173b1ed22b",
            "30d1f7c41bbee26d",
            "cc589b8aa1d88bf9",
            "9578b95829d4d3c9",
            "d321d414f5fd4ad7",
            "8e7db1953351afd8"
        ],
        "x": 94,
        "y": 1679
    },
    {
        "id": "928a15b0fd8b6f59",
        "type": "group",
        "z": "476b070518efd452",
        "style": {
            "stroke": "#2e333a",
            "stroke-opacity": "1",
            "fill": "#383c45",
            "fill-opacity": "0.5",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "d49b3cf43100e984",
            "48b696286badd140",
            "500abfb6cf4c0d0d",
            "76090516a9c9f733",
            "24cea76ef5641007",
            "7bad6997813c6d63",
            "d984a56b748a1b47",
            "5d2dd8b63ca2642e"
        ],
        "x": 2674,
        "y": 239
    },
    {
        "id": "f4f90b1391070951",
        "type": "group",
        "z": "2a761808.610238",
        "style": {
            "stroke": "#2e333a",
            "stroke-opacity": "1",
            "fill": "#383c45",
            "fill-opacity": "0.5",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "d4c6b3ea.b0118",
            "a0ad9ee6.aa105",
            "4c9d9272.a06d2c",
            "ddf77463.b02678",
            "599eef92.8ee31",
            "799698b0.78a948",
            "fe8b13e1.db5bf",
            "10d73930.850c67",
            "2e524180.ede67e",
            "e7cd9c55.03487",
            "3e882d4e.c91df2",
            "1494284.0d799d8",
            "8ff82160.e2aa7",
            "14218f4f.622ba1",
            "3c03470a.507ec8",
            "ccbca6c6.392f58",
            "a739f31f028c526e",
            "c29cb45a64cff649",
            "00fa2627f41a6d22",
            "69a60ba2aa9a2bf3",
            "f86d915a928bcd39",
            "6bc749d6aa184468",
            "175ac72efd396d95",
            "d65d088c5ac03f65",
            "bbf71857d7b3aa11",
            "06e4c0f51ed015ab",
            "91c2610dc3c1bd01",
            "c7aec4b9cc156a78"
        ],
        "x": 74,
        "y": 79,
        "w": 2182,
        "h": 342
    },
    {
        "id": "93bf1a09029b1ecf",
        "type": "group",
        "z": "2a761808.610238",
        "style": {
            "stroke": "#2e333a",
            "stroke-opacity": "1",
            "fill": "#383c45",
            "fill-opacity": "0.5",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "8cc08f5b.14782",
            "60eb6ef5.3e20b",
            "9f535577.3cdc98",
            "203e6ef2.430c62",
            "26cad534.28973a",
            "ccd55cdb.7ed72"
        ],
        "x": 2474,
        "y": 99,
        "w": 652,
        "h": 182
    },
    {
        "id": "a0fe11145e7edf84",
        "type": "group",
        "z": "5df15275.2888ec",
        "name": "Трек",
        "style": {
            "label": true
        },
        "nodes": [
            "387619c36681b3e5",
            "6d9b202399150652",
            "87d33f4cea444d76",
            "0c6bcd5098091952",
            "dcae1864d2517dea",
            "37b3719a56b8b85e",
            "a6fa4338d0263379",
            "e9f7dafce7c78a1c",
            "d57be83950b3e792",
            "cea8b787784f06b7",
            "7d520c9f3f584426",
            "93be3c8c8ae3e0aa",
            "95dc92f2a89e0c4f",
            "d71599fa524f6f20",
            "b64d6fbb9005a4ce",
            "15ea84929ccca7e8",
            "ecc16c9fb4b93460",
            "f581bb390118a24e",
            "41fb2f2310eb3509",
            "98795c7b07c3c6cc",
            "d0dafdf34722bfa4",
            "fe2d86ea21ca74b1",
            "5611b6a43040daf1",
            "17aeeef6a2ea0467"
        ],
        "x": 54,
        "y": 879,
        "w": 2242,
        "h": 282
    },
    {
        "id": "d45e3611d1eb4d7c",
        "type": "group",
        "z": "5df15275.2888ec",
        "name": "Резервная запись статуса в редис",
        "style": {
            "label": true
        },
        "nodes": [
            "042f3914a0a15bd1",
            "7c67107cf032f617",
            "62dbb0111ba3a832",
            "eeaeeab96ef014a9",
            "0ec009c807fdf6b6",
            "dd6e8b7c3cd4bd8f",
            "5f90fe219f3162fa",
            "ce5d5670a383e6ea",
            "449d486fe59111a1",
            "20e5dbec70a2054f",
            "1e593dd0188fc77e",
            "9ed590fb177c65fa",
            "b71ccac226cfd352",
            "c60bf2d6f98b0d01"
        ],
        "x": 54,
        "y": 459,
        "w": 1712,
        "h": 142
    },
    {
        "id": "44cf135596e2716e",
        "type": "group",
        "z": "5df15275.2888ec",
        "style": {
            "stroke": "#2e333a",
            "stroke-opacity": "1",
            "fill": "#383c45",
            "fill-opacity": "0.5",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "841dbfe6777b1e36",
            "2c2113e3d7c3305b",
            "12dcb7809b23d675",
            "905bf77ca38ca8b2",
            "d3e0688d41cc172c",
            "579577e08c6abb4c"
        ],
        "x": 934,
        "y": 39,
        "w": 472,
        "h": 162
    },
    {
        "id": "f120eab2.0a60a8",
        "type": "redis-config",
        "name": "redis:6379",
        "options": "redis://:YzRAdGgkFg@redis:6379",
        "cluster": false,
        "optionsType": "str"
    },
    {
        "id": "acbee441.8c1e1",
        "type": "ui_tab",
        "name": "Home",
        "icon": "dashboard",
        "disabled": false,
        "hidden": false
    },
    {
        "id": "a328c3be.7f91c8",
        "type": "ui_group",
        "name": "BTC",
        "tab": "acbee441.8c1e1",
        "order": 1,
        "disp": false,
        "width": "14",
        "collapse": false
    },
    {
        "id": "7eefe30b.94c464",
        "type": "ui_base",
        "theme": {
            "name": "theme-dark",
            "lightTheme": {
                "default": "#0094CE",
                "baseColor": "#0094CE",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif",
                "edited": true,
                "reset": false
            },
            "darkTheme": {
                "default": "#097479",
                "baseColor": "#097479",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif",
                "edited": true,
                "reset": false
            },
            "customTheme": {
                "name": "Untitled Theme 1",
                "default": "#4B7930",
                "baseColor": "#4B7930",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif"
            },
            "themeState": {
                "base-color": {
                    "default": "#097479",
                    "value": "#097479",
                    "edited": true
                },
                "page-titlebar-backgroundColor": {
                    "value": "#097479",
                    "edited": false
                },
                "page-backgroundColor": {
                    "value": "#111111",
                    "edited": false
                },
                "page-sidebar-backgroundColor": {
                    "value": "#333333",
                    "edited": false
                },
                "group-textColor": {
                    "value": "#0eb8c0",
                    "edited": false
                },
                "group-borderColor": {
                    "value": "#555555",
                    "edited": false
                },
                "group-backgroundColor": {
                    "value": "#333333",
                    "edited": false
                },
                "widget-textColor": {
                    "value": "#eeeeee",
                    "edited": false
                },
                "widget-backgroundColor": {
                    "value": "#097479",
                    "edited": false
                },
                "widget-borderColor": {
                    "value": "#333333",
                    "edited": false
                },
                "base-font": {
                    "value": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif"
                }
            },
            "angularTheme": {
                "primary": "indigo",
                "accents": "blue",
                "warn": "red",
                "background": "grey"
            }
        },
        "site": {
            "name": "Node-RED Dashboard",
            "hideToolbar": "true",
            "allowSwipe": "false",
            "lockMenu": "false",
            "allowTempTheme": "true",
            "dateFormat": "DD/MM/YYYY",
            "sizes": {
                "sx": 48,
                "sy": 48,
                "gx": 6,
                "gy": 6,
                "cx": 6,
                "cy": 6,
                "px": 0,
                "py": 0
            }
        }
    },
    {
        "id": "261e447.e94ad3c",
        "type": "ui_group",
        "name": "work mode",
        "tab": "acbee441.8c1e1",
        "order": 2,
        "disp": true,
        "width": "4",
        "collapse": false
    },
    {
        "id": "848f142.6165868",
        "type": "telegrambot-config",
        "botname": "Tibot",
        "usernames": "",
        "chatIds": "454883204",
        "pollInterval": "300"
    },
    {
        "id": "f244fee6.d2627",
        "type": "ui_group",
        "name": "duration ",
        "tab": "acbee441.8c1e1",
        "order": 3,
        "disp": true,
        "width": "8",
        "collapse": false
    },
    {
        "id": "133c3e4a.687a62",
        "type": "debug",
        "z": "5df15275.2888ec",
        "g": "89e4eb3d636bee6a",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 2910,
        "y": 1040,
        "wires": []
    },
    {
        "id": "a7ef7b74.1301e8",
        "type": "comment",
        "z": "5df15275.2888ec",
        "g": "89e4eb3d636bee6a",
        "name": "Финиш трека. Семафор = \"Свободно\"",
        "info": "",
        "x": 2820,
        "y": 940,
        "wires": []
    },
    {
        "id": "7ee8ada7.9818bc",
        "type": "catch",
        "z": "5df15275.2888ec",
        "g": "071ea57d613d087c",
        "name": "",
        "scope": null,
        "uncaught": false,
        "x": 3080,
        "y": 1180,
        "wires": [
            [
                "e0440623.2ec6e"
            ]
        ]
    },
    {
        "id": "e0440623.2ec6e",
        "type": "debug",
        "z": "5df15275.2888ec",
        "g": "071ea57d613d087c",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 3330,
        "y": 1180,
        "wires": []
    },
    {
        "id": "a359f524.2e00e8",
        "type": "function",
        "z": "5df15275.2888ec",
        "d": true,
        "g": "071ea57d613d087c",
        "name": "get flow.track",
        "func": "\n//<трекер<\nlet trackname = \"track-\" + msg.botname;\nlet track = flow.get(trackname);\nlet start_node_time = Date.parse(new Date())/1000;\nlet steptitle = node.name;\n//>трекер>\n\nmsg.payload = track;\n\n//<трекер< \n //   let end_node_time = Date.parse(new Date())/1000;\n //   let duration = end_node_time-start_node_time;\n //   track.push([steptitle,start_node_time,end_node_time,duration]);\n //   msg.track = track;\n //   flow.set(\"track\", track);\n//>трекер>\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3280,
        "y": 1300,
        "wires": [
            [
                "a0142b1a.f25d9",
                "941fc9d2.76b05"
            ]
        ]
    },
    {
        "id": "cf20b67b.cbc6e",
        "type": "inject",
        "z": "5df15275.2888ec",
        "g": "071ea57d613d087c",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 2980,
        "y": 1240,
        "wires": [
            [
                "a359f524.2e00e8"
            ]
        ]
    },
    {
        "id": "a0142b1a.f25d9",
        "type": "debug",
        "z": "5df15275.2888ec",
        "g": "071ea57d613d087c",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 3450,
        "y": 1260,
        "wires": []
    },
    {
        "id": "941fc9d2.76b05",
        "type": "ui_table",
        "z": "5df15275.2888ec",
        "d": true,
        "g": "071ea57d613d087c",
        "group": "a328c3be.7f91c8",
        "name": "",
        "order": 2,
        "width": "14",
        "height": "9",
        "columns": [
            {
                "field": "steptitle",
                "title": "steptitle",
                "width": "",
                "align": "left",
                "formatter": "plaintext",
                "formatterParams": {
                    "target": "_blank"
                }
            },
            {
                "field": "duration_node",
                "title": "duration_node",
                "width": "",
                "align": "left",
                "formatter": "plaintext",
                "formatterParams": {
                    "target": "_blank"
                }
            },
            {
                "field": "duration_step",
                "title": "duration_step",
                "width": "",
                "align": "left",
                "formatter": "plaintext",
                "formatterParams": {
                    "target": "_blank"
                }
            }
        ],
        "outputs": 0,
        "cts": false,
        "x": 3450,
        "y": 1300,
        "wires": []
    },
    {
        "id": "8040b017.7a26f8",
        "type": "comment",
        "z": "5df15275.2888ec",
        "g": "071ea57d613d087c",
        "name": "Отладка",
        "info": "",
        "x": 2820,
        "y": 1180,
        "wires": []
    },
    {
        "id": "189b2b68.7c485d",
        "type": "delay",
        "z": "5df15275.2888ec",
        "g": "071ea57d613d087c",
        "name": "",
        "pauseType": "delay",
        "timeout": "500",
        "timeoutUnits": "milliseconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "x": 2870,
        "y": 1300,
        "wires": [
            [
                "a359f524.2e00e8"
            ]
        ]
    },
    {
        "id": "842e37da.0d09",
        "type": "redis-in",
        "z": "5df15275.2888ec",
        "g": "071ea57d613d087c",
        "server": "f120eab2.0a60a8",
        "command": "subscribe",
        "name": "",
        "topic": "start1",
        "obj": true,
        "timeout": 0,
        "x": 2730,
        "y": 1300,
        "wires": [
            [
                "189b2b68.7c485d"
            ]
        ]
    },
    {
        "id": "8ada0320.0af298",
        "type": "link in",
        "z": "5df15275.2888ec",
        "g": "d4a5f2307ef8b222",
        "name": "",
        "links": [
            "40175d8a.67b97c",
            "7e6df2c2.aa43bc",
            "ecc16c9fb4b93460"
        ],
        "x": 75,
        "y": 1500,
        "wires": [
            [
                "95a19c1d.39bae",
                "a911e390.b5d95"
            ]
        ]
    },
    {
        "id": "9f82a757.25f3d",
        "type": "function",
        "z": "5df15275.2888ec",
        "g": "89e4eb3d636bee6a",
        "name": "setbot_free",
        "func": "//<трекер<\nlet trackname = \"track-\" + msg.botname;\nlet track = flow.get(trackname);\nlet start_node_time = new Date().getTime();\nlet steptitle = node.name;\n\nlet laststep = track[track.length - 1];\nlet last_node_end_time = laststep.end_node_time;\n\nlet firststep = track[0];\nlet first_node_start_time = firststep.start_node_time;\n\nlet duration_track = last_node_end_time - first_node_start_time;\n//>трекер>\n\nmsg.bot.busy = false;\n//>трекер>\nlet end_node_time = new Date().getTime();\nlet duration = end_node_time - start_node_time;\nlet duration_step = end_node_time - last_node_end_time;\ntrack.push({\n    \"steptitle\": steptitle,\n    \"start_node_time\": start_node_time,\n    \"end_node_time\": end_node_time,\n    \"duration_node\": duration,\n    \"duration_step\": duration_track //только для финишной ноды\n});\nflow.set(trackname, track);\n\nflow.set(msg.botname, 0);\n//>трекер>\nnode.status({ fill: \"green\", shape: \"dot\" });\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2630,
        "y": 1000,
        "wires": [
            [
                "51b45a57.49dad4",
                "a359f524.2e00e8",
                "264a85cd815392d3",
                "f937bdc295f372a8"
            ]
        ],
        "icon": "font-awesome/fa-bolt"
    },
    {
        "id": "51b45a57.49dad4",
        "type": "function",
        "z": "5df15275.2888ec",
        "g": "89e4eb3d636bee6a",
        "name": "duration",
        "func": "let trackname = \"track-\" + msg.botname;\nlet track = flow.get(trackname);\n\nlet laststep = track[track.length-1];\nlet firststep = track[0];\nlet last_node_end_time = laststep.end_node_time;\nlet first_node_start_time = firststep.start_node_time;\n\nlet duration = last_node_end_time - first_node_start_time;\n//node.warn(duration);\nmsg.payload = duration;\n\nif (duration > 1900){\n            //запись в журнал\n\n        \n        let botname2 = msg.botname;\n        let data2 = \"Длительноть трека -\"+duration;\n        const tilog = global.get('tilog')(botname2,data2);\n        tilog;\n        //запись в журнал\n    \n}\n    \nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3100,
        "y": 1000,
        "wires": [
            [
                "51350500.94f214",
                "1d3cd462.fdc43c"
            ]
        ]
    },
    {
        "id": "51350500.94f214",
        "type": "debug",
        "z": "5df15275.2888ec",
        "g": "89e4eb3d636bee6a",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 3270,
        "y": 1040,
        "wires": []
    },
    {
        "id": "1d3cd462.fdc43c",
        "type": "ui_chart",
        "z": "5df15275.2888ec",
        "g": "89e4eb3d636bee6a",
        "name": "",
        "group": "f244fee6.d2627",
        "order": 0,
        "width": "4",
        "height": "7",
        "label": "main track",
        "chartType": "line",
        "legend": "false",
        "xformat": "ss",
        "interpolate": "bezier",
        "nodata": "",
        "dot": true,
        "ymin": "",
        "ymax": "",
        "removeOlder": "10",
        "removeOlderPoints": "40",
        "removeOlderUnit": "1",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9a244f",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "x": 3270,
        "y": 1000,
        "wires": [
            []
        ]
    },
    {
        "id": "a911e390.b5d95",
        "type": "function",
        "z": "5df15275.2888ec",
        "g": "d4a5f2307ef8b222",
        "name": "getprice, MA",
        "func": "\nlet moneta = msg.bot.settings.moneta;\n\nconst gp = global.get('getprice')(moneta);\n\ngp.then(gp => {\n\n    msg.bot.status.currentprice = gp;\n    let volname = msg.bot.settings.botname + \"-MA-big\";\n    msg.bot.status.sr_ma_big = Number(flow.get(volname));\n\n    let volname2 = msg.bot.settings.botname + \"-MA-small\";\n    msg.bot.status.sr_ma_small = Number(flow.get(volname2));\n\n\n\n    node.status({ fill: \"green\", shape: \"dot\" });\n    node.send(msg);\n\n}).catch(error => {\n\n\n    node.status({ fill: \"red\", shape: \"dot\" });\n    node.error(error);\n});",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 210,
        "y": 1500,
        "wires": [
            [
                "302b86fd.feef2a"
            ]
        ]
    },
    {
        "id": "95a19c1d.39bae",
        "type": "debug",
        "z": "5df15275.2888ec",
        "g": "d4a5f2307ef8b222",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 250,
        "y": 1540,
        "wires": []
    },
    {
        "id": "e34a5b68.726ec8",
        "type": "link in",
        "z": "5df15275.2888ec",
        "name": "finish track setbotfree",
        "links": [
            "04e23e81161e4a2f",
            "04f838f4dcf92c27",
            "072c1d3a07edfbfb",
            "159777891efadb83",
            "197f2eae23350bde",
            "1ee59cd0dcc3c69b",
            "3cca40b6fb3f74a7",
            "563d3c7cf2cd4b45",
            "6460e25babb0c7cc",
            "720d521686c307c6",
            "84de70195e8eeec9",
            "96b4f32d26754311",
            "97c944361390ef7f",
            "c687d087.0896d",
            "d108b7f4de207c72",
            "d2965d20fb057ea3",
            "e0a18e1cc9e2532d",
            "c55aa818edeee318",
            "ff26ac7ccf964923",
            "1b3e671be6b572d5",
            "378e488cecf6ffc2",
            "822a640986e32473",
            "9a2a545194209ea6",
            "c6b2e3e9d09dc7ab",
            "24b7b6edbf44e542",
            "0cf1654560ff06a3",
            "b72d192f770419d4",
            "dc25556dfb0429b4",
            "a70c78aeb96b6bba",
            "ed7621f56d07dc08",
            "334dc59dd4302182"
        ],
        "x": 2415,
        "y": 1040,
        "wires": [
            [
                "070f09d236c25724",
                "c57e23b7fabe24c4"
            ]
        ]
    },
    {
        "id": "302b86fd.feef2a",
        "type": "function",
        "z": "5df15275.2888ec",
        "g": "d4a5f2307ef8b222",
        "name": "MA zapret calculate",
        "func": "\nmsg.bot.status.currentprice = Number(msg.bot.status.currentprice);\n\nif ((msg.bot.status.currentprice > msg.bot.status.sr_ma_big) && (msg.bot.status.currentprice > msg.bot.status.sr_ma_small)) {\n    msg.bot.zapret_na_zakup = false;\n    msg.bot.status.rezhim = \"МА - закуп разрешен\";\n\n} else {\n    msg.bot.zapret_na_zakup = true;\n    msg.bot.status.rezhim = \"МА - закуп запрещён\";\n\n}\n\nnode.status({ fill: \"green\", shape: \"dot\" });\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 420,
        "y": 1500,
        "wires": [
            [
                "2805425bf5dafbb8"
            ]
        ]
    },
    {
        "id": "d4c6b3ea.b0118",
        "type": "comment",
        "z": "2a761808.610238",
        "g": "f4f90b1391070951",
        "name": "Старт трека",
        "info": "",
        "x": 170,
        "y": 140,
        "wires": []
    },
    {
        "id": "a0ad9ee6.aa105",
        "type": "trigger",
        "z": "2a761808.610238",
        "g": "f4f90b1391070951",
        "name": "",
        "op1": "1",
        "op2": "0",
        "op1type": "str",
        "op2type": "str",
        "duration": "-100",
        "extend": false,
        "overrideDelay": false,
        "units": "ms",
        "reset": "",
        "bytopic": "all",
        "topic": "topic",
        "outputs": 1,
        "x": 520,
        "y": 200,
        "wires": [
            [
                "175ac72efd396d95"
            ]
        ]
    },
    {
        "id": "4c9d9272.a06d2c",
        "type": "delay",
        "z": "2a761808.610238",
        "g": "f4f90b1391070951",
        "name": "",
        "pauseType": "delay",
        "timeout": "2",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "x": 300,
        "y": 200,
        "wires": [
            [
                "a0ad9ee6.aa105"
            ]
        ]
    },
    {
        "id": "ddf77463.b02678",
        "type": "function",
        "z": "2a761808.610238",
        "g": "f4f90b1391070951",
        "name": "stop",
        "func": "msg.reset = true;\nmsg.payload = \"\";\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 290,
        "y": 260,
        "wires": [
            [
                "a0ad9ee6.aa105"
            ]
        ]
    },
    {
        "id": "599eef92.8ee31",
        "type": "redis-in",
        "z": "2a761808.610238",
        "g": "f4f90b1391070951",
        "server": "f120eab2.0a60a8",
        "command": "subscribe",
        "name": "",
        "topic": "stop",
        "obj": true,
        "timeout": 0,
        "x": 150,
        "y": 260,
        "wires": [
            [
                "ddf77463.b02678"
            ]
        ]
    },
    {
        "id": "799698b0.78a948",
        "type": "redis-in",
        "z": "2a761808.610238",
        "g": "f4f90b1391070951",
        "server": "f120eab2.0a60a8",
        "command": "subscribe",
        "name": "",
        "topic": "start",
        "obj": true,
        "timeout": 0,
        "x": 150,
        "y": 200,
        "wires": [
            [
                "4c9d9272.a06d2c"
            ]
        ]
    },
    {
        "id": "fe8b13e1.db5bf",
        "type": "redis-in",
        "z": "2a761808.610238",
        "g": "f4f90b1391070951",
        "server": "f120eab2.0a60a8",
        "command": "subscribe",
        "name": "",
        "topic": "start1",
        "obj": true,
        "timeout": 0,
        "x": 570,
        "y": 140,
        "wires": [
            [
                "175ac72efd396d95"
            ]
        ]
    },
    {
        "id": "10d73930.850c67",
        "type": "comment",
        "z": "2a761808.610238",
        "g": "f4f90b1391070951",
        "name": "Семафор = \"Занято\"",
        "info": "",
        "x": 2020,
        "y": 120,
        "wires": []
    },
    {
        "id": "2e524180.ede67e",
        "type": "function",
        "z": "2a761808.610238",
        "g": "f4f90b1391070951",
        "name": "start ttp",
        "func": "//<трекер<\n    ////>только для стартовой ноды>\n        var track = [];\n        let start_track_time = new Date().getTime();\n        let start_node_time = start_track_time;\n        let steptitle = node.name;\n    ////>только для стартовой ноды>\n//>трекер>\n\n\n\nmsg.payload = global.get('guid');\n\n\n//>трекер>\n\n\n    let end_node_time = new Date().getTime();\n    let duration = end_node_time - start_node_time;\n    track.push({\n        \"steptitle\": steptitle,\n        \"start_node_time\": start_node_time,\n        \"end_node_time\": end_node_time,\n        \"duration_node\": duration,\n        \"duration_step\": 0\n    });\n    let trackname = \"ttp-track-\"+msg.botname;\n    flow.set(trackname, track);\n//>трекер>\nnode.status({ fill: \"green\", shape: \"ring\", text: duration });\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1840,
        "y": 200,
        "wires": [
            [
                "3e882d4e.c91df2"
            ]
        ]
    },
    {
        "id": "e7cd9c55.03487",
        "type": "function",
        "z": "2a761808.610238",
        "g": "f4f90b1391070951",
        "name": "busy === false ",
        "func": "\n\nif (msg.payload === false) {\n   \n    node.status({fill:\"green\",shape:\"dot\"});\n    \n    return [msg, null, null];\n}\n\nelse {\n\n    let id = msg.botname + \"-ttp\";\n    msg.payload = [];\n\n    var count = flow.get(id) || 0;\n    count += 1;\n\n    node.status({fill:\"blue\",shape:\"dot\"});\n\n\n    if (count > 40) {\n        //const upd = global.get('setttp_free')(msg.botname);\n   \n        let trackname = \"ttp-track-\"+msg.botname;\n        let lasttrack = JSON.stringify(flow.get(trackname) || \"\", null, '\\t');\n        msg.lasttrack = lasttrack;\n        \n        //запись в журнал\n        let botname = \"syslog.txt\";\n        let data = \"Сброс ttp \"+msg.botname+\" \\n \"+lasttrack;\n        const syslog = global.get('tilog')(botname,data);\n        syslog;\n        \n        let botname2 = msg.botname;\n        let data2 = \"Сброс ttp busy \\n \"+lasttrack;\n        const tilog = global.get('tilog')(botname2,data2);\n        tilog;\n        //запись в журнал\n\n        msg.bot.ttp.ttpbusy = false;\n        global.set(msg.botname + \"-ttp\", msg.bot.ttp);\n\n        flow.set(id, 0);\n\n\n        return [null, null, msg];\n\n    }\n    flow.set(id, count);\n    return [null, msg, null];\n}\n\n\n\n\n\n",
        "outputs": 3,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1660,
        "y": 200,
        "wires": [
            [
                "2e524180.ede67e",
                "91c2610dc3c1bd01"
            ],
            [],
            [
                "a739f31f028c526e",
                "8ff82160.e2aa7"
            ]
        ],
        "icon": "font-awesome/fa-bolt"
    },
    {
        "id": "3e882d4e.c91df2",
        "type": "function",
        "z": "2a761808.610238",
        "g": "f4f90b1391070951",
        "name": "setttp_busy",
        "func": "msg.bot.ttp.ttpbusy = true;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2010,
        "y": 200,
        "wires": [
            [
                "1494284.0d799d8",
                "14218f4f.622ba1",
                "ccbca6c6.392f58"
            ]
        ],
        "icon": "font-awesome/fa-bolt"
    },
    {
        "id": "1494284.0d799d8",
        "type": "debug",
        "z": "2a761808.610238",
        "g": "f4f90b1391070951",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 2030,
        "y": 160,
        "wires": []
    },
    {
        "id": "8ff82160.e2aa7",
        "type": "debug",
        "z": "2a761808.610238",
        "g": "f4f90b1391070951",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1730,
        "y": 260,
        "wires": []
    },
    {
        "id": "ccd55cdb.7ed72",
        "type": "link in",
        "z": "2a761808.610238",
        "g": "93bf1a09029b1ecf",
        "name": "",
        "links": [
            "6686db1e.4b1904",
            "1cd1edd3.c1f1d2",
            "c5493216.68ad1",
            "4dfef6b5.251a18",
            "1d26132c.06016d",
            "b0d5adc0.69eab",
            "4b4fa1ce.2d444",
            "bcd1d88e.da80d8",
            "db26ef3b.7f5f6",
            "97b3018b32c5e8e3",
            "41ed2184ea044881",
            "57aec58609f74230",
            "2ae413ade37cd800",
            "ca3c60f0c33a9389",
            "932e507185a534a1",
            "25e5da747f055ffb",
            "845b60294fdd4f4f",
            "18718405350be09f",
            "b7144266c845692c",
            "e80c8eef34ad366c",
            "3610aedcd94044e0",
            "4c73dbd4dd32bc13",
            "714ae3db6704aff6",
            "4fd0e3157fd756b5",
            "d5f8907ed71f2fe1",
            "a8ad35e94e6b4915",
            "40bcf14c4c7a5a7c",
            "400703b3d0a09d2f",
            "9011d963f8a5cefa",
            "a03fb4591b46b71d",
            "43656eb1fac8a3d6",
            "06ee55c7f64e90e8"
        ],
        "x": 2515,
        "y": 200,
        "wires": [
            [
                "26cad534.28973a",
                "84372d0e6d93e364",
                "365e54e1b5c77315"
            ]
        ]
    },
    {
        "id": "14218f4f.622ba1",
        "type": "link out",
        "z": "2a761808.610238",
        "g": "f4f90b1391070951",
        "name": "",
        "links": [
            "e9ac4d38.5faef",
            "e84c68c5.b035e8"
        ],
        "x": 2215,
        "y": 200,
        "wires": []
    },
    {
        "id": "3c03470a.507ec8",
        "type": "function",
        "z": "2a761808.610238",
        "g": "f4f90b1391070951",
        "name": "getttp_busy",
        "func": "\nmsg.payload = msg.bot.ttp.ttpbusy;\nreturn msg;\n//const gb = global.get('getttp_busy')(msg.botname);\n//\n//gb.then(gb => {\n//    \n//    msg.payload = JSON.parse(gb);\n//    \n//\n//    node.status({fill:\"green\",shape:\"dot\"});\n//    \n//    \n//    node.send(msg);\n//\n//}).catch(error => {\n//    \n//\n//    node.status({fill:\"red\",shape:\"dot\"});\n//    \n//    node.error(error);\n//});",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1470,
        "y": 200,
        "wires": [
            [
                "e7cd9c55.03487",
                "06e4c0f51ed015ab"
            ]
        ]
    },
    {
        "id": "8cc76823.4b4e68",
        "type": "function",
        "z": "2a761808.610238",
        "name": "getprice",
        "func": "\nlet moneta = msg.bot.settings.moneta;\n\nconst gp = global.get('getprice')(moneta);\n\ngp.then(gp => {\n    let currentprice = Number(gp);\n    msg.bot.ttp.currentprice = currentprice;\n    msg.bot.ttp.raschstopprice = Number(Number(currentprice - currentprice / 100 * msg.bot.settings.ofsettop).toFixed(msg.bot.settings.digitprice));\n    msg.bot.ttp.curstop = Number(msg.bot.ttp.curstop);\n    msg.bot.ttp.curorderid = Number(msg.bot.ttp.curorderid);\n\n    node.status({fill:\"green\",shape:\"dot\"});\n    node.send(msg);\n\n}).catch(error => {\n    \n\n    node.status({fill:\"red\",shape:\"dot\"});\n    node.error(error);\n});",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 240,
        "y": 1620,
        "wires": [
            [
                "113ec5ce8fcdef3a",
                "8e29837282996a31"
            ]
        ]
    },
    {
        "id": "fb58c58.87c1938",
        "type": "comment",
        "z": "2a761808.610238",
        "name": "ситуация",
        "info": "когда stopsell частично заполнился, но потом цена отросла и бот хочет подвинуть ордер дальше вверх. \nПроблема будет если остаток меньше минимума лота.\nСейчас такой ордер мы просто оставляем висеть до заполненности.\nМожно пока в телеграмм о таких случаях стучать, чтобы хозяин вручную разруливал, но по уму надо двигать ордер, на ходу меняя quantity с соответствующей проекцией во floors",
        "x": 1880,
        "y": 920,
        "wires": []
    },
    {
        "id": "d9cd8b69.9e4298",
        "type": "switch",
        "z": "2a761808.610238",
        "name": "raschstopprice ? curstop",
        "property": "bot.ttp.raschstopprice",
        "propertyType": "msg",
        "rules": [
            {
                "t": "gt",
                "v": "bot.ttp.curstop",
                "vt": "msg"
            },
            {
                "t": "lte",
                "v": "bot.ttp.curstop",
                "vt": "msg"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 790,
        "y": 1020,
        "wires": [
            [
                "75de299e.39af68",
                "fa9e35fc1d320ee9"
            ],
            [
                "8384d5a2.b18e28",
                "ab2e499319b986e4",
                "eae2405f4f80842b"
            ]
        ]
    },
    {
        "id": "75de299e.39af68",
        "type": "switch",
        "z": "2a761808.610238",
        "name": "order id > 0 ",
        "property": "bot.ttp.curorderid",
        "propertyType": "msg",
        "rules": [
            {
                "t": "gt",
                "v": "0",
                "vt": "num"
            },
            {
                "t": "eq",
                "v": "0",
                "vt": "num"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 1010,
        "y": 980,
        "wires": [
            [
                "515429a6.bb3a88",
                "53a4502c9820dacf"
            ],
            [
                "cc2bfdcc776b6f80",
                "f0927551487edb15"
            ]
        ]
    },
    {
        "id": "22ce871e.981968",
        "type": "function",
        "z": "2a761808.610238",
        "name": "prepare get ttp order status",
        "func": "//<трекер<\n    let trackname = \"ttp-track-\"+msg.botname;\n    let track = flow.get(trackname);\n    let start_node_time = new Date().getTime();\n    let steptitle = node.name;\n\n    let laststep = track[track.length-1];\n    let last_node_end_time = laststep.end_node_time;\n//>трекер>\nlet moneta = msg.bot.settings.moneta;\nmsg.moneta = moneta;\nlet orderid = msg.bot.ttp.curorderid\nmsg.orderid = orderid;\n\n \nmsg.topic = \"orders-status-\" + msg.bot.settings.userid + \":\" + moneta + \":\" + orderid;\n\n\n\n    //>трекер>\n        let end_node_time = new Date().getTime();\n        let duration = end_node_time - start_node_time;\n        let duration_step = end_node_time - last_node_end_time;\n        track.push({\n            \"steptitle\": steptitle,\n            \"start_node_time\": start_node_time,\n            \"end_node_time\": end_node_time,\n            \"duration_node\": duration,\n            \"duration_step\": duration_step\n        });\n        flow.set(trackname, track);\n    //>трекер>\nnode.status({fill: \"green\", shape: \"ring\", text: orderid});\nreturn msg;\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1240,
        "y": 1340,
        "wires": [
            [
                "d65fadb6.35c73"
            ]
        ],
        "inputLabels": [
            "orderid"
        ],
        "outputLabels": [
            "status"
        ],
        "icon": "node-red-contrib-binance/binance.png"
    },
    {
        "id": "d1ff77a2.4fa0d8",
        "type": "switch",
        "z": "2a761808.610238",
        "name": "статус ордера",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "NEW",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "PARTIALLY_FILLED",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "CANCELED",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "FILLED",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "REJECTED",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "EXPIRED",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 6,
        "x": 1700,
        "y": 1340,
        "wires": [
            [
                "1d26132c.06016d"
            ],
            [
                "1d26132c.06016d"
            ],
            [
                "b0d5adc0.69eab"
            ],
            [
                "b5bd6f90.f563b"
            ],
            [
                "4b4fa1ce.2d444"
            ],
            [
                "4b4fa1ce.2d444"
            ]
        ]
    },
    {
        "id": "4534916e.904b6",
        "type": "comment",
        "z": "2a761808.610238",
        "name": "NEW",
        "info": "",
        "x": 1930,
        "y": 1220,
        "wires": []
    },
    {
        "id": "587bbf9a.07aa8",
        "type": "comment",
        "z": "2a761808.610238",
        "name": "CANCELED",
        "info": "",
        "x": 1950,
        "y": 1320,
        "wires": []
    },
    {
        "id": "f4e2a24.f2c696",
        "type": "comment",
        "z": "2a761808.610238",
        "name": "FILLED",
        "info": "",
        "x": 1930,
        "y": 1420,
        "wires": []
    },
    {
        "id": "cb0cab38.a71d88",
        "type": "comment",
        "z": "2a761808.610238",
        "name": "REJECTED или EXPIRED",
        "info": "",
        "x": 1990,
        "y": 1520,
        "wires": []
    },
    {
        "id": "b6e46ae5.962f68",
        "type": "comment",
        "z": "2a761808.610238",
        "name": "PARTIALLY_FILLED",
        "info": "",
        "x": 2090,
        "y": 1220,
        "wires": []
    },
    {
        "id": "b5bd6f90.f563b",
        "type": "function",
        "z": "2a761808.610238",
        "name": "set sold",
        "func": "msg.bot.ttp.sold = true;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1940,
        "y": 1460,
        "wires": [
            [
                "e4485160.d6d2d"
            ]
        ]
    },
    {
        "id": "3f419d0e.63d7e2",
        "type": "switch",
        "z": "2a761808.610238",
        "name": "status NEW ?",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "true"
            },
            {
                "t": "false"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 1620,
        "y": 860,
        "wires": [
            [
                "49f41bcf9057e789"
            ],
            [
                "c5493216.68ad1"
            ]
        ]
    },
    {
        "id": "e21a46d3.0d0cd8",
        "type": "function",
        "z": "2a761808.610238",
        "name": "prepare data",
        "func": "if (msg.payload == \"NEW\") {\n    msg.payload = true;\n}\nelse {\n    msg.payload = false;\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1430,
        "y": 860,
        "wires": [
            [
                "3f419d0e.63d7e2"
            ]
        ]
    },
    {
        "id": "e84c68c5.b035e8",
        "type": "link in",
        "z": "2a761808.610238",
        "name": "",
        "links": [
            "14218f4f.622ba1"
        ],
        "x": 155,
        "y": 520,
        "wires": [
            [
                "369273d704a8a6bb"
            ]
        ]
    },
    {
        "id": "73657060.c09f3",
        "type": "function",
        "z": "2a761808.610238",
        "name": "update bot floors, finance, sales",
        "func": "const sellprice = msg.bot.ttpprice\nlet comsa = Number(msg.payload);\nlet quantityall = msg.bot.ttp.quantity;\n\nnode.warn(\"finish ttp on floor \");\n\n\n\nnode.send(msg);\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 4230,
        "y": 240,
        "wires": [
            []
        ],
        "icon": "font-awesome/fa-bolt"
    },
    {
        "id": "e4485160.d6d2d",
        "type": "function",
        "z": "2a761808.610238",
        "name": "prepare get ttp order price",
        "func": "\n\nlet moneta = msg.bot.settings.moneta;\nlet orderid = msg.bot.ttp.curorderid;\n\nmsg.payload = [];\nmsg.topic = \"orders-status-\" + msg.bot.settings.userid + \":\" + moneta + \":\" + orderid + \"-price\";\n\n\n\n\nnode.status({fill: \"green\", shape: \"ring\", text: orderid});\nreturn msg;\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2160,
        "y": 1460,
        "wires": [
            [
                "609e4747.ed43d8"
            ]
        ],
        "inputLabels": [
            "orderid"
        ],
        "outputLabels": [
            "status"
        ],
        "icon": "node-red-contrib-binance/binance.png"
    },
    {
        "id": "609e4747.ed43d8",
        "type": "redis-command",
        "z": "2a761808.610238",
        "server": "f120eab2.0a60a8",
        "command": "GET",
        "name": "get order status",
        "topic": "msg.payload",
        "params": "[]",
        "paramsType": "json",
        "payloadType": "json",
        "block": false,
        "x": 2400,
        "y": 1460,
        "wires": [
            [
                "bcd1d88e.da80d8"
            ]
        ]
    },
    {
        "id": "c5493216.68ad1",
        "type": "link out",
        "z": "2a761808.610238",
        "name": "",
        "links": [
            "ccd55cdb.7ed72"
        ],
        "x": 1775,
        "y": 920,
        "wires": []
    },
    {
        "id": "4dfef6b5.251a18",
        "type": "link out",
        "z": "2a761808.610238",
        "name": "",
        "links": [
            "ccd55cdb.7ed72"
        ],
        "x": 1555,
        "y": 1080,
        "wires": []
    },
    {
        "id": "1d26132c.06016d",
        "type": "link out",
        "z": "2a761808.610238",
        "name": "",
        "links": [
            "ccd55cdb.7ed72"
        ],
        "x": 1895,
        "y": 1260,
        "wires": []
    },
    {
        "id": "b0d5adc0.69eab",
        "type": "link out",
        "z": "2a761808.610238",
        "name": "",
        "links": [
            "ccd55cdb.7ed72"
        ],
        "x": 1895,
        "y": 1360,
        "wires": []
    },
    {
        "id": "4b4fa1ce.2d444",
        "type": "link out",
        "z": "2a761808.610238",
        "name": "",
        "links": [
            "ccd55cdb.7ed72"
        ],
        "x": 1895,
        "y": 1560,
        "wires": []
    },
    {
        "id": "bcd1d88e.da80d8",
        "type": "link out",
        "z": "2a761808.610238",
        "name": "",
        "links": [
            "ccd55cdb.7ed72"
        ],
        "x": 2535,
        "y": 1460,
        "wires": []
    },
    {
        "id": "ccbca6c6.392f58",
        "type": "function",
        "z": "2a761808.610238",
        "g": "f4f90b1391070951",
        "name": "tester___",
        "func": "let start_node_time = new Date().getTime();\n\nnode.status({fill: \"green\", shape: \"ring\", text: start_node_time});\n    \n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 2040,
        "y": 260,
        "wires": [
            []
        ]
    },
    {
        "id": "387fcf8a.76cff",
        "type": "function",
        "z": "5f98db3a.7ab21c",
        "name": "order_exec()",
        "func": "",
        "outputs": 1,
        "noerr": 0,
        "initialize": "let guid = global.get('guid');\n\n\nlet order_exec = function (cmd = msg.topic, data = msg.payload) {\n    \n    let promise = new Promise((resolve, reject) => {\n        msg.resolve = resolve;\n        msg.reject = reject;\n    });\n    \n\n    msg.topic = cmd;\n    msg.payload = data;\n    msg.bot = data.bot;\n    msg.botname = data.botname;\n    node.send(Object.assign({}, msg));\n    \n    return promise;\n};\n\nglobal.set('order_exec', order_exec);",
        "finalize": "",
        "libs": [],
        "x": 470,
        "y": 980,
        "wires": [
            [
                "e99da6578187f6b1"
            ]
        ]
    },
    {
        "id": "c985b525.212f78",
        "type": "inject",
        "z": "5f98db3a.7ab21c",
        "name": "cmd, data",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "x": 250,
        "y": 960,
        "wires": [
            [
                "387fcf8a.76cff"
            ]
        ]
    },
    {
        "id": "2bed7653.30adaa",
        "type": "function",
        "z": "5f98db3a.7ab21c",
        "name": "resolve",
        "func": "msg.resolve(msg.payload);\n\n// reject\n// setTimeout(function () {\n//     msg.reject({message: 'Could not request joke'});\n// }, 2000);",
        "outputs": "0",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 840,
        "y": 980,
        "wires": []
    },
    {
        "id": "ade3bf55.b02e3",
        "type": "switch",
        "z": "5f98db3a.7ab21c",
        "name": "cmd",
        "property": "topic",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "setbuy",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "cansel",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "setsell",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "marketsell",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "marketbuy",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 5,
        "x": 1180,
        "y": 1080,
        "wires": [
            [
                "61acbe1ca90546ee",
                "2cfa357e.60327a"
            ],
            [
                "241d62c4.835d6e",
                "ed4fd6ba46f8516f"
            ],
            [
                "56c6a73caae35c2f",
                "3b02c75b1b966e0c"
            ],
            [
                "cc5b16dd.4820c8"
            ],
            [
                "46152e90.390ef8"
            ]
        ]
    },
    {
        "id": "9606b8d3.0957",
        "type": "comment",
        "z": "5f98db3a.7ab21c",
        "name": "setbuy",
        "info": "",
        "x": 1690,
        "y": 960,
        "wires": []
    },
    {
        "id": "2cfa357e.60327a",
        "type": "function",
        "z": "5f98db3a.7ab21c",
        "name": "set buy order on binance",
        "func": "\nfunction parseApiError(error) {\n  if (error.body) {\n    try {\n      var resp = JSON.parse(error.body);\n      return resp.msg;\n    } catch (error) {/* pass thru */}\n  }\n  return \"Unknown error. Status code: \"+error.statsCode;\n}\n\nlet LBinance = global.get('gBinance');\n//node.warn(LBinance);\nlet key = global.get('key');\nlet secret = global.get('secret');\n\n\nlet binance = new LBinance().options({\n\tAPIKEY: key,\n\tAPISECRET: secret,\n\tuseServerTime: true,\n\tadjustForTimeDifference: true \n});\n\n\n\n\nlet moneta = msg.payload.moneta;\nlet quantity = Number(msg.payload.quantity);\nlet price = Number(msg.payload.price);\n//node.warn(moneta+\" set buy order q = \"+quantity+\" p = \"+price);\n\n\n\n\nbinance.useServerTime(function() {\n    binance.buy(moneta, quantity, price, {type:'LIMIT'}, (err, resp) => {\n // console.info(\"Limit Buy response\", response);\n // console.info(\"order id: \" + response.orderId);\n    if (err) {\n        var errorMsg = parseApiError(err) + \", moneta:\" + moneta;\n        node.error(errorMsg, msg);\n\n        msg.err = err;\n        node.status({fill: \"red\", shape: \"ring\", text: errorMsg});\n        \n        node.send(msg);\n        //return [msg, null];\n    \n    }\n    if (resp) {\n        msg.orderid = resp.orderId;\n        msg.resp = resp;\n        node.status({fill: \"green\", shape: \"ring\", text: resp.orderId});\n        \n        node.send(msg);\n       // return [null,msg];\n                \n    }\n    //node.status({}); //clear status message\n});\n\t\n});",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "gBinance",
                "module": "node-binance-api"
            }
        ],
        "x": 1870,
        "y": 960,
        "wires": [
            [
                "be53914b.bf62b",
                "af22321898c8895b"
            ]
        ]
    },
    {
        "id": "cc5b16dd.4820c8",
        "type": "function",
        "z": "5f98db3a.7ab21c",
        "name": "set market sell",
        "func": "\nfunction parseApiError(error) {\n    if (error.body) {\n        try {\n            var resp = JSON.parse(error.body);\n            return resp.msg;\n        } catch (error) {/* pass thru */ }\n    }\n    return \"Unknown error. Status code: \" + error.statsCode;\n}\n\nlet LBinance = global.get('gBinance');\nlet key = global.get('key');\nlet secret = global.get('secret');\n\nlet binance = new LBinance().options({\n    APIKEY: key,\n    APISECRET: secret,\n    reconnect: false,\n    useServerTime: true\n});\n\nlet moneta = msg.payload.moneta;\nlet quantity = Number(msg.payload.quantity);\n\nnode.warn(\"market sell sp:\" + \" q:\" + quantity);\n\nbinance.useServerTime(function () {\n    binance.marketSell(moneta, quantity, function (err, resp) {\n        if (err) {\n            var errorMsg = parseApiError(err);\n            msg.err = err;\n            node.error(errorMsg, msg);\n            node.status({ fill: \"red\", shape: \"ring\", text: errorMsg });\n            node.send(msg);\n\n\n        }\n        if (resp) {\n            //msg.bot.ttp.curorderid = resp.orderId;\n            //resp.curstop = stopprice;\n            //msg.bot.ttp.quantity = quantity;\n            msg.resp = resp;\n            node.status({ fill: \"green\", shape: \"ring\" });\n            node.send(msg);\n        }\n        //node.status({}); //clear status message\n\n\n\n        //return;\n    })\n\n});\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1860,
        "y": 1200,
        "wires": [
            [
                "c8becf6bb0419135"
            ]
        ]
    },
    {
        "id": "46152e90.390ef8",
        "type": "function",
        "z": "5f98db3a.7ab21c",
        "name": "",
        "func": "\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 1580,
        "y": 1240,
        "wires": [
            []
        ]
    },
    {
        "id": "df242fa3.762dc",
        "type": "comment",
        "z": "5f98db3a.7ab21c",
        "name": "cansel",
        "info": "",
        "x": 1690,
        "y": 1040,
        "wires": []
    },
    {
        "id": "f8fb32fa.8c38e",
        "type": "comment",
        "z": "5f98db3a.7ab21c",
        "name": "setsell",
        "info": "",
        "x": 1690,
        "y": 1120,
        "wires": []
    },
    {
        "id": "7fc0c8c6.6d262",
        "type": "comment",
        "z": "5f98db3a.7ab21c",
        "name": "marketsell",
        "info": "",
        "x": 1700,
        "y": 1200,
        "wires": []
    },
    {
        "id": "594b48ef.1a0e68",
        "type": "comment",
        "z": "5f98db3a.7ab21c",
        "name": "marketbuy",
        "info": "",
        "x": 1440,
        "y": 1240,
        "wires": []
    },
    {
        "id": "8eca3137.03e0a8",
        "type": "switch",
        "z": "5f98db3a.7ab21c",
        "name": "work mode",
        "property": "workmode",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "binance",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "binance_backtest",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 890,
        "y": 1260,
        "wires": [
            [
                "ade3bf55.b02e3"
            ],
            [
                "72c134ed.8f07cc"
            ]
        ]
    },
    {
        "id": "8af21b87.015cb",
        "type": "comment",
        "z": "5f98db3a.7ab21c",
        "name": "binance",
        "info": "",
        "x": 1020,
        "y": 1220,
        "wires": []
    },
    {
        "id": "90c4f7da.42c3b8",
        "type": "comment",
        "z": "5f98db3a.7ab21c",
        "name": "binance_backtest",
        "info": "",
        "x": 1050,
        "y": 1300,
        "wires": []
    },
    {
        "id": "ac3992bd.d4dd5",
        "type": "function",
        "z": "5f98db3a.7ab21c",
        "name": "get workmode",
        "func": "let workmode = global.get('workmode');\nmsg.workmode = workmode;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 700,
        "y": 1260,
        "wires": [
            [
                "8eca3137.03e0a8",
                "4cfd5bbd.59f8dc"
            ]
        ]
    },
    {
        "id": "1adeb6d2.0028b1",
        "type": "function",
        "z": "5f98db3a.7ab21c",
        "g": "79e296b2.11a2d8",
        "name": "register work mode",
        "func": "let key = msg.payload;\n\nglobal.set('workmode',key);\n\n\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 2030,
        "y": 480,
        "wires": [
            [
                "9a835f6c.6a1ab"
            ]
        ]
    },
    {
        "id": "174c55c9.364c72",
        "type": "inject",
        "z": "5f98db3a.7ab21c",
        "g": "79e296b2.11a2d8",
        "name": "workmode",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "binance",
        "payloadType": "str",
        "x": 1810,
        "y": 460,
        "wires": [
            [
                "1adeb6d2.0028b1"
            ]
        ]
    },
    {
        "id": "af87984e.38efa8",
        "type": "ui_button",
        "z": "5f98db3a.7ab21c",
        "g": "79e296b2.11a2d8",
        "name": "",
        "group": "261e447.e94ad3c",
        "order": 1,
        "width": "4",
        "height": "1",
        "passthru": false,
        "label": "binance",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "icon": "",
        "payload": "binance",
        "payloadType": "str",
        "topic": "",
        "topicType": "str",
        "x": 1780,
        "y": 500,
        "wires": [
            [
                "1adeb6d2.0028b1"
            ]
        ]
    },
    {
        "id": "af6bd09e.c7c798",
        "type": "ui_button",
        "z": "5f98db3a.7ab21c",
        "g": "79e296b2.11a2d8",
        "name": "",
        "group": "261e447.e94ad3c",
        "order": 1,
        "width": "4",
        "height": "1",
        "passthru": false,
        "label": "binance_backtest",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "icon": "",
        "payload": "binance_backtest",
        "payloadType": "str",
        "topic": "",
        "x": 1810,
        "y": 540,
        "wires": [
            [
                "1adeb6d2.0028b1"
            ]
        ]
    },
    {
        "id": "9a835f6c.6a1ab",
        "type": "ui_text",
        "z": "5f98db3a.7ab21c",
        "g": "79e296b2.11a2d8",
        "group": "261e447.e94ad3c",
        "order": 2,
        "width": "4",
        "height": "1",
        "name": "",
        "label": "mode now",
        "format": "{{msg.payload}}",
        "layout": "row-spread",
        "x": 2230,
        "y": 480,
        "wires": []
    },
    {
        "id": "4cfd5bbd.59f8dc",
        "type": "debug",
        "z": "5f98db3a.7ab21c",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 730,
        "y": 1220,
        "wires": []
    },
    {
        "id": "d91e5b6e.e583c",
        "type": "function",
        "z": "5f98db3a.7ab21c",
        "name": "",
        "func": "let t = \"qqqq\";\nlet p = {q:3,a:4};\nconst gbl = global.get('set_buy_order')(t,p);\n\ngbl.then(gbl => {\n    \n\n    node.status({fill:\"green\",shape:\"dot\"});\n    node.send(msg);\n\n}).catch(error => {\n    \n\n    node.status({fill:\"red\",shape:\"dot\"});\n    \n    node.error(error);\n});",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 1980,
        "y": 1380,
        "wires": [
            []
        ]
    },
    {
        "id": "72c134ed.8f07cc",
        "type": "switch",
        "z": "5f98db3a.7ab21c",
        "name": "cmd",
        "property": "topic",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "setbuy",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "cansel",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "setsell",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "marketsell",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "marketbuy",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 5,
        "x": 1180,
        "y": 1460,
        "wires": [
            [
                "d9e1bbad.d8dc4"
            ],
            [
                "7d460277.6d43cc"
            ],
            [
                "83dab1d2.d3929"
            ],
            [
                "c2ee13d8.13fab8"
            ],
            [
                "4fd27ca5.37d60c"
            ]
        ]
    },
    {
        "id": "937d8df0.8d461",
        "type": "comment",
        "z": "5f98db3a.7ab21c",
        "name": "setbuy",
        "info": "",
        "x": 1450,
        "y": 1360,
        "wires": []
    },
    {
        "id": "d9e1bbad.d8dc4",
        "type": "function",
        "z": "5f98db3a.7ab21c",
        "name": "",
        "func": "\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 1580,
        "y": 1360,
        "wires": [
            [
                "f6791e2.e72656"
            ]
        ]
    },
    {
        "id": "7d460277.6d43cc",
        "type": "function",
        "z": "5f98db3a.7ab21c",
        "name": "",
        "func": "\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 1580,
        "y": 1420,
        "wires": [
            [
                "4b18cb02.0baa0c"
            ]
        ]
    },
    {
        "id": "83dab1d2.d3929",
        "type": "function",
        "z": "5f98db3a.7ab21c",
        "name": "",
        "func": "\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 1580,
        "y": 1480,
        "wires": [
            [
                "2827f6dd.5c7162"
            ]
        ]
    },
    {
        "id": "c2ee13d8.13fab8",
        "type": "function",
        "z": "5f98db3a.7ab21c",
        "name": "",
        "func": "\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 1580,
        "y": 1540,
        "wires": [
            [
                "5f7186a8.0ea498"
            ]
        ]
    },
    {
        "id": "4fd27ca5.37d60c",
        "type": "function",
        "z": "5f98db3a.7ab21c",
        "name": "",
        "func": "\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 1580,
        "y": 1600,
        "wires": [
            [
                "e5d314a7.f6825"
            ]
        ]
    },
    {
        "id": "8044def5.ed945",
        "type": "comment",
        "z": "5f98db3a.7ab21c",
        "name": "cansel",
        "info": "",
        "x": 1450,
        "y": 1420,
        "wires": []
    },
    {
        "id": "f52a6bcf.7d3728",
        "type": "comment",
        "z": "5f98db3a.7ab21c",
        "name": "setsell",
        "info": "",
        "x": 1450,
        "y": 1480,
        "wires": []
    },
    {
        "id": "fa849ff6.802878",
        "type": "comment",
        "z": "5f98db3a.7ab21c",
        "name": "marketsell",
        "info": "",
        "x": 1440,
        "y": 1540,
        "wires": []
    },
    {
        "id": "f38ba797.bdd398",
        "type": "comment",
        "z": "5f98db3a.7ab21c",
        "name": "marketbuy",
        "info": "",
        "x": 1440,
        "y": 1600,
        "wires": []
    },
    {
        "id": "f6791e2.e72656",
        "type": "debug",
        "z": "5f98db3a.7ab21c",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1790,
        "y": 1360,
        "wires": []
    },
    {
        "id": "4b18cb02.0baa0c",
        "type": "debug",
        "z": "5f98db3a.7ab21c",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1790,
        "y": 1420,
        "wires": []
    },
    {
        "id": "2827f6dd.5c7162",
        "type": "debug",
        "z": "5f98db3a.7ab21c",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1790,
        "y": 1480,
        "wires": []
    },
    {
        "id": "5f7186a8.0ea498",
        "type": "debug",
        "z": "5f98db3a.7ab21c",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1790,
        "y": 1540,
        "wires": []
    },
    {
        "id": "e5d314a7.f6825",
        "type": "debug",
        "z": "5f98db3a.7ab21c",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1790,
        "y": 1600,
        "wires": []
    },
    {
        "id": "be53914b.bf62b",
        "type": "function",
        "z": "5f98db3a.7ab21c",
        "name": "обработчик ошибок",
        "func": "if (msg.err) {\n    msg.payload.statusCode = \"not ok\";\n    msg.payload.statusBody = msg.err.body;\n    //node.warn(msg.err.statusCode)\n    \n\n    \n    \n    return [null,msg];\n} else {\n    msg.payload.statusCode = \"ok\";\n    msg.payload.statusBody = msg.resp;\n    //msg.payload.bot = msg.bot;\n    return [msg,null];\n}\n\n\n\n",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2120,
        "y": 960,
        "wires": [
            [
                "563d14b6.3a5db4"
            ],
            [
                "c0b46394.7bd6e"
            ]
        ]
    },
    {
        "id": "5a624a9b.734534",
        "type": "link in",
        "z": "5f98db3a.7ab21c",
        "name": "",
        "links": [
            "563d14b6.3a5db4",
            "c0b46394.7bd6e",
            "2253204.d02816",
            "874d8336.9507e",
            "11245d07d29c58d7",
            "f873485fa819703f",
            "0ba1f4d05ad6d76a",
            "6250c3310b6d177b"
        ],
        "x": 655,
        "y": 980,
        "wires": [
            [
                "2bed7653.30adaa"
            ]
        ]
    },
    {
        "id": "563d14b6.3a5db4",
        "type": "link out",
        "z": "5f98db3a.7ab21c",
        "name": "",
        "links": [
            "5a624a9b.734534",
            "17bad0f2.7af38f"
        ],
        "x": 2295,
        "y": 940,
        "wires": []
    },
    {
        "id": "c0b46394.7bd6e",
        "type": "link out",
        "z": "5f98db3a.7ab21c",
        "name": "",
        "links": [
            "5a624a9b.734534",
            "17bad0f2.7af38f"
        ],
        "x": 2295,
        "y": 980,
        "wires": []
    },
    {
        "id": "d9186e74.22817",
        "type": "inject",
        "z": "654ea140.2275a8",
        "g": "3684cd36.8432c2",
        "name": "test",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 190,
        "y": 180,
        "wires": [
            [
                "389f73e5.59ca9c"
            ]
        ]
    },
    {
        "id": "389f73e5.59ca9c",
        "type": "function",
        "z": "654ea140.2275a8",
        "g": "3684cd36.8432c2",
        "name": "",
        "func": "msg.payload = [\"355\",\"356.3\",\"358\",\"360\"];\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 380,
        "y": 180,
        "wires": [
            [
                "95dd2e2c.06eea"
            ]
        ]
    },
    {
        "id": "95dd2e2c.06eea",
        "type": "split",
        "z": "654ea140.2275a8",
        "g": "3684cd36.8432c2",
        "name": "",
        "splt": "\\n",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "x": 570,
        "y": 180,
        "wires": [
            [
                "855d1e5e.112688"
            ]
        ]
    },
    {
        "id": "855d1e5e.112688",
        "type": "delay",
        "z": "654ea140.2275a8",
        "g": "3684cd36.8432c2",
        "name": "",
        "pauseType": "rate",
        "timeout": "2",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "2",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "x": 750,
        "y": 180,
        "wires": [
            [
                "1bb1a9a2.c72076"
            ]
        ]
    },
    {
        "id": "1bb1a9a2.c72076",
        "type": "function",
        "z": "654ea140.2275a8",
        "g": "3684cd36.8432c2",
        "name": "",
        "func": "     msg.topic = \"prices:BNBqUSDT\";\n\n    \nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 940,
        "y": 180,
        "wires": [
            [
                "8d1c9d05.67e5e8"
            ]
        ]
    },
    {
        "id": "5c14e61c.17df1",
        "type": "debug",
        "z": "654ea140.2275a8",
        "g": "3684cd36.8432c2",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1380,
        "y": 180,
        "wires": []
    },
    {
        "id": "10eab9fb.e22636",
        "type": "inject",
        "z": "654ea140.2275a8",
        "g": "3684cd36.8432c2",
        "name": "test",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 780,
        "y": 260,
        "wires": [
            [
                "a003933f.68583"
            ]
        ]
    },
    {
        "id": "a003933f.68583",
        "type": "function",
        "z": "654ea140.2275a8",
        "g": "3684cd36.8432c2",
        "name": "",
        "func": "msg.payload = \"355\";\nmsg.topic = \"prices:BNBqUSDT\";\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 970,
        "y": 260,
        "wires": [
            [
                "8d1c9d05.67e5e8"
            ]
        ]
    },
    {
        "id": "8d1c9d05.67e5e8",
        "type": "redis-command",
        "z": "654ea140.2275a8",
        "g": "3684cd36.8432c2",
        "server": "f120eab2.0a60a8",
        "command": "SET",
        "name": "",
        "topic": "",
        "params": "[]",
        "paramsType": "json",
        "payloadType": "json",
        "block": false,
        "x": 1170,
        "y": 200,
        "wires": [
            [
                "5c14e61c.17df1"
            ]
        ]
    },
    {
        "id": "eb0ebfc5.9889a",
        "type": "file",
        "z": "5f98db3a.7ab21c",
        "g": "4bf7491f.8e70b",
        "name": "",
        "filename": "",
        "appendNewline": true,
        "createDir": true,
        "overwriteFile": "false",
        "encoding": "none",
        "x": 790,
        "y": 800,
        "wires": [
            [
                "afaf3a2c.646c88"
            ]
        ]
    },
    {
        "id": "6868e3af.6c4b4c",
        "type": "function",
        "z": "5f98db3a.7ab21c",
        "g": "4bf7491f.8e70b",
        "name": "data prepare",
        "func": "var date = new Date();\nvar time = new Date().getTime();\n\nmsg.payload = date.toString().split('GMT')[0] + \"-\" + time +\" : \"+msg.payload;\nmsg.filename = \"/data/journals/\"+msg.topic+\".txt\";\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 470,
        "y": 800,
        "wires": [
            [
                "eb0ebfc5.9889a"
            ]
        ]
    },
    {
        "id": "6526e141.43af9",
        "type": "function",
        "z": "5f98db3a.7ab21c",
        "g": "4bf7491f.8e70b",
        "name": "tilog()",
        "func": "",
        "outputs": 1,
        "noerr": 0,
        "initialize": "let guid = global.get('guid');\n\n\nlet tilog = function (botname = msg.topic, data = msg.payload) {\n    \n    let promise = new Promise((resolve, reject) => {\n        msg.resolve = resolve;\n        msg.reject = reject;\n    });\n    \n\n    msg.topic = botname;\n    msg.payload = data;\n\n    node.send(Object.assign({}, msg));\n    \n    return promise;\n};\n\nglobal.set('tilog', tilog);",
        "finalize": "",
        "libs": [],
        "x": 310,
        "y": 800,
        "wires": [
            [
                "6868e3af.6c4b4c"
            ]
        ]
    },
    {
        "id": "eab25c49.10d9c8",
        "type": "inject",
        "z": "5f98db3a.7ab21c",
        "g": "4bf7491f.8e70b",
        "name": "botname, log msg",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "x": 130,
        "y": 800,
        "wires": [
            [
                "6526e141.43af9"
            ]
        ]
    },
    {
        "id": "afaf3a2c.646c88",
        "type": "function",
        "z": "5f98db3a.7ab21c",
        "g": "4bf7491f.8e70b",
        "name": "resolve",
        "func": "msg.resolve(msg.payload);\n\n// reject\n// setTimeout(function () {\n//     msg.reject({message: 'Could not request joke'});\n// }, 2000);",
        "outputs": "0",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 940,
        "y": 800,
        "wires": []
    },
    {
        "id": "9018737c.12e188",
        "type": "inject",
        "z": "5f98db3a.7ab21c",
        "g": "4bf7491f.8e70b",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 1180,
        "y": 800,
        "wires": [
            [
                "81a608ac.0eeab8"
            ]
        ]
    },
    {
        "id": "81a608ac.0eeab8",
        "type": "function",
        "z": "5f98db3a.7ab21c",
        "g": "4bf7491f.8e70b",
        "name": "tilog",
        "func": "let botname = \"LINKDOWNUSDT-1626469485\";\nlet data = \"dfdf\";\nconst tilog = global.get('tilog')(botname,data);\n\ntilog.then(tilog => {\n\n\n        node.status({fill:\"green\",shape:\"dot\"});\n    node.send(msg);\n     \n    \n\n}).catch(error => {\n    \n    msg.error = error;\n    node.status({fill:\"red\",shape: \"ring\"});\n    \n    node.error(error);\n});",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 1350,
        "y": 800,
        "wires": [
            [
                "d615849.c726078"
            ]
        ]
    },
    {
        "id": "d615849.c726078",
        "type": "debug",
        "z": "5f98db3a.7ab21c",
        "g": "4bf7491f.8e70b",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1510,
        "y": 800,
        "wires": []
    },
    {
        "id": "efc7fd64.6f06b8",
        "type": "function",
        "z": "5f98db3a.7ab21c",
        "name": "tilog",
        "func": "//запись в журнал\nlet botname = msg.bot.settings.botname;\nlet data = \"Ошибка при выставлении ордера на бирже - \"+msg.err.body;\n\nconst tilog = global.get('tilog')(botname,data);\n\ntilog;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 730,
        "y": 1520,
        "wires": [
            []
        ]
    },
    {
        "id": "a7628168.861ce",
        "type": "redis-instance",
        "z": "5df15275.2888ec",
        "g": "f8a5c66461864831",
        "server": "f120eab2.0a60a8",
        "name": "",
        "topic": "redis",
        "location": "flow",
        "x": 770,
        "y": 120,
        "wires": []
    },
    {
        "id": "daa898ee.e48da8",
        "type": "inject",
        "z": "5df15275.2888ec",
        "name": "d3fmoh2rVoVNgIcpLTFZBE0jHnI2",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "d3fmoh2rVoVNgIcpLTFZBE0jHnI2",
        "payloadType": "str",
        "x": 3240,
        "y": 1500,
        "wires": [
            [
                "d073d696.0c367"
            ]
        ]
    },
    {
        "id": "d073d696.0c367",
        "type": "function",
        "z": "5df15275.2888ec",
        "name": "getbotlist",
        "func": "\nlet guid = msg.payload;\n\nconst gbl = global.get('getbotlist')(guid);\n\ngbl.then(gbl => {\n    \n    msg.payload = gbl;\n    node.send(msg);\n\n}).catch(error => {\n    node.error(error);\n});",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3460,
        "y": 1500,
        "wires": [
            [
                "d0cba81.323b658"
            ]
        ]
    },
    {
        "id": "d0cba81.323b658",
        "type": "debug",
        "z": "5df15275.2888ec",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 3650,
        "y": 1500,
        "wires": []
    },
    {
        "id": "9a0212b.22ad2f",
        "type": "inject",
        "z": "5df15275.2888ec",
        "g": "e83aa13614517c81",
        "name": " stop",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "reset",
                "v": "true",
                "vt": "bool"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 2790,
        "y": 560,
        "wires": [
            [
                "ba11b816.73cd58"
            ]
        ]
    },
    {
        "id": "ba11b816.73cd58",
        "type": "redis-out",
        "z": "5df15275.2888ec",
        "g": "e83aa13614517c81",
        "server": "f120eab2.0a60a8",
        "command": "publish",
        "name": "",
        "topic": "stop",
        "obj": false,
        "x": 2790,
        "y": 600,
        "wires": []
    },
    {
        "id": "539b4f99.508ec8",
        "type": "inject",
        "z": "5df15275.2888ec",
        "g": "e83aa13614517c81",
        "name": "start",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payloadType": "date",
        "x": 2370,
        "y": 560,
        "wires": [
            [
                "82b5feb8.b8894"
            ]
        ]
    },
    {
        "id": "82b5feb8.b8894",
        "type": "redis-out",
        "z": "5df15275.2888ec",
        "g": "e83aa13614517c81",
        "server": "f120eab2.0a60a8",
        "command": "publish",
        "name": "",
        "topic": "start",
        "obj": false,
        "x": 2370,
        "y": 600,
        "wires": []
    },
    {
        "id": "61f763b0.65d2b4",
        "type": "inject",
        "z": "5df15275.2888ec",
        "g": "e83aa13614517c81",
        "name": "start1",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 2550,
        "y": 560,
        "wires": [
            [
                "43e93874.b7141"
            ]
        ]
    },
    {
        "id": "43e93874.b7141",
        "type": "redis-out",
        "z": "5df15275.2888ec",
        "g": "e83aa13614517c81",
        "server": "f120eab2.0a60a8",
        "command": "publish",
        "name": "",
        "topic": "start1",
        "obj": false,
        "x": 2550,
        "y": 600,
        "wires": []
    },
    {
        "id": "241d62c4.835d6e",
        "type": "function",
        "z": "5f98db3a.7ab21c",
        "name": "cansel order",
        "func": "\n\nfunction parseApiError(error) {\n  if (error.body) {\n    try {\n      var resp = JSON.parse(error.body);\n      return resp.msg;\n    } catch (error) {/* pass thru */}\n  }\n  return \"Unknown error. Status code: \"+error.statsCode;\n}\n\nlet LBinance = global.get('gBinance');\n//node.warn(LBinance);\nlet key = global.get('key');\nlet secret = global.get('secret');\n\nlet binance = new LBinance().options({\n\tAPIKEY: key,\n\tAPISECRET: secret,\n\treconnect: false,\n\tuseServerTime: true\n});\n\nlet moneta = msg.payload.moneta;\nlet orderid = msg.payload.orderid;\n\n//msg.payload = \"qjson.status\";\n\nbinance.useServerTime(function() {\nbinance.cancel(moneta, orderid, (err, resp) => {\n // console.info(\"Limit Buy response\", response);\n // console.info(\"order id: \" + response.orderId);\n    if (err) {\n        var errorMsg = parseApiError(err) + \", moneta:\" + moneta;\n        node.error(errorMsg, msg);\n        \n\n    msg.err = err;\n    node.status({fill: \"red\", shape: \"ring\", text: errorMsg});\n    node.send(msg);\n        \n    \n    }\n    if (resp) {\n        msg.orderid = resp.orderId;\n        msg.resp = resp;\n        \n\n    node.status({fill: \"green\", shape: \"ring\"});\n    node.send(msg);\n        \n    }\n    //node.status({}); //clear status message\n})});\n\n\n\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1830,
        "y": 1040,
        "wires": [
            [
                "6f817e7d.c291c"
            ]
        ]
    },
    {
        "id": "6f817e7d.c291c",
        "type": "function",
        "z": "5f98db3a.7ab21c",
        "name": "обработчик ошибок",
        "func": "if (msg.err) {\n    msg.payload.statusCode = \"not ok\";\n    msg.payload.statusBody = msg.err.body;\n    //node.warn(msg.err.statusCode)\n    \n\n    \n    \n    return [null,msg];\n} else {\n    msg.payload.statusCode = \"ok\";\n    msg.payload.statusBody = msg.resp;\n    //msg.payload.bot = msg.bot;\n    return [msg,null];\n}\n\n\n\n",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2080,
        "y": 1040,
        "wires": [
            [
                "85f53fe7.0846f8",
                "2253204.d02816"
            ],
            [
                "9ebc7b79.d11ad8",
                "874d8336.9507e"
            ]
        ]
    },
    {
        "id": "85f53fe7.0846f8",
        "type": "debug",
        "z": "5f98db3a.7ab21c",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 2390,
        "y": 1020,
        "wires": []
    },
    {
        "id": "9ebc7b79.d11ad8",
        "type": "debug",
        "z": "5f98db3a.7ab21c",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 2390,
        "y": 1060,
        "wires": []
    },
    {
        "id": "2253204.d02816",
        "type": "link out",
        "z": "5f98db3a.7ab21c",
        "name": "",
        "links": [
            "5a624a9b.734534",
            "17bad0f2.7af38f"
        ],
        "x": 2295,
        "y": 1020,
        "wires": []
    },
    {
        "id": "874d8336.9507e",
        "type": "link out",
        "z": "5f98db3a.7ab21c",
        "name": "",
        "links": [
            "5a624a9b.734534",
            "17bad0f2.7af38f"
        ],
        "x": 2295,
        "y": 1060,
        "wires": []
    },
    {
        "id": "130f3240.00961e",
        "type": "function",
        "z": "5f98db3a.7ab21c",
        "g": "8ff1d3c1.b9bf5",
        "name": "get_order_status()",
        "func": "",
        "outputs": 1,
        "noerr": 0,
        "initialize": "\n\n\nlet get_order_status = function (moneta = msg.moneta, orderid = msg.orderid) {\n    \n    let promise = new Promise((resolve, reject) => {\n        msg.resolve = resolve;\n        msg.reject = reject;\n    });\n    \n\n    msg.moneta = moneta;\n    msg.orderid = orderid;\n    \n    node.send(Object.assign({}, msg));\n    \n    return promise;\n};\n\nglobal.set('get_order_status', get_order_status);",
        "finalize": "",
        "libs": [],
        "x": 210,
        "y": 1960,
        "wires": [
            [
                "607a1476.9d2f3c"
            ]
        ]
    },
    {
        "id": "f4452587.561d48",
        "type": "inject",
        "z": "5f98db3a.7ab21c",
        "g": "8ff1d3c1.b9bf5",
        "name": "moneta,orderid",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "x": 220,
        "y": 1880,
        "wires": [
            [
                "130f3240.00961e"
            ]
        ]
    },
    {
        "id": "6b7c6b19.00a204",
        "type": "function",
        "z": "5f98db3a.7ab21c",
        "g": "8ff1d3c1.b9bf5",
        "name": "resolve",
        "func": "msg.resolve(msg.payload);\n// reject\n// setTimeout(function () {\n//     msg.reject({message: 'Could not request joke'});\n// }, 2000);",
        "outputs": "0",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 780,
        "y": 1880,
        "wires": []
    },
    {
        "id": "b1193833.175118",
        "type": "switch",
        "z": "5f98db3a.7ab21c",
        "g": "8ff1d3c1.b9bf5",
        "name": "work mode",
        "property": "workmode",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "binance",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "binance_backtest",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 390,
        "y": 2160,
        "wires": [
            [
                "b5f725fd.240e98",
                "13c65b3e.750f95"
            ],
            [
                "d73dab1c.a64828"
            ]
        ]
    },
    {
        "id": "efe6ca9d.d20898",
        "type": "comment",
        "z": "5f98db3a.7ab21c",
        "g": "8ff1d3c1.b9bf5",
        "name": "binance",
        "info": "",
        "x": 430,
        "y": 2100,
        "wires": []
    },
    {
        "id": "2ccabce5.3df754",
        "type": "comment",
        "z": "5f98db3a.7ab21c",
        "g": "8ff1d3c1.b9bf5",
        "name": "binance_backtest",
        "info": "",
        "x": 400,
        "y": 2220,
        "wires": []
    },
    {
        "id": "307f6fe7.76709",
        "type": "function",
        "z": "5f98db3a.7ab21c",
        "g": "8ff1d3c1.b9bf5",
        "name": "get workmode",
        "func": "let workmode = global.get('workmode');\nmsg.workmode = workmode;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 200,
        "y": 2160,
        "wires": [
            [
                "b1193833.175118"
            ]
        ]
    },
    {
        "id": "f83aa4a.5b36658",
        "type": "link in",
        "z": "5f98db3a.7ab21c",
        "g": "8ff1d3c1.b9bf5",
        "name": "",
        "links": [
            "840a8727.00fd28",
            "9fcdc428.e98b78",
            "6126ca08.741e74",
            "5419e44a.d5383c",
            "f6fb5868.e9bd18",
            "301639c.27435c6",
            "d73dab1c.a64828",
            "bf190e9d.225ad"
        ],
        "x": 655,
        "y": 1880,
        "wires": [
            [
                "6b7c6b19.00a204"
            ]
        ]
    },
    {
        "id": "48d517fa.523898",
        "type": "function",
        "z": "5f98db3a.7ab21c",
        "name": "get orderstatus on binance",
        "func": "\nfunction parseApiError(error) {\n  if (error.body) {\n    try {\n      var resp = JSON.parse(error.body);\n      return resp.msg;\n    } catch (error) {/* pass thru */}\n  }\n  return \"Unknown error. Status code: \"+error.statsCode;\n}\n\nlet LBinance = global.get('gBinance');\n//node.warn(LBinance);\nlet key = global.get('key');\nlet secret = global.get('secret');\n\n\nlet binance = new LBinance().options({\n\tAPIKEY: key,\n\tAPISECRET: secret,\n\tuseServerTime: true,\n\tadjustForTimeDifference: true \n});\n\n\n\n\nlet moneta = msg.moneta;\nlet orderid = Number(msg.orderid);\n\nbinance.useServerTime(function() {\n    binance.orderStatus(moneta, orderid, (err, resp) => {\n // console.info(\"Limit Buy response\", response);\n // console.info(\"order id: \" + response.orderId);\n    if (err) {\n        var errorMsg = parseApiError(err) + \", moneta:\" + moneta;\n        node.error(errorMsg, msg);\n\n        msg.err = err;\n        node.status({fill: \"red\", shape: \"ring\", text: errorMsg});\n        \n        node.send(msg);\n        //return [msg, null];\n    \n    }\n    if (resp) {\n        msg.orderid = resp.orderId;\n        msg.resp = resp;\n        node.status({fill: \"green\", shape: \"ring\", text: resp.orderId});\n        \n        node.send(msg);\n       // return [null,msg];\n                \n    }\n    //node.status({}); //clear status message\n});\n\t\n});",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 1900,
        "y": 1840,
        "wires": [
            [
                "1ca2cc64.32af24"
            ]
        ]
    },
    {
        "id": "e9037d29.5aae6",
        "type": "inject",
        "z": "5f98db3a.7ab21c",
        "name": "",
        "props": [
            {
                "p": "orderid",
                "v": "222365055",
                "vt": "num"
            },
            {
                "p": "moneta",
                "v": "LINKDOWNUSDT",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 1690,
        "y": 1840,
        "wires": [
            [
                "48d517fa.523898"
            ]
        ]
    },
    {
        "id": "1ca2cc64.32af24",
        "type": "debug",
        "z": "5f98db3a.7ab21c",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 2110,
        "y": 1840,
        "wires": []
    },
    {
        "id": "b5f725fd.240e98",
        "type": "function",
        "z": "5f98db3a.7ab21c",
        "g": "8ff1d3c1.b9bf5",
        "name": "get orderstatus on binance",
        "func": "\nfunction parseApiError(error) {\n  if (error.body) {\n    try {\n      var resp = JSON.parse(error.body);\n      return resp.msg;\n    } catch (error) {/* pass thru */}\n  }\n  return \"Unknown error. Status code: \"+error.statsCode;\n}\n\nlet LBinance = global.get('gBinance');\n//node.warn(LBinance);\nlet key = global.get('key');\nlet secret = global.get('secret');\n\n\nlet binance = new LBinance().options({\n\tAPIKEY: key,\n\tAPISECRET: secret,\n\tuseServerTime: true,\n\tadjustForTimeDifference: true \n});\n\n\n\n\nlet moneta = msg.moneta;\nlet orderid = Number(msg.orderid);\n\nbinance.useServerTime(function() {\n    binance.orderStatus(moneta, orderid, (err, resp) => {\n // console.info(\"Limit Buy response\", response);\n // console.info(\"order id: \" + response.orderId);\n    if (err) {\n        var errorMsg = parseApiError(err) + \", moneta:\" + moneta;\n        node.error(errorMsg, msg);\n\n        msg.err = err;\n        node.status({fill: \"red\", shape: \"ring\", text: errorMsg});\n        \n        node.send(msg);\n        //return [msg, null];\n    \n    }\n    if (resp) {\n        msg.order_status = resp.status;\n        msg.resp = resp;\n        node.status({fill: \"green\", shape: \"ring\", text: resp.orderId});\n        \n        node.send(msg);\n       // return [null,msg];\n                \n    }\n    //node.status({}); //clear status message\n});\n\t\n});",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 620,
        "y": 2140,
        "wires": [
            [
                "ec0d7b62.22bf98"
            ]
        ]
    },
    {
        "id": "f6fb5868.e9bd18",
        "type": "link out",
        "z": "5f98db3a.7ab21c",
        "g": "8ff1d3c1.b9bf5",
        "name": "",
        "links": [
            "f83aa4a.5b36658"
        ],
        "x": 1035,
        "y": 2160,
        "wires": []
    },
    {
        "id": "ec0d7b62.22bf98",
        "type": "function",
        "z": "5f98db3a.7ab21c",
        "g": "8ff1d3c1.b9bf5",
        "name": "обработчик ошибок",
        "func": "if (msg.err) {\n    msg.statusCode = \"not ok\";\n    msg.statusBody = msg.err.body;\n    //node.warn(msg.err.statusCode)\n    \n\n    \n    \n    return [null,msg];\n} else {\n    msg.statusCode = \"ok\";\n    msg.statusBody = msg.resp;\n    return [msg,null];\n}\n\n\n\n",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 880,
        "y": 2140,
        "wires": [
            [
                "9a627e02.c4ed6"
            ],
            [
                "f6fb5868.e9bd18"
            ]
        ]
    },
    {
        "id": "607a1476.9d2f3c",
        "type": "function",
        "z": "5f98db3a.7ab21c",
        "g": "8ff1d3c1.b9bf5",
        "name": "prepare get order status",
        "func": "\nlet guid = global.get('guid');\nlet moneta = msg.moneta;\nlet orderid = msg.orderid;\n\nmsg.payload = [];\nmsg.topic = \"orders-status-\" + guid + \":\" + moneta + \":\" + orderid;\n\nnode.status({fill: \"green\", shape: \"ring\", text: orderid});\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 450,
        "y": 1960,
        "wires": [
            [
                "d8222377.a5f0c"
            ]
        ],
        "inputLabels": [
            "orderid"
        ],
        "outputLabels": [
            "status"
        ],
        "icon": "node-red-contrib-binance/binance.png"
    },
    {
        "id": "d8222377.a5f0c",
        "type": "redis-command",
        "z": "5f98db3a.7ab21c",
        "g": "8ff1d3c1.b9bf5",
        "server": "f120eab2.0a60a8",
        "command": "GET",
        "name": "get order status",
        "topic": "msg.payload",
        "params": "[]",
        "paramsType": "json",
        "payloadType": "json",
        "block": false,
        "x": 680,
        "y": 1960,
        "wires": [
            [
                "f9b6f483.e38838"
            ]
        ]
    },
    {
        "id": "f9b6f483.e38838",
        "type": "function",
        "z": "5f98db3a.7ab21c",
        "g": "8ff1d3c1.b9bf5",
        "name": "обработчик ошибок",
        "func": "if (!msg.payload) {\n    msg.statusCode = \"not ok\";\n    msg.statusBody = msg.payload;\n    //node.warn(msg.err.statusCode)\n    \n\n    \n    \n    return [null,msg];\n} else {\n    msg.statusCode = \"ok\";\n    msg.statusBody = msg.payload;\n    return [msg,null];\n}\n\n\n\n",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 900,
        "y": 1960,
        "wires": [
            [
                "301639c.27435c6",
                "7c3b4244.df47fc"
            ],
            [
                "307f6fe7.76709"
            ]
        ]
    },
    {
        "id": "301639c.27435c6",
        "type": "link out",
        "z": "5f98db3a.7ab21c",
        "g": "8ff1d3c1.b9bf5",
        "name": "",
        "links": [
            "f83aa4a.5b36658"
        ],
        "x": 1075,
        "y": 1940,
        "wires": []
    },
    {
        "id": "7c3b4244.df47fc",
        "type": "debug",
        "z": "5f98db3a.7ab21c",
        "g": "8ff1d3c1.b9bf5",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1150,
        "y": 1940,
        "wires": []
    },
    {
        "id": "d73dab1c.a64828",
        "type": "link out",
        "z": "5f98db3a.7ab21c",
        "g": "8ff1d3c1.b9bf5",
        "name": "",
        "links": [
            "f83aa4a.5b36658"
        ],
        "x": 515,
        "y": 2180,
        "wires": []
    },
    {
        "id": "8c2b136a.c18c",
        "type": "redis-command",
        "z": "5f98db3a.7ab21c",
        "g": "8ff1d3c1.b9bf5",
        "server": "f120eab2.0a60a8",
        "command": "getset",
        "name": "",
        "topic": "",
        "params": "[]",
        "paramsType": "json",
        "payloadType": "json",
        "block": false,
        "x": 1350,
        "y": 2120,
        "wires": [
            [
                "960e13d0.f7b41",
                "bf190e9d.225ad"
            ]
        ]
    },
    {
        "id": "bb1ad3fd.e2d78",
        "type": "comment",
        "z": "5f98db3a.7ab21c",
        "g": "8ff1d3c1.b9bf5",
        "name": "binance error",
        "info": "",
        "x": 1090,
        "y": 2180,
        "wires": []
    },
    {
        "id": "9a627e02.c4ed6",
        "type": "function",
        "z": "5f98db3a.7ab21c",
        "g": "8ff1d3c1.b9bf5",
        "name": "prepare get order status",
        "func": "\nlet guid = global.get('guid');\nlet moneta = msg.moneta;\nlet orderid = msg.orderid;\n\nmsg.payload = msg.order_status;\nmsg.topic = \"orders-status-\" + guid + \":\" + moneta + \":\" + orderid;\n\nnode.status({fill: \"green\", shape: \"ring\", text: orderid});\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 1130,
        "y": 2120,
        "wires": [
            [
                "8c2b136a.c18c"
            ]
        ],
        "inputLabels": [
            "orderid"
        ],
        "outputLabels": [
            "status"
        ],
        "icon": "node-red-contrib-binance/binance.png"
    },
    {
        "id": "960e13d0.f7b41",
        "type": "debug",
        "z": "5f98db3a.7ab21c",
        "g": "8ff1d3c1.b9bf5",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1370,
        "y": 2160,
        "wires": []
    },
    {
        "id": "bf190e9d.225ad",
        "type": "link out",
        "z": "5f98db3a.7ab21c",
        "g": "8ff1d3c1.b9bf5",
        "name": "",
        "links": [
            "f83aa4a.5b36658"
        ],
        "x": 1475,
        "y": 2120,
        "wires": []
    },
    {
        "id": "283c3766.823b68",
        "type": "function",
        "z": "5df15275.2888ec",
        "g": "89e4eb3d636bee6a",
        "name": "floors",
        "func": "let reversefloors = msg.bot.floors.reverse();\nmsg.payload = reversefloors.filter(function(floor) {\n    return (floor[7]!= 0);\n});\nreturn msg;\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3090,
        "y": 940,
        "wires": [
            [
                "e8fc4296.04f04",
                "ab58eb0c.082c28"
            ]
        ]
    },
    {
        "id": "e8fc4296.04f04",
        "type": "ui_table",
        "z": "5df15275.2888ec",
        "d": true,
        "g": "89e4eb3d636bee6a",
        "group": "a328c3be.7f91c8",
        "name": "",
        "order": 1,
        "width": "0",
        "height": "0",
        "columns": [
            {
                "field": "0",
                "title": "num",
                "width": "",
                "align": "left",
                "formatter": "plaintext",
                "formatterParams": {
                    "target": "_blank"
                }
            },
            {
                "field": "7",
                "title": "status",
                "width": "",
                "align": "left",
                "formatter": "plaintext",
                "formatterParams": {
                    "target": "_blank"
                }
            },
            {
                "field": "8",
                "title": "buy id",
                "width": "",
                "align": "left",
                "formatter": "plaintext",
                "formatterParams": {
                    "target": "_blank"
                }
            },
            {
                "field": "14",
                "title": "quantity",
                "width": "",
                "align": "left",
                "formatter": "plaintext",
                "formatterParams": {
                    "target": "_blank"
                }
            }
        ],
        "outputs": 0,
        "cts": false,
        "x": 3250,
        "y": 920,
        "wires": []
    },
    {
        "id": "ab58eb0c.082c28",
        "type": "filter",
        "z": "5df15275.2888ec",
        "g": "89e4eb3d636bee6a",
        "name": "filter off",
        "property": "payload[7]",
        "propertyType": "msg",
        "asArray": false,
        "itemProperty": "",
        "itemPropertyType": "item",
        "rules": [
            {
                "t": "neq",
                "v": "0",
                "vt": "num",
                "output": 1
            }
        ],
        "checkall": "true",
        "outputs": 1,
        "x": 3220,
        "y": 960,
        "wires": [
            [
                "1dda6867.b90808"
            ]
        ]
    },
    {
        "id": "1dda6867.b90808",
        "type": "debug",
        "z": "5df15275.2888ec",
        "g": "89e4eb3d636bee6a",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 3410,
        "y": 960,
        "wires": []
    },
    {
        "id": "7f01fc9d.9aefb4",
        "type": "comment",
        "z": "5f98db3a.7ab21c",
        "name": "ситуация \\n робот думает, что статус new и шлет на биржу команду кансел, а кансел уже состоялся \\n (а робот про это не узнал) ",
        "info": "",
        "x": 2020,
        "y": 820,
        "wires": []
    },
    {
        "id": "438a4ff8.3b594",
        "type": "switch",
        "z": "5df15275.2888ec",
        "g": "d4a5f2307ef8b222",
        "name": "service tick",
        "property": "service",
        "propertyType": "msg",
        "rules": [
            {
                "t": "false"
            },
            {
                "t": "true"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 830,
        "y": 1500,
        "wires": [
            [
                "72e46f8aeb6442f9"
            ],
            [
                "a22493fd4828f6e2"
            ]
        ]
    },
    {
        "id": "d65fadb6.35c73",
        "type": "function",
        "z": "2a761808.610238",
        "name": "get_order_status",
        "func": "let moneta = msg.moneta;\nlet orderid = Number(msg.orderid);\n\nconst get_order_status = global.get('get_order_status')(moneta, orderid);\n\nget_order_status.then(result => {\n    \n    msg.payload = result;\n  \n    node.status({fill:\"green\",shape:\"dot\"});\n    node.send(msg);\n\n}).catch(error => {\n    \n   \n    node.status({fill:\"red\",shape:\"dot\"});\n    node.error(error);\n});",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1490,
        "y": 1340,
        "wires": [
            [
                "d1ff77a2.4fa0d8"
            ]
        ]
    },
    {
        "id": "515429a6.bb3a88",
        "type": "function",
        "z": "2a761808.610238",
        "name": "get_order_status",
        "func": "let moneta = msg.bot.settings.moneta;\nmsg.moneta = moneta;\nlet orderid = msg.bot.ttp.curorderid\nmsg.orderid = orderid;\n\n\n///msg.topic = \"orders-status-\" + msg.bot.settings.userid + \":\" + moneta + \":\" + orderid;\n\n\n\nconst get_order_status = global.get('get_order_status')(moneta, orderid);\n\nget_order_status.then(result => {\n    \n    msg.payload = result;\n  \n    node.status({fill:\"green\",shape:\"dot\"});\n    node.send(msg);\n\n}).catch(error => {\n    \n   \n    node.status({fill:\"red\",shape:\"dot\"});\n    node.error(error);\n});",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1230,
        "y": 860,
        "wires": [
            [
                "e21a46d3.0d0cd8"
            ]
        ]
    },
    {
        "id": "13c65b3e.750f95",
        "type": "debug",
        "z": "5f98db3a.7ab21c",
        "g": "8ff1d3c1.b9bf5",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 710,
        "y": 2180,
        "wires": []
    },
    {
        "id": "8384d5a2.b18e28",
        "type": "debug",
        "z": "2a761808.610238",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1010,
        "y": 1120,
        "wires": []
    },
    {
        "id": "75a65c132350fa8c",
        "type": "inject",
        "z": "654ea140.2275a8",
        "name": "Inject",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "1",
        "payload": "",
        "payloadType": "date",
        "x": 1990,
        "y": 100,
        "wires": [
            [
                "9d843297c69edb35"
            ]
        ]
    },
    {
        "id": "9d843297c69edb35",
        "type": "switch",
        "z": "654ea140.2275a8",
        "name": "Context based routing",
        "property": "state",
        "propertyType": "flow",
        "rules": [
            {
                "t": "eq",
                "v": "1",
                "vt": "num"
            },
            {
                "t": "eq",
                "v": "2",
                "vt": "num"
            },
            {
                "t": "eq",
                "v": "3",
                "vt": "num"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 3,
        "x": 2200,
        "y": 100,
        "wires": [
            [
                "f732685880a7b21e"
            ],
            [
                "48eecbcca54274ae"
            ],
            [
                "a3064463264b56c6"
            ]
        ]
    },
    {
        "id": "f732685880a7b21e",
        "type": "debug",
        "z": "654ea140.2275a8",
        "name": "Output 1",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": true,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "payload",
        "statusType": "auto",
        "x": 2420,
        "y": 40,
        "wires": []
    },
    {
        "id": "48eecbcca54274ae",
        "type": "debug",
        "z": "654ea140.2275a8",
        "name": "Output 2",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": true,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "payload",
        "statusType": "auto",
        "x": 2420,
        "y": 100,
        "wires": []
    },
    {
        "id": "a3064463264b56c6",
        "type": "debug",
        "z": "654ea140.2275a8",
        "name": "Output 3",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": true,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "payload",
        "statusType": "auto",
        "x": 2420,
        "y": 160,
        "wires": []
    },
    {
        "id": "3f3adcb8b4b11d05",
        "type": "inject",
        "z": "654ea140.2275a8",
        "name": "Set state 0",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "0",
        "payloadType": "num",
        "x": 2000,
        "y": 180,
        "wires": [
            [
                "d26280a007a99d6e"
            ]
        ]
    },
    {
        "id": "f285a363abcced3b",
        "type": "inject",
        "z": "654ea140.2275a8",
        "name": "Set state 1",
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "1",
        "payloadType": "num",
        "x": 2000,
        "y": 220,
        "wires": [
            [
                "d26280a007a99d6e"
            ]
        ]
    },
    {
        "id": "a1a281fff45bb890",
        "type": "inject",
        "z": "654ea140.2275a8",
        "name": "Set state 2",
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "2",
        "payloadType": "num",
        "x": 2000,
        "y": 300,
        "wires": [
            [
                "d26280a007a99d6e"
            ]
        ]
    },
    {
        "id": "b9b6f31473a60931",
        "type": "inject",
        "z": "654ea140.2275a8",
        "name": "Set state 3",
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "3",
        "payloadType": "num",
        "x": 2000,
        "y": 340,
        "wires": [
            [
                "d26280a007a99d6e"
            ]
        ]
    },
    {
        "id": "d26280a007a99d6e",
        "type": "change",
        "z": "654ea140.2275a8",
        "name": "Set flow.state",
        "rules": [
            {
                "t": "set",
                "p": "state",
                "pt": "flow",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 2220,
        "y": 260,
        "wires": [
            []
        ]
    },
    {
        "id": "1ac479ddc35c3366",
        "type": "http in",
        "z": "654ea140.2275a8",
        "name": "",
        "url": "/panic",
        "method": "post",
        "upload": false,
        "swaggerDoc": "",
        "x": 1150,
        "y": 520,
        "wires": [
            [
                "67c0327e654d0681"
            ]
        ]
    },
    {
        "id": "67c0327e654d0681",
        "type": "debug",
        "z": "654ea140.2275a8",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1430,
        "y": 520,
        "wires": []
    },
    {
        "id": "0dfc499c523c8268",
        "type": "http in",
        "z": "654ea140.2275a8",
        "name": "",
        "url": "/webhook-tv",
        "method": "post",
        "upload": false,
        "swaggerDoc": "",
        "x": 290,
        "y": 500,
        "wires": [
            [
                "475286f97a618341",
                "1e2bf3cbcaff3749",
                "3e9d9a0522243c87"
            ]
        ]
    },
    {
        "id": "a99551d27947f125",
        "type": "debug",
        "z": "654ea140.2275a8",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 930,
        "y": 420,
        "wires": []
    },
    {
        "id": "475286f97a618341",
        "type": "function",
        "z": "654ea140.2275a8",
        "name": "",
        "func": "\nif (msg.payload.command == \"START\"){\nmsg.payload = [msg.payload.bot+\"-start\", \"1\"];\nmsg.topic = \"\";}\n\nif (msg.payload.command == \"PANICSALE\"){\nmsg.payload = [msg.payload.bot+\"-panicsale\", \"1\"];\nmsg.topic = \"\";}\n\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 640,
        "y": 460,
        "wires": [
            [
                "a99551d27947f125",
                "e2cda4221688851f"
            ]
        ]
    },
    {
        "id": "bebe9ac34c223bd9",
        "type": "inject",
        "z": "654ea140.2275a8",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 580,
        "y": 540,
        "wires": [
            [
                "475286f97a618341"
            ]
        ]
    },
    {
        "id": "e2cda4221688851f",
        "type": "redis-command",
        "z": "654ea140.2275a8",
        "server": "f120eab2.0a60a8",
        "command": "set",
        "name": "set comand",
        "topic": "",
        "params": "[]",
        "paramsType": "json",
        "payloadType": "json",
        "block": false,
        "x": 770,
        "y": 400,
        "wires": [
            []
        ]
    },
    {
        "id": "cf2805a312d19e36",
        "type": "catch",
        "z": "654ea140.2275a8",
        "name": "",
        "scope": null,
        "uncaught": false,
        "x": 1440,
        "y": 60,
        "wires": [
            [
                "75469286c619f082"
            ]
        ]
    },
    {
        "id": "75469286c619f082",
        "type": "debug",
        "z": "654ea140.2275a8",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "x": 1590,
        "y": 60,
        "wires": []
    },
    {
        "id": "67c8ece5cd9a8e59",
        "type": "function",
        "z": "654ea140.2275a8",
        "name": "getPrice()",
        "func": "const price = global.get('getPrice')(msg.payload);\n\nprice.then(price => {\n    node.warn(price);\n}).catch(error => {\n    node.error(error);\n});",
        "outputs": "0",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 2100,
        "y": 600,
        "wires": []
    },
    {
        "id": "48cd1cb4ab4ed0f5",
        "type": "inject",
        "z": "654ea140.2275a8",
        "name": "get BTCUSDT price",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": "",
        "topic": "",
        "payload": "BTCUSDT",
        "payloadType": "str",
        "x": 1870,
        "y": 600,
        "wires": [
            [
                "67c8ece5cd9a8e59"
            ]
        ]
    },
    {
        "id": "2b66076a4d117550",
        "type": "function",
        "z": "654ea140.2275a8",
        "name": "getBusyStatus()",
        "func": "const busy = global.get('getBusyStatus')(msg.payload);\n\nbusy.then(busy => {\n    node.warn(busy);\n}).catch(error => {\n    node.error(error);\n});",
        "outputs": "0",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 2260,
        "y": 660,
        "wires": []
    },
    {
        "id": "7de6078a907198bb",
        "type": "inject",
        "z": "654ea140.2275a8",
        "name": "get 5fa1973ff1fb3f005e206671 busy status",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": "",
        "topic": "",
        "payload": "5fa1973ff1fb3f005e206671",
        "payloadType": "str",
        "x": 1940,
        "y": 660,
        "wires": [
            [
                "2b66076a4d117550"
            ]
        ]
    },
    {
        "id": "2c60a99c89e7b813",
        "type": "function",
        "z": "654ea140.2275a8",
        "name": "setBusyStatus()",
        "func": "const setbusy = global.get('setBusyStatus')(msg.payload);\n\nsetbusy.then(setbusy => {\n    node.warn(setbusy);\n}).catch(error => {\n    node.error(error);\n});",
        "outputs": "0",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 2180,
        "y": 720,
        "wires": []
    },
    {
        "id": "3887f6a49316b036",
        "type": "inject",
        "z": "654ea140.2275a8",
        "name": "set 5fa1973ff1fb3f005e206671 busy",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": "",
        "topic": "",
        "payload": "5fa1973ff1fb3f005e206671",
        "payloadType": "str",
        "x": 1920,
        "y": 720,
        "wires": [
            [
                "2c60a99c89e7b813"
            ]
        ]
    },
    {
        "id": "9d4264796c7213c8",
        "type": "function",
        "z": "654ea140.2275a8",
        "name": "setBusyStatusFree()",
        "func": "const busy = global.get('setBusyStatusFree')(msg.payload);\n\nbusy.then(busy => {\n    node.warn(busy);\n}).catch(error => {\n    node.error(error);\n});",
        "outputs": "0",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 2200,
        "y": 780,
        "wires": []
    },
    {
        "id": "49ab9606472b731d",
        "type": "inject",
        "z": "654ea140.2275a8",
        "name": "set 5fa1973ff1fb3f005e206671 free",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": "",
        "topic": "",
        "payload": "5fa1973ff1fb3f005e206671",
        "payloadType": "str",
        "x": 1920,
        "y": 780,
        "wires": [
            [
                "9d4264796c7213c8"
            ]
        ]
    },
    {
        "id": "9bdef1a106282610",
        "type": "comment",
        "z": "654ea140.2275a8",
        "name": "Tests",
        "info": "",
        "x": 1810,
        "y": 540,
        "wires": []
    },
    {
        "id": "f1330a6cbc42c1ae",
        "type": "function",
        "z": "654ea140.2275a8",
        "name": "setBusyStatusFree()",
        "func": "const busy = global.get('setBusyStatusFree')(msg.payload);\nmsg.id = msg.payload;\nbusy.then(busy => {\n    \n    msg.payload = \"free\"\n    node.send(msg);\n\n}).catch(error => {\n    node.error(error);\n});\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 2780,
        "y": 780,
        "wires": [
            [
                "48d159c870d4a71c"
            ]
        ]
    },
    {
        "id": "2d1896c0422eb95a",
        "type": "inject",
        "z": "654ea140.2275a8",
        "name": "set 5fa1973ff1fb3f005e206671 free",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": "",
        "topic": "",
        "payload": "5fa1973ff1fb3f005e206671",
        "payloadType": "str",
        "x": 2490,
        "y": 780,
        "wires": [
            [
                "f1330a6cbc42c1ae"
            ]
        ]
    },
    {
        "id": "48d159c870d4a71c",
        "type": "debug",
        "z": "654ea140.2275a8",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 3000,
        "y": 780,
        "wires": []
    },
    {
        "id": "a28cc42536c04d1d",
        "type": "function",
        "z": "654ea140.2275a8",
        "name": "setBusyStatus()",
        "func": "const busy = global.get('setBusyStatus')(msg.payload);\nmsg.id = msg.payload;\nbusy.then(busy => {\n    \n    msg.payload = \"busy\"\n    node.send(msg);\n\n}).catch(error => {\n    node.error(error);\n});\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 2760,
        "y": 720,
        "wires": [
            [
                "9cd816f1af5de3ec"
            ]
        ]
    },
    {
        "id": "73bd1bed7db2ba1b",
        "type": "inject",
        "z": "654ea140.2275a8",
        "name": "set 5fa1973ff1fb3f005e206671 busy",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": "",
        "topic": "",
        "payload": "5fa1973ff1fb3f005e206671",
        "payloadType": "str",
        "x": 2490,
        "y": 720,
        "wires": [
            [
                "a28cc42536c04d1d"
            ]
        ]
    },
    {
        "id": "9cd816f1af5de3ec",
        "type": "debug",
        "z": "654ea140.2275a8",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 3000,
        "y": 720,
        "wires": []
    },
    {
        "id": "acc4428f2fb3fb0d",
        "type": "function",
        "z": "654ea140.2275a8",
        "name": "getBusyStatus()",
        "func": "const busy = global.get('getBusyStatus')(msg.payload);\nmsg.id = msg.payload;\nbusy.then(busy => {\n    \n    msg.payload = busy;\n    node.send(msg);\n\n}).catch(error => {\n    node.error(error);\n});\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 2800,
        "y": 660,
        "wires": [
            [
                "de7c7189765e256e"
            ]
        ]
    },
    {
        "id": "fedeb3f463d27a90",
        "type": "inject",
        "z": "654ea140.2275a8",
        "name": "get 5fa1973ff1fb3f005e206671 free",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": "",
        "topic": "",
        "payload": "5fa1973ff1fb3f005e206671",
        "payloadType": "str",
        "x": 2530,
        "y": 660,
        "wires": [
            [
                "acc4428f2fb3fb0d"
            ]
        ]
    },
    {
        "id": "de7c7189765e256e",
        "type": "debug",
        "z": "654ea140.2275a8",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 3040,
        "y": 660,
        "wires": []
    },
    {
        "id": "605dc4f1cb4d751c",
        "type": "function",
        "z": "654ea140.2275a8",
        "name": "getPrice()",
        "func": "const price = global.get('getPrice')(msg.payload);\nmsg.id = msg.payload;\nprice.then(price => {\n    \n    msg.payload = price;\n    node.send(msg);\n\n}).catch(error => {\n    node.error(error);\n});\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 2780,
        "y": 600,
        "wires": [
            [
                "7406daae8f7258dc"
            ]
        ]
    },
    {
        "id": "27159891a4a46626",
        "type": "inject",
        "z": "654ea140.2275a8",
        "name": "BTCUSDT",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": "",
        "topic": "",
        "payload": "BTCUSDT",
        "payloadType": "str",
        "x": 2450,
        "y": 600,
        "wires": [
            [
                "605dc4f1cb4d751c"
            ]
        ]
    },
    {
        "id": "7406daae8f7258dc",
        "type": "debug",
        "z": "654ea140.2275a8",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 3040,
        "y": 600,
        "wires": []
    },
    {
        "id": "88a61f9197dc29d0",
        "type": "function",
        "z": "654ea140.2275a8",
        "name": "",
        "func": "let newset = {\"status\":{\n  \"curenntprice\": \"555\",\n}};\n//newset = JSON.stringify(newset);\n\n\nmsg.payload = newset;\nmsg.topic = msg.botid;\nmsg.headers = {};\nmsg.headers['accept'] = 'application/json';\nmsg.headers['Content-Type'] = 'application/json';\n\nreturn msg;\n\n\n\n//node.send(Object.assign({}, msg));\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 2120,
        "y": 880,
        "wires": [
            [
                "238c4d042d25a2ae"
            ]
        ]
    },
    {
        "id": "3a871137b359ef60",
        "type": "inject",
        "z": "654ea140.2275a8",
        "name": "",
        "props": [
            {
                "p": "botid",
                "v": "5fa4a9f6e4ef8c0024bbdcc0",
                "vt": "str"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "5fa4a9f6e4ef8c0024bbdcc0",
        "x": 1900,
        "y": 880,
        "wires": [
            [
                "88a61f9197dc29d0"
            ]
        ]
    },
    {
        "id": "38754b1cb091b6ab",
        "type": "debug",
        "z": "654ea140.2275a8",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 2490,
        "y": 880,
        "wires": []
    },
    {
        "id": "238c4d042d25a2ae",
        "type": "function",
        "z": "654ea140.2275a8",
        "name": "updateSettings",
        "func": "const upd = global.get('updateSettings')(msg.payload, msg.topic);\n\nupd.then(upd => {\n    \n    msg.payload = \"updated\"\n    node.send(msg);\n\n}).catch(error => {\n    node.error(error);\n});\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 2320,
        "y": 880,
        "wires": [
            [
                "38754b1cb091b6ab"
            ]
        ]
    },
    {
        "id": "ae69925bf872e0a5",
        "type": "http in",
        "z": "654ea140.2275a8",
        "name": "",
        "url": "/botdel",
        "method": "post",
        "upload": false,
        "swaggerDoc": "",
        "x": 310,
        "y": 800,
        "wires": [
            [
                "18fe55f588c26e67",
                "eb7794c1cb814c91"
            ]
        ]
    },
    {
        "id": "18fe55f588c26e67",
        "type": "debug",
        "z": "654ea140.2275a8",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 410,
        "y": 740,
        "wires": []
    },
    {
        "id": "eb7794c1cb814c91",
        "type": "switch",
        "z": "654ea140.2275a8",
        "name": "payload.event",
        "property": "payload.event",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "entry.create",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "entry.delete",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 510,
        "y": 800,
        "wires": [
            [
                "af74ada051729520",
                "4b1e924dd0810d5b"
            ],
            [
                "ddc46e85a5296a37",
                "83066aa930a24b0f"
            ]
        ]
    },
    {
        "id": "af74ada051729520",
        "type": "debug",
        "z": "654ea140.2275a8",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 690,
        "y": 740,
        "wires": []
    },
    {
        "id": "ddc46e85a5296a37",
        "type": "debug",
        "z": "654ea140.2275a8",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 670,
        "y": 900,
        "wires": []
    },
    {
        "id": "4b1e924dd0810d5b",
        "type": "function",
        "z": "654ea140.2275a8",
        "name": "",
        "func": "msg.payload = msg.payload.entry.botname;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 720,
        "y": 780,
        "wires": [
            [
                "5acbd7689d95e105"
            ]
        ]
    },
    {
        "id": "83066aa930a24b0f",
        "type": "function",
        "z": "654ea140.2275a8",
        "name": "",
        "func": "msg.payload = msg.payload.entry.botname;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 720,
        "y": 840,
        "wires": [
            [
                "20361aa68335597d"
            ]
        ]
    },
    {
        "id": "5acbd7689d95e105",
        "type": "debug",
        "z": "654ea140.2275a8",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 890,
        "y": 780,
        "wires": []
    },
    {
        "id": "20361aa68335597d",
        "type": "debug",
        "z": "654ea140.2275a8",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 890,
        "y": 840,
        "wires": []
    },
    {
        "id": "9b94d0f7e2218680",
        "type": "inject",
        "z": "654ea140.2275a8",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 240,
        "y": 1240,
        "wires": [
            [
                "e3c98802bb326cb1",
                "69cf1263e63ffb9e"
            ]
        ]
    },
    {
        "id": "e3c98802bb326cb1",
        "type": "function",
        "z": "654ea140.2275a8",
        "name": "",
        "func": "msg.payload = \"q\";\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 440,
        "y": 1360,
        "wires": [
            [
                "6cd667ca14f79390"
            ]
        ]
    },
    {
        "id": "b3585404a8d62943",
        "type": "debug",
        "z": "654ea140.2275a8",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 960,
        "y": 1300,
        "wires": []
    },
    {
        "id": "4bc7ae89f43b3966",
        "type": "function",
        "z": "654ea140.2275a8",
        "name": "",
        "func": "msg.payload = \"м\";\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 1340,
        "y": 1340,
        "wires": [
            [
                "f3578775f74b465b"
            ]
        ]
    },
    {
        "id": "2ddd1d39722bf8ba",
        "type": "function",
        "z": "654ea140.2275a8",
        "name": "",
        "func": "msg.payload = \"q\";\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 1340,
        "y": 1420,
        "wires": [
            [
                "5c7906467fcc2c47"
            ]
        ]
    },
    {
        "id": "3a147cb0d64c0e27",
        "type": "inject",
        "z": "654ea140.2275a8",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "a",
        "payloadType": "str",
        "x": 700,
        "y": 1120,
        "wires": [
            [
                "5c1293e15be74222"
            ]
        ]
    },
    {
        "id": "e560957f78422fa8",
        "type": "telegrambot-command",
        "z": "654ea140.2275a8",
        "d": true,
        "name": "",
        "bot": "848f142.6165868",
        "command": "/ee",
        "commandType": "str",
        "commandCase": false,
        "x": 870,
        "y": 1400,
        "wires": [
            [
                "c73c404df6ecd9c3"
            ]
        ]
    },
    {
        "id": "c73c404df6ecd9c3",
        "type": "telegrambot-switch",
        "z": "654ea140.2275a8",
        "d": true,
        "name": "",
        "bot": "848f142.6165868",
        "chatId": "454883204",
        "question": "Продолжаем?",
        "answers": [
            "Да",
            "Нет"
        ],
        "outputs": 2,
        "autoAnswerCallback": true,
        "timeoutValue": "",
        "timeoutUnits": "",
        "x": 1150,
        "y": 1380,
        "wires": [
            [
                "4bc7ae89f43b3966"
            ],
            [
                "2ddd1d39722bf8ba"
            ]
        ]
    },
    {
        "id": "69cf1263e63ffb9e",
        "type": "telegrambot-notify",
        "z": "654ea140.2275a8",
        "d": true,
        "name": "",
        "bot": "848f142.6165868",
        "chatId": "454883204",
        "message": "",
        "parseMode": "",
        "x": 520,
        "y": 1240,
        "wires": []
    },
    {
        "id": "6cd667ca14f79390",
        "type": "telegrambot-notify",
        "z": "654ea140.2275a8",
        "d": true,
        "name": "",
        "bot": "848f142.6165868",
        "chatId": "454883204",
        "message": "",
        "parseMode": "",
        "x": 620,
        "y": 1320,
        "wires": []
    },
    {
        "id": "f3578775f74b465b",
        "type": "telegrambot-notify",
        "z": "654ea140.2275a8",
        "d": true,
        "name": "",
        "bot": "848f142.6165868",
        "chatId": "454883204",
        "message": "",
        "parseMode": "",
        "x": 1560,
        "y": 1320,
        "wires": []
    },
    {
        "id": "5c7906467fcc2c47",
        "type": "telegrambot-notify",
        "z": "654ea140.2275a8",
        "d": true,
        "name": "",
        "bot": "848f142.6165868",
        "chatId": "454883204",
        "message": "",
        "parseMode": "",
        "x": 1540,
        "y": 1420,
        "wires": []
    },
    {
        "id": "5c1293e15be74222",
        "type": "telegrambot-payload",
        "z": "654ea140.2275a8",
        "d": true,
        "name": "",
        "bot": "848f142.6165868",
        "chatId": "454883204",
        "sendMethod": "sendChatAction",
        "payload": "",
        "x": 900,
        "y": 1220,
        "wires": [
            [
                "b3585404a8d62943"
            ]
        ]
    },
    {
        "id": "709ff4bb9097e2ea",
        "type": "debug",
        "z": "654ea140.2275a8",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 4150,
        "y": 2600,
        "wires": []
    },
    {
        "id": "a89da37df520bd32",
        "type": "debug",
        "z": "654ea140.2275a8",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 4730,
        "y": 3020,
        "wires": []
    },
    {
        "id": "430e6d6fa6f408c7",
        "type": "inject",
        "z": "654ea140.2275a8",
        "name": "",
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 4200,
        "y": 3020,
        "wires": [
            [
                "aead129e1cd0eef5"
            ]
        ]
    },
    {
        "id": "c32c284c0478a59d",
        "type": "inject",
        "z": "654ea140.2275a8",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"a\":1,\"b\":2}",
        "payloadType": "json",
        "x": 4210,
        "y": 2980,
        "wires": [
            [
                "aead129e1cd0eef5"
            ]
        ]
    },
    {
        "id": "010145f944be178d",
        "type": "inject",
        "z": "654ea140.2275a8",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 4200,
        "y": 3080,
        "wires": [
            [
                "06dcb0e86bea7b61"
            ]
        ]
    },
    {
        "id": "814c1963a5d30433",
        "type": "debug",
        "z": "654ea140.2275a8",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "x": 4710,
        "y": 3080,
        "wires": []
    },
    {
        "id": "a9859f27fca0b1a1",
        "type": "inject",
        "z": "654ea140.2275a8",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "[\"key\",\"value\"]",
        "payloadType": "json",
        "x": 4200,
        "y": 3140,
        "wires": [
            [
                "95e777e5fb0c6367",
                "30daf153b84ba5b8"
            ]
        ]
    },
    {
        "id": "30daf153b84ba5b8",
        "type": "debug",
        "z": "654ea140.2275a8",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 4710,
        "y": 3140,
        "wires": []
    },
    {
        "id": "d635c6e0d349e2e8",
        "type": "inject",
        "z": "654ea140.2275a8",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "key",
        "payload": "[\"value\"]",
        "payloadType": "json",
        "x": 4210,
        "y": 3200,
        "wires": [
            [
                "f06c252ff312626a"
            ]
        ]
    },
    {
        "id": "c7a586de12bc1ade",
        "type": "debug",
        "z": "654ea140.2275a8",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "x": 4710,
        "y": 3200,
        "wires": []
    },
    {
        "id": "20cf7f3fb480452c",
        "type": "inject",
        "z": "654ea140.2275a8",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "myHash",
        "payload": "{\"a\":1,\"b\":2}",
        "payloadType": "json",
        "x": 4230,
        "y": 3320,
        "wires": [
            [
                "7fcd1b69370fca7b"
            ]
        ]
    },
    {
        "id": "a99583b0d5e50c21",
        "type": "debug",
        "z": "654ea140.2275a8",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "x": 4710,
        "y": 3320,
        "wires": []
    },
    {
        "id": "6b3a84345ccba0c9",
        "type": "inject",
        "z": "654ea140.2275a8",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "false",
        "payloadType": "bool",
        "x": 4190,
        "y": 3380,
        "wires": [
            [
                "be12f4b4268d35eb"
            ]
        ]
    },
    {
        "id": "b059c51709b6e2af",
        "type": "debug",
        "z": "654ea140.2275a8",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "x": 4710,
        "y": 3380,
        "wires": []
    },
    {
        "id": "357d8f0c19cc3f61",
        "type": "inject",
        "z": "654ea140.2275a8",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "false",
        "payloadType": "bool",
        "x": 3490,
        "y": 3440,
        "wires": [
            [
                "6c01a0a6292930ba"
            ]
        ]
    },
    {
        "id": "1f04c37b21652103",
        "type": "debug",
        "z": "654ea140.2275a8",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "x": 4010,
        "y": 3440,
        "wires": []
    },
    {
        "id": "44b17afc79299ee8",
        "type": "inject",
        "z": "654ea140.2275a8",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 4200,
        "y": 3560,
        "wires": [
            [
                "cc36346be5ee3e37"
            ]
        ]
    },
    {
        "id": "04bcf3b3eeaf77f5",
        "type": "debug",
        "z": "654ea140.2275a8",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 4730,
        "y": 3560,
        "wires": []
    },
    {
        "id": "8420514277b7d14a",
        "type": "inject",
        "z": "654ea140.2275a8",
        "name": "",
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "false",
        "payloadType": "bool",
        "x": 3490,
        "y": 3500,
        "wires": [
            [
                "f77b83099f0b9381"
            ]
        ]
    },
    {
        "id": "d0aa886cb4de2051",
        "type": "debug",
        "z": "654ea140.2275a8",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "x": 4010,
        "y": 3500,
        "wires": []
    },
    {
        "id": "343f638ed6bbd494",
        "type": "inject",
        "z": "654ea140.2275a8",
        "name": "",
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 4200,
        "y": 3620,
        "wires": [
            [
                "09ba52616f5c01c9"
            ]
        ]
    },
    {
        "id": "3ac423f8e7d82180",
        "type": "debug",
        "z": "654ea140.2275a8",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "x": 4730,
        "y": 3620,
        "wires": []
    },
    {
        "id": "528923a1b18cb1b3",
        "type": "debug",
        "z": "654ea140.2275a8",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "x": 4730,
        "y": 2800,
        "wires": []
    },
    {
        "id": "1ac0ed6c116fccf2",
        "type": "debug",
        "z": "654ea140.2275a8",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "x": 4730,
        "y": 2860,
        "wires": []
    },
    {
        "id": "f9fba8328eadc647",
        "type": "inject",
        "z": "654ea140.2275a8",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "jjj:w",
        "payload": "{\"a\":1,\"b\":2}",
        "payloadType": "json",
        "x": 4080,
        "y": 2860,
        "wires": [
            [
                "b39f0596d9079b4e"
            ]
        ]
    },
    {
        "id": "25100e81f913d5da",
        "type": "inject",
        "z": "654ea140.2275a8",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "key",
        "payload": "[]",
        "payloadType": "json",
        "x": 4190,
        "y": 3680,
        "wires": [
            [
                "c06f5177a9014ced"
            ]
        ]
    },
    {
        "id": "4bd8b134e167cc99",
        "type": "debug",
        "z": "654ea140.2275a8",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "x": 4730,
        "y": 3680,
        "wires": []
    },
    {
        "id": "c4b2299d958f9f08",
        "type": "inject",
        "z": "654ea140.2275a8",
        "name": "",
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 4180,
        "y": 3780,
        "wires": [
            [
                "49b9d479537a38c3"
            ]
        ]
    },
    {
        "id": "49b9d479537a38c3",
        "type": "function",
        "z": "654ea140.2275a8",
        "name": "",
        "func": "let redis = context.flow.get('redis');\n\nredis.info().then((data)=>{\n    msg.payload = data\n    node.send(msg);\n})\n\n\nredis.call(\"anycmd\").then((data)=>{\n    msg.payload = data\n    node.send(msg);\n})",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 4410,
        "y": 3780,
        "wires": [
            [
                "cbabe1f15b346f78"
            ]
        ]
    },
    {
        "id": "cbabe1f15b346f78",
        "type": "debug",
        "z": "654ea140.2275a8",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "x": 4730,
        "y": 3780,
        "wires": []
    },
    {
        "id": "8687b9e29f834ef3",
        "type": "function",
        "z": "654ea140.2275a8",
        "name": "замер времени",
        "func": "\nmsg.est = new Date() - msg.start - 1000;\n//node.warn(msg.est);\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 1560,
        "y": 3260,
        "wires": [
            [
                "bbfc0ea2b8825d56"
            ]
        ]
    },
    {
        "id": "ba4a105188f8c68c",
        "type": "inject",
        "z": "654ea140.2275a8",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "",
        "topic": "",
        "payload": "Started!",
        "payloadType": "str",
        "x": 1840,
        "y": 3260,
        "wires": [
            [
                "dafb75bdee16be59"
            ]
        ]
    },
    {
        "id": "dafb75bdee16be59",
        "type": "debug",
        "z": "654ea140.2275a8",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 2010,
        "y": 3260,
        "wires": []
    },
    {
        "id": "c21e15a7ba328939",
        "type": "function",
        "z": "654ea140.2275a8",
        "name": "start timer",
        "func": "msg.start = new Date();\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 650,
        "y": 3260,
        "wires": [
            [
                "4ed3fd40d778fbd8"
            ]
        ]
    },
    {
        "id": "87be5bc3753dae51",
        "type": "trigger",
        "z": "654ea140.2275a8",
        "name": "",
        "op1": "",
        "op2": "0",
        "op1type": "pay",
        "op2type": "str",
        "duration": "-2",
        "extend": false,
        "units": "s",
        "reset": "",
        "bytopic": "all",
        "topic": "topic",
        "outputs": 1,
        "x": 560,
        "y": 3320,
        "wires": [
            [
                "c21e15a7ba328939"
            ]
        ]
    },
    {
        "id": "0bb83f61a1b8fc0b",
        "type": "inject",
        "z": "654ea140.2275a8",
        "name": "reset",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "reset",
                "v": "true",
                "vt": "bool"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 390,
        "y": 3340,
        "wires": [
            [
                "87be5bc3753dae51"
            ]
        ]
    },
    {
        "id": "7c351057d7e717ee",
        "type": "function",
        "z": "654ea140.2275a8",
        "name": "get order status",
        "func": "function parseApiError(error) {\n  if (error.body) {\n    try {\n      var resp = JSON.parse(error.body);\n      return resp.msg;\n    } catch (error) {/* pass thru */}\n  }\n  return \"Unknown error. Status code: \"+error.statsCode;\n}\n\nlet LBinance = global.get(\"gBinance\");\n\n\nlet binance = new LBinance().options({\n\tAPIKEY: \"1mUrLnaTdDiUHWQ2drxlQPnr0MqaJevIwJaqnEJFi5JIHLdTwLxTbnbMzMm5dj7i\",\n\tAPISECRET: \"exqgFmgHcb4Fr13JI6pDIpMTBXRDqzgbTelDoEikKRvzVU5KbB3F9iq9GPP2Onjn\",\n\t\"reconnect\": false\n});\n\nlet orderid = msg.orderid;\nlet moneta = msg.moneta;\n//node.warn(binance);\nbinance.orderStatus(moneta, orderid, function (error, qjson) {\n\tif (error) {\n\t\tvar errorMsg = parseApiError(error);\n\t\tnode.error(errorMsg);\n\t\tnode.status({ fill: \"red\", shape: \"ring\", text: errorMsg });\n\t\treturn;\n\t}\n    msg.st = qjson.status;\n\tnode.send(msg);\n\n\n});\n//msg.payload = \"qjson.status\";\nreturn;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 1200,
        "y": 3300,
        "wires": [
            [
                "ea58450d8877075f",
                "b1788c5e3835b372"
            ]
        ],
        "inputLabels": [
            "orderid, moneta"
        ],
        "outputLabels": [
            "status"
        ],
        "icon": "node-red-contrib-binance/binance.png"
    },
    {
        "id": "6b3dc15230ee91bd",
        "type": "debug",
        "z": "654ea140.2275a8",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 850,
        "y": 3320,
        "wires": []
    },
    {
        "id": "b1788c5e3835b372",
        "type": "function",
        "z": "654ea140.2275a8",
        "name": "cansel order",
        "func": "function parseApiError(error) {\n  if (error.body) {\n    try {\n      var resp = JSON.parse(error.body);\n      return resp.msg;\n    } catch (error) {/* pass thru */}\n  }\n  return \"Unknown error. Status code: \"+error.statsCode;\n}\n\nlet LBinance = global.get(\"gBinance\");\n\n\nlet binance = new LBinance().options({\n    APIKEY: \"1mUrLnaTdDiUHWQ2drxlQPnr0MqaJevIwJaqnEJFi5JIHLdTwLxTbnbMzMm5dj7i\",\n    APISECRET: \"exqgFmgHcb4Fr13JI6pDIpMTBXRDqzgbTelDoEikKRvzVU5KbB3F9iq9GPP2Onjn\",\n    \"reconnect\": false\n});\n\nlet orderid = msg.orderid;\nlet moneta = msg.moneta;\n//node.warn(binance);\n\nbinance.cancel(moneta, orderid, function (error, response) {\n                if (error) {\n                    var errorMsg = parseApiError(error);\n\t\t            node.error(errorMsg);\n\t            \tnode.status({ fill: \"red\", shape: \"ring\", text: errorMsg });\n\t            \treturn;\n\n                }\n                if (response) {\n                    \n                    node.send(msg);\n                }\n            });\n            \n//msg.payload = \"qjson.status\";\nreturn;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 1390,
        "y": 3260,
        "wires": [
            [
                "8687b9e29f834ef3"
            ]
        ],
        "inputLabels": [
            "orderid"
        ],
        "outputLabels": [
            "status"
        ],
        "icon": "node-red-contrib-binance/binance.png"
    },
    {
        "id": "e27951e924020fa9",
        "type": "inject",
        "z": "654ea140.2275a8",
        "name": "",
        "props": [
            {
                "p": "moneta",
                "v": "TRXUSDT",
                "vt": "str"
            },
            {
                "p": "payload.price",
                "v": "0.022",
                "vt": "str"
            },
            {
                "p": "payload.stopprice",
                "v": "0.025",
                "vt": "str"
            },
            {
                "p": "payload.quantity",
                "v": "1000",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 390,
        "y": 3260,
        "wires": [
            [
                "87be5bc3753dae51"
            ]
        ]
    },
    {
        "id": "4ed3fd40d778fbd8",
        "type": "function",
        "z": "654ea140.2275a8",
        "name": "stopsell order",
        "func": "function parseApiError(error) {\n\tif (error.body) {\n\t\ttry {\n\t\t\tvar resp = JSON.parse(error.body);\n\t\t\treturn resp.msg;\n\t\t} catch (error) {/* pass thru */ }\n\t}\n\treturn \"Unknown error. Status code: \" + error.statsCode;\n}\n\nlet LBinance = global.get(\"gBinance\");\n\n\nlet binance = new LBinance().options({\n\tAPIKEY: \"1mUrLnaTdDiUHWQ2drxlQPnr0MqaJevIwJaqnEJFi5JIHLdTwLxTbnbMzMm5dj7i\",\n\tAPISECRET: \"exqgFmgHcb4Fr13JI6pDIpMTBXRDqzgbTelDoEikKRvzVU5KbB3F9iq9GPP2Onjn\",\n\t\"reconnect\": false\n});\n\n\nlet moneta = msg.moneta;\nlet price = parseFloat(msg.payload.price);\nlet priceb = price;\nlet stopprice = parseFloat(msg.payload.stopprice);\nlet quantity = parseFloat(msg.payload.quantity);\n//node.warn(binance);\n\n\n\n\n binance.sell(moneta, quantity, priceb, { stopPrice: stopprice, type: \"STOP_LOSS_LIMIT\" }, function (err, resp) {\n          if (err) {\n            var errorMsg = parseApiError(err);\n            node.error(errorMsg, msg);\n            node.status({fill: \"red\", shape: \"ring\", text: errorMsg});\n            return;\n          }\n          node.status({}); //clear status message\n          msg.orderid = resp.orderId;\n          node.send(msg);\n        });\n\n\n\nreturn;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 860,
        "y": 3260,
        "wires": [
            [
                "6b3dc15230ee91bd",
                "e0d2f42aec526b13"
            ]
        ],
        "inputLabels": [
            "orderid"
        ],
        "outputLabels": [
            "status"
        ],
        "icon": "node-red-contrib-binance/binance.png"
    },
    {
        "id": "e0d2f42aec526b13",
        "type": "delay",
        "z": "654ea140.2275a8",
        "name": "",
        "pauseType": "delay",
        "timeout": "1",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "x": 1060,
        "y": 3260,
        "wires": [
            [
                "b1788c5e3835b372"
            ]
        ]
    },
    {
        "id": "ea58450d8877075f",
        "type": "debug",
        "z": "654ea140.2275a8",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1190,
        "y": 3340,
        "wires": []
    },
    {
        "id": "bbfc0ea2b8825d56",
        "type": "debug",
        "z": "654ea140.2275a8",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "est",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1560,
        "y": 3320,
        "wires": []
    },
    {
        "id": "08917b5d2b6cdc54",
        "type": "function",
        "z": "654ea140.2275a8",
        "name": "reset order id",
        "func": "\nmsg.payload = [msg.ttpprefix+\":curorderid\", 0];\nmsg.topic = \"\";\n\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 2470,
        "y": 3420,
        "wires": [
            [
                "13c7c341b9053792"
            ]
        ],
        "inputLabels": [
            "orderid"
        ],
        "outputLabels": [
            "status"
        ],
        "icon": "node-red-contrib-binance/binance.png"
    },
    {
        "id": "2f7831c14f3ef561",
        "type": "function",
        "z": "654ea140.2275a8",
        "name": "reset curstop",
        "func": "\nmsg.payload = [msg.ttpprefix+\":curstop\", 0];\nmsg.topic = \"\";\n\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 2470,
        "y": 3380,
        "wires": [
            [
                "71bc08f8a0d2aef6"
            ]
        ],
        "inputLabels": [
            "orderid"
        ],
        "outputLabels": [
            "status"
        ],
        "icon": "node-red-contrib-binance/binance.png"
    },
    {
        "id": "dd807b7eab7bce21",
        "type": "function",
        "z": "654ea140.2275a8",
        "name": "get order status",
        "func": "function parseApiError(error) {\n  if (error.body) {\n    try {\n      var resp = JSON.parse(error.body);\n      return resp.msg;\n    } catch (error) {/* pass thru */}\n  }\n  return \"Unknown error. Status code: \"+error.statsCode;\n}\n\nlet LBinance = global.get(\"gBinance\");\n\n\nlet binance = new LBinance().options({\n\tAPIKEY: \"1mUrLnaTdDiUHWQ2drxlQPnr0MqaJevIwJaqnEJFi5JIHLdTwLxTbnbMzMm5dj7i\",\n\tAPISECRET: \"exqgFmgHcb4Fr13JI6pDIpMTBXRDqzgbTelDoEikKRvzVU5KbB3F9iq9GPP2Onjn\",\n\t\"reconnect\": false\n});\n\nlet orderid = \"8200370\";\nlet moneta =  \"LINKDOWNUSDT\";\n//node.warn(binance);\nbinance.orderStatus(moneta, orderid, function (error, qjson) {\n\tif (error) {\n\t\tvar errorMsg = parseApiError(error);\n\t\tnode.error(errorMsg);\n\t\tnode.status({ fill: \"red\", shape: \"ring\", text: errorMsg });\n\t\treturn;\n\t}\n    msg.st = qjson.status;\n\tnode.send(msg);\n\n\n});\n//msg.payload = \"qjson.status\";\nreturn;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 2480,
        "y": 3260,
        "wires": [
            [
                "855ddabb541e68e5"
            ]
        ],
        "inputLabels": [
            "orderid, moneta"
        ],
        "outputLabels": [
            "status"
        ],
        "icon": "node-red-contrib-binance/binance.png"
    },
    {
        "id": "855ddabb541e68e5",
        "type": "debug",
        "z": "654ea140.2275a8",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "st",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 2680,
        "y": 3260,
        "wires": []
    },
    {
        "id": "956cc462a8bee26f",
        "type": "inject",
        "z": "654ea140.2275a8",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 2270,
        "y": 3260,
        "wires": [
            [
                "dd807b7eab7bce21"
            ]
        ]
    },
    {
        "id": "eb474464e11f8659",
        "type": "inject",
        "z": "654ea140.2275a8",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "0",
        "payloadType": "num",
        "x": 1570,
        "y": 2940,
        "wires": [
            [
                "c530355a45ee8d9d"
            ]
        ]
    },
    {
        "id": "c530355a45ee8d9d",
        "type": "rbe",
        "z": "654ea140.2275a8",
        "name": "report-by-exception",
        "func": "deadband",
        "gap": "",
        "start": "",
        "inout": "out",
        "property": "payload",
        "x": 1780,
        "y": 2960,
        "wires": [
            [
                "84e4a7fec7cb0a4f"
            ]
        ]
    },
    {
        "id": "84e4a7fec7cb0a4f",
        "type": "debug",
        "z": "654ea140.2275a8",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "x": 1990,
        "y": 2960,
        "wires": []
    },
    {
        "id": "9a8738bd10a9c118",
        "type": "inject",
        "z": "654ea140.2275a8",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "1",
        "payloadType": "num",
        "x": 1570,
        "y": 2980,
        "wires": [
            [
                "c530355a45ee8d9d"
            ]
        ]
    },
    {
        "id": "1341b6a1c19d287a",
        "type": "rbe",
        "z": "654ea140.2275a8",
        "name": "report-by-exception",
        "func": "deadband",
        "gap": "",
        "start": "",
        "inout": "out",
        "property": "payload",
        "x": 1790,
        "y": 2840,
        "wires": [
            []
        ]
    },
    {
        "id": "3b4463a3ae34678c",
        "type": "redis-in",
        "z": "654ea140.2275a8",
        "server": "f120eab2.0a60a8",
        "command": "blpop",
        "name": "",
        "topic": "test",
        "obj": false,
        "timeout": 0,
        "x": 4490,
        "y": 3020,
        "wires": [
            [
                "a89da37df520bd32"
            ]
        ]
    },
    {
        "id": "7b045200dd6beabf",
        "type": "redis-in",
        "z": "654ea140.2275a8",
        "server": "f120eab2.0a60a8",
        "command": "psubscribe",
        "name": "",
        "topic": "jjj:*",
        "obj": false,
        "timeout": 0,
        "x": 4500,
        "y": 2800,
        "wires": [
            [
                "528923a1b18cb1b3"
            ]
        ]
    },
    {
        "id": "e784d97863465d35",
        "type": "redis-in",
        "z": "654ea140.2275a8",
        "server": "f120eab2.0a60a8",
        "command": "subscribe",
        "name": "",
        "topic": "TOPIC:OK",
        "obj": true,
        "timeout": 0,
        "x": 4500,
        "y": 2860,
        "wires": [
            [
                "1ac0ed6c116fccf2"
            ]
        ]
    },
    {
        "id": "aead129e1cd0eef5",
        "type": "redis-out",
        "z": "654ea140.2275a8",
        "server": "f120eab2.0a60a8",
        "command": "rpush",
        "name": "",
        "topic": "test",
        "obj": true,
        "x": 4490,
        "y": 2980,
        "wires": []
    },
    {
        "id": "b39f0596d9079b4e",
        "type": "redis-out",
        "z": "654ea140.2275a8",
        "server": "f120eab2.0a60a8",
        "command": "publish",
        "name": "",
        "topic": "",
        "obj": true,
        "x": 4240,
        "y": 2860,
        "wires": []
    },
    {
        "id": "06dcb0e86bea7b61",
        "type": "redis-command",
        "z": "654ea140.2275a8",
        "server": "f120eab2.0a60a8",
        "command": "getset",
        "name": "",
        "topic": "timestamp",
        "params": "[]",
        "paramsType": "json",
        "payloadType": "json",
        "block": false,
        "x": 4470,
        "y": 3080,
        "wires": [
            [
                "814c1963a5d30433"
            ]
        ]
    },
    {
        "id": "95e777e5fb0c6367",
        "type": "redis-command",
        "z": "654ea140.2275a8",
        "server": "f120eab2.0a60a8",
        "command": "set",
        "name": "",
        "topic": "",
        "params": "[]",
        "paramsType": "json",
        "payloadType": "json",
        "block": false,
        "x": 4370,
        "y": 3160,
        "wires": [
            [
                "30daf153b84ba5b8"
            ]
        ]
    },
    {
        "id": "f06c252ff312626a",
        "type": "redis-command",
        "z": "654ea140.2275a8",
        "server": "f120eab2.0a60a8",
        "command": "getset",
        "name": "",
        "topic": "",
        "params": "[]",
        "paramsType": "json",
        "payloadType": "json",
        "block": false,
        "x": 4430,
        "y": 3200,
        "wires": [
            [
                "c7a586de12bc1ade"
            ]
        ]
    },
    {
        "id": "7fcd1b69370fca7b",
        "type": "redis-command",
        "z": "654ea140.2275a8",
        "server": "f120eab2.0a60a8",
        "command": "hmset",
        "name": "",
        "topic": "",
        "params": "[]",
        "paramsType": "json",
        "payloadType": "json",
        "block": false,
        "x": 4430,
        "y": 3320,
        "wires": [
            [
                "a99583b0d5e50c21"
            ]
        ]
    },
    {
        "id": "be12f4b4268d35eb",
        "type": "redis-command",
        "z": "654ea140.2275a8",
        "server": "f120eab2.0a60a8",
        "command": "hgetall",
        "name": "",
        "topic": "myHash",
        "params": "{}",
        "paramsType": "json",
        "payloadType": "json",
        "block": false,
        "x": 4460,
        "y": 3380,
        "wires": [
            [
                "b059c51709b6e2af"
            ]
        ]
    },
    {
        "id": "6c01a0a6292930ba",
        "type": "redis-command",
        "z": "654ea140.2275a8",
        "server": "f120eab2.0a60a8",
        "command": "sadd",
        "name": "",
        "topic": "mySet",
        "params": "[\"memberA\",\"memberB\",\"memberC\"]",
        "paramsType": "json",
        "payloadType": "json",
        "block": false,
        "x": 3750,
        "y": 3440,
        "wires": [
            [
                "1f04c37b21652103"
            ]
        ]
    },
    {
        "id": "f77b83099f0b9381",
        "type": "redis-command",
        "z": "654ea140.2275a8",
        "server": "f120eab2.0a60a8",
        "command": "sismember",
        "name": "",
        "topic": "mySet",
        "params": "[\"memberA\"]",
        "paramsType": "json",
        "payloadType": "json",
        "block": false,
        "x": 3770,
        "y": 3500,
        "wires": [
            [
                "d0aa886cb4de2051"
            ]
        ]
    },
    {
        "id": "c06f5177a9014ced",
        "type": "redis-command",
        "z": "654ea140.2275a8",
        "server": "f120eab2.0a60a8",
        "command": "del",
        "name": "",
        "topic": "",
        "params": "[]",
        "paramsType": "json",
        "payloadType": "json",
        "block": false,
        "x": 4420,
        "y": 3680,
        "wires": [
            [
                "4bd8b134e167cc99"
            ]
        ]
    },
    {
        "id": "71bc08f8a0d2aef6",
        "type": "redis-command",
        "z": "654ea140.2275a8",
        "server": "f120eab2.0a60a8",
        "command": "set",
        "name": "set curstop",
        "topic": "",
        "params": "[]",
        "paramsType": "json",
        "payloadType": "json",
        "block": false,
        "x": 2710,
        "y": 3380,
        "wires": [
            []
        ]
    },
    {
        "id": "13c7c341b9053792",
        "type": "redis-command",
        "z": "654ea140.2275a8",
        "server": "f120eab2.0a60a8",
        "command": "set",
        "name": "set curorderid",
        "topic": "",
        "params": "[]",
        "paramsType": "json",
        "payloadType": "json",
        "block": false,
        "x": 2720,
        "y": 3420,
        "wires": [
            []
        ]
    },
    {
        "id": "cc36346be5ee3e37",
        "type": "redis-lua-script",
        "z": "654ea140.2275a8",
        "server": "f120eab2.0a60a8",
        "name": "test",
        "keyval": 0,
        "func": "local text = \"Hello World\"\nreturn text",
        "stored": true,
        "block": false,
        "x": 4410,
        "y": 3560,
        "wires": [
            [
                "04bcf3b3eeaf77f5"
            ]
        ]
    },
    {
        "id": "09ba52616f5c01c9",
        "type": "redis-lua-script",
        "z": "654ea140.2275a8",
        "server": "f120eab2.0a60a8",
        "name": "test2",
        "keyval": 0,
        "func": "local text = \"Hello2222 World2222\"\nreturn text",
        "stored": false,
        "block": false,
        "x": 4410,
        "y": 3620,
        "wires": [
            [
                "3ac423f8e7d82180"
            ]
        ]
    },
    {
        "id": "a8d40c5c97ade992",
        "type": "redis-instance",
        "z": "654ea140.2275a8",
        "server": "f120eab2.0a60a8",
        "name": "",
        "topic": "redis",
        "location": "flow",
        "x": 4430,
        "y": 2700,
        "wires": []
    },
    {
        "id": "a17b29df043df727",
        "type": "debug",
        "z": "654ea140.2275a8",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "x": 2690,
        "y": 1260,
        "wires": []
    },
    {
        "id": "60096d4c24f36fae",
        "type": "debug",
        "z": "654ea140.2275a8",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "x": 2690,
        "y": 1320,
        "wires": []
    },
    {
        "id": "cfc9b38fa5fd5d78",
        "type": "inject",
        "z": "654ea140.2275a8",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "jjh:e",
        "payload": "{\"a\":1,\"b\":3}",
        "payloadType": "json",
        "x": 2040,
        "y": 1320,
        "wires": [
            [
                "30cb58d17a71efda"
            ]
        ]
    },
    {
        "id": "92fbaabe97cf44ca",
        "type": "redis-in",
        "z": "654ea140.2275a8",
        "server": "f120eab2.0a60a8",
        "command": "psubscribe",
        "name": "",
        "topic": "jjh:*",
        "obj": true,
        "timeout": 0,
        "x": 2370,
        "y": 1260,
        "wires": [
            [
                "9026a7e0e8829057"
            ]
        ]
    },
    {
        "id": "b46ebd279eeb6c98",
        "type": "redis-in",
        "z": "654ea140.2275a8",
        "server": "f120eab2.0a60a8",
        "command": "subscribe",
        "name": "",
        "topic": "TOPIC:OK",
        "obj": true,
        "timeout": 0,
        "x": 2460,
        "y": 1320,
        "wires": [
            [
                "60096d4c24f36fae"
            ]
        ]
    },
    {
        "id": "30cb58d17a71efda",
        "type": "redis-out",
        "z": "654ea140.2275a8",
        "server": "f120eab2.0a60a8",
        "command": "publish",
        "name": "",
        "topic": "",
        "obj": true,
        "x": 2200,
        "y": 1320,
        "wires": []
    },
    {
        "id": "e6ec9254f36610c0",
        "type": "function",
        "z": "5f98db3a.7ab21c",
        "g": "a0a5df595c9dd619",
        "name": "get_ttp_q()",
        "func": "",
        "outputs": 1,
        "noerr": 0,
        "initialize": "let guid = global.get('guid');\n\n\nlet get_ttp_q = function (botname = msg.payload) {\n    \n    let promise = new Promise((resolve, reject) => {\n        msg.resolve = resolve;\n        msg.reject = reject;\n    });\n    \n\n    msg.topic = guid+\"-bots:\"+botname+\":ttpq\";\n    msg.payload = [];\n\n    node.send(Object.assign({}, msg));\n    \n    return promise;\n};\n\nglobal.set('get_ttp_q', get_ttp_q);",
        "finalize": "",
        "x": 1070,
        "y": 540,
        "wires": [
            [
                "0046aff6b2b50e2e"
            ]
        ]
    },
    {
        "id": "25f5507bc50a674d",
        "type": "function",
        "z": "5f98db3a.7ab21c",
        "g": "a0a5df595c9dd619",
        "name": "resolve",
        "func": "msg.resolve(msg.payload);\n\n// reject\n// setTimeout(function () {\n//     msg.reject({message: 'Could not request joke'});\n// }, 2000);",
        "outputs": "0",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 1460,
        "y": 540,
        "wires": []
    },
    {
        "id": "0046aff6b2b50e2e",
        "type": "redis-command",
        "z": "5f98db3a.7ab21c",
        "g": "a0a5df595c9dd619",
        "server": "f120eab2.0a60a8",
        "command": "GET",
        "name": "get ttp q",
        "topic": "msg.payload",
        "params": "[]",
        "paramsType": "json",
        "payloadType": "json",
        "block": false,
        "x": 1280,
        "y": 540,
        "wires": [
            [
                "25f5507bc50a674d"
            ]
        ]
    },
    {
        "id": "dc0f18c849449aed",
        "type": "function",
        "z": "5f98db3a.7ab21c",
        "g": "a0a5df595c9dd619",
        "name": "getttp_busy()",
        "func": "",
        "outputs": 1,
        "noerr": 0,
        "initialize": "let guid = global.get('guid');\n\n\nlet getttp_busy = function (botname = msg.payload) {\n    \n    let promise = new Promise((resolve, reject) => {\n        msg.resolve = resolve;\n        msg.reject = reject;\n    });\n    \n\n    msg.topic = guid+\"-bots:\"+botname+\":ttpbusy\";\n    msg.payload = [];\n\n    node.send(Object.assign({}, msg));\n    \n    return promise;\n};\n\nglobal.set('getttp_busy', getttp_busy);",
        "finalize": "",
        "x": 310,
        "y": 540,
        "wires": [
            [
                "1e7b29c971fa62f5"
            ]
        ]
    },
    {
        "id": "efc4f70eea514ec7",
        "type": "inject",
        "z": "5f98db3a.7ab21c",
        "g": "a0a5df595c9dd619",
        "name": "botname",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "x": 140,
        "y": 540,
        "wires": [
            [
                "dc0f18c849449aed"
            ]
        ]
    },
    {
        "id": "dabee9685cb54b6d",
        "type": "function",
        "z": "5f98db3a.7ab21c",
        "g": "a0a5df595c9dd619",
        "name": "resolve",
        "func": "msg.resolve(msg.payload);\n\n// reject\n// setTimeout(function () {\n//     msg.reject({message: 'Could not request joke'});\n// }, 2000);",
        "outputs": "0",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 700,
        "y": 540,
        "wires": []
    },
    {
        "id": "1e7b29c971fa62f5",
        "type": "redis-command",
        "z": "5f98db3a.7ab21c",
        "g": "a0a5df595c9dd619",
        "server": "f120eab2.0a60a8",
        "command": "GET",
        "name": "get ttp busy",
        "topic": "msg.payload",
        "params": "[]",
        "paramsType": "json",
        "payloadType": "json",
        "block": false,
        "x": 510,
        "y": 540,
        "wires": [
            [
                "dabee9685cb54b6d"
            ]
        ]
    },
    {
        "id": "94cc69cd5a219c7d",
        "type": "function",
        "z": "5f98db3a.7ab21c",
        "g": "a0a5df595c9dd619",
        "name": "setttp_busy()",
        "func": "",
        "outputs": 1,
        "noerr": 0,
        "initialize": "let guid = global.get('guid');\n\nlet setttp_busy = function (botname = msg.topic) {\n    \n    let promise = new Promise((resolve, reject) => {\n        msg.resolve = resolve;\n        msg.reject = reject;\n    });\n    \n     msg.topic = guid+\"-bots:\"+botname+\":ttpbusy\";\n    msg.payload = \"true\";\n\n    node.send(Object.assign({}, msg));\n    \n    return promise;\n};\n\nglobal.set('setttp_busy', setttp_busy);",
        "finalize": "",
        "x": 310,
        "y": 600,
        "wires": [
            [
                "9c05c136a91dbfdf"
            ]
        ]
    },
    {
        "id": "0fa5699070a6108e",
        "type": "inject",
        "z": "5f98db3a.7ab21c",
        "g": "a0a5df595c9dd619",
        "name": "botname",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "x": 140,
        "y": 600,
        "wires": [
            [
                "94cc69cd5a219c7d"
            ]
        ]
    },
    {
        "id": "296c00e5d3e99fbb",
        "type": "function",
        "z": "5f98db3a.7ab21c",
        "g": "a0a5df595c9dd619",
        "name": "resolve",
        "func": "msg.resolve(msg.payload);\n\n// reject\n// setTimeout(function () {\n//     msg.reject({message: 'Could not request joke'});\n// }, 2000);",
        "outputs": "0",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 700,
        "y": 600,
        "wires": []
    },
    {
        "id": "9c05c136a91dbfdf",
        "type": "redis-command",
        "z": "5f98db3a.7ab21c",
        "g": "a0a5df595c9dd619",
        "server": "f120eab2.0a60a8",
        "command": "getset",
        "name": "",
        "topic": "",
        "params": "[]",
        "paramsType": "json",
        "payloadType": "json",
        "block": false,
        "x": 510,
        "y": 600,
        "wires": [
            [
                "296c00e5d3e99fbb"
            ]
        ]
    },
    {
        "id": "243c1bf582b64002",
        "type": "function",
        "z": "5f98db3a.7ab21c",
        "g": "a0a5df595c9dd619",
        "name": "setttp_free()",
        "func": "",
        "outputs": 1,
        "noerr": 0,
        "initialize": "let guid = global.get('guid');\n\nlet setttp_free = function (botname = msg.topic) {\n    \n    let promise = new Promise((resolve, reject) => {\n        msg.resolve = resolve;\n        msg.reject = reject;\n    });\n    \n    msg.topic = guid+\"-bots:\"+botname+\":ttpbusy\";\n    msg.payload = \"false\";\n\n    node.send(Object.assign({}, msg));\n    \n    return promise;\n};\n\nglobal.set('setttp_free', setttp_free);",
        "finalize": "",
        "x": 310,
        "y": 660,
        "wires": [
            [
                "1f4861ade1a88327"
            ]
        ]
    },
    {
        "id": "b760680d27a6dd1d",
        "type": "inject",
        "z": "5f98db3a.7ab21c",
        "g": "a0a5df595c9dd619",
        "name": "botname",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "x": 140,
        "y": 660,
        "wires": [
            [
                "243c1bf582b64002"
            ]
        ]
    },
    {
        "id": "1f4861ade1a88327",
        "type": "redis-command",
        "z": "5f98db3a.7ab21c",
        "g": "a0a5df595c9dd619",
        "server": "f120eab2.0a60a8",
        "command": "getset",
        "name": "",
        "topic": "",
        "params": "[]",
        "paramsType": "json",
        "payloadType": "json",
        "block": false,
        "x": 510,
        "y": 660,
        "wires": [
            [
                "2a1dbc968d324ddf"
            ]
        ]
    },
    {
        "id": "382a503f4e67ab59",
        "type": "function",
        "z": "5f98db3a.7ab21c",
        "g": "a0a5df595c9dd619",
        "name": "getprice()",
        "func": "",
        "outputs": 1,
        "noerr": 0,
        "initialize": "\n// Code added here will be run once\n// whenever the node is deployed.\nlet getprice = function (moneta = msg.payload) {\n    \n    let promise = new Promise((resolve, reject) => {\n        msg.resolve = resolve;\n        msg.reject = reject;\n    });\n    \n\n    msg.topic = \"prices:\"+moneta;\n    msg.payload = [];\n\n    node.send(Object.assign({}, msg));\n    \n    return promise;\n};\n\nglobal.set('getprice', getprice);",
        "finalize": "",
        "x": 1080,
        "y": 60,
        "wires": [
            [
                "3ea20577e61d637e"
            ]
        ]
    },
    {
        "id": "2f422e4d0ce76250",
        "type": "inject",
        "z": "5f98db3a.7ab21c",
        "g": "a0a5df595c9dd619",
        "name": "moneta",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "x": 900,
        "y": 60,
        "wires": [
            [
                "382a503f4e67ab59"
            ]
        ]
    },
    {
        "id": "3ea20577e61d637e",
        "type": "redis-command",
        "z": "5f98db3a.7ab21c",
        "g": "a0a5df595c9dd619",
        "server": "f120eab2.0a60a8",
        "command": "GET",
        "name": "get price",
        "topic": "msg.payload",
        "params": "[]",
        "paramsType": "json",
        "payloadType": "json",
        "block": false,
        "x": 1240,
        "y": 60,
        "wires": [
            [
                "41032c7d5c5dd176"
            ]
        ]
    },
    {
        "id": "41032c7d5c5dd176",
        "type": "function",
        "z": "5f98db3a.7ab21c",
        "g": "a0a5df595c9dd619",
        "name": "resolve",
        "func": "msg.resolve(msg.payload);\n\n// reject\n// setTimeout(function () {\n//     msg.reject({message: 'Could not request joke'});\n// }, 2000);",
        "outputs": "0",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 1460,
        "y": 60,
        "wires": []
    },
    {
        "id": "b7aba5b37ed37139",
        "type": "function",
        "z": "5f98db3a.7ab21c",
        "g": "a0a5df595c9dd619",
        "name": "getbot_status()",
        "func": "",
        "outputs": 1,
        "noerr": 0,
        "initialize": "let guid = global.get('guid');\n\n\n\nlet getbot_status = function (botname = msg.payload) {\n    \n    let promise = new Promise((resolve, reject) => {\n        msg.resolve = resolve;\n        msg.reject = reject;\n    });\n    \n\n    msg.topic = guid+\"-bots:\"+botname+\":status\";\n    msg.payload = [];\n\n    node.send(Object.assign({}, msg));\n    \n    return promise;\n};\n\nglobal.set('getbot_status', getbot_status);",
        "finalize": "",
        "x": 320,
        "y": 120,
        "wires": [
            [
                "bf6e252fdcd88a55"
            ]
        ]
    },
    {
        "id": "70ed2b2d70d9944d",
        "type": "inject",
        "z": "5f98db3a.7ab21c",
        "g": "a0a5df595c9dd619",
        "name": "botname",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "x": 140,
        "y": 120,
        "wires": [
            [
                "b7aba5b37ed37139"
            ]
        ]
    },
    {
        "id": "246eff8809325a29",
        "type": "function",
        "z": "5f98db3a.7ab21c",
        "g": "a0a5df595c9dd619",
        "name": "resolve",
        "func": "msg.resolve(msg.payload);\n\n// reject\n// setTimeout(function () {\n//     msg.reject({message: 'Could not request joke'});\n// }, 2000);",
        "outputs": "0",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 700,
        "y": 120,
        "wires": []
    },
    {
        "id": "c643f8c7edc72be1",
        "type": "function",
        "z": "5f98db3a.7ab21c",
        "g": "a0a5df595c9dd619",
        "name": "getbotlist()",
        "func": "",
        "outputs": 1,
        "noerr": 0,
        "initialize": "\n// Code added here will be run once\n// whenever the node is deployed.\nlet getbotlist = function (guid = msg.payload) {\n    \n    let promise = new Promise((resolve, reject) => {\n        msg.resolve = resolve;\n        msg.reject = reject;\n    });\n    \n\n    msg.topic = guid+\"-botlist\";\n    msg.payload = [];\n\n    node.send(Object.assign({}, msg));\n    \n    return promise;\n};\n\nglobal.set('getbotlist', getbotlist);",
        "finalize": "",
        "libs": [],
        "x": 290,
        "y": 60,
        "wires": [
            [
                "c00bedacd35da1c0"
            ]
        ]
    },
    {
        "id": "e42a384d2534d732",
        "type": "inject",
        "z": "5f98db3a.7ab21c",
        "g": "a0a5df595c9dd619",
        "name": "guid",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "x": 130,
        "y": 60,
        "wires": [
            [
                "c643f8c7edc72be1"
            ]
        ]
    },
    {
        "id": "c00bedacd35da1c0",
        "type": "redis-command",
        "z": "5f98db3a.7ab21c",
        "g": "a0a5df595c9dd619",
        "server": "f120eab2.0a60a8",
        "command": "GET",
        "name": "get botlist",
        "topic": "msg.payload",
        "params": "[]",
        "paramsType": "json",
        "payloadType": "json",
        "block": false,
        "x": 460,
        "y": 60,
        "wires": [
            [
                "7a5997cacf7a8bce"
            ]
        ]
    },
    {
        "id": "7a5997cacf7a8bce",
        "type": "function",
        "z": "5f98db3a.7ab21c",
        "g": "a0a5df595c9dd619",
        "name": "resolve",
        "func": "msg.resolve(msg.payload);\n\n// reject\n// setTimeout(function () {\n//     msg.reject({message: 'Could not request joke'});\n// }, 2000);",
        "outputs": "0",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 620,
        "y": 60,
        "wires": []
    },
    {
        "id": "bf6e252fdcd88a55",
        "type": "redis-command",
        "z": "5f98db3a.7ab21c",
        "g": "a0a5df595c9dd619",
        "server": "f120eab2.0a60a8",
        "command": "GET",
        "name": "get bot status",
        "topic": "msg.payload",
        "params": "[]",
        "paramsType": "json",
        "payloadType": "json",
        "block": false,
        "x": 520,
        "y": 120,
        "wires": [
            [
                "246eff8809325a29"
            ]
        ]
    },
    {
        "id": "029f8854d99d2799",
        "type": "function",
        "z": "5f98db3a.7ab21c",
        "g": "a0a5df595c9dd619",
        "name": "getbot_settings()",
        "func": "",
        "outputs": 1,
        "noerr": 0,
        "initialize": "let guid = global.get('guid');\n\n\nlet getbot_settings = function (botname = msg.payload) {\n    \n    let promise = new Promise((resolve, reject) => {\n        msg.resolve = resolve;\n        msg.reject = reject;\n    });\n    \n\n    msg.topic = guid+\"-bots:\"+botname+\":settings\";\n    msg.payload = [];\n\n    node.send(Object.assign({}, msg));\n    \n    return promise;\n};\n\nglobal.set('getbot_settings', getbot_settings);",
        "finalize": "",
        "x": 330,
        "y": 180,
        "wires": [
            [
                "12b0d6644ffae05b"
            ]
        ]
    },
    {
        "id": "696678b09fed07b3",
        "type": "inject",
        "z": "5f98db3a.7ab21c",
        "g": "a0a5df595c9dd619",
        "name": "botname",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "x": 140,
        "y": 180,
        "wires": [
            [
                "029f8854d99d2799"
            ]
        ]
    },
    {
        "id": "ccc3aeede3d8a8b3",
        "type": "function",
        "z": "5f98db3a.7ab21c",
        "g": "a0a5df595c9dd619",
        "name": "resolve",
        "func": "msg.resolve(msg.payload);\n\n// reject\n// setTimeout(function () {\n//     msg.reject({message: 'Could not request joke'});\n// }, 2000);",
        "outputs": "0",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 720,
        "y": 180,
        "wires": []
    },
    {
        "id": "12b0d6644ffae05b",
        "type": "redis-command",
        "z": "5f98db3a.7ab21c",
        "g": "a0a5df595c9dd619",
        "server": "f120eab2.0a60a8",
        "command": "GET",
        "name": "get bot settings",
        "topic": "msg.payload",
        "params": "[]",
        "paramsType": "json",
        "payloadType": "json",
        "block": false,
        "x": 540,
        "y": 180,
        "wires": [
            [
                "ccc3aeede3d8a8b3"
            ]
        ]
    },
    {
        "id": "65f41478d829a80f",
        "type": "function",
        "z": "5f98db3a.7ab21c",
        "g": "a0a5df595c9dd619",
        "name": "getbot_ttp()",
        "func": "",
        "outputs": 1,
        "noerr": 0,
        "initialize": "let guid = global.get('guid');\n\n\nlet getbot_ttp = function (botname = msg.payload) {\n    \n    let promise = new Promise((resolve, reject) => {\n        msg.resolve = resolve;\n        msg.reject = reject;\n    });\n    \n\n    msg.topic = guid+\"-bots:\"+botname+\":ttp\";\n    msg.payload = [];\n\n    node.send(Object.assign({}, msg));\n    \n    return promise;\n};\n\nglobal.set('getbot_ttp', getbot_ttp);",
        "finalize": "",
        "x": 310,
        "y": 240,
        "wires": [
            [
                "5b4a4b752fd5b8ce"
            ]
        ]
    },
    {
        "id": "475e4953b0e1f1d3",
        "type": "inject",
        "z": "5f98db3a.7ab21c",
        "g": "a0a5df595c9dd619",
        "name": "botname",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "x": 140,
        "y": 240,
        "wires": [
            [
                "65f41478d829a80f"
            ]
        ]
    },
    {
        "id": "7d6a7893273afcaa",
        "type": "function",
        "z": "5f98db3a.7ab21c",
        "g": "a0a5df595c9dd619",
        "name": "resolve",
        "func": "msg.resolve(msg.payload);\n\n// reject\n// setTimeout(function () {\n//     msg.reject({message: 'Could not request joke'});\n// }, 2000);",
        "outputs": "0",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 680,
        "y": 240,
        "wires": []
    },
    {
        "id": "5b4a4b752fd5b8ce",
        "type": "redis-command",
        "z": "5f98db3a.7ab21c",
        "g": "a0a5df595c9dd619",
        "server": "f120eab2.0a60a8",
        "command": "GET",
        "name": "get bot ttp",
        "topic": "msg.payload",
        "params": "[]",
        "paramsType": "json",
        "payloadType": "json",
        "block": false,
        "x": 490,
        "y": 240,
        "wires": [
            [
                "7d6a7893273afcaa"
            ]
        ]
    },
    {
        "id": "50d957a47610c2d0",
        "type": "function",
        "z": "5f98db3a.7ab21c",
        "g": "a0a5df595c9dd619",
        "name": "getbot_onoff()",
        "func": "",
        "outputs": 1,
        "noerr": 0,
        "initialize": "let guid = global.get('guid');\n\n\nlet getbot_onoff = function (botname = msg.payload) {\n    \n    let promise = new Promise((resolve, reject) => {\n        msg.resolve = resolve;\n        msg.reject = reject;\n    });\n    \n\n    msg.topic = guid+\"-bots:\"+botname+\":onoff\";\n    msg.payload = [];\n\n    node.send(Object.assign({}, msg));\n    \n    return promise;\n};\n\nglobal.set('getbot_onoff', getbot_onoff);",
        "finalize": "",
        "libs": [],
        "x": 320,
        "y": 300,
        "wires": [
            [
                "7c08b0b5b7bcfd86"
            ]
        ]
    },
    {
        "id": "d3d2d3d7a6bbdff7",
        "type": "inject",
        "z": "5f98db3a.7ab21c",
        "g": "a0a5df595c9dd619",
        "name": "botname",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "x": 140,
        "y": 300,
        "wires": [
            [
                "50d957a47610c2d0"
            ]
        ]
    },
    {
        "id": "3ef68805d9b584b8",
        "type": "function",
        "z": "5f98db3a.7ab21c",
        "g": "a0a5df595c9dd619",
        "name": "resolve",
        "func": "msg.resolve(msg.payload);\n\n// reject\n// setTimeout(function () {\n//     msg.reject({message: 'Could not request joke'});\n// }, 2000);",
        "outputs": "0",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 700,
        "y": 300,
        "wires": []
    },
    {
        "id": "7c08b0b5b7bcfd86",
        "type": "redis-command",
        "z": "5f98db3a.7ab21c",
        "g": "a0a5df595c9dd619",
        "server": "f120eab2.0a60a8",
        "command": "GET",
        "name": "get bot onoff",
        "topic": "msg.payload",
        "params": "[]",
        "paramsType": "json",
        "payloadType": "json",
        "block": false,
        "x": 510,
        "y": 300,
        "wires": [
            [
                "3ef68805d9b584b8"
            ]
        ]
    },
    {
        "id": "b18e0afd2ba78b89",
        "type": "function",
        "z": "5f98db3a.7ab21c",
        "g": "a0a5df595c9dd619",
        "name": "getbot_busy()",
        "func": "",
        "outputs": 1,
        "noerr": 0,
        "initialize": "let guid = global.get('guid');\n\n\nlet getbot_busy = function (botname = msg.payload) {\n    \n    let promise = new Promise((resolve, reject) => {\n        msg.resolve = resolve;\n        msg.reject = reject;\n    });\n    \n\n    msg.topic = guid+\"-bots:\"+botname+\":busy\";\n    msg.payload = [];\n\n    node.send(Object.assign({}, msg));\n    \n    return promise;\n};\n\nglobal.set('getbot_busy', getbot_busy);",
        "finalize": "",
        "libs": [],
        "x": 320,
        "y": 360,
        "wires": [
            [
                "a7d6b85bafb33975"
            ]
        ]
    },
    {
        "id": "18a329d0d3f925a9",
        "type": "inject",
        "z": "5f98db3a.7ab21c",
        "g": "a0a5df595c9dd619",
        "name": "botname",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "x": 140,
        "y": 360,
        "wires": [
            [
                "b18e0afd2ba78b89"
            ]
        ]
    },
    {
        "id": "c6f57dbe2564edbd",
        "type": "function",
        "z": "5f98db3a.7ab21c",
        "g": "a0a5df595c9dd619",
        "name": "resolve",
        "func": "msg.resolve(msg.payload);\n\n// reject\n// setTimeout(function () {\n//     msg.reject({message: 'Could not request joke'});\n// }, 2000);",
        "outputs": "0",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 700,
        "y": 360,
        "wires": []
    },
    {
        "id": "a7d6b85bafb33975",
        "type": "redis-command",
        "z": "5f98db3a.7ab21c",
        "g": "a0a5df595c9dd619",
        "server": "f120eab2.0a60a8",
        "command": "GET",
        "name": "get bot busy",
        "topic": "msg.payload",
        "params": "[]",
        "paramsType": "json",
        "payloadType": "json",
        "block": false,
        "x": 510,
        "y": 360,
        "wires": [
            [
                "c6f57dbe2564edbd"
            ]
        ]
    },
    {
        "id": "a713b8aa07e16e63",
        "type": "function",
        "z": "5f98db3a.7ab21c",
        "g": "a0a5df595c9dd619",
        "name": "setbotlist()",
        "func": "",
        "outputs": 1,
        "noerr": 0,
        "initialize": "\n// Code added here will be run once\n// whenever the node is deployed.\nlet setbotlist = function (guid = msg.payload.guid, botlist = msg.payload.botlist) {\n    \n    let promise = new Promise((resolve, reject) => {\n        msg.resolve = resolve;\n        msg.reject = reject;\n    });\n    \n\n    msg.topic = guid+\"-botlist\";\n    msg.payload = botlist;\n\n    node.send(Object.assign({}, msg));\n    \n    return promise;\n};\n\nglobal.set('setbotlist', setbotlist);",
        "finalize": "",
        "libs": [],
        "x": 1090,
        "y": 120,
        "wires": [
            [
                "c012203851d0ebcd"
            ]
        ]
    },
    {
        "id": "dd10f10ea4f57a40",
        "type": "inject",
        "z": "5f98db3a.7ab21c",
        "g": "a0a5df595c9dd619",
        "name": "guid, botlist",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "x": 910,
        "y": 120,
        "wires": [
            [
                "a713b8aa07e16e63"
            ]
        ]
    },
    {
        "id": "8812bbd571059ab4",
        "type": "function",
        "z": "5f98db3a.7ab21c",
        "g": "a0a5df595c9dd619",
        "name": "resolve",
        "func": "msg.resolve(msg.payload);\n\n// reject\n// setTimeout(function () {\n//     msg.reject({message: 'Could not request joke'});\n// }, 2000);",
        "outputs": "0",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 1420,
        "y": 120,
        "wires": []
    },
    {
        "id": "c012203851d0ebcd",
        "type": "redis-command",
        "z": "5f98db3a.7ab21c",
        "g": "a0a5df595c9dd619",
        "server": "f120eab2.0a60a8",
        "command": "getset",
        "name": "set botlist",
        "topic": "",
        "params": "[]",
        "paramsType": "json",
        "payloadType": "json",
        "block": false,
        "x": 1260,
        "y": 120,
        "wires": [
            [
                "8812bbd571059ab4"
            ]
        ]
    },
    {
        "id": "3bef7797c26b1a5f",
        "type": "function",
        "z": "5f98db3a.7ab21c",
        "g": "a0a5df595c9dd619",
        "name": "setbot_status()",
        "func": "",
        "outputs": 1,
        "noerr": 0,
        "initialize": "\nlet setbot_status = function (botname = msg.topic, status = msg.payload) {\n    \n    let promise = new Promise((resolve, reject) => {\n        msg.resolve = resolve;\n        msg.reject = reject;\n    });\n    \n\n    msg.topic = botname;\n    msg.payload = status;\n\n    node.send(Object.assign({}, msg));\n    \n    return promise;\n};\n\nglobal.set('setbot_status', setbot_status);",
        "finalize": "",
        "x": 1120,
        "y": 180,
        "wires": [
            [
                "35682148fb7efa9b"
            ]
        ]
    },
    {
        "id": "c154464254f3387d",
        "type": "inject",
        "z": "5f98db3a.7ab21c",
        "g": "a0a5df595c9dd619",
        "name": "botname, status",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "x": 920,
        "y": 180,
        "wires": [
            [
                "3bef7797c26b1a5f"
            ]
        ]
    },
    {
        "id": "be9d5b5c3682927e",
        "type": "function",
        "z": "5f98db3a.7ab21c",
        "g": "a0a5df595c9dd619",
        "name": "resolve",
        "func": "msg.resolve(msg.payload);\n\n// reject\n// setTimeout(function () {\n//     msg.reject({message: 'Could not request joke'});\n// }, 2000);",
        "outputs": "0",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 1500,
        "y": 180,
        "wires": []
    },
    {
        "id": "35682148fb7efa9b",
        "type": "redis-command",
        "z": "5f98db3a.7ab21c",
        "g": "a0a5df595c9dd619",
        "server": "f120eab2.0a60a8",
        "command": "getset",
        "name": "",
        "topic": "",
        "params": "[]",
        "paramsType": "json",
        "payloadType": "json",
        "block": false,
        "x": 1310,
        "y": 180,
        "wires": [
            [
                "be9d5b5c3682927e"
            ]
        ]
    },
    {
        "id": "95fb43b5354257c0",
        "type": "function",
        "z": "5f98db3a.7ab21c",
        "g": "a0a5df595c9dd619",
        "name": "setbot_busy()",
        "func": "",
        "outputs": 1,
        "noerr": 0,
        "initialize": "let guid = global.get('guid');\n\nlet setbot_busy = function (botname = msg.topic) {\n    \n    let promise = new Promise((resolve, reject) => {\n        msg.resolve = resolve;\n        msg.reject = reject;\n    });\n    \n     msg.topic = guid+\"-bots:\"+botname+\":busy\";\n    msg.payload = \"true\";\n\n    node.send(Object.assign({}, msg));\n    \n    return promise;\n};\n\nglobal.set('setbot_busy', setbot_busy);",
        "finalize": "",
        "x": 320,
        "y": 420,
        "wires": [
            [
                "1e82a89aecf97004"
            ]
        ]
    },
    {
        "id": "c0646124a302aa2c",
        "type": "inject",
        "z": "5f98db3a.7ab21c",
        "g": "a0a5df595c9dd619",
        "name": "botname",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "x": 140,
        "y": 420,
        "wires": [
            [
                "95fb43b5354257c0"
            ]
        ]
    },
    {
        "id": "8746db723c6bc2f6",
        "type": "function",
        "z": "5f98db3a.7ab21c",
        "g": "a0a5df595c9dd619",
        "name": "resolve",
        "func": "msg.resolve(msg.payload);\n\n// reject\n// setTimeout(function () {\n//     msg.reject({message: 'Could not request joke'});\n// }, 2000);",
        "outputs": "0",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 700,
        "y": 420,
        "wires": []
    },
    {
        "id": "1e82a89aecf97004",
        "type": "redis-command",
        "z": "5f98db3a.7ab21c",
        "g": "a0a5df595c9dd619",
        "server": "f120eab2.0a60a8",
        "command": "getset",
        "name": "",
        "topic": "",
        "params": "[]",
        "paramsType": "json",
        "payloadType": "json",
        "block": false,
        "x": 510,
        "y": 420,
        "wires": [
            [
                "8746db723c6bc2f6"
            ]
        ]
    },
    {
        "id": "7d955c944482dd1f",
        "type": "function",
        "z": "5f98db3a.7ab21c",
        "g": "a0a5df595c9dd619",
        "name": "setbot_free()",
        "func": "",
        "outputs": 1,
        "noerr": 0,
        "initialize": "let guid = global.get('guid');\n\nlet setbot_free = function (botname = msg.topic) {\n    \n    let promise = new Promise((resolve, reject) => {\n        msg.resolve = resolve;\n        msg.reject = reject;\n    });\n    \n    msg.topic = guid+\"-bots:\"+botname+\":busy\";\n    msg.payload = \"false\";\n\n    node.send(Object.assign({}, msg));\n    \n    return promise;\n};\n\nglobal.set('setbot_free', setbot_free);",
        "finalize": "",
        "x": 310,
        "y": 480,
        "wires": [
            [
                "20fb3198225f6a9e"
            ]
        ]
    },
    {
        "id": "a919a353f7b0be87",
        "type": "inject",
        "z": "5f98db3a.7ab21c",
        "g": "a0a5df595c9dd619",
        "name": "botname",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "x": 140,
        "y": 480,
        "wires": [
            [
                "7d955c944482dd1f"
            ]
        ]
    },
    {
        "id": "1fe131c4d12aa0bf",
        "type": "function",
        "z": "5f98db3a.7ab21c",
        "g": "a0a5df595c9dd619",
        "name": "resolve",
        "func": "msg.resolve(msg.payload);\n\n// reject\n// setTimeout(function () {\n//     msg.reject({message: 'Could not request joke'});\n// }, 2000);",
        "outputs": "0",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 700,
        "y": 480,
        "wires": []
    },
    {
        "id": "20fb3198225f6a9e",
        "type": "redis-command",
        "z": "5f98db3a.7ab21c",
        "g": "a0a5df595c9dd619",
        "server": "f120eab2.0a60a8",
        "command": "getset",
        "name": "",
        "topic": "",
        "params": "[]",
        "paramsType": "json",
        "payloadType": "json",
        "block": false,
        "x": 510,
        "y": 480,
        "wires": [
            [
                "1fe131c4d12aa0bf"
            ]
        ]
    },
    {
        "id": "0af2f0d1357e3a82",
        "type": "function",
        "z": "5f98db3a.7ab21c",
        "g": "a0a5df595c9dd619",
        "name": "getbot_data()",
        "func": "",
        "outputs": 1,
        "noerr": 0,
        "initialize": "let guid = global.get('guid');\n\n\n\nlet getbot_data = function (botname = msg.payload) {\n    \n    let promise = new Promise((resolve, reject) => {\n        msg.resolve = resolve;\n        msg.reject = reject;\n    });\n    \n\n    msg.topic = guid+\"-bots:\"+botname+\":data\";\n    msg.payload = [];\n\n    node.send(Object.assign({}, msg));\n    \n    return promise;\n};\n\nglobal.set('getbot_data', getbot_data);",
        "finalize": "",
        "x": 1070,
        "y": 420,
        "wires": [
            [
                "2b492f081698596f"
            ]
        ]
    },
    {
        "id": "a3dce78903158487",
        "type": "inject",
        "z": "5f98db3a.7ab21c",
        "g": "a0a5df595c9dd619",
        "name": "botname",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "x": 900,
        "y": 420,
        "wires": [
            [
                "0af2f0d1357e3a82"
            ]
        ]
    },
    {
        "id": "bbe4e1e92aa2f964",
        "type": "function",
        "z": "5f98db3a.7ab21c",
        "g": "a0a5df595c9dd619",
        "name": "resolve",
        "func": "msg.resolve(msg.payload);\n\n// reject\n// setTimeout(function () {\n//     msg.reject({message: 'Could not request joke'});\n// }, 2000);",
        "outputs": "0",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 1460,
        "y": 420,
        "wires": []
    },
    {
        "id": "2b492f081698596f",
        "type": "redis-command",
        "z": "5f98db3a.7ab21c",
        "g": "a0a5df595c9dd619",
        "server": "f120eab2.0a60a8",
        "command": "hgetall",
        "name": "",
        "topic": "",
        "params": "{}",
        "paramsType": "json",
        "payloadType": "json",
        "block": false,
        "x": 1250,
        "y": 420,
        "wires": [
            [
                "bbe4e1e92aa2f964"
            ]
        ]
    },
    {
        "id": "a26a29ba43723e01",
        "type": "function",
        "z": "5f98db3a.7ab21c",
        "g": "a0a5df595c9dd619",
        "name": "setbot_data()",
        "func": "",
        "outputs": 1,
        "noerr": 0,
        "initialize": "let guid = global.get('guid');\n\n\nlet setbot_data = function (volname = msg.topic, data = msg.payload) {\n    \n    let promise = new Promise((resolve, reject) => {\n        msg.resolve = resolve;\n        msg.reject = reject;\n    });\n    \n\n    msg.topic = volname;\n    msg.payload = data;\n\n    node.send(Object.assign({}, msg));\n    \n    return promise;\n};\n\nglobal.set('setbot_data', setbot_data);",
        "finalize": "",
        "x": 1070,
        "y": 240,
        "wires": [
            [
                "9a443f63d0615ef9"
            ]
        ]
    },
    {
        "id": "c3289de2ea50e5ea",
        "type": "inject",
        "z": "5f98db3a.7ab21c",
        "g": "a0a5df595c9dd619",
        "name": "botname",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "x": 900,
        "y": 240,
        "wires": [
            [
                "a26a29ba43723e01"
            ]
        ]
    },
    {
        "id": "1b8e8f2b9e955bc3",
        "type": "function",
        "z": "5f98db3a.7ab21c",
        "g": "a0a5df595c9dd619",
        "name": "resolve",
        "func": "msg.resolve(msg.payload);\n\n// reject\n// setTimeout(function () {\n//     msg.reject({message: 'Could not request joke'});\n// }, 2000);",
        "outputs": "0",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 1460,
        "y": 240,
        "wires": []
    },
    {
        "id": "9a443f63d0615ef9",
        "type": "redis-command",
        "z": "5f98db3a.7ab21c",
        "g": "a0a5df595c9dd619",
        "server": "f120eab2.0a60a8",
        "command": "hmset",
        "name": "",
        "topic": "",
        "params": "[]",
        "paramsType": "json",
        "payloadType": "json",
        "block": false,
        "x": 1250,
        "y": 240,
        "wires": [
            [
                "1b8e8f2b9e955bc3"
            ]
        ]
    },
    {
        "id": "447c87dceb07fc6e",
        "type": "function",
        "z": "5f98db3a.7ab21c",
        "g": "a0a5df595c9dd619",
        "name": "getbot_start_set()",
        "func": "",
        "outputs": 1,
        "noerr": 0,
        "initialize": "let guid = global.get('guid');\n\n\nlet getbot_start_set = function (botname = msg.payload) {\n    \n    let promise = new Promise((resolve, reject) => {\n        msg.resolve = resolve;\n        msg.reject = reject;\n    });\n    \n\n    msg.topic = guid+\"-bots:\"+botname+\":start_set\";\n    msg.payload = [];\n\n    node.send(Object.assign({}, msg));\n    \n    return promise;\n};\n\nglobal.set('getbot_start_set', getbot_start_set);",
        "finalize": "",
        "x": 1090,
        "y": 480,
        "wires": [
            [
                "184f6029b46bff83"
            ]
        ]
    },
    {
        "id": "dc41b6b6c1974b34",
        "type": "inject",
        "z": "5f98db3a.7ab21c",
        "g": "a0a5df595c9dd619",
        "name": "botname",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "x": 900,
        "y": 480,
        "wires": [
            [
                "447c87dceb07fc6e"
            ]
        ]
    },
    {
        "id": "cc793ccb2692b6f7",
        "type": "function",
        "z": "5f98db3a.7ab21c",
        "g": "a0a5df595c9dd619",
        "name": "resolve",
        "func": "msg.resolve(msg.payload);\n\n// reject\n// setTimeout(function () {\n//     msg.reject({message: 'Could not request joke'});\n// }, 2000);",
        "outputs": "0",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 1500,
        "y": 480,
        "wires": []
    },
    {
        "id": "184f6029b46bff83",
        "type": "redis-command",
        "z": "5f98db3a.7ab21c",
        "g": "a0a5df595c9dd619",
        "server": "f120eab2.0a60a8",
        "command": "GET",
        "name": "get bot starts_set",
        "topic": "msg.payload",
        "params": "[]",
        "paramsType": "json",
        "payloadType": "json",
        "block": false,
        "x": 1310,
        "y": 480,
        "wires": [
            [
                "cc793ccb2692b6f7"
            ]
        ]
    },
    {
        "id": "a387bc9ca753da20",
        "type": "function",
        "z": "5f98db3a.7ab21c",
        "g": "a0a5df595c9dd619",
        "name": "setbot_ttp()",
        "func": "",
        "outputs": 1,
        "noerr": 0,
        "initialize": "\nlet setbot_ttp = function (botname = msg.topic, ttp = msg.payload) {\n    \n    let promise = new Promise((resolve, reject) => {\n        msg.resolve = resolve;\n        msg.reject = reject;\n    });\n    \n\n    msg.topic = botname;\n    msg.payload = ttp;\n\n    node.send(Object.assign({}, msg));\n    \n    return promise;\n};\n\nglobal.set('setbot_ttp', setbot_ttp);",
        "finalize": "",
        "libs": [],
        "x": 1110,
        "y": 360,
        "wires": [
            [
                "426d2443aff4e59c"
            ]
        ]
    },
    {
        "id": "e2bef8f03e88fbc4",
        "type": "inject",
        "z": "5f98db3a.7ab21c",
        "g": "a0a5df595c9dd619",
        "name": "botname, ttp",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "x": 910,
        "y": 360,
        "wires": [
            [
                "a387bc9ca753da20"
            ]
        ]
    },
    {
        "id": "74dfccbf45336d82",
        "type": "function",
        "z": "5f98db3a.7ab21c",
        "g": "a0a5df595c9dd619",
        "name": "resolve",
        "func": "msg.resolve(msg.payload);\n\n// reject\n// setTimeout(function () {\n//     msg.reject({message: 'Could not request joke'});\n// }, 2000);",
        "outputs": "0",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 1500,
        "y": 360,
        "wires": []
    },
    {
        "id": "426d2443aff4e59c",
        "type": "redis-command",
        "z": "5f98db3a.7ab21c",
        "g": "a0a5df595c9dd619",
        "server": "f120eab2.0a60a8",
        "command": "getset",
        "name": "",
        "topic": "",
        "params": "[]",
        "paramsType": "json",
        "payloadType": "json",
        "block": false,
        "x": 1310,
        "y": 360,
        "wires": [
            [
                "74dfccbf45336d82"
            ]
        ]
    },
    {
        "id": "8d958d67db6f443f",
        "type": "inject",
        "z": "5f98db3a.7ab21c",
        "g": "a0a5df595c9dd619",
        "name": "botname",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "x": 900,
        "y": 540,
        "wires": [
            [
                "e6ec9254f36610c0"
            ]
        ]
    },
    {
        "id": "2c2b920d47617035",
        "type": "inject",
        "z": "5f98db3a.7ab21c",
        "g": "a0a5df595c9dd619",
        "name": "botname, ttpq",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "x": 920,
        "y": 600,
        "wires": [
            [
                "c83061d2301328bd"
            ]
        ]
    },
    {
        "id": "c83061d2301328bd",
        "type": "function",
        "z": "5f98db3a.7ab21c",
        "g": "a0a5df595c9dd619",
        "name": "set_ttp_q()",
        "func": "",
        "outputs": 1,
        "noerr": 0,
        "initialize": "let guid = global.get('guid');\nlet set_ttp_q = function (botname = msg.topic, ttpq = msg.payload) {\n    \n    let promise = new Promise((resolve, reject) => {\n        msg.resolve = resolve;\n        msg.reject = reject;\n    });\n    \n\n    msg.topic = guid+\"-bots:\"+botname+\":ttpq\";\n    msg.payload = ttpq;\n\n    node.send(Object.assign({}, msg));\n    \n    return promise;\n};\n\nglobal.set('set_ttp_q', set_ttp_q);",
        "finalize": "",
        "x": 1110,
        "y": 600,
        "wires": [
            [
                "f86ec00ad5b25698"
            ]
        ]
    },
    {
        "id": "f86ec00ad5b25698",
        "type": "redis-command",
        "z": "5f98db3a.7ab21c",
        "g": "a0a5df595c9dd619",
        "server": "f120eab2.0a60a8",
        "command": "getset",
        "name": "",
        "topic": "",
        "params": "[]",
        "paramsType": "json",
        "payloadType": "json",
        "block": false,
        "x": 1290,
        "y": 600,
        "wires": [
            [
                "cba8e515781d3119"
            ]
        ]
    },
    {
        "id": "cba8e515781d3119",
        "type": "function",
        "z": "5f98db3a.7ab21c",
        "g": "a0a5df595c9dd619",
        "name": "resolve",
        "func": "msg.resolve(msg.payload);\n\n// reject\n// setTimeout(function () {\n//     msg.reject({message: 'Could not request joke'});\n// }, 2000);",
        "outputs": "0",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 1480,
        "y": 600,
        "wires": []
    },
    {
        "id": "2a1dbc968d324ddf",
        "type": "function",
        "z": "5f98db3a.7ab21c",
        "g": "a0a5df595c9dd619",
        "name": "resolve",
        "func": "msg.resolve(msg.payload);\n\n// reject\n// setTimeout(function () {\n//     msg.reject({message: 'Could not request joke'});\n// }, 2000);",
        "outputs": "0",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 700,
        "y": 660,
        "wires": []
    },
    {
        "id": "20e930bc4e51c612",
        "type": "http in",
        "z": "5f98db3a.7ab21c",
        "g": "1af578fa0e07ad5a",
        "name": "",
        "url": "/botslist",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 2590,
        "y": 1220,
        "wires": [
            [
                "250d741d8a5745e6",
                "7db357973ec21c20"
            ]
        ]
    },
    {
        "id": "b36749c7a3e1b3d0",
        "type": "http response",
        "z": "5f98db3a.7ab21c",
        "g": "1af578fa0e07ad5a",
        "name": "",
        "statusCode": "200",
        "headers": {},
        "x": 3760,
        "y": 1220,
        "wires": []
    },
    {
        "id": "250d741d8a5745e6",
        "type": "function",
        "z": "5f98db3a.7ab21c",
        "g": "1af578fa0e07ad5a",
        "name": "getbotlist",
        "func": "\n\nlet guid = global.get('guid');\n\nconst gbl = global.get('getbotlist')(guid);\n\ngbl.then(gbl => {\n    \n    msg.payload = JSON.parse(gbl);\n    \n\n    node.status({fill:\"green\",shape:\"dot\"});\n    node.send(msg);\n\n}).catch(error => {\n    \n\n    node.status({fill:\"red\",shape:\"dot\"});\n    \n    node.error(error);\n});",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2760,
        "y": 1220,
        "wires": [
            [
                "f33e9568474183b7",
                "ce8d836f2e10dc86"
            ]
        ]
    },
    {
        "id": "b4a4e83ed0643f2c",
        "type": "function",
        "z": "5f98db3a.7ab21c",
        "g": "1af578fa0e07ad5a",
        "name": "calculate indicators",
        "func": "let guid = global.get('guid');\n\n// $botlist[$key][2] = round(($botfinance[\"depo\"] - $botfinance[\"startdepo\"]), $botsettings[\"digitprice\"]); //прибыль/просадка\n// let a = msg.bot.finance.depo - msg.bot.finance.startdepo;\n\nmsg.botname = msg.payload;\n\nlet a = Number((msg.bot.finance.depo - msg.bot.finance.startdepo).toFixed(msg.bot.settings.digitprice));\nmsg.payload = [true, msg.payload, a, 0, 0, 0, 0, 0, guid];\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3410,
        "y": 1220,
        "wires": [
            [
                "577c5da19353e540"
            ]
        ]
    },
    {
        "id": "f33e9568474183b7",
        "type": "split",
        "z": "5f98db3a.7ab21c",
        "g": "1af578fa0e07ad5a",
        "name": "",
        "splt": "\\n",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "x": 2910,
        "y": 1220,
        "wires": [
            [
                "bf1c13c6979ef555",
                "a27961fd36927619"
            ]
        ]
    },
    {
        "id": "577c5da19353e540",
        "type": "join",
        "z": "5f98db3a.7ab21c",
        "g": "1af578fa0e07ad5a",
        "name": "",
        "mode": "auto",
        "build": "string",
        "property": "payload",
        "propertyType": "msg",
        "key": "topic",
        "joiner": "\\n",
        "joinerType": "str",
        "accumulate": "false",
        "timeout": "",
        "count": "",
        "reduceRight": false,
        "x": 3590,
        "y": 1220,
        "wires": [
            [
                "b36749c7a3e1b3d0"
            ]
        ]
    },
    {
        "id": "12956f0cc39cecca",
        "type": "function",
        "z": "5f98db3a.7ab21c",
        "g": "b1c9866420e73130",
        "name": "getbot_start_set",
        "func": "\nlet botname = msg.payload.botname;\n\nconst gb = global.get('getbot_start_set')(botname);\n\ngb.then(gb => {\nnode.warn(gb);\n    msg.payload = gb;\n    node.send(msg);\n\n}).catch(error => {\n    node.error(error);\n});",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2980,
        "y": 1960,
        "wires": [
            [
                "5944b81ec7e464fc",
                "673c67310929e64a"
            ]
        ]
    },
    {
        "id": "11a4d1c2a44c2e16",
        "type": "redis-command",
        "z": "5f98db3a.7ab21c",
        "g": "b1c9866420e73130",
        "server": "f120eab2.0a60a8",
        "command": "hmset",
        "name": "",
        "topic": "",
        "params": "[]",
        "paramsType": "json",
        "payloadType": "json",
        "block": false,
        "x": 3250,
        "y": 2020,
        "wires": [
            []
        ]
    },
    {
        "id": "afd3deeae4d81bc8",
        "type": "function",
        "z": "5f98db3a.7ab21c",
        "g": "b1c9866420e73130",
        "name": "prepare data for create bot",
        "func": "msg.topic = msg.payload.settings.userid+\"-bots:\"+msg.payload.settings.botname+\":data\";\n\nlet botdata = {\n    \"finance\":JSON.stringify(msg.payload.finance),\n    \"floors\":JSON.stringify(msg.payload.floors),\n    \"sales\":JSON.stringify(msg.payload.sales)\n    \n};\nmsg.payload = botdata;\nnode.status({fill:\"green\",shape:\"dot\"});\nreturn msg;\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 3020,
        "y": 2020,
        "wires": [
            [
                "11a4d1c2a44c2e16"
            ]
        ]
    },
    {
        "id": "f1795e2079ad790a",
        "type": "function",
        "z": "5f98db3a.7ab21c",
        "g": "b1c9866420e73130",
        "name": "prepare for add bot status",
        "func": "msg.topic = msg.payload.settings.userid+\"-bots:\"+msg.payload.settings.botname+\":status\";\nmsg.payload.status.updated = new Date().getTime();\nmsg.payload = JSON.stringify(msg.payload.status);\n\nnode.status({fill:\"green\",shape:\"dot\"});\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 3010,
        "y": 2080,
        "wires": [
            [
                "e54f6abd7ef3a04a"
            ]
        ]
    },
    {
        "id": "e54f6abd7ef3a04a",
        "type": "redis-command",
        "z": "5f98db3a.7ab21c",
        "g": "b1c9866420e73130",
        "server": "f120eab2.0a60a8",
        "command": "getset",
        "name": "",
        "topic": "",
        "params": "[]",
        "paramsType": "json",
        "payloadType": "json",
        "block": false,
        "x": 3230,
        "y": 2080,
        "wires": [
            []
        ]
    },
    {
        "id": "a2fba486886cf22e",
        "type": "function",
        "z": "5f98db3a.7ab21c",
        "g": "b1c9866420e73130",
        "name": "prepare for add bot settings",
        "func": "msg.topic = msg.payload.settings.userid+\"-bots:\"+msg.payload.settings.botname+\":settings\";\n\nmsg.payload = JSON.stringify(msg.payload.settings);\n\nnode.status({fill:\"green\",shape:\"dot\"});\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 3020,
        "y": 2140,
        "wires": [
            [
                "b8a5c62032bf8a3a"
            ]
        ]
    },
    {
        "id": "b8a5c62032bf8a3a",
        "type": "redis-command",
        "z": "5f98db3a.7ab21c",
        "g": "b1c9866420e73130",
        "server": "f120eab2.0a60a8",
        "command": "getset",
        "name": "",
        "topic": "",
        "params": "[]",
        "paramsType": "json",
        "payloadType": "json",
        "block": false,
        "x": 3250,
        "y": 2140,
        "wires": [
            []
        ]
    },
    {
        "id": "43efea3d8f426bec",
        "type": "function",
        "z": "5f98db3a.7ab21c",
        "g": "b1c9866420e73130",
        "name": "prepare for add bot ttp",
        "func": "msg.topic = msg.payload.settings.userid+\"-bots:\"+msg.payload.settings.botname+\":ttp\";\n\nmsg.payload = JSON.stringify(msg.payload.ttp);\n\nnode.status({fill:\"green\",shape:\"dot\"});\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 3000,
        "y": 2200,
        "wires": [
            [
                "2c8bdda9aab7d259"
            ]
        ]
    },
    {
        "id": "2c8bdda9aab7d259",
        "type": "redis-command",
        "z": "5f98db3a.7ab21c",
        "g": "b1c9866420e73130",
        "server": "f120eab2.0a60a8",
        "command": "getset",
        "name": "",
        "topic": "",
        "params": "[]",
        "paramsType": "json",
        "payloadType": "json",
        "block": false,
        "x": 3210,
        "y": 2200,
        "wires": [
            []
        ]
    },
    {
        "id": "aff96d6cd010b51b",
        "type": "function",
        "z": "5f98db3a.7ab21c",
        "g": "b1c9866420e73130",
        "name": "prepare for add bot busy",
        "func": "msg.topic = msg.payload.settings.userid+\"-bots:\"+msg.payload.settings.botname+\":busy\";\n\nmsg.payload = \"false\";\n\nnode.status({fill:\"green\",shape:\"dot\"});\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3010,
        "y": 2260,
        "wires": [
            [
                "a96ba302000af312"
            ]
        ]
    },
    {
        "id": "a96ba302000af312",
        "type": "redis-command",
        "z": "5f98db3a.7ab21c",
        "g": "b1c9866420e73130",
        "server": "f120eab2.0a60a8",
        "command": "getset",
        "name": "",
        "topic": "",
        "params": "[]",
        "paramsType": "json",
        "payloadType": "json",
        "block": false,
        "x": 3230,
        "y": 2260,
        "wires": [
            []
        ]
    },
    {
        "id": "5944b81ec7e464fc",
        "type": "json",
        "z": "5f98db3a.7ab21c",
        "g": "b1c9866420e73130",
        "name": "",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 3150,
        "y": 1960,
        "wires": [
            [
                "afd3deeae4d81bc8",
                "f1795e2079ad790a",
                "a2fba486886cf22e",
                "43efea3d8f426bec",
                "aff96d6cd010b51b",
                "bb31b6f014975fd6",
                "26f6329ebf714e14"
            ]
        ]
    },
    {
        "id": "7cb62ba82bd10479",
        "type": "http in",
        "z": "5f98db3a.7ab21c",
        "g": "b1c9866420e73130",
        "name": "",
        "url": "/bot_reset",
        "method": "post",
        "upload": false,
        "swaggerDoc": "",
        "x": 2760,
        "y": 1960,
        "wires": [
            [
                "a968529fa548aff7",
                "12956f0cc39cecca"
            ]
        ]
    },
    {
        "id": "a968529fa548aff7",
        "type": "http response",
        "z": "5f98db3a.7ab21c",
        "g": "b1c9866420e73130",
        "name": "",
        "statusCode": "200",
        "headers": {},
        "x": 2780,
        "y": 2020,
        "wires": []
    },
    {
        "id": "f3d9f7caf8eb7213",
        "type": "inject",
        "z": "5f98db3a.7ab21c",
        "g": "b1c9866420e73130",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "LINKUPUSDT-1627480656",
        "payloadType": "str",
        "x": 2810,
        "y": 1900,
        "wires": [
            [
                "12956f0cc39cecca"
            ]
        ]
    },
    {
        "id": "673c67310929e64a",
        "type": "debug",
        "z": "5f98db3a.7ab21c",
        "g": "b1c9866420e73130",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 3150,
        "y": 1900,
        "wires": []
    },
    {
        "id": "bb31b6f014975fd6",
        "type": "function",
        "z": "5f98db3a.7ab21c",
        "g": "b1c9866420e73130",
        "name": "tilog",
        "func": "let botname = msg.payload.settings.botname;\nlet data = \"Сброс к стартовым настройкам\";\nconst tilog = global.get('tilog')(botname,data);\n\ntilog.then(tilog => {\n\n\n        node.status({fill:\"green\",shape:\"dot\"});\n    node.send(msg);\n     \n    \n\n}).catch(error => {\n    \n    msg.error = error;\n    node.status({fill:\"red\",shape: \"ring\"});\n    \n    node.error(error);\n});",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 2950,
        "y": 2380,
        "wires": [
            [
                "f2d22858e4a7c429"
            ]
        ]
    },
    {
        "id": "f2d22858e4a7c429",
        "type": "function",
        "z": "5f98db3a.7ab21c",
        "g": "b1c9866420e73130",
        "name": "syslog",
        "func": "let botname = \"syslog.txt\";\nlet data = \"Сброс к стартовым настройкам \"+msg.payload.settings.botname;\nconst tilog = global.get('tilog')(botname,data);\n\ntilog.then(tilog => {\n\n\n        node.status({fill:\"green\",shape:\"dot\"});\n    node.send(msg);\n     \n    \n\n}).catch(error => {\n    \n    msg.error = error;\n    node.status({fill:\"red\",shape: \"ring\"});\n    \n    node.error(error);\n});",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 3090,
        "y": 2380,
        "wires": [
            []
        ]
    },
    {
        "id": "21cd38c62816a61a",
        "type": "http in",
        "z": "5f98db3a.7ab21c",
        "g": "1ce3921709fe3854",
        "name": "",
        "url": "/bot_delete",
        "method": "post",
        "upload": false,
        "swaggerDoc": "",
        "x": 2660,
        "y": 80,
        "wires": [
            [
                "bc33c7343d313967",
                "527f5893eeafc366"
            ]
        ]
    },
    {
        "id": "706ef63f71911a28",
        "type": "redis-command",
        "z": "5f98db3a.7ab21c",
        "g": "1ce3921709fe3854",
        "server": "f120eab2.0a60a8",
        "command": "hmset",
        "name": "",
        "topic": "",
        "params": "[]",
        "paramsType": "json",
        "payloadType": "json",
        "block": false,
        "x": 3150,
        "y": 80,
        "wires": [
            []
        ]
    },
    {
        "id": "c3c8988a2d41da9d",
        "type": "function",
        "z": "5f98db3a.7ab21c",
        "g": "1ce3921709fe3854",
        "name": "prepare data for create bot",
        "func": "msg.topic = msg.payload.user_id_from_google+\"-bots:\"+msg.payload.botname+\":data\";\nlet botdata = {\"finance\":msg.payload.finance,\"floors\":msg.payload.floors,\"sales\":msg.payload.sales};\nmsg.payload = botdata;\nnode.status({fill:\"green\",shape:\"dot\"});\nreturn msg;\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 2920,
        "y": 80,
        "wires": [
            [
                "706ef63f71911a28"
            ]
        ]
    },
    {
        "id": "dafb284cdbee5b85",
        "type": "function",
        "z": "5f98db3a.7ab21c",
        "g": "1ce3921709fe3854",
        "name": "prepare for get botlist",
        "func": "msg.botlistname = msg.payload.user_id_from_google+\"-botlist\";\nmsg.botname = msg.payload.botname;\nmsg.payload = msg.payload.user_id_from_google;\nnode.status({fill:\"green\",shape:\"dot\"});\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 2900,
        "y": 140,
        "wires": [
            [
                "069368e0e41b2930"
            ]
        ]
    },
    {
        "id": "069368e0e41b2930",
        "type": "function",
        "z": "5f98db3a.7ab21c",
        "g": "1ce3921709fe3854",
        "name": "getbotlist",
        "func": "\nlet guid = msg.payload;\n\nconst gbl = global.get('getbotlist')(guid);\n\ngbl.then(gbl => {\n    \n    msg.payload = JSON.parse(gbl);\n    node.status({fill:\"green\",shape:\"dot\"});\n    node.send(msg);\n\n}).catch(error => {\n    node.status({fill:\"red\",shape:\"dot\"});\n    node.error(error);\n});",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 3100,
        "y": 140,
        "wires": [
            [
                "7d60ad5d2b1469ca"
            ]
        ]
    },
    {
        "id": "7d60ad5d2b1469ca",
        "type": "function",
        "z": "5f98db3a.7ab21c",
        "g": "1ce3921709fe3854",
        "name": "prepare for add botlist",
        "func": "msg.topic = msg.botlistname;\n\nlet newbotlist = [];\nif (msg.payload == null) {\n    newbotlist = [msg.botname];\n} else {\n    let oldbotlist = msg.payload;\n    newbotlist = [...oldbotlist,msg.botname];\n    }\n\nmsg.payload = JSON.stringify(newbotlist);\nnode.status({fill:\"green\",shape:\"dot\"});\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 3300,
        "y": 140,
        "wires": [
            [
                "7702b10795ca03ab"
            ]
        ]
    },
    {
        "id": "7702b10795ca03ab",
        "type": "redis-command",
        "z": "5f98db3a.7ab21c",
        "g": "1ce3921709fe3854",
        "server": "f120eab2.0a60a8",
        "command": "getset",
        "name": "",
        "topic": "",
        "params": "[]",
        "paramsType": "json",
        "payloadType": "json",
        "block": false,
        "x": 3510,
        "y": 140,
        "wires": [
            []
        ]
    },
    {
        "id": "bc33c7343d313967",
        "type": "http response",
        "z": "5f98db3a.7ab21c",
        "g": "1ce3921709fe3854",
        "name": "",
        "statusCode": "200",
        "headers": {},
        "x": 2680,
        "y": 140,
        "wires": []
    },
    {
        "id": "6ad6229364d77d98",
        "type": "function",
        "z": "5f98db3a.7ab21c",
        "g": "1ce3921709fe3854",
        "name": "prepare for add bot status",
        "func": "msg.topic = msg.payload.user_id_from_google+\"-bots:\"+msg.payload.botname+\":status\";\nmsg.payload.status.updated = new Date().getTime();\nmsg.payload = msg.payload.status;\n\nnode.status({fill:\"green\",shape:\"dot\"});\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 2910,
        "y": 200,
        "wires": [
            [
                "e4417424e3402b18"
            ]
        ]
    },
    {
        "id": "e4417424e3402b18",
        "type": "redis-command",
        "z": "5f98db3a.7ab21c",
        "g": "1ce3921709fe3854",
        "server": "f120eab2.0a60a8",
        "command": "getset",
        "name": "",
        "topic": "",
        "params": "[]",
        "paramsType": "json",
        "payloadType": "json",
        "block": false,
        "x": 3130,
        "y": 200,
        "wires": [
            []
        ]
    },
    {
        "id": "9b1329708a558923",
        "type": "function",
        "z": "5f98db3a.7ab21c",
        "g": "1ce3921709fe3854",
        "name": "prepare for add bot settings",
        "func": "msg.topic = msg.payload.user_id_from_google+\"-bots:\"+msg.payload.botname+\":settings\";\n\nmsg.payload = msg.payload.settings;\n\nnode.status({fill:\"green\",shape:\"dot\"});\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 2920,
        "y": 260,
        "wires": [
            [
                "fcdb9a4daa60f79c"
            ]
        ]
    },
    {
        "id": "fcdb9a4daa60f79c",
        "type": "redis-command",
        "z": "5f98db3a.7ab21c",
        "g": "1ce3921709fe3854",
        "server": "f120eab2.0a60a8",
        "command": "getset",
        "name": "",
        "topic": "",
        "params": "[]",
        "paramsType": "json",
        "payloadType": "json",
        "block": false,
        "x": 3150,
        "y": 260,
        "wires": [
            []
        ]
    },
    {
        "id": "7bf553b6ac41dbff",
        "type": "function",
        "z": "5f98db3a.7ab21c",
        "g": "1ce3921709fe3854",
        "name": "prepare for add bot ttp",
        "func": "msg.topic = msg.payload.user_id_from_google+\"-bots:\"+msg.payload.botname+\":ttp\";\n\nmsg.payload = msg.payload.ttp;\n\nnode.status({fill:\"green\",shape:\"dot\"});\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 2900,
        "y": 320,
        "wires": [
            [
                "15d00d9b61e5f412"
            ]
        ]
    },
    {
        "id": "15d00d9b61e5f412",
        "type": "redis-command",
        "z": "5f98db3a.7ab21c",
        "g": "1ce3921709fe3854",
        "server": "f120eab2.0a60a8",
        "command": "getset",
        "name": "",
        "topic": "",
        "params": "[]",
        "paramsType": "json",
        "payloadType": "json",
        "block": false,
        "x": 3110,
        "y": 320,
        "wires": [
            []
        ]
    },
    {
        "id": "6f9323097fd2040a",
        "type": "function",
        "z": "5f98db3a.7ab21c",
        "g": "1ce3921709fe3854",
        "name": "prepare for add bot onoff",
        "func": "msg.topic = msg.payload.user_id_from_google+\"-bots:\"+msg.payload.botname+\":onoff\";\n\nmsg.payload = JSON.stringify(msg.payload.onoff);\n\nnode.status({fill:\"green\",shape:\"dot\"});\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 2910,
        "y": 380,
        "wires": [
            [
                "98598b6ee6e8c253"
            ]
        ]
    },
    {
        "id": "98598b6ee6e8c253",
        "type": "redis-command",
        "z": "5f98db3a.7ab21c",
        "g": "1ce3921709fe3854",
        "server": "f120eab2.0a60a8",
        "command": "getset",
        "name": "",
        "topic": "",
        "params": "[]",
        "paramsType": "json",
        "payloadType": "json",
        "block": false,
        "x": 3110,
        "y": 380,
        "wires": [
            []
        ]
    },
    {
        "id": "a70d36fb58746ff1",
        "type": "function",
        "z": "5f98db3a.7ab21c",
        "g": "1ce3921709fe3854",
        "name": "prepare for add bot busy",
        "func": "msg.topic = msg.payload.user_id_from_google+\"-bots:\"+msg.payload.botname+\":busy\";\n\nmsg.payload = JSON.stringify(msg.payload.busy);\n\nnode.status({fill:\"green\",shape:\"dot\"});\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 2910,
        "y": 440,
        "wires": [
            [
                "2f7973fbc8c3e5fd"
            ]
        ]
    },
    {
        "id": "2f7973fbc8c3e5fd",
        "type": "redis-command",
        "z": "5f98db3a.7ab21c",
        "g": "1ce3921709fe3854",
        "server": "f120eab2.0a60a8",
        "command": "getset",
        "name": "",
        "topic": "",
        "params": "[]",
        "paramsType": "json",
        "payloadType": "json",
        "block": false,
        "x": 3130,
        "y": 440,
        "wires": [
            []
        ]
    },
    {
        "id": "787ee7eacaa0bf2f",
        "type": "function",
        "z": "5f98db3a.7ab21c",
        "g": "1ce3921709fe3854",
        "name": "prepare for start_set",
        "func": "msg.topic = msg.payload.user_id_from_google+\"-bots:\"+msg.payload.botname+\":start_set\";\n\nmsg.payload = msg.payload.start_set;\n\nnode.status({fill:\"green\",shape:\"dot\"});\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 2900,
        "y": 500,
        "wires": [
            [
                "895a95157b57f221"
            ]
        ]
    },
    {
        "id": "895a95157b57f221",
        "type": "redis-command",
        "z": "5f98db3a.7ab21c",
        "g": "1ce3921709fe3854",
        "server": "f120eab2.0a60a8",
        "command": "getset",
        "name": "",
        "topic": "",
        "params": "[]",
        "paramsType": "json",
        "payloadType": "json",
        "block": false,
        "x": 3130,
        "y": 500,
        "wires": [
            []
        ]
    },
    {
        "id": "527f5893eeafc366",
        "type": "debug",
        "z": "5f98db3a.7ab21c",
        "g": "1ce3921709fe3854",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 2650,
        "y": 220,
        "wires": []
    },
    {
        "id": "01ec9d5a0db3072d",
        "type": "http in",
        "z": "5f98db3a.7ab21c",
        "g": "7f9b2dd857a6dfb2",
        "name": "",
        "url": "/bot_full",
        "method": "post",
        "upload": false,
        "swaggerDoc": "",
        "x": 2570,
        "y": 1340,
        "wires": [
            [
                "617b3f35705cc9e4"
            ]
        ]
    },
    {
        "id": "617b3f35705cc9e4",
        "type": "function",
        "z": "5f98db3a.7ab21c",
        "g": "7f9b2dd857a6dfb2",
        "name": "getbot_status",
        "func": "\n\nlet bot = {};\nmsg.bot = bot;\nlet botname = msg.payload.botname;\n\nconst gb = global.get('getbot_status')(botname);\n\ngb.then(gb => {\n    \n    msg.bot.status = JSON.parse(gb);\n    node.send(msg);\n\n}).catch(error => {\n    node.error(error);\n});",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2980,
        "y": 1340,
        "wires": [
            [
                "792187aede59b6ac"
            ]
        ]
    },
    {
        "id": "a79a0e925695b95b",
        "type": "http response",
        "z": "5f98db3a.7ab21c",
        "g": "7f9b2dd857a6dfb2",
        "name": "",
        "statusCode": "200",
        "headers": {},
        "x": 3720,
        "y": 1340,
        "wires": []
    },
    {
        "id": "47e93aedcfbe3a73",
        "type": "function",
        "z": "5f98db3a.7ab21c",
        "g": "7f9b2dd857a6dfb2",
        "name": "prepare data",
        "func": "msg.payload = msg.bot;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3550,
        "y": 1340,
        "wires": [
            [
                "a79a0e925695b95b",
                "61097010aa5aa657"
            ]
        ]
    },
    {
        "id": "792187aede59b6ac",
        "type": "function",
        "z": "5f98db3a.7ab21c",
        "g": "7f9b2dd857a6dfb2",
        "name": "getbot_data",
        "func": "\nlet botname = msg.payload.botname;\n\nconst gb = global.get('getbot_data')(botname);\n\ngb.then(gb => {\n    //node.warn(gb);\n    let bot = {...msg.bot,\n        \"floors\":JSON.parse(gb.floors),\n        \"finance\":JSON.parse(gb.finance),\n        \"sales\":JSON.parse(gb.sales)\n    };\n    msg.bot = bot;\n    node.send(msg);\n\n}).catch(error => {\n    node.error(error);\n});",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3170,
        "y": 1340,
        "wires": [
            [
                "47e93aedcfbe3a73"
            ]
        ]
    },
    {
        "id": "25e6c65f2f6568ee",
        "type": "http in",
        "z": "5f98db3a.7ab21c",
        "g": "8a452b1de9e087aa",
        "name": "",
        "url": "/botcreate",
        "method": "post",
        "upload": false,
        "swaggerDoc": "",
        "x": 2660,
        "y": 620,
        "wires": [
            [
                "d252aac0e03336f6",
                "cac2d5e9466e8f59",
                "68c731b8655af003",
                "3c54d00c2b5d1331",
                "f934e581f21edc8d",
                "ce20d0a5a42d71b8",
                "1e7fa667be4955e4",
                "68f426595975577a",
                "f4dd7d500c4c6287"
            ]
        ]
    },
    {
        "id": "8e32192ecced4af9",
        "type": "redis-command",
        "z": "5f98db3a.7ab21c",
        "g": "8a452b1de9e087aa",
        "server": "f120eab2.0a60a8",
        "command": "hmset",
        "name": "",
        "topic": "",
        "params": "[]",
        "paramsType": "json",
        "payloadType": "json",
        "block": false,
        "x": 3150,
        "y": 620,
        "wires": [
            []
        ]
    },
    {
        "id": "d252aac0e03336f6",
        "type": "function",
        "z": "5f98db3a.7ab21c",
        "g": "8a452b1de9e087aa",
        "name": "prepare data for create bot",
        "func": "msg.topic = msg.payload.user_id_from_google+\"-bots:\"+msg.payload.botname+\":data\";\nlet botdata = {\"finance\":msg.payload.finance,\"floors\":msg.payload.floors,\"sales\":msg.payload.sales};\nmsg.payload = botdata;\nnode.status({fill:\"green\",shape:\"dot\"});\nreturn msg;\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 2920,
        "y": 620,
        "wires": [
            [
                "8e32192ecced4af9"
            ]
        ]
    },
    {
        "id": "cac2d5e9466e8f59",
        "type": "function",
        "z": "5f98db3a.7ab21c",
        "g": "8a452b1de9e087aa",
        "name": "prepare for get botlist",
        "func": "msg.botlistname = msg.payload.user_id_from_google+\"-botlist\";\nmsg.botname = msg.payload.botname;\nmsg.payload = msg.payload.user_id_from_google;\nnode.status({fill:\"green\",shape:\"dot\"});\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 2900,
        "y": 680,
        "wires": [
            [
                "46931deb362dccab"
            ]
        ]
    },
    {
        "id": "46931deb362dccab",
        "type": "function",
        "z": "5f98db3a.7ab21c",
        "g": "8a452b1de9e087aa",
        "name": "getbotlist",
        "func": "\nlet guid = msg.payload;\n\nconst gbl = global.get('getbotlist')(guid);\n\ngbl.then(gbl => {\n    \n    msg.payload = JSON.parse(gbl);\n    node.status({fill:\"green\",shape:\"dot\"});\n    node.send(msg);\n\n}).catch(error => {\n    node.status({fill:\"red\",shape:\"dot\"});\n    node.error(error);\n});",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 3100,
        "y": 680,
        "wires": [
            [
                "eb94008bbe99e1a5"
            ]
        ]
    },
    {
        "id": "eb94008bbe99e1a5",
        "type": "function",
        "z": "5f98db3a.7ab21c",
        "g": "8a452b1de9e087aa",
        "name": "prepare for add botlist",
        "func": "msg.topic = msg.botlistname;\n\nlet newbotlist = [];\nif (msg.payload == null) {\n    newbotlist = [msg.botname];\n} else {\n    let oldbotlist = msg.payload;\n    newbotlist = [...oldbotlist,msg.botname];\n    }\n\nmsg.payload = JSON.stringify(newbotlist);\nnode.status({fill:\"green\",shape:\"dot\"});\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 3300,
        "y": 680,
        "wires": [
            [
                "fc532f8a3c02ad09"
            ]
        ]
    },
    {
        "id": "fc532f8a3c02ad09",
        "type": "redis-command",
        "z": "5f98db3a.7ab21c",
        "g": "8a452b1de9e087aa",
        "server": "f120eab2.0a60a8",
        "command": "getset",
        "name": "",
        "topic": "",
        "params": "[]",
        "paramsType": "json",
        "payloadType": "json",
        "block": false,
        "x": 3510,
        "y": 680,
        "wires": [
            []
        ]
    },
    {
        "id": "68c731b8655af003",
        "type": "http response",
        "z": "5f98db3a.7ab21c",
        "g": "8a452b1de9e087aa",
        "name": "",
        "statusCode": "200",
        "headers": {},
        "x": 2680,
        "y": 680,
        "wires": []
    },
    {
        "id": "3c54d00c2b5d1331",
        "type": "function",
        "z": "5f98db3a.7ab21c",
        "g": "8a452b1de9e087aa",
        "name": "prepare for add bot status",
        "func": "msg.topic = msg.payload.user_id_from_google+\"-bots:\"+msg.payload.botname+\":status\";\nmsg.payload.status.updated = new Date().getTime();\nmsg.payload = msg.payload.status;\n\nnode.status({fill:\"green\",shape:\"dot\"});\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 2910,
        "y": 740,
        "wires": [
            [
                "9ed4d5038250d1db"
            ]
        ]
    },
    {
        "id": "9ed4d5038250d1db",
        "type": "redis-command",
        "z": "5f98db3a.7ab21c",
        "g": "8a452b1de9e087aa",
        "server": "f120eab2.0a60a8",
        "command": "getset",
        "name": "",
        "topic": "",
        "params": "[]",
        "paramsType": "json",
        "payloadType": "json",
        "block": false,
        "x": 3130,
        "y": 740,
        "wires": [
            []
        ]
    },
    {
        "id": "f934e581f21edc8d",
        "type": "function",
        "z": "5f98db3a.7ab21c",
        "g": "8a452b1de9e087aa",
        "name": "prepare for add bot settings",
        "func": "msg.topic = msg.payload.user_id_from_google+\"-bots:\"+msg.payload.botname+\":settings\";\n\nmsg.payload = msg.payload.settings;\n\nnode.status({fill:\"green\",shape:\"dot\"});\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 2920,
        "y": 800,
        "wires": [
            [
                "2a35df248651359d"
            ]
        ]
    },
    {
        "id": "2a35df248651359d",
        "type": "redis-command",
        "z": "5f98db3a.7ab21c",
        "g": "8a452b1de9e087aa",
        "server": "f120eab2.0a60a8",
        "command": "getset",
        "name": "",
        "topic": "",
        "params": "[]",
        "paramsType": "json",
        "payloadType": "json",
        "block": false,
        "x": 3150,
        "y": 800,
        "wires": [
            []
        ]
    },
    {
        "id": "ce20d0a5a42d71b8",
        "type": "function",
        "z": "5f98db3a.7ab21c",
        "g": "8a452b1de9e087aa",
        "name": "prepare for add bot ttp",
        "func": "msg.topic = msg.payload.user_id_from_google+\"-bots:\"+msg.payload.botname+\":ttp\";\n\nmsg.payload = msg.payload.ttp;\n\nnode.status({fill:\"green\",shape:\"dot\"});\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2900,
        "y": 860,
        "wires": [
            [
                "16f60c9e05c72bee"
            ]
        ]
    },
    {
        "id": "16f60c9e05c72bee",
        "type": "redis-command",
        "z": "5f98db3a.7ab21c",
        "g": "8a452b1de9e087aa",
        "server": "f120eab2.0a60a8",
        "command": "getset",
        "name": "",
        "topic": "",
        "params": "[]",
        "paramsType": "json",
        "payloadType": "json",
        "block": false,
        "x": 3110,
        "y": 860,
        "wires": [
            []
        ]
    },
    {
        "id": "1e7fa667be4955e4",
        "type": "function",
        "z": "5f98db3a.7ab21c",
        "g": "8a452b1de9e087aa",
        "name": "prepare for add bot onoff",
        "func": "msg.topic = msg.payload.user_id_from_google+\"-bots:\"+msg.payload.botname+\":onoff\";\n\nmsg.payload = JSON.stringify(msg.payload.onoff);\n\nnode.status({fill:\"green\",shape:\"dot\"});\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 2910,
        "y": 920,
        "wires": [
            [
                "c9f367c4c3c3a340"
            ]
        ]
    },
    {
        "id": "c9f367c4c3c3a340",
        "type": "redis-command",
        "z": "5f98db3a.7ab21c",
        "g": "8a452b1de9e087aa",
        "server": "f120eab2.0a60a8",
        "command": "getset",
        "name": "",
        "topic": "",
        "params": "[]",
        "paramsType": "json",
        "payloadType": "json",
        "block": false,
        "x": 3110,
        "y": 920,
        "wires": [
            []
        ]
    },
    {
        "id": "68f426595975577a",
        "type": "function",
        "z": "5f98db3a.7ab21c",
        "g": "8a452b1de9e087aa",
        "name": "prepare for add bot busy",
        "func": "msg.topic = msg.payload.user_id_from_google+\"-bots:\"+msg.payload.botname+\":busy\";\n\nmsg.payload = JSON.stringify(msg.payload.busy);\n\nnode.status({fill:\"green\",shape:\"dot\"});\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2910,
        "y": 980,
        "wires": [
            [
                "880c05f45c81c65f"
            ]
        ]
    },
    {
        "id": "880c05f45c81c65f",
        "type": "redis-command",
        "z": "5f98db3a.7ab21c",
        "g": "8a452b1de9e087aa",
        "server": "f120eab2.0a60a8",
        "command": "getset",
        "name": "",
        "topic": "",
        "params": "[]",
        "paramsType": "json",
        "payloadType": "json",
        "block": false,
        "x": 3130,
        "y": 980,
        "wires": [
            []
        ]
    },
    {
        "id": "f4dd7d500c4c6287",
        "type": "function",
        "z": "5f98db3a.7ab21c",
        "g": "8a452b1de9e087aa",
        "name": "prepare for start_set",
        "func": "msg.topic = msg.payload.user_id_from_google+\"-bots:\"+msg.payload.botname+\":start_set\";\n\nmsg.payload = msg.payload.start_set;\n\nnode.status({fill:\"green\",shape:\"dot\"});\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 2900,
        "y": 1040,
        "wires": [
            [
                "e5b3f65c64087091"
            ]
        ]
    },
    {
        "id": "e5b3f65c64087091",
        "type": "redis-command",
        "z": "5f98db3a.7ab21c",
        "g": "8a452b1de9e087aa",
        "server": "f120eab2.0a60a8",
        "command": "getset",
        "name": "",
        "topic": "",
        "params": "[]",
        "paramsType": "json",
        "payloadType": "json",
        "block": false,
        "x": 3130,
        "y": 1040,
        "wires": [
            []
        ]
    },
    {
        "id": "6eeb48f31cdc5453",
        "type": "inject",
        "z": "5df15275.2888ec",
        "g": "f8a5c66461864831",
        "name": " stop",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "reset",
                "v": "true",
                "vt": "bool"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 570,
        "y": 100,
        "wires": [
            [
                "cc6dddd66c6674e8"
            ]
        ]
    },
    {
        "id": "cc6dddd66c6674e8",
        "type": "redis-out",
        "z": "5df15275.2888ec",
        "g": "f8a5c66461864831",
        "server": "f120eab2.0a60a8",
        "command": "publish",
        "name": "",
        "topic": "stop",
        "obj": false,
        "x": 570,
        "y": 140,
        "wires": []
    },
    {
        "id": "3b0849514abc86d6",
        "type": "inject",
        "z": "5df15275.2888ec",
        "g": "f8a5c66461864831",
        "name": "start",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": "10",
        "topic": "",
        "payloadType": "date",
        "x": 150,
        "y": 100,
        "wires": [
            [
                "eebc64656127b52b"
            ]
        ]
    },
    {
        "id": "eebc64656127b52b",
        "type": "redis-out",
        "z": "5df15275.2888ec",
        "g": "f8a5c66461864831",
        "server": "f120eab2.0a60a8",
        "command": "publish",
        "name": "",
        "topic": "start",
        "obj": false,
        "x": 150,
        "y": 140,
        "wires": []
    },
    {
        "id": "b289a42dbd554719",
        "type": "inject",
        "z": "5df15275.2888ec",
        "g": "f8a5c66461864831",
        "name": "start1",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 330,
        "y": 100,
        "wires": [
            [
                "3e4dcaaa699a170c"
            ]
        ]
    },
    {
        "id": "3e4dcaaa699a170c",
        "type": "redis-out",
        "z": "5df15275.2888ec",
        "g": "f8a5c66461864831",
        "server": "f120eab2.0a60a8",
        "command": "publish",
        "name": "",
        "topic": "start1",
        "obj": false,
        "x": 330,
        "y": 140,
        "wires": []
    },
    {
        "id": "f0645618c2050fce",
        "type": "inject",
        "z": "5f98db3a.7ab21c",
        "g": "a6e4d859c0057b6f",
        "name": " stop",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "reset",
                "v": "true",
                "vt": "bool"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 3010,
        "y": 1740,
        "wires": [
            [
                "565eaf27c4c6892e"
            ]
        ]
    },
    {
        "id": "565eaf27c4c6892e",
        "type": "redis-out",
        "z": "5f98db3a.7ab21c",
        "g": "a6e4d859c0057b6f",
        "server": "f120eab2.0a60a8",
        "command": "publish",
        "name": "",
        "topic": "stop",
        "obj": false,
        "x": 3010,
        "y": 1780,
        "wires": []
    },
    {
        "id": "e430451f890fe527",
        "type": "inject",
        "z": "5f98db3a.7ab21c",
        "g": "a6e4d859c0057b6f",
        "name": "start",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 2590,
        "y": 1740,
        "wires": [
            [
                "a4c3cc7bc8fa2565"
            ]
        ]
    },
    {
        "id": "a4c3cc7bc8fa2565",
        "type": "redis-out",
        "z": "5f98db3a.7ab21c",
        "g": "a6e4d859c0057b6f",
        "server": "f120eab2.0a60a8",
        "command": "publish",
        "name": "",
        "topic": "start",
        "obj": false,
        "x": 2590,
        "y": 1780,
        "wires": []
    },
    {
        "id": "519959ee89f04190",
        "type": "inject",
        "z": "5f98db3a.7ab21c",
        "g": "a6e4d859c0057b6f",
        "name": "start1",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 2770,
        "y": 1740,
        "wires": [
            [
                "d952c932bb5874af"
            ]
        ]
    },
    {
        "id": "d952c932bb5874af",
        "type": "redis-out",
        "z": "5f98db3a.7ab21c",
        "g": "a6e4d859c0057b6f",
        "server": "f120eab2.0a60a8",
        "command": "publish",
        "name": "",
        "topic": "start1",
        "obj": false,
        "x": 2770,
        "y": 1780,
        "wires": []
    },
    {
        "id": "c4cf96930d013efb",
        "type": "redis-instance",
        "z": "5f98db3a.7ab21c",
        "g": "a6e4d859c0057b6f",
        "server": "f120eab2.0a60a8",
        "name": "",
        "topic": "redis",
        "location": "flow",
        "x": 3210,
        "y": 1760,
        "wires": []
    },
    {
        "id": "2a35dba40cf875c4",
        "type": "inject",
        "z": "2a761808.610238",
        "g": "586e39dc007e0cae",
        "name": " stop",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "reset",
                "v": "true",
                "vt": "bool"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 2190,
        "y": 1020,
        "wires": [
            [
                "6900be342c7e23c4"
            ]
        ]
    },
    {
        "id": "6900be342c7e23c4",
        "type": "redis-out",
        "z": "2a761808.610238",
        "g": "586e39dc007e0cae",
        "server": "f120eab2.0a60a8",
        "command": "publish",
        "name": "",
        "topic": "stop",
        "obj": false,
        "x": 2190,
        "y": 1060,
        "wires": []
    },
    {
        "id": "b9d560ba6b28bfe4",
        "type": "inject",
        "z": "2a761808.610238",
        "g": "586e39dc007e0cae",
        "name": "start",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 1770,
        "y": 1020,
        "wires": [
            [
                "c759fe83d1d68801"
            ]
        ]
    },
    {
        "id": "c759fe83d1d68801",
        "type": "redis-out",
        "z": "2a761808.610238",
        "g": "586e39dc007e0cae",
        "server": "f120eab2.0a60a8",
        "command": "publish",
        "name": "",
        "topic": "start",
        "obj": false,
        "x": 1770,
        "y": 1060,
        "wires": []
    },
    {
        "id": "1451734fb0602bf7",
        "type": "inject",
        "z": "2a761808.610238",
        "g": "586e39dc007e0cae",
        "name": "start1",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 1950,
        "y": 1020,
        "wires": [
            [
                "c447c89d479e742a"
            ]
        ]
    },
    {
        "id": "c447c89d479e742a",
        "type": "redis-out",
        "z": "2a761808.610238",
        "g": "586e39dc007e0cae",
        "server": "f120eab2.0a60a8",
        "command": "publish",
        "name": "",
        "topic": "start1",
        "obj": false,
        "x": 1950,
        "y": 1060,
        "wires": []
    },
    {
        "id": "dd73e1c4557a5e65",
        "type": "redis-instance",
        "z": "2a761808.610238",
        "g": "586e39dc007e0cae",
        "server": "f120eab2.0a60a8",
        "name": "",
        "topic": "redis",
        "location": "flow",
        "x": 2390,
        "y": 1040,
        "wires": []
    },
    {
        "id": "f067e60f6e5840e0",
        "type": "inject",
        "z": "ef9c825cf92ee31b",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 390,
        "y": 160,
        "wires": [
            [
                "fba2b72a2f8cba6a"
            ]
        ]
    },
    {
        "id": "fba2b72a2f8cba6a",
        "type": "debug",
        "z": "ef9c825cf92ee31b",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 680,
        "y": 180,
        "wires": []
    },
    {
        "id": "e13296672e19d0a8",
        "type": "function",
        "z": "5df15275.2888ec",
        "g": "d4a5f2307ef8b222",
        "name": "определяем этаж",
        "func": "\nlet lp = Number(msg.bot.status.currentprice);\nlet f = msg.bot.floors;\n\nvar curfloor = f.filter(function (floor) {\n    return ((floor[1] <= lp) && (floor[2] > lp));\n});\n\nif (curfloor[0]) {\n\n\n    node.status({ fill: \"green\", shape: \"dot\" });\n\n\n    msg.bot.currentfloor = curfloor[0];\n    msg.bot.status.lastfloor = msg.bot.status.currentfloor;\n    msg.bot.status.currentfloor = curfloor[0][0];\n\n    msg.bot.downfloor = f[msg.bot.status.currentfloor - 2];\n    return [msg, null];\n}\nelse {\n\n    node.status({ fill: \"blue\", shape: \"dot\" });\n    // node.warn(\"вне сетки\"); \n    return [null, msg];\n}\n\n",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1210,
        "y": 1420,
        "wires": [
            [
                "0ff0634f1d848d61",
                "2869480f6ddecc85"
            ],
            [
                "2869480f6ddecc85"
            ]
        ]
    },
    {
        "id": "0197100c154f4aa9",
        "type": "comment",
        "z": "5df15275.2888ec",
        "g": "d4a5f2307ef8b222",
        "name": "вне сетки",
        "info": "",
        "x": 1360,
        "y": 1460,
        "wires": []
    },
    {
        "id": "26f6329ebf714e14",
        "type": "function",
        "z": "5f98db3a.7ab21c",
        "g": "b1c9866420e73130",
        "name": "prepare for add bot busy",
        "func": "msg.topic = msg.payload.settings.userid+\"-bots:\"+msg.payload.settings.botname+\":ttpbusy\";\n\nmsg.payload = \"false\";\n\nnode.status({fill:\"green\",shape:\"dot\"});\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3010,
        "y": 2320,
        "wires": [
            [
                "9f0a5643b5b416e8"
            ]
        ]
    },
    {
        "id": "9f0a5643b5b416e8",
        "type": "redis-command",
        "z": "5f98db3a.7ab21c",
        "g": "b1c9866420e73130",
        "server": "f120eab2.0a60a8",
        "command": "getset",
        "name": "",
        "topic": "",
        "params": "[]",
        "paramsType": "json",
        "payloadType": "json",
        "block": false,
        "x": 3230,
        "y": 2320,
        "wires": [
            []
        ]
    },
    {
        "id": "5392250c692db544",
        "type": "function",
        "z": "ef9c825cf92ee31b",
        "name": "get candlestick",
        "func": "\n\nfunction parseApiError(error) {\n  if (error.body) {\n    try {\n      var resp = JSON.parse(error.body);\n      return resp.msg;\n    } catch (error) {/* pass thru */ }\n  }\n  return \"Unknown error. Status code: \" + error.statsCode;\n}\n\nlet LBinance = global.get('gBinance');\nlet key = global.get('key');\nlet secret = global.get('secret');\n\nlet binance = new LBinance().options({\n  APIKEY: key,\n  APISECRET: secret,\n  \"reconnect\": false\n});\n\nlet moneta = \"FETUSDT\";\nlet deep = 750;\n\n//node.warn(binance);\n\n\n//msg.payload = \"qjson.status\";\n\n\nbinance.candlesticks(moneta, \"1m\", (error, ticks, symbol) => {\n  // console.info(\"candlesticks()\", ticks);\n  // let last_tick = ticks[ticks.length - 1];\n  // let [time, open, high, low, close, volume, closeTime, assetVolume, trades, buyBaseVolume, buyAssetVolume, ignored] = ticks;\n  //console.info(symbol+\" last close: \"+close);\n  msg.payload = ticks;\n\n  node.send(msg);\n  return;\n\n}, { limit: deep });",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "gBinance",
                "module": "node-binance-api"
            }
        ],
        "x": 1280,
        "y": 140,
        "wires": [
            [
                "ca8622a3aeed3a9d"
            ]
        ],
        "inputLabels": [
            "orderid, moneta"
        ],
        "outputLabels": [
            "status"
        ],
        "icon": "font-awesome/fa-compress"
    },
    {
        "id": "47eff7a8c0f94f7b",
        "type": "inject",
        "z": "ef9c825cf92ee31b",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 1100,
        "y": 140,
        "wires": [
            [
                "5392250c692db544"
            ]
        ]
    },
    {
        "id": "ca8622a3aeed3a9d",
        "type": "debug",
        "z": "ef9c825cf92ee31b",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1450,
        "y": 140,
        "wires": []
    },
    {
        "id": "f53ee5d9f220a88d",
        "type": "inject",
        "z": "ef9c825cf92ee31b",
        "g": "5bb9e782aa7a8a39",
        "name": "test",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 410,
        "y": 520,
        "wires": [
            [
                "1eee4bb3826e5fd5"
            ]
        ]
    },
    {
        "id": "1eee4bb3826e5fd5",
        "type": "function",
        "z": "ef9c825cf92ee31b",
        "g": "5bb9e782aa7a8a39",
        "name": "",
        "func": "msg.payload = [\"355\",\"356.3\",\"358\",\"360\"];\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 600,
        "y": 520,
        "wires": [
            [
                "6f9d8e318bc68156"
            ]
        ]
    },
    {
        "id": "6f9d8e318bc68156",
        "type": "split",
        "z": "ef9c825cf92ee31b",
        "g": "5bb9e782aa7a8a39",
        "name": "",
        "splt": "\\n",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "x": 790,
        "y": 520,
        "wires": [
            [
                "60c3f24953796285"
            ]
        ]
    },
    {
        "id": "60c3f24953796285",
        "type": "delay",
        "z": "ef9c825cf92ee31b",
        "g": "5bb9e782aa7a8a39",
        "name": "",
        "pauseType": "rate",
        "timeout": "2",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "2",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "x": 970,
        "y": 520,
        "wires": [
            [
                "da168ca5fd0a44bc"
            ]
        ]
    },
    {
        "id": "da168ca5fd0a44bc",
        "type": "function",
        "z": "ef9c825cf92ee31b",
        "g": "5bb9e782aa7a8a39",
        "name": "",
        "func": "     msg.topic = \"prices:BNBqUSDT\";\n\n    \nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1160,
        "y": 520,
        "wires": [
            [
                "142a08cea70917c4"
            ]
        ]
    },
    {
        "id": "3dda45cf48cd23cb",
        "type": "debug",
        "z": "ef9c825cf92ee31b",
        "g": "5bb9e782aa7a8a39",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1600,
        "y": 520,
        "wires": []
    },
    {
        "id": "6701a1fe594203d5",
        "type": "inject",
        "z": "ef9c825cf92ee31b",
        "g": "5bb9e782aa7a8a39",
        "name": "test",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 1000,
        "y": 600,
        "wires": [
            [
                "fbebe343712c4db1"
            ]
        ]
    },
    {
        "id": "fbebe343712c4db1",
        "type": "function",
        "z": "ef9c825cf92ee31b",
        "g": "5bb9e782aa7a8a39",
        "name": "",
        "func": "msg.payload = \"355\";\nmsg.topic = \"prices:BNBqUSDT\";\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1190,
        "y": 600,
        "wires": [
            [
                "142a08cea70917c4"
            ]
        ]
    },
    {
        "id": "142a08cea70917c4",
        "type": "redis-command",
        "z": "ef9c825cf92ee31b",
        "g": "5bb9e782aa7a8a39",
        "server": "f120eab2.0a60a8",
        "command": "SET",
        "name": "",
        "topic": "",
        "params": "[]",
        "paramsType": "json",
        "payloadType": "json",
        "block": false,
        "x": 1390,
        "y": 540,
        "wires": [
            [
                "3dda45cf48cd23cb"
            ]
        ]
    },
    {
        "id": "56c6a73caae35c2f",
        "type": "function",
        "z": "5f98db3a.7ab21c",
        "name": "set stop sell order",
        "func": "msg.bot.ttp.quantity = msg.bot.ttp.quantity || 0;\n\nfunction parseApiError(error) {\n  if (error.body) {\n    try {\n      var resp = JSON.parse(error.body);\n      return resp.msg;\n    } catch (error) {/* pass thru */ }\n  }\n  return \"Unknown error. Status code: \" + error.statsCode;\n}\n\nlet LBinance = global.get('gBinance');\nlet key = global.get('key');\nlet secret = global.get('secret');\n\nlet binance = new LBinance().options({\n  APIKEY: key,\n  APISECRET: secret,\n  reconnect: false,\n  useServerTime: true\n});\n\nlet moneta = msg.bot.settings.moneta;\nlet quantity = (Number(msg.bot.ttp.quantity)).toFixed(msg.bot.settings.digitq);\n\nlet priceb = (Number((msg.bot.ttp.raschstopprice - msg.bot.ttp.raschstopprice / 100 * msg.bot.settings.ofsetbottom))).toFixed(msg.bot.settings.digitprice);\nlet stopprice = (Number(msg.bot.ttp.raschstopprice)).toFixed(msg.bot.settings.digitprice);\n\nnode.warn(\"sp:\" + stopprice + \" p:\" + priceb + \" q:\" + quantity);\n\nbinance.useServerTime(function () {\n  binance.sell(moneta, quantity, priceb, { stopPrice: stopprice, type: \"STOP_LOSS_LIMIT\" }, function (err, resp) {\n    if (err) {\n      var errorMsg = parseApiError(err);\n      msg.err = err;\n      node.error(errorMsg, msg);\n      node.status({ fill: \"red\", shape: \"ring\", text: errorMsg });\n      node.send(msg);\n\n\n    }\n    if (resp) {\n      //msg.bot.ttp.curorderid = resp.orderId;\n      resp.curstop = stopprice;\n      //msg.bot.ttp.quantity = quantity;\n      msg.resp = resp;\n      node.status({ fill: \"green\", shape: \"ring\" });\n      node.send(msg);\n    }\n    //node.status({}); //clear status message\n\n\n\n    //return;\n  })\n\n});",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1850,
        "y": 1120,
        "wires": [
            [
                "f5c3922ede7ca10e"
            ]
        ],
        "inputLabels": [
            "orderid, moneta"
        ],
        "outputLabels": [
            "status"
        ],
        "icon": "font-awesome/fa-compress"
    },
    {
        "id": "f5c3922ede7ca10e",
        "type": "function",
        "z": "5f98db3a.7ab21c",
        "name": "обработчик ошибок",
        "func": "if (msg.err) {\n    msg.payload.statusCode = \"not ok\";\n    msg.payload.statusBody = msg.err.body;\n    //node.warn(msg.err.statusCode)\n    \n\n    \n    \n    return [null,msg];\n} else {\n    msg.payload.statusCode = \"ok\";\n    msg.payload.statusBody = msg.resp;\n    //msg.payload.bot = msg.bot;\n    return [msg,null];\n}\n\n\n\n",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2080,
        "y": 1120,
        "wires": [
            [
                "11245d07d29c58d7",
                "904948d9b141e76a"
            ],
            [
                "f873485fa819703f",
                "c51f492683bd478b"
            ]
        ]
    },
    {
        "id": "11245d07d29c58d7",
        "type": "link out",
        "z": "5f98db3a.7ab21c",
        "name": "",
        "links": [
            "5a624a9b.734534",
            "17bad0f2.7af38f"
        ],
        "x": 2295,
        "y": 1100,
        "wires": []
    },
    {
        "id": "f873485fa819703f",
        "type": "link out",
        "z": "5f98db3a.7ab21c",
        "name": "",
        "links": [
            "5a624a9b.734534",
            "17bad0f2.7af38f"
        ],
        "x": 2295,
        "y": 1140,
        "wires": []
    },
    {
        "id": "904948d9b141e76a",
        "type": "debug",
        "z": "5f98db3a.7ab21c",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 2390,
        "y": 1100,
        "wires": []
    },
    {
        "id": "c51f492683bd478b",
        "type": "debug",
        "z": "5f98db3a.7ab21c",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 2390,
        "y": 1140,
        "wires": []
    },
    {
        "id": "cc2bfdcc776b6f80",
        "type": "function",
        "z": "2a761808.610238",
        "name": "orderexec setsell",
        "func": "//<трекер<\nlet trackname = \"ttp-track-\" + msg.botname;\nlet track = flow.get(trackname);\nlet start_node_time = new Date().getTime();\n\nlet steptitle = node.name;\n\nlet laststep = track[track.length - 1];\nlet last_node_end_time = laststep.end_node_time;\n//>трекер>\n\nlet cmd = \"setsell\";\nlet data = {bot: msg.bot };\nconst orderexec = global.get('order_exec')(cmd, data);\n\nlet botname = msg.bot.settings.botname;\n\n//let data2 = \"setsell\" + msg.botname;\n//const tilog = global.get('tilog')(botname, data2);\n//tilog;\n\norderexec.then(orderexec => {\n    msg.orderexec = orderexec;\n    if (orderexec.statusCode === \"ok\") {\n        node.status({ fill: \"green\", shape: \"dot\", text: orderexec.statusBody.orderId });\n        //msg.bot = msg.orderexec.bot;\n        \n        msg.bot.ttp.curorderid = msg.orderexec.statusBody.orderId;\n        msg.bot.ttp.curstop = msg.bot.ttp.raschstopprice\n        //msg.bot.ttp.quantity = msg.orderexec.statusBody.origQty;\n        //>трекер>\n        let end_node_time = new Date().getTime();\n        let duration = end_node_time - start_node_time;\n        let duration_step = end_node_time - last_node_end_time;\n        track.push({\n            \"steptitle\": steptitle,\n            \"start_node_time\": start_node_time,\n            \"end_node_time\": end_node_time,\n            \"duration_node\": duration,\n            \"duration_step\": duration_step\n        });\n        flow.set(trackname, track);\n        //>трекер>\n\n        node.send(msg);\n\n    } else {\n        node.status({ fill: \"red\", shape: \"dot\" });\n        \n        //>трекер>\n        let end_node_time = new Date().getTime();\n        let duration = end_node_time - start_node_time;\n        let duration_step = end_node_time - last_node_end_time;\n        track.push({\n            \"steptitle\": steptitle + \"-faile\",\n            \"start_node_time\": start_node_time,\n            \"end_node_time\": end_node_time,\n            \"duration\": duration,\n            \"duration_step\": duration_step,\n            \"error\": orderexec.statusBody\n        });\n        flow.set(trackname, track);\n        //>трекер>\n\n        node.send(msg);\n    }\n\n\n}).catch(error => {\n\n    msg.error = error;\n    node.status({ fill: \"red\", shape: \"ring\" });\n\n    //node.error(error);\n});\n\n\n\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1230,
        "y": 1100,
        "wires": [
            [
                "3576c3141418f0bf",
                "293e3cd4899c16c5"
            ]
        ]
    },
    {
        "id": "3576c3141418f0bf",
        "type": "switch",
        "z": "2a761808.610238",
        "name": "statusCode",
        "property": "orderexec.statusCode",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "ok",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "not ok",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 1430,
        "y": 1100,
        "wires": [
            [
                "4dfef6b5.251a18"
            ],
            [
                "63d1874007637485"
            ]
        ]
    },
    {
        "id": "63d1874007637485",
        "type": "function",
        "z": "2a761808.610238",
        "name": "tilog",
        "func": "let botname = msg.bot.settings.botname;\nlet data = \"Ошибка при выставлении ордера - \"+msg.orderexec.statusBody;\nconst tilog = global.get('tilog')(botname,data);\n\ntilog.then(tilog => {\n\n\n        node.status({fill:\"green\",shape:\"dot\"});\n    node.send(msg);\n     \n    \n\n}).catch(error => {\n    \n    msg.error = error;\n    node.status({fill:\"red\",shape: \"ring\"});\n    \n    node.error(error);\n});",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1450,
        "y": 1140,
        "wires": [
            [
                "97b3018b32c5e8e3"
            ]
        ]
    },
    {
        "id": "97b3018b32c5e8e3",
        "type": "link out",
        "z": "2a761808.610238",
        "name": "",
        "links": [
            "ccd55cdb.7ed72"
        ],
        "x": 1555,
        "y": 1140,
        "wires": []
    },
    {
        "id": "c957dfc172899ed3",
        "type": "function",
        "z": "2a761808.610238",
        "name": "update bot floors, finance, sales",
        "func": "const sellprice = msg.bot.ttpprice\nlet comsa = Number(msg.payload);\nlet quantityall = msg.bot.ttp.quantity;\n\nnode.warn(\"finish ttp on floor \");\n\nlet tempfin = Number(Number(msg.bot.finance.quotainorders) - Number(msg.bot.ttp.quantity));\n\nlet tempfin2 = Number(Number(msg.bot.finance.basenal) + (Number(msg.bot.ttp.quantity) - Number(msg.bot.ttp.quantity * Number(msg.payload))) * Number(msg.bot.ttpprice));\n\nmsg.bot.finance.quotainorders = tempfin.toFixed(msg.bot.settings.digitprice);\nmsg.bot.finance.basenal = tempfin2.toFixed(msg.bot.settings.digitq);\n\nif (msg.bot.finance.baseinorders == -0) { msg.bot.finance.baseinorders = 0; }\nif (msg.bot.finance.basenal == -0) { msg.bot.finance.basenal = 0; }\n\nlet currentfloor = msg.bot.currentfloor;\n\n//обнуление всех этажей со статусом 3\n\nvar floors = msg.bot.floors;\n\nfloors.forEach(function (item, i, floors) {\n\n    if (item[7] == 3) {\n        //let buyprice = item[10];\n        //let quantity = Number(item[14]);\n        //msg.bot.sales.today.push((sellprice - buyprice) * quantity);\n\n        item[7] = 4;\n        // item[8] = 0;\n        // item[9] = 0;\n        // item[10] = 0;\n        item[11] = msg.bot.ttp.curorderid;\n        // item[12] = 0;\n        item[13] = sellprice;\n        // item[14] = 0;\n    }\n});\n\nmsg.bot.floors = floors;\n\n\nlet volname = msg.bot.settings.userid + \"-bots:\" + msg.botname + \":data\";\nlet botdata = {\n    \"finance\": JSON.stringify(msg.bot.finance),\n    \"floors\": JSON.stringify(msg.bot.floors),\n    \"sales\": JSON.stringify(msg.bot.sales)\n};\n\nconst upd = global.get('setbot_data')(volname, botdata);\n\nupd.then(upd => {\n\n    msg.payload = upd;\n\n    node.status({ fill: \"green\", shape: \"ring\", text: \"0k\" });\n    node.send(msg);\n\n}).catch(error => {\n\n    node.status({ fill: \"red\", shape: \"ring\", text: \"error\" });\n    node.error(error);\n});",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 4130,
        "y": 320,
        "wires": [
            []
        ],
        "icon": "font-awesome/fa-bolt"
    },
    {
        "id": "1e1bd34b01587072",
        "type": "function",
        "z": "2a761808.610238",
        "name": "prepare get ttp order comsa",
        "func": "msg.bot.ttpprice = msg.payload;\n\nlet moneta = msg.bot.settings.moneta;\nlet orderid = msg.bot.ttp.curorderid;\n\nmsg.payload = [];\nmsg.topic = \"orders-status-\" + msg.bot.settings.userid + \":\" + moneta + \":\" + orderid + \"-comsa\";\n\n\n\n\nnode.status({fill: \"green\", shape: \"ring\", text: orderid});\nreturn msg;\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3860,
        "y": 160,
        "wires": [
            [
                "15e4146cf8045ad1"
            ]
        ],
        "inputLabels": [
            "orderid"
        ],
        "outputLabels": [
            "status"
        ],
        "icon": "node-red-contrib-binance/binance.png"
    },
    {
        "id": "15e4146cf8045ad1",
        "type": "redis-command",
        "z": "2a761808.610238",
        "server": "f120eab2.0a60a8",
        "command": "GET",
        "name": "get order status",
        "topic": "msg.payload",
        "params": "[]",
        "paramsType": "json",
        "payloadType": "json",
        "block": false,
        "x": 4100,
        "y": 160,
        "wires": [
            []
        ]
    },
    {
        "id": "369273d704a8a6bb",
        "type": "switch",
        "z": "2a761808.610238",
        "name": "sold ?",
        "property": "bot.ttp.sold",
        "propertyType": "msg",
        "rules": [
            {
                "t": "true"
            },
            {
                "t": "false"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 270,
        "y": 520,
        "wires": [
            [
                "41ed2184ea044881"
            ],
            [
                "5890758ada12b47b"
            ]
        ]
    },
    {
        "id": "41ed2184ea044881",
        "type": "link out",
        "z": "2a761808.610238",
        "name": "",
        "links": [
            "ccd55cdb.7ed72"
        ],
        "x": 375,
        "y": 500,
        "wires": []
    },
    {
        "id": "72e46f8aeb6442f9",
        "type": "switch",
        "z": "5df15275.2888ec",
        "g": "d4a5f2307ef8b222",
        "name": "sold ?",
        "property": "bot.ttp.sold",
        "propertyType": "msg",
        "rules": [
            {
                "t": "true"
            },
            {
                "t": "false"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 1030,
        "y": 1380,
        "wires": [
            [
                "de14383a32655d5c"
            ],
            [
                "e13296672e19d0a8"
            ]
        ]
    },
    {
        "id": "841dbfe6777b1e36",
        "type": "inject",
        "z": "5df15275.2888ec",
        "g": "44cf135596e2716e",
        "name": "0.015",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "0.01",
        "topic": "",
        "payloadType": "date",
        "x": 1030,
        "y": 120,
        "wires": [
            [
                "2c2113e3d7c3305b"
            ]
        ]
    },
    {
        "id": "2c2113e3d7c3305b",
        "type": "function",
        "z": "5df15275.2888ec",
        "g": "44cf135596e2716e",
        "name": "global.set(\"commision\", 0.075)",
        "func": "global.set(\"commision\", 0.075);\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1250,
        "y": 120,
        "wires": [
            []
        ]
    },
    {
        "id": "f61923546f307623",
        "type": "function",
        "z": "5df15275.2888ec",
        "g": "d4a5f2307ef8b222",
        "name": "setbot_ttp reset",
        "func": "\n\nmsg.bot.ttp.curstop = 0;\nmsg.bot.ttp.raschstopprice = 0;\nmsg.bot.ttp.curorderid = 0;\nmsg.bot.ttp.sold = false;\nmsg.bot.ttp.ttpbusy = false;\nmsg.bot.ttp.currentprice = 0;\nmsg.bot.ttp.quantity = 0;\nmsg.bot.ttp.final_price = 0;\n\n\nmsg.topic = msg.bot.settings.userid+\"-bots:\"+msg.bot.settings.botname+\":ttp\";\n\nmsg.payload = JSON.stringify(msg.bot.ttp);\nconst upd = global.get('setbot_ttp')(msg.topic, msg.payload);\n\n\nupd.then(upd => {\n\n    node.status({fill:\"green\",shape:\"dot\"});\n\n    let botname = msg.botname;\n    let datamsg = \"обнуление ттп\";\n    const tilog = global.get('tilog')(botname, datamsg);\n    tilog;\n    \n    node.send(msg);\n\n}).catch(error => {\n\n    node.status({fill:\"red\",shape:\"dot\"}); \n    node.error(error);\n});",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1440,
        "y": 1340,
        "wires": [
            [
                "96b4f32d26754311"
            ]
        ],
        "icon": "font-awesome/fa-bolt"
    },
    {
        "id": "96b4f32d26754311",
        "type": "link out",
        "z": "5df15275.2888ec",
        "g": "d4a5f2307ef8b222",
        "name": "",
        "links": [
            "e34a5b68.726ec8"
        ],
        "x": 1575,
        "y": 1340,
        "wires": []
    },
    {
        "id": "de14383a32655d5c",
        "type": "function",
        "z": "5df15275.2888ec",
        "g": "d4a5f2307ef8b222",
        "name": "регистрация сделки",
        "func": "\nnode.warn(\"регистрация сделки\");\nlet commision = global.get(\"commision\");\n\nlet sellprice = Number(msg.bot.ttp.final_price);\n\nlet tempfin = Number(Number(msg.bot.finance.quotainorders) - Number(msg.bot.ttp.quantity));\nlet tempfin2 = Number(Number(msg.bot.finance.basenal) + Number(msg.bot.ttp.quantity) * sellprice);\n\nvar floors = msg.bot.floors;\n\nfloors.forEach(function (item, i, floors) {\n\n    if (item[7] === 3) {\n        let buyprice = Number(item[10]);\n        let quantity = Number(item[14]);\n        let p = quantity * (sellprice - buyprice);\n        let c = quantity * (Number(sellprice + buyprice)) / 100 * commision;\n        let net = p - c;\n        tempfin2 = tempfin2 - c;\n        msg.bot.sales.today.push([buyprice, sellprice, quantity, p, c, net]);\n        msg.bot.sales.all.push([buyprice, sellprice, quantity, p, c, net]);\n\n        node.warn([buyprice, sellprice, quantity, p, c, net]);\n        \n        let botname = msg.botname;\n        let datamsg = \"регистрация сделки - \" + [buyprice, sellprice, quantity, p, c, net];\n        const tilog = global.get('tilog')(botname, datamsg);\n        tilog;\n\n        item[7] = 0;\n        item[8] = 0;\n        item[9] = 0;\n        item[10] = 0;\n        item[11] = 0;\n        item[12] = 0;\n        item[13] = 0;\n        item[14] = 0;\n\n    }\n});\n\nmsg.bot.finance.quotainorders = tempfin.toFixed(msg.bot.settings.digitprice);\nmsg.bot.finance.basenal = tempfin2.toFixed(msg.bot.settings.digitq);\n\nif (msg.bot.finance.baseinorders == -0) { msg.bot.finance.baseinorders = 0; }\nif (msg.bot.finance.basenal == -0) { msg.bot.finance.basenal = 0; }\n\nmsg.bot.floors = floors;\n\nreturn msg;\n\n\n\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1220,
        "y": 1340,
        "wires": [
            [
                "f61923546f307623"
            ]
        ]
    },
    {
        "id": "12dcb7809b23d675",
        "type": "inject",
        "z": "5df15275.2888ec",
        "g": "44cf135596e2716e",
        "name": "detail",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "0.01",
        "topic": "",
        "payload": "detail",
        "payloadType": "str",
        "x": 1030,
        "y": 160,
        "wires": [
            [
                "905bf77ca38ca8b2"
            ]
        ]
    },
    {
        "id": "905bf77ca38ca8b2",
        "type": "function",
        "z": "5df15275.2888ec",
        "g": "44cf135596e2716e",
        "name": "global.set(\"logmode\", \"detail\");",
        "func": "global.set(\"logmode\", \"detail\");\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1250,
        "y": 160,
        "wires": [
            []
        ]
    },
    {
        "id": "04c874ce359ca023",
        "type": "switch",
        "z": "5f98db3a.7ab21c",
        "g": "4bf7491f.8e70b",
        "name": "",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 630,
        "y": 760,
        "wires": [
            []
        ]
    },
    {
        "id": "d1c587fee6df9451",
        "type": "function",
        "z": "ef9c825cf92ee31b",
        "name": "f1",
        "func": "\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 390,
        "y": 860,
        "wires": [
            [
                "0e48d94f9062ce64"
            ]
        ]
    },
    {
        "id": "0e48d94f9062ce64",
        "type": "function",
        "z": "ef9c825cf92ee31b",
        "name": "f2",
        "func": "\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 530,
        "y": 860,
        "wires": [
            [
                "86eddb40baf70f34"
            ]
        ]
    },
    {
        "id": "86eddb40baf70f34",
        "type": "function",
        "z": "ef9c825cf92ee31b",
        "name": "f3",
        "func": "\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 690,
        "y": 860,
        "wires": [
            []
        ]
    },
    {
        "id": "0fb302e6a4106324",
        "type": "function",
        "z": "ef9c825cf92ee31b",
        "name": "start",
        "func": "\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 460,
        "y": 740,
        "wires": [
            []
        ]
    },
    {
        "id": "72c3f12ed5e0d4ef",
        "type": "function",
        "z": "ef9c825cf92ee31b",
        "name": "point f1",
        "func": "\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 480,
        "y": 960,
        "wires": [
            []
        ]
    },
    {
        "id": "798c26b38d33499f",
        "type": "function",
        "z": "ef9c825cf92ee31b",
        "name": "point f2",
        "func": "\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 640,
        "y": 960,
        "wires": [
            []
        ]
    },
    {
        "id": "72520d9922fe471d",
        "type": "function",
        "z": "ef9c825cf92ee31b",
        "name": "point f3",
        "func": "\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 800,
        "y": 960,
        "wires": [
            []
        ]
    },
    {
        "id": "8410b51705205aeb",
        "type": "function",
        "z": "ef9c825cf92ee31b",
        "name": "durations",
        "func": "\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 620,
        "y": 740,
        "wires": [
            []
        ]
    },
    {
        "id": "49f41bcf9057e789",
        "type": "function",
        "z": "2a761808.610238",
        "name": "orderexec cansel",
        "func": "//<трекер<\nlet trackname = \"ttp-track-\" + msg.botname;\nlet track = flow.get(trackname);\nlet start_node_time = new Date().getTime();\n\nlet steptitle = node.name;\n\nlet laststep = track[track.length - 1];\nlet last_node_end_time = laststep.end_node_time;\n//>трекер>\nlet cmd = \"cansel\";\nlet orderid = msg.bot.ttp.curorderid;\n\n\nlet data = { moneta: msg.bot.settings.moneta, orderid: orderid};\nconst orderexec = global.get('order_exec')(cmd, data);\n\nlet botname = msg.bot.settings.botname;\n\n//let data2 = \"cansel order id:\" + orderid;\n//const tilog = global.get('tilog')(botname, data2);\n//tilog;\n\norderexec.then(orderexec => {\n    msg.orderexec = orderexec;\n    if (orderexec.statusCode === \"ok\") {\n        node.status({ fill: \"green\", shape: \"dot\", text: orderexec.statusBody.orderId });\n        //msg.bot = msg.orderexec.bot;\n        msg.bot.ttp.curorderid = 0;\n\n\n        //>трекер>\n        let end_node_time = new Date().getTime();\n        let duration = end_node_time - start_node_time;\n        let duration_step = end_node_time - last_node_end_time;\n        track.push({\n            \"steptitle\": steptitle,\n            \"start_node_time\": start_node_time,\n            \"end_node_time\": end_node_time,\n            \"duration_node\": duration,\n            \"duration_step\": duration_step\n        });\n        flow.set(trackname, track);\n        //>трекер>\n\n\n        let tempfin = Number(Number(msg.bot.finance.baseinorders) - Number(msg.bot.ttp.quantity) * Number(msg.bot.ttp.curstop));\n        let tempfin2 = Number(Number(msg.bot.finance.basenal) + Number(msg.bot.ttp.quantity) * Number(msg.bot.ttp.curstop));\n\n        msg.bot.finance.baseinorders = tempfin.toFixed(msg.bot.settings.digitprice);\n        msg.bot.finance.basenal = tempfin2.toFixed(msg.bot.settings.digitprice);\n\n\n        node.send(msg);\n\n    } else {\n        node.status({ fill: \"red\", shape: \"dot\" });\n\n        //>трекер>\n        let end_node_time = new Date().getTime();\n        let duration = end_node_time - start_node_time;\n        let duration_step = end_node_time - last_node_end_time;\n        track.push({\n            \"steptitle\": steptitle + \"-faile\",\n            \"start_node_time\": start_node_time,\n            \"end_node_time\": end_node_time,\n            \"duration\": duration,\n            \"duration_step\": duration_step,\n            \"error\": orderexec.statusBody\n        });\n        flow.set(trackname, track);\n        //>трекер>\n\n        node.send(msg);\n    }\n\n\n}).catch(error => {\n\n    msg.error = error;\n    node.status({ fill: \"red\", shape: \"ring\" });\n    node.warn(msg);\n    node.error(error);\n});\n\n\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1850,
        "y": 800,
        "wires": [
            [
                "dc0b01e757a092c0"
            ]
        ]
    },
    {
        "id": "dc0b01e757a092c0",
        "type": "switch",
        "z": "2a761808.610238",
        "name": "statusCode",
        "property": "orderexec.statusCode",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "ok",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "not ok",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 2050,
        "y": 800,
        "wires": [
            [
                "7875191c63a726f6"
            ],
            [
                "2f28e3b0f3b59b7c"
            ]
        ]
    },
    {
        "id": "2f28e3b0f3b59b7c",
        "type": "function",
        "z": "2a761808.610238",
        "name": "tilog",
        "func": "let botname = msg.bot.settings.botname;\nlet data = \"Ошибка при выставлении ордера - \"+msg.orderexec.statusBody;\nconst tilog = global.get('tilog')(botname,data);\n\ntilog.then(tilog => {\n\n\n        node.status({fill:\"green\",shape:\"dot\"});\n    node.send(msg);\n     \n    \n\n}).catch(error => {\n    \n    msg.error = error;\n    node.status({fill:\"red\",shape: \"ring\"});\n    \n    node.error(error);\n});",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2070,
        "y": 840,
        "wires": [
            [
                "ca3c60f0c33a9389"
            ]
        ]
    },
    {
        "id": "7875191c63a726f6",
        "type": "function",
        "z": "2a761808.610238",
        "name": "orderexec setsell",
        "func": "//<трекер<\nlet trackname = \"ttp-track-\" + msg.botname;\nlet track = flow.get(trackname);\nlet start_node_time = new Date().getTime();\n\nlet steptitle = node.name;\n\nlet laststep = track[track.length - 1];\nlet last_node_end_time = laststep.end_node_time;\n//>трекер>\n\nlet cmd = \"setsell\";\nlet data = {bot: msg.bot };\nconst orderexec = global.get('order_exec')(cmd, data);\n\n//let botname = msg.bot.settings.botname;\n//let data2 = \"setsell\" + msg.botname;\n//const tilog = global.get('tilog')(botname, data2);\n//tilog;\n\norderexec.then(orderexec => {\n    msg.orderexec = orderexec;\n    if (orderexec.statusCode == \"ok\") {\n        node.status({ fill: \"green\", shape: \"dot\", text: orderexec.statusBody.orderId });\n        //msg.bot = msg.orderexec.bot;\n        \n        msg.bot.ttp.curorderid = msg.orderexec.statusBody.orderId;\n        msg.bot.ttp.curstop = msg.bot.ttp.raschstopprice\n        //msg.bot.ttp.quantity = msg.orderexec.statusBody.origQty;\n        \n        //>трекер>\n        let end_node_time = new Date().getTime();\n        let duration = end_node_time - start_node_time;\n        let duration_step = end_node_time - last_node_end_time;\n        track.push({\n            \"steptitle\": steptitle,\n            \"start_node_time\": start_node_time,\n            \"end_node_time\": end_node_time,\n            \"duration_node\": duration,\n            \"duration_step\": duration_step\n        });\n        flow.set(trackname, track);\n        //>трекер>\n\n        node.send(msg);\n\n    } else {\n        node.status({ fill: \"red\", shape: \"dot\" });\n\n        //>трекер>\n        let end_node_time = new Date().getTime();\n        let duration = end_node_time - start_node_time;\n        let duration_step = end_node_time - last_node_end_time;\n        track.push({\n            \"steptitle\": steptitle + \"-faile\",\n            \"start_node_time\": start_node_time,\n            \"end_node_time\": end_node_time,\n            \"duration\": duration,\n            \"duration_step\": duration_step,\n            \"error\": orderexec.statusBody\n        });\n        flow.set(trackname, track);\n        //>трекер>\n\n        node.send(msg);\n    }\n\n\n}).catch(error => {\n\n    msg.error = error;\n    node.status({ fill: \"red\", shape: \"ring\" });\n\n    node.error(error);\n});\n\n\n\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2250,
        "y": 780,
        "wires": [
            [
                "34d712fc50018974"
            ]
        ]
    },
    {
        "id": "34d712fc50018974",
        "type": "switch",
        "z": "2a761808.610238",
        "name": "statusCode",
        "property": "orderexec.statusCode",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "ok",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "not ok",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 2450,
        "y": 780,
        "wires": [
            [
                "57aec58609f74230"
            ],
            [
                "3fff85c5bae3bc4d"
            ]
        ]
    },
    {
        "id": "3fff85c5bae3bc4d",
        "type": "function",
        "z": "2a761808.610238",
        "name": "tilog",
        "func": "let botname = msg.bot.settings.botname;\nlet data = \"Ошибка при выставлении ордера - \"+msg.orderexec.statusBody;\nconst tilog = global.get('tilog')(botname,data);\n\ntilog.then(tilog => {\n\n\n        node.status({fill:\"green\",shape:\"dot\"});\n    node.send(msg);\n     \n    \n\n}).catch(error => {\n    \n    msg.error = error;\n    node.status({fill:\"red\",shape: \"ring\"});\n    \n    node.error(error);\n});",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2470,
        "y": 820,
        "wires": [
            [
                "2ae413ade37cd800"
            ]
        ]
    },
    {
        "id": "57aec58609f74230",
        "type": "link out",
        "z": "2a761808.610238",
        "name": "",
        "links": [
            "ccd55cdb.7ed72"
        ],
        "x": 2575,
        "y": 760,
        "wires": []
    },
    {
        "id": "2ae413ade37cd800",
        "type": "link out",
        "z": "2a761808.610238",
        "name": "",
        "links": [
            "ccd55cdb.7ed72"
        ],
        "x": 2575,
        "y": 820,
        "wires": []
    },
    {
        "id": "ca3c60f0c33a9389",
        "type": "link out",
        "z": "2a761808.610238",
        "name": "",
        "links": [
            "ccd55cdb.7ed72"
        ],
        "x": 2175,
        "y": 840,
        "wires": []
    },
    {
        "id": "7d43d6c58501d4d2",
        "type": "link out",
        "z": "90fc9ad8367cb513",
        "name": "",
        "links": [
            "86785068944abb7f"
        ],
        "x": 115,
        "y": 40,
        "wires": []
    },
    {
        "id": "cf818f1f6ec91c1b",
        "type": "link in",
        "z": "90fc9ad8367cb513",
        "name": "",
        "links": [
            "f073e9dbe313502b",
            "2aaf81456a47ee40",
            "4970e284f21b629f",
            "c6a54fe4af422f84",
            "15864b4634126e66",
            "e5f7814bba0f57f2",
            "2d5ad73752c276d9",
            "4cddd51017c75769",
            "d208742dc4eeb9ef",
            "2c9442a2b966c69a",
            "c9cb4667bcf051d9",
            "09fae42926ad0f21",
            "13be00812f46687f",
            "feffddc4a9baa795",
            "134f7480a4c5af5c",
            "aa5c8214700f80d1",
            "9749ef3a9a8c6349",
            "ccdecaaa4dad9420",
            "0faae939f8adb6b8",
            "edc02330fb9cd001",
            "56d57c1b4e2f677a",
            "c5bb7cb3aa6ea35a",
            "c9a0a43259a49081",
            "e9aacb0ba78c7334",
            "a35cd6db05d8aaec",
            "3b489b91837a0c1b",
            "efaab471cf56cb4e",
            "6e16cd4eb034d94d"
        ],
        "x": 235,
        "y": 40,
        "wires": [
            []
        ]
    },
    {
        "id": "86785068944abb7f",
        "type": "link in",
        "z": "90fc9ad8367cb513",
        "name": "",
        "links": [
            "7d43d6c58501d4d2"
        ],
        "x": 55,
        "y": 440,
        "wires": [
            [
                "fb7ab7b523d4ecb3"
            ]
        ]
    },
    {
        "id": "32cddbc05bf2a4a2",
        "type": "subflow:90fc9ad8367cb513",
        "z": "ef9c825cf92ee31b",
        "name": "",
        "env": [
            {
                "name": "a",
                "value": "axff",
                "type": "str"
            }
        ],
        "x": 630,
        "y": 1220,
        "wires": [
            [
                "70e863f2984a1033"
            ]
        ]
    },
    {
        "id": "e21cf4ac79bb6e6d",
        "type": "inject",
        "z": "ef9c825cf92ee31b",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 400,
        "y": 1220,
        "wires": [
            [
                "32cddbc05bf2a4a2"
            ]
        ]
    },
    {
        "id": "70e863f2984a1033",
        "type": "debug",
        "z": "ef9c825cf92ee31b",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 890,
        "y": 1220,
        "wires": []
    },
    {
        "id": "97260e4137385cee",
        "type": "status",
        "z": "ef9c825cf92ee31b",
        "name": "",
        "scope": [
            "32cddbc05bf2a4a2"
        ],
        "x": 670,
        "y": 1300,
        "wires": [
            [
                "694d4b1f75cba2ab"
            ]
        ]
    },
    {
        "id": "694d4b1f75cba2ab",
        "type": "debug",
        "z": "ef9c825cf92ee31b",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 850,
        "y": 1300,
        "wires": []
    },
    {
        "id": "3a050eee10bffa09",
        "type": "comment",
        "z": "90fc9ad8367cb513",
        "name": "1 - Покупаем",
        "info": "",
        "x": 550,
        "y": 340,
        "wires": []
    },
    {
        "id": "d232dcf67c8019f8",
        "type": "comment",
        "z": "90fc9ad8367cb513",
        "name": "2 - Купили. Держим",
        "info": "",
        "x": 580,
        "y": 620,
        "wires": []
    },
    {
        "id": "bb285120a1d8abe9",
        "type": "comment",
        "z": "90fc9ad8367cb513",
        "name": "3 - Продаём",
        "info": "",
        "x": 550,
        "y": 880,
        "wires": []
    },
    {
        "id": "fb7ab7b523d4ecb3",
        "type": "switch",
        "z": "90fc9ad8367cb513",
        "name": "статус этажа",
        "property": "bot.currentfloor[7]",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "0",
                "vt": "num"
            },
            {
                "t": "eq",
                "v": "1",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "2",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "3",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "4",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 6,
        "x": 260,
        "y": 440,
        "wires": [
            [
                "f8c40fc76fa37b45"
            ],
            [
                "8dfa83ac71d89e3f"
            ],
            [
                "d4730db155aaadf1"
            ],
            [
                "09fae42926ad0f21"
            ],
            [],
            [
                "09fae42926ad0f21"
            ]
        ]
    },
    {
        "id": "f8c40fc76fa37b45",
        "type": "switch",
        "z": "90fc9ad8367cb513",
        "name": "проверка запрета на закуп",
        "property": "bot.zapret_na_zakup",
        "propertyType": "msg",
        "rules": [
            {
                "t": "false"
            },
            {
                "t": "true"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 600,
        "y": 220,
        "wires": [
            [
                "805da40a60d5db31"
            ],
            [
                "c6a54fe4af422f84"
            ]
        ]
    },
    {
        "id": "3cfcf2dc71a4dc08",
        "type": "comment",
        "z": "90fc9ad8367cb513",
        "name": "запрещено закупать",
        "info": "",
        "x": 900,
        "y": 220,
        "wires": []
    },
    {
        "id": "f67edb522a6dec26",
        "type": "comment",
        "z": "90fc9ad8367cb513",
        "name": "0 - Свободно",
        "info": "",
        "x": 550,
        "y": 180,
        "wires": []
    },
    {
        "id": "67efa41bdcbaf5d2",
        "type": "comment",
        "z": "90fc9ad8367cb513",
        "name": "PARTIALLY_FILLED",
        "info": "",
        "x": 1670,
        "y": 740,
        "wires": []
    },
    {
        "id": "c6a54fe4af422f84",
        "type": "link out",
        "z": "90fc9ad8367cb513",
        "name": "",
        "links": [
            "cf818f1f6ec91c1b"
        ],
        "x": 1035,
        "y": 220,
        "wires": []
    },
    {
        "id": "8dfa83ac71d89e3f",
        "type": "switch",
        "z": "90fc9ad8367cb513",
        "name": "проверка запрета на закуп",
        "property": "bot.zapret_na_zakup",
        "propertyType": "msg",
        "rules": [
            {
                "t": "false"
            },
            {
                "t": "true"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 600,
        "y": 380,
        "wires": [
            [
                "2681f91b118902bd"
            ],
            [
                "8c8ee07eae1b99a1"
            ]
        ]
    },
    {
        "id": "40df152a3f21607f",
        "type": "comment",
        "z": "90fc9ad8367cb513",
        "name": "NEW",
        "info": "",
        "x": 1590,
        "y": 500,
        "wires": []
    },
    {
        "id": "9aa983479fe8bba2",
        "type": "switch",
        "z": "90fc9ad8367cb513",
        "name": "статус ордера",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "NEW",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "PARTIALLY_FILLED",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "CANCELED",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "FILLED",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "REJECTED",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "EXPIRED",
                "vt": "str"
            },
            {
                "t": "null"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 7,
        "x": 1340,
        "y": 640,
        "wires": [
            [
                "2b6bf8f4980871fd",
                "9749ef3a9a8c6349"
            ],
            [
                "efaab471cf56cb4e"
            ],
            [
                "0ce90b2b8e8f6e59"
            ],
            [
                "6598bd75a258c536"
            ],
            [
                "6e16cd4eb034d94d"
            ],
            [
                "6e16cd4eb034d94d"
            ],
            [
                "6e16cd4eb034d94d"
            ]
        ]
    },
    {
        "id": "8c8ee07eae1b99a1",
        "type": "function",
        "z": "90fc9ad8367cb513",
        "name": "prepare get order status",
        "func": "let orderid = msg.bot.currentfloor[8];\nmsg.moneta = msg.bot.settings.moneta;\nmsg.orderid = orderid;\n\nnode.status({ fill: \"green\", shape: \"ring\", text: orderid });\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 910,
        "y": 540,
        "wires": [
            [
                "82b2ef5822593de8"
            ]
        ],
        "inputLabels": [
            "orderid"
        ],
        "outputLabels": [
            "status"
        ],
        "icon": "node-red-contrib-binance/binance.png"
    },
    {
        "id": "908f770bf8774db5",
        "type": "comment",
        "z": "90fc9ad8367cb513",
        "name": "FILLED",
        "info": "",
        "x": 1590,
        "y": 680,
        "wires": []
    },
    {
        "id": "4451d40586406ccf",
        "type": "comment",
        "z": "90fc9ad8367cb513",
        "name": "CANCELED",
        "info": "",
        "x": 1610,
        "y": 600,
        "wires": []
    },
    {
        "id": "079186e7234febe5",
        "type": "function",
        "z": "90fc9ad8367cb513",
        "name": "change floors",
        "func": "node.warn(\"cancel order \" + msg.bot.currentfloor[14]);\n//let tempfin = Number(Number(msg.bot.finance.baseinorders) - Number(msg.bot.currentfloor[14]) * Number(msg.bot.currentfloor[10]));\n//let tempfin2 = Number(Number(msg.bot.finance.basenal) + Number(msg.bot.currentfloor[14]) * Number(msg.bot.currentfloor[10]));\n//\n//msg.bot.finance.baseinorders = tempfin.toFixed(msg.bot.settings.digitprice);\n//msg.bot.finance.basenal = tempfin2.toFixed(msg.bot.settings.digitprice);\n//\n//if (msg.bot.finance.baseinorders == -0) { msg.bot.finance.baseinorders = 0; }\n//if (msg.bot.finance.basenal == -0) { msg.bot.finance.basenal = 0; }\n\nlet botname = msg.bot.settings.botname;\n\nlet data = \"Ордер на покупку отменен, ID - \" + msg.bot.currentfloor[8];\nconst tilog = global.get('tilog')(botname, data);\ntilog;\n\nlet currentfloor = msg.bot.currentfloor;\ncurrentfloor[7] = 0;\ncurrentfloor[8] = 0;\ncurrentfloor[10] = 0;\ncurrentfloor[14] = 0;\n\nmsg.bot.floors[currentfloor[0] - 1] = currentfloor;\n\nnode.status({ fill: \"green\", shape: \"ring\"});\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1780,
        "y": 320,
        "wires": [
            [
                "edc02330fb9cd001"
            ]
        ]
    },
    {
        "id": "9796235894552b95",
        "type": "comment",
        "z": "90fc9ad8367cb513",
        "name": "NEW",
        "info": "",
        "x": 1590,
        "y": 260,
        "wires": []
    },
    {
        "id": "dd7e52fb2783f6f8",
        "type": "switch",
        "z": "90fc9ad8367cb513",
        "name": "статус ордера",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "NEW",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "PARTIALLY_FILLED",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "CANCELED",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "FILLED",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "REJECTED",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "EXPIRED",
                "vt": "str"
            },
            {
                "t": "null"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 7,
        "x": 1340,
        "y": 360,
        "wires": [
            [
                "e5f7814bba0f57f2"
            ],
            [
                "e5f7814bba0f57f2"
            ],
            [
                "079186e7234febe5"
            ],
            [
                "aee5c0eafdd96ec0"
            ],
            [],
            [],
            [
                "e5f7814bba0f57f2"
            ]
        ]
    },
    {
        "id": "2681f91b118902bd",
        "type": "function",
        "z": "90fc9ad8367cb513",
        "name": "prepare get order status",
        "func": "let orderid = msg.bot.currentfloor[8];\n\nmsg.moneta = msg.bot.settings.moneta;\nmsg.orderid = orderid;\n\nnode.status({ fill: \"green\", shape: \"ring\", text: orderid });\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 910,
        "y": 360,
        "wires": [
            [
                "89c02112db5c1bae"
            ]
        ],
        "inputLabels": [
            "orderid"
        ],
        "outputLabels": [
            "status"
        ],
        "icon": "node-red-contrib-binance/binance.png"
    },
    {
        "id": "47706405e8fc5427",
        "type": "comment",
        "z": "90fc9ad8367cb513",
        "name": "FILLED",
        "info": "",
        "x": 1590,
        "y": 400,
        "wires": []
    },
    {
        "id": "16891c0f5ff54f3a",
        "type": "comment",
        "z": "90fc9ad8367cb513",
        "name": "CANCELED",
        "info": "",
        "x": 1610,
        "y": 320,
        "wires": []
    },
    {
        "id": "aee5c0eafdd96ec0",
        "type": "function",
        "z": "90fc9ad8367cb513",
        "name": "change floors",
        "func": "node.warn(\"filled order \" + msg.bot.currentfloor[14]);\n//let tempfin = Number(Number(msg.bot.finance.baseinorders) - Number(msg.bot.currentfloor[14]) * Number(msg.bot.currentfloor[10]));\n//\n//let tempfin2 = Number(Number(msg.bot.finance.quotanal) + Number(msg.bot.currentfloor[14]));\n//\n//msg.bot.finance.baseinorders = tempfin.toFixed(msg.bot.settings.digitprice);\n//msg.bot.finance.quotanal = tempfin2.toFixed(msg.bot.settings.digitq);\n//\n//if (msg.bot.finance.baseinorders == -0) { msg.bot.finance.baseinorders = 0; }\n//if (msg.bot.finance.basenal == -0) { msg.bot.finance.basenal = 0; }\n\nlet currentfloor = msg.bot.currentfloor;\ncurrentfloor[7] = 2;\n\nmsg.bot.floors[currentfloor[0] - 1] = currentfloor;\n\nlet data = \"Ордер на покупку исполнен, ID - \" + msg.bot.currentfloor[8];\nconst tilog = global.get('tilog')(msg.bot.settings.botname, data);\ntilog;\n\nnode.status({ fill: \"green\", shape: \"ring\"});\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1740,
        "y": 400,
        "wires": [
            [
                "c5bb7cb3aa6ea35a"
            ]
        ]
    },
    {
        "id": "e5f7814bba0f57f2",
        "type": "link out",
        "z": "90fc9ad8367cb513",
        "name": "",
        "links": [
            "cf818f1f6ec91c1b"
        ],
        "x": 1515,
        "y": 260,
        "wires": []
    },
    {
        "id": "efaab471cf56cb4e",
        "type": "link out",
        "z": "90fc9ad8367cb513",
        "name": "",
        "links": [
            "cf818f1f6ec91c1b"
        ],
        "x": 1555,
        "y": 740,
        "wires": []
    },
    {
        "id": "e9334e7e3a6e97a3",
        "type": "comment",
        "z": "90fc9ad8367cb513",
        "name": "PARTIALLY_FILLED",
        "info": "",
        "x": 1750,
        "y": 260,
        "wires": []
    },
    {
        "id": "d39d878cc5284e3c",
        "type": "comment",
        "z": "90fc9ad8367cb513",
        "name": "null",
        "info": "",
        "x": 1930,
        "y": 260,
        "wires": []
    },
    {
        "id": "d4730db155aaadf1",
        "type": "function",
        "z": "90fc9ad8367cb513",
        "name": "check price for sale start",
        "func": "if (msg.bot.status.currentprice >= msg.bot.currentfloor[5]){\n    \n    msg.bot.currentfloor[7] = 3;\n\n    return [null,msg];\n} else {\n\n    return [msg,null];\n}",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 590,
        "y": 740,
        "wires": [
            [
                "c9cb4667bcf051d9"
            ],
            [
                "821047ed816ebb9b"
            ]
        ]
    },
    {
        "id": "c9cb4667bcf051d9",
        "type": "link out",
        "z": "90fc9ad8367cb513",
        "name": "",
        "links": [
            "cf818f1f6ec91c1b"
        ],
        "x": 775,
        "y": 700,
        "wires": []
    },
    {
        "id": "09fae42926ad0f21",
        "type": "link out",
        "z": "90fc9ad8367cb513",
        "name": "",
        "links": [
            "cf818f1f6ec91c1b"
        ],
        "x": 495,
        "y": 920,
        "wires": []
    },
    {
        "id": "6e16cd4eb034d94d",
        "type": "link out",
        "z": "90fc9ad8367cb513",
        "name": "",
        "links": [
            "cf818f1f6ec91c1b"
        ],
        "x": 1555,
        "y": 800,
        "wires": []
    },
    {
        "id": "821047ed816ebb9b",
        "type": "function",
        "z": "90fc9ad8367cb513",
        "name": "change floors",
        "func": "node.warn(\"start ttp on floor \"+msg.bot.currentfloor[0]);     \n\n//let tempfin = Number(Number(msg.bot.finance.quotainorders) + Number(msg.bot.currentfloor[14]));\n//\n//let tempfin2 = Number(Number(msg.bot.finance.quotanal) - Number(msg.bot.currentfloor[14]));\n//\n//msg.bot.finance.quotainorders = tempfin.toFixed(msg.bot.settings.digitprice);\n//msg.bot.finance.quotanal = tempfin2.toFixed(msg.bot.settings.digitq);\n//\n//if (msg.bot.finance.baseinorders == -0) {msg.bot.finance.baseinorders = 0;}\n//if (msg.bot.finance.basenal == -0) {msg.bot.finance.basenal = 0;}\n\nlet currentfloor = msg.bot.currentfloor;\ncurrentfloor[7] = 3;\n\nmsg.bot.floors[currentfloor[0]-1] = currentfloor;\n\nnode.status({fill: \"green\", shape: \"ring\"});\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 840,
        "y": 760,
        "wires": [
            [
                "3b489b91837a0c1b"
            ]
        ]
    },
    {
        "id": "faf150f5b4376622",
        "type": "function",
        "z": "90fc9ad8367cb513",
        "name": "orderexec setbuy",
        "func": "let cmd = \"setbuy\";\nlet quantity = Number((Number(msg.bot.finance.depo) * Number(msg.bot.settings.ordersize) / 100 / msg.bot.status.currentprice).toFixed(msg.bot.settings.digitq));\nlet price = Number((msg.bot.currentfloor[3]).toFixed(msg.bot.settings.digitprice));\n\nlet data = { moneta: msg.bot.settings.moneta, price: price, quantity: quantity, bot: msg.bot };\nconst orderexec = global.get('order_exec')(cmd, data);\n\nlet botname = msg.bot.settings.botname;\n\nlet data2 = botname + \":\" + cmd + \": price:\" + data.price + \", quantity: \" + data.quantity;\nconst tilog = global.get('tilog')(botname, data2);\ntilog;\n\norderexec.then(orderexec => {\n    msg.orderexec = orderexec;\n    if (orderexec.statusCode === \"ok\") {\n        node.status({ fill: \"green\", shape: \"dot\", text: orderexec.statusBody.orderId });\n        msg.bot = msg.orderexec.bot;\n        node.done();\n        node.send(msg);\n\n    } else {\n        node.status({ fill: \"red\", shape: \"dot\" });\n        node.done();\n        node.send(msg);\n    }\n    \n\n}).catch(error => {\n\n    msg.error = error;\n    node.status({ fill: \"red\", shape: \"ring\" });\n\n    node.error(error);\n});\n\n\n\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2750,
        "y": 120,
        "wires": [
            [
                "0153eae0f2c743da"
            ]
        ]
    },
    {
        "id": "0153eae0f2c743da",
        "type": "switch",
        "z": "90fc9ad8367cb513",
        "name": "statusCode",
        "property": "orderexec.statusCode",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "ok",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "not ok",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 2950,
        "y": 120,
        "wires": [
            [
                "f2116151a09ea8c3"
            ],
            [
                "4ef36dc61e4dab52"
            ]
        ]
    },
    {
        "id": "4ef36dc61e4dab52",
        "type": "function",
        "z": "90fc9ad8367cb513",
        "name": "tilog",
        "func": "let botname = msg.bot.settings.botname;\nlet data = \"Ошибка при выставлении ордера - \"+msg.orderexec.statusBody;\nconst tilog = global.get('tilog')(botname,data);\n\ntilog.then(tilog => {\n\n\n        node.status({fill:\"green\",shape:\"dot\"});\n    node.send(msg);\n     \n    \n\n}).catch(error => {\n    \n    msg.error = error;\n    node.status({fill:\"red\",shape: \"ring\"});\n    \n    node.error(error);\n});",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2970,
        "y": 160,
        "wires": [
            []
        ]
    },
    {
        "id": "f2116151a09ea8c3",
        "type": "function",
        "z": "90fc9ad8367cb513",
        "name": "register buy",
        "func": "let currentfloor = msg.bot.currentfloor;\ncurrentfloor[7] = 1;\ncurrentfloor[8] = msg.orderexec.statusBody.orderId;\ncurrentfloor[14] = msg.orderexec.statusBody.origQty;\ncurrentfloor[10] = msg.orderexec.statusBody.price;\n\nmsg.bot.floors[currentfloor[0] - 1] = currentfloor;\n\nmsg.bot.finance.baseinorders = (Number(Number(msg.bot.finance.baseinorders) + Number(msg.orderexec.statusBody.origQty) * Number(msg.orderexec.statusBody.price))).toFixed(msg.bot.settings.digitprice);\nmsg.bot.finance.basenal = (Number(Number(msg.bot.finance.basenal) - Number(msg.orderexec.statusBody.origQty) * Number(msg.orderexec.statusBody.price))).toFixed(msg.bot.settings.digitprice);\n\nnode.status({ fill: \"green\", shape: \"ring\", text: currentfloor[0] });\n\nlet data = \"Выставлен ордер - \" + currentfloor[8];\nconst tilog = global.get('tilog')(msg.bot.settings.botname, data);\ntilog;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3130,
        "y": 100,
        "wires": [
            [
                "fa151a6886b00af3"
            ]
        ]
    },
    {
        "id": "c90ea828ee39cd78",
        "type": "function",
        "z": "90fc9ad8367cb513",
        "name": "update bot floors, finance",
        "func": "let volname = msg.bot.settings.userid + \"-bots:\" + msg.bot.settings.botname + \":data\";\nlet botdata = {\n    \"finance\": JSON.stringify(msg.bot.finance),\n    \"floors\": JSON.stringify(msg.bot.floors),\n    \"sales\": JSON.stringify(msg.bot.sales)\n};\n\nconst upd = global.get('setbot_data')(volname, botdata);\n\n// @ts-ignore\nupd.then(upd => {\n\n    node.status({ fill: \"green\", shape: \"ring\" });\n    msg.payload = upd;\n    node.done();\n    node.send(msg);\n\n}).catch(error => {\n    node.status({ fill: \"red\", shape: \"ring\", text: \"error\" });\n    node.error(error);\n});",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2710,
        "y": 60,
        "wires": [
            []
        ],
        "icon": "font-awesome/fa-bolt"
    },
    {
        "id": "89c02112db5c1bae",
        "type": "function",
        "z": "90fc9ad8367cb513",
        "name": "get_order_status",
        "func": "let moneta = msg.moneta;\nlet orderid = Number(msg.orderid);\n\nconst get_order_status = global.get('get_order_status')(moneta, orderid);\n\nget_order_status.then(result => {\n\n    msg.payload = result;\n    node.status({ fill: \"green\", shape: \"dot\" });\n    node.send(msg);\n\n}).catch(error => {\n\n    node.status({ fill: \"red\", shape: \"dot\" });\n    node.error(error);\n});",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1150,
        "y": 360,
        "wires": [
            [
                "dd7e52fb2783f6f8"
            ]
        ]
    },
    {
        "id": "392667d41bda9a1f",
        "type": "comment",
        "z": "90fc9ad8367cb513",
        "name": "null",
        "info": "",
        "x": 1630,
        "y": 800,
        "wires": []
    },
    {
        "id": "35265e194748e84b",
        "type": "comment",
        "z": "90fc9ad8367cb513",
        "name": "запрещено закупать",
        "info": "",
        "x": 700,
        "y": 480,
        "wires": []
    },
    {
        "id": "82b2ef5822593de8",
        "type": "function",
        "z": "90fc9ad8367cb513",
        "name": "get_order_status",
        "func": "let moneta = msg.moneta;\nlet orderid = Number(msg.orderid);\n\nconst get_order_status = global.get('get_order_status')(moneta, orderid);\n\nget_order_status.then(result => {\n\n    msg.payload = result;\n\n    node.status({ fill: \"green\", shape: \"dot\" });\n    node.send(msg);\n\n}).catch(error => {\n\n    node.status({ fill: \"red\", shape: \"dot\" });\n    node.error(error);\n});",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1150,
        "y": 540,
        "wires": [
            [
                "9aa983479fe8bba2"
            ]
        ]
    },
    {
        "id": "0ce90b2b8e8f6e59",
        "type": "function",
        "z": "90fc9ad8367cb513",
        "name": "change floors",
        "func": "node.warn(\"cancel order \" + msg.bot.currentfloor[14]);\n//let tempfin = Number(Number(msg.bot.finance.baseinorders) - Number(msg.bot.currentfloor[14]) * Number(msg.bot.currentfloor[10]));\n//let tempfin2 = Number(Number(msg.bot.finance.basenal) + Number(msg.bot.currentfloor[14]) * Number(msg.bot.currentfloor[10]));\n//\n//msg.bot.finance.baseinorders = tempfin.toFixed(msg.bot.settings.digitprice);\n//msg.bot.finance.basenal = tempfin2.toFixed(msg.bot.settings.digitprice);\n//\n//if (msg.bot.finance.baseinorders == -0) { msg.bot.finance.baseinorders = 0; }\n//if (msg.bot.finance.basenal == -0) { msg.bot.finance.basenal = 0; }\n\nlet botname = msg.bot.settings.botname;\n\nlet data = \"Ордер на покупку отменен, ID - \" + msg.bot.currentfloor[8];\nconst tilog = global.get('tilog')(botname, data);\ntilog;\n\nlet currentfloor = msg.bot.currentfloor;\ncurrentfloor[7] = 0;\ncurrentfloor[8] = 0;\ncurrentfloor[10] = 0;\ncurrentfloor[14] = 0;\n\nmsg.bot.floors[currentfloor[0] - 1] = currentfloor;\n\nnode.status({ fill: \"green\", shape: \"ring\"});\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1780,
        "y": 600,
        "wires": [
            [
                "e9aacb0ba78c7334"
            ]
        ]
    },
    {
        "id": "6598bd75a258c536",
        "type": "function",
        "z": "90fc9ad8367cb513",
        "name": "change floors",
        "func": "\nnode.warn(\"filled order \" + msg.bot.currentfloor[14]);\n//let tempfin = Number(Number(msg.bot.finance.baseinorders) - Number(msg.bot.currentfloor[14]) * Number(msg.bot.currentfloor[10]));\n//\n//let tempfin2 = Number(Number(msg.bot.finance.quotanal) + Number(msg.bot.currentfloor[14]));\n//\n//msg.bot.finance.baseinorders = tempfin.toFixed(msg.bot.settings.digitprice);\n//msg.bot.finance.quotanal = tempfin2.toFixed(msg.bot.settings.digitq);\n//\n//if (msg.bot.finance.baseinorders == -0) { msg.bot.finance.baseinorders = 0; }\n//if (msg.bot.finance.basenal == -0) { msg.bot.finance.basenal = 0; }\n\nlet currentfloor = msg.bot.currentfloor;\ncurrentfloor[7] = 2;\n\nmsg.bot.floors[currentfloor[0] - 1] = currentfloor;\n\nlet data = \"Ордер на покупку исполнен, ID - \" + msg.bot.currentfloor[8];\nconst tilog = global.get('tilog')(msg.bot.settings.botname, data);\ntilog;\n\n\nnode.status({ fill: \"green\", shape: \"ring\"});\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1780,
        "y": 680,
        "wires": [
            [
                "c9a0a43259a49081"
            ]
        ]
    },
    {
        "id": "0ff0634f1d848d61",
        "type": "subflow:90fc9ad8367cb513",
        "z": "5df15275.2888ec",
        "g": "d4a5f2307ef8b222",
        "name": "",
        "env": [],
        "x": 1430,
        "y": 1400,
        "wires": [
            [
                "0080451aaafcadd8",
                "3cca40b6fb3f74a7"
            ]
        ]
    },
    {
        "id": "3cca40b6fb3f74a7",
        "type": "link out",
        "z": "5df15275.2888ec",
        "g": "d4a5f2307ef8b222",
        "name": "",
        "links": [
            "e34a5b68.726ec8"
        ],
        "x": 1555,
        "y": 1400,
        "wires": []
    },
    {
        "id": "a22493fd4828f6e2",
        "type": "function",
        "z": "5df15275.2888ec",
        "g": "d4a5f2307ef8b222",
        "name": "floors array prepare",
        "func": "msg.payload = msg.bot.floors;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1070,
        "y": 1620,
        "wires": [
            [
                "b519994e581e8bdd",
                "d2defd5285e34ff1",
                "120969bfc4862a7d"
            ]
        ]
    },
    {
        "id": "b519994e581e8bdd",
        "type": "split",
        "z": "5df15275.2888ec",
        "g": "d4a5f2307ef8b222",
        "name": "",
        "splt": "\\n",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "x": 1250,
        "y": 1620,
        "wires": [
            [
                "537dc01b45bda0bc"
            ]
        ]
    },
    {
        "id": "537dc01b45bda0bc",
        "type": "function",
        "z": "5df15275.2888ec",
        "g": "d4a5f2307ef8b222",
        "name": "concrete floor select",
        "func": "msg.bot.currentfloor = msg.payload;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1440,
        "y": 1620,
        "wires": [
            [
                "e940ea9779e7f564"
            ]
        ]
    },
    {
        "id": "43b759ee534eaeb9",
        "type": "join",
        "z": "5df15275.2888ec",
        "g": "d4a5f2307ef8b222",
        "name": "",
        "mode": "auto",
        "build": "object",
        "property": "payload",
        "propertyType": "msg",
        "key": "topic",
        "joiner": "\\n",
        "joinerType": "str",
        "accumulate": true,
        "timeout": "",
        "count": "",
        "reduceRight": false,
        "reduceExp": "",
        "reduceInit": "",
        "reduceInitType": "",
        "reduceFixup": "",
        "x": 1810,
        "y": 1620,
        "wires": [
            [
                "b72d192f770419d4",
                "1eb94b3ec3aae58d",
                "fe5f4964aa470c3b"
            ]
        ]
    },
    {
        "id": "c7d76b3e5ef5e069",
        "type": "function",
        "z": "cde16a2385b7b659",
        "name": "",
        "func": "let a = env.get(\"a\");\nmsg.a = a;\nnode.warn(a);\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 500,
        "y": 1880,
        "wires": [
            [
                "e4a3677d4ac23dbc",
                "198455a3bf88c71d"
            ]
        ]
    },
    {
        "id": "8728010c65e83c6a",
        "type": "function",
        "z": "cde16a2385b7b659",
        "name": "",
        "func": "msg.payload = \"d\";\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 720,
        "y": 1920,
        "wires": [
            []
        ]
    },
    {
        "id": "88bc4eddafd64975",
        "type": "link out",
        "z": "cde16a2385b7b659",
        "name": "",
        "links": [
            "f0969df77ec314c5"
        ],
        "x": 115,
        "y": 40,
        "wires": []
    },
    {
        "id": "8c8e6e2242d53271",
        "type": "link in",
        "z": "cde16a2385b7b659",
        "name": "",
        "links": [
            "94f653c24916a075",
            "1a6d2417d3c7f21d",
            "5f91cb6c24d8fdc8",
            "bc395de2f7c3ab2c",
            "664b9b0502536137",
            "3ab93ddcd20fce27",
            "069ba31222e8f95c",
            "44787d47e0304193",
            "f5d81c602697cefa",
            "9b59fe644870dcb3",
            "15d7b153c119e3f2",
            "5368c3e091387a63",
            "eb8e1e76143909a3",
            "182303bbbca545ed",
            "52073b4ca6822d37",
            "3581d958ebf81e57",
            "a26301e469fe615d",
            "d9ea79fabffefa3c",
            "a370932bd18df9e5",
            "b1773801680c5023",
            "170138b74311dd62",
            "4ce0a48bf5dffca8",
            "a7faaa6d526e6c9c",
            "34931257ff9e6898",
            "5d3d637e90a55a63",
            "de748f799ff1f766"
        ],
        "x": 315,
        "y": 40,
        "wires": [
            []
        ]
    },
    {
        "id": "f0969df77ec314c5",
        "type": "link in",
        "z": "cde16a2385b7b659",
        "name": "",
        "links": [
            "88bc4eddafd64975"
        ],
        "x": 75,
        "y": 320,
        "wires": [
            [
                "2fd1bfd3751282b1"
            ]
        ]
    },
    {
        "id": "e4a3677d4ac23dbc",
        "type": "link out",
        "z": "cde16a2385b7b659",
        "name": "",
        "links": [],
        "x": 1195,
        "y": 1900,
        "wires": []
    },
    {
        "id": "198455a3bf88c71d",
        "type": "switch",
        "z": "cde16a2385b7b659",
        "name": "",
        "property": "a",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "ax",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 590,
        "y": 1960,
        "wires": [
            [
                "8728010c65e83c6a"
            ],
            []
        ]
    },
    {
        "id": "90a59de8e36b246a",
        "type": "comment",
        "z": "cde16a2385b7b659",
        "name": "1 - Покупаем",
        "info": "",
        "x": 550,
        "y": 340,
        "wires": []
    },
    {
        "id": "80bf8a7a6832e3c9",
        "type": "comment",
        "z": "cde16a2385b7b659",
        "name": "2 - Купили. Держим",
        "info": "",
        "x": 580,
        "y": 700,
        "wires": []
    },
    {
        "id": "131a31d8bf64c193",
        "type": "comment",
        "z": "cde16a2385b7b659",
        "name": "3 - Продаём",
        "info": "",
        "x": 550,
        "y": 880,
        "wires": []
    },
    {
        "id": "2fd1bfd3751282b1",
        "type": "switch",
        "z": "cde16a2385b7b659",
        "name": "статус этажа",
        "property": "bot.currentfloor[7]",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "0",
                "vt": "num"
            },
            {
                "t": "eq",
                "v": "1",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "2",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "3",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "4",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 6,
        "x": 260,
        "y": 440,
        "wires": [
            [
                "1a6d2417d3c7f21d"
            ],
            [
                "2b08f7c09232320c"
            ],
            [
                "5b3d6aab5b78c5a1"
            ],
            [
                "eb8e1e76143909a3"
            ],
            [],
            [
                "eb8e1e76143909a3"
            ]
        ]
    },
    {
        "id": "651c9e34728cb9e2",
        "type": "comment",
        "z": "cde16a2385b7b659",
        "name": "0 - Свободно",
        "info": "",
        "x": 550,
        "y": 180,
        "wires": []
    },
    {
        "id": "177952c1a81f5f64",
        "type": "comment",
        "z": "cde16a2385b7b659",
        "name": "PARTIALLY_FILLED",
        "info": "",
        "x": 1750,
        "y": 800,
        "wires": []
    },
    {
        "id": "2b08f7c09232320c",
        "type": "switch",
        "z": "cde16a2385b7b659",
        "name": "проверка запрета на закуп",
        "property": "bot.zapret_na_zakup",
        "propertyType": "msg",
        "rules": [
            {
                "t": "false"
            },
            {
                "t": "true"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 600,
        "y": 380,
        "wires": [
            [
                "54c905f74a5664c3"
            ],
            [
                "73037b9545dbfc24"
            ]
        ]
    },
    {
        "id": "fa784def0c0a9960",
        "type": "comment",
        "z": "cde16a2385b7b659",
        "name": "NEW",
        "info": "",
        "x": 1550,
        "y": 560,
        "wires": []
    },
    {
        "id": "83603d2e7ed5a0de",
        "type": "switch",
        "z": "cde16a2385b7b659",
        "name": "статус ордера",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "NEW",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "PARTIALLY_FILLED",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "CANCELED",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "FILLED",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "REJECTED",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "EXPIRED",
                "vt": "str"
            },
            {
                "t": "null"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 7,
        "x": 1340,
        "y": 640,
        "wires": [
            [
                "afbb5f7ec1c6d799",
                "a370932bd18df9e5"
            ],
            [
                "15d7b153c119e3f2"
            ],
            [
                "b37d074bf610e532"
            ],
            [
                "7ad0ca694885a11c"
            ],
            [
                "15d7b153c119e3f2"
            ],
            [
                "15d7b153c119e3f2"
            ],
            [
                "15d7b153c119e3f2"
            ]
        ]
    },
    {
        "id": "73037b9545dbfc24",
        "type": "function",
        "z": "cde16a2385b7b659",
        "name": "prepare get order status",
        "func": "let orderid = msg.bot.currentfloor[8];\nmsg.moneta = msg.bot.settings.moneta;\nmsg.orderid = orderid;\n\nnode.status({ fill: \"green\", shape: \"ring\", text: orderid });\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 910,
        "y": 540,
        "wires": [
            [
                "e44ecea3c71aa8a9"
            ]
        ],
        "inputLabels": [
            "orderid"
        ],
        "outputLabels": [
            "status"
        ],
        "icon": "node-red-contrib-binance/binance.png"
    },
    {
        "id": "6c68cf1d1715d882",
        "type": "comment",
        "z": "cde16a2385b7b659",
        "name": "FILLED",
        "info": "",
        "x": 1550,
        "y": 680,
        "wires": []
    },
    {
        "id": "b2e1240db275b8d2",
        "type": "comment",
        "z": "cde16a2385b7b659",
        "name": "CANCELED",
        "info": "",
        "x": 1570,
        "y": 620,
        "wires": []
    },
    {
        "id": "39b7a927848a7634",
        "type": "function",
        "z": "cde16a2385b7b659",
        "name": "change floors",
        "func": "node.warn(\"cancel order \" + msg.bot.currentfloor[14]);\n//let tempfin = Number(Number(msg.bot.finance.baseinorders) - Number(msg.bot.currentfloor[14]) * Number(msg.bot.currentfloor[10]));\n//let tempfin2 = Number(Number(msg.bot.finance.basenal) + Number(msg.bot.currentfloor[14]) * Number(msg.bot.currentfloor[10]));\n\n//msg.bot.finance.baseinorders = tempfin.toFixed(msg.bot.settings.digitprice);\n//msg.bot.finance.basenal = tempfin2.toFixed(msg.bot.settings.digitprice);\n\n//if (msg.bot.finance.baseinorders == -0) { msg.bot.finance.baseinorders = 0; }\n//if (msg.bot.finance.basenal == -0) { msg.bot.finance.basenal = 0; }\n\nlet botname = msg.bot.settings.botname;\n\nlet data = \"Ордер на покупку отменен, ID - \" + msg.bot.currentfloor[8];\nconst tilog = global.get('tilog')(botname, data);\ntilog;\n\nlet currentfloor = msg.bot.currentfloor;\ncurrentfloor[7] = 0;\ncurrentfloor[8] = 0;\ncurrentfloor[10] = 0;\ncurrentfloor[14] = 0;\n\nmsg.bot.floors[currentfloor[0] - 1] = currentfloor;\n\nnode.status({ fill: \"green\", shape: \"ring\"});\n\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1740,
        "y": 320,
        "wires": [
            [
                "34931257ff9e6898"
            ]
        ]
    },
    {
        "id": "9c7643e6f1cc7897",
        "type": "comment",
        "z": "cde16a2385b7b659",
        "name": "NEW",
        "info": "",
        "x": 1590,
        "y": 220,
        "wires": []
    },
    {
        "id": "c9880b05a0777d84",
        "type": "switch",
        "z": "cde16a2385b7b659",
        "name": "статус ордера",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "NEW",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "PARTIALLY_FILLED",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "CANCELED",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "FILLED",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "REJECTED",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "EXPIRED",
                "vt": "str"
            },
            {
                "t": "null"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 7,
        "x": 1340,
        "y": 360,
        "wires": [
            [
                "bc395de2f7c3ab2c"
            ],
            [
                "bc395de2f7c3ab2c"
            ],
            [
                "39b7a927848a7634"
            ],
            [
                "be1a57d609e724b9"
            ],
            [
                "bc395de2f7c3ab2c"
            ],
            [
                "bc395de2f7c3ab2c"
            ],
            [
                "bc395de2f7c3ab2c"
            ]
        ]
    },
    {
        "id": "54c905f74a5664c3",
        "type": "function",
        "z": "cde16a2385b7b659",
        "name": "prepare get order status",
        "func": "let orderid = msg.bot.currentfloor[8];\n\nmsg.moneta = msg.bot.settings.moneta;\nmsg.orderid = orderid;\n\nnode.status({ fill: \"green\", shape: \"ring\", text: orderid });\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 910,
        "y": 360,
        "wires": [
            [
                "9f30e47d98ee1572"
            ]
        ],
        "inputLabels": [
            "orderid"
        ],
        "outputLabels": [
            "status"
        ],
        "icon": "node-red-contrib-binance/binance.png"
    },
    {
        "id": "48cc6b8d0906e933",
        "type": "comment",
        "z": "cde16a2385b7b659",
        "name": "FILLED",
        "info": "",
        "x": 1550,
        "y": 380,
        "wires": []
    },
    {
        "id": "282f8c58ac721049",
        "type": "comment",
        "z": "cde16a2385b7b659",
        "name": "CANCELED",
        "info": "",
        "x": 1570,
        "y": 320,
        "wires": []
    },
    {
        "id": "be1a57d609e724b9",
        "type": "function",
        "z": "cde16a2385b7b659",
        "name": "change floors",
        "func": "node.warn(\"filled order \" + msg.bot.currentfloor[14]);\n//let tempfin = Number(Number(msg.bot.finance.baseinorders) - Number(msg.bot.currentfloor[14]) * Number(msg.bot.currentfloor[10]));\n//\n//let tempfin2 = Number(Number(msg.bot.finance.quotanal) + Number(msg.bot.currentfloor[14]));\n//\n//msg.bot.finance.baseinorders = tempfin.toFixed(msg.bot.settings.digitprice);\n//msg.bot.finance.quotanal = tempfin2.toFixed(msg.bot.settings.digitq);\n//\n//if (msg.bot.finance.baseinorders == -0) { msg.bot.finance.baseinorders = 0; }\n//if (msg.bot.finance.basenal == -0) { msg.bot.finance.basenal = 0; }\n\nlet currentfloor = msg.bot.currentfloor;\ncurrentfloor[7] = 2;\n\nmsg.bot.floors[currentfloor[0] - 1] = currentfloor;\n\nlet data = \"Ордер на покупку исполнен, ID - \" + msg.bot.currentfloor[8];\nconst tilog = global.get('tilog')(msg.bot.settings.botname, data);\ntilog;\n\nnode.status({ fill: \"green\", shape: \"ring\"});\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1740,
        "y": 400,
        "wires": [
            [
                "5d3d637e90a55a63"
            ]
        ]
    },
    {
        "id": "bc395de2f7c3ab2c",
        "type": "link out",
        "z": "cde16a2385b7b659",
        "name": "",
        "links": [
            "8c8e6e2242d53271"
        ],
        "x": 1515,
        "y": 220,
        "wires": []
    },
    {
        "id": "134cd8d09d634aa0",
        "type": "comment",
        "z": "cde16a2385b7b659",
        "name": "PARTIALLY_FILLED",
        "info": "",
        "x": 1750,
        "y": 220,
        "wires": []
    },
    {
        "id": "edcc294402dc7515",
        "type": "comment",
        "z": "cde16a2385b7b659",
        "name": "null",
        "info": "",
        "x": 1910,
        "y": 220,
        "wires": []
    },
    {
        "id": "eb8e1e76143909a3",
        "type": "link out",
        "z": "cde16a2385b7b659",
        "name": "",
        "links": [
            "8c8e6e2242d53271"
        ],
        "x": 495,
        "y": 920,
        "wires": []
    },
    {
        "id": "15d7b153c119e3f2",
        "type": "link out",
        "z": "cde16a2385b7b659",
        "name": "",
        "links": [
            "8c8e6e2242d53271"
        ],
        "x": 1515,
        "y": 800,
        "wires": []
    },
    {
        "id": "9f30e47d98ee1572",
        "type": "function",
        "z": "cde16a2385b7b659",
        "name": "get_order_status",
        "func": "let moneta = msg.moneta;\nlet orderid = Number(msg.orderid);\n\nconst get_order_status = global.get('get_order_status')(moneta, orderid);\n\nget_order_status.then(result => {\n\n    msg.payload = result;\n    node.status({ fill: \"green\", shape: \"dot\" });\n    node.send(msg);\n\n}).catch(error => {\n\n    node.status({ fill: \"red\", shape: \"dot\" });\n    node.error(error);\n});",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1150,
        "y": 360,
        "wires": [
            [
                "c9880b05a0777d84"
            ]
        ]
    },
    {
        "id": "53a6b0eb792469ae",
        "type": "comment",
        "z": "cde16a2385b7b659",
        "name": "null",
        "info": "",
        "x": 1590,
        "y": 800,
        "wires": []
    },
    {
        "id": "659a006a5418d16e",
        "type": "comment",
        "z": "cde16a2385b7b659",
        "name": "запрещено закупать",
        "info": "",
        "x": 700,
        "y": 480,
        "wires": []
    },
    {
        "id": "e44ecea3c71aa8a9",
        "type": "function",
        "z": "cde16a2385b7b659",
        "name": "get_order_status",
        "func": "let moneta = msg.moneta;\nlet orderid = Number(msg.orderid);\n\nconst get_order_status = global.get('get_order_status')(moneta, orderid);\n\nget_order_status.then(result => {\n\n    msg.payload = result;\n\n    node.status({ fill: \"green\", shape: \"dot\" });\n    node.send(msg);\n\n}).catch(error => {\n\n    node.status({ fill: \"red\", shape: \"dot\" });\n    node.error(error);\n});",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1150,
        "y": 540,
        "wires": [
            [
                "83603d2e7ed5a0de"
            ]
        ]
    },
    {
        "id": "b37d074bf610e532",
        "type": "function",
        "z": "cde16a2385b7b659",
        "name": "change floors",
        "func": "node.warn(\"cancel order \" + msg.bot.currentfloor[14]);\n//let tempfin = Number(Number(msg.bot.finance.baseinorders) - Number(msg.bot.currentfloor[14]) * Number(msg.bot.currentfloor[10]));\n//let tempfin2 = Number(Number(msg.bot.finance.basenal) + Number(msg.bot.currentfloor[14]) * Number(msg.bot.currentfloor[10]));\n//\n//msg.bot.finance.baseinorders = tempfin.toFixed(msg.bot.settings.digitprice);\n//msg.bot.finance.basenal = tempfin2.toFixed(msg.bot.settings.digitprice);\n//\n//if (msg.bot.finance.baseinorders == -0) { msg.bot.finance.baseinorders = 0; }\n//if (msg.bot.finance.basenal == -0) { msg.bot.finance.basenal = 0; }\n\nlet botname = msg.bot.settings.botname;\n\nlet data = \"Ордер на покупку отменен, ID - \" + msg.bot.currentfloor[8];\nconst tilog = global.get('tilog')(botname, data);\ntilog;\n\nlet currentfloor = msg.bot.currentfloor;\ncurrentfloor[7] = 0;\ncurrentfloor[8] = 0;\ncurrentfloor[10] = 0;\ncurrentfloor[14] = 0;\n\nmsg.bot.floors[currentfloor[0] - 1] = currentfloor;\n\nnode.status({ fill: \"green\", shape: \"ring\"});\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1740,
        "y": 620,
        "wires": [
            [
                "4ce0a48bf5dffca8"
            ]
        ]
    },
    {
        "id": "7ad0ca694885a11c",
        "type": "function",
        "z": "cde16a2385b7b659",
        "name": "change floors",
        "func": "\nnode.warn(\"filled order \" + msg.bot.currentfloor[14]);\n//let tempfin = Number(Number(msg.bot.finance.baseinorders) - Number(msg.bot.currentfloor[14]) * Number(msg.bot.currentfloor[10]));\n//\n//let tempfin2 = Number(Number(msg.bot.finance.quotanal) + Number(msg.bot.currentfloor[14]));\n//\n//msg.bot.finance.baseinorders = tempfin.toFixed(msg.bot.settings.digitprice);\n//msg.bot.finance.quotanal = tempfin2.toFixed(msg.bot.settings.digitq);\n//\n//if (msg.bot.finance.baseinorders == -0) { msg.bot.finance.baseinorders = 0; }\n//if (msg.bot.finance.basenal == -0) { msg.bot.finance.basenal = 0; }\n\nlet currentfloor = msg.bot.currentfloor;\ncurrentfloor[7] = 2;\n\nmsg.bot.floors[currentfloor[0] - 1] = currentfloor;\n\nlet data = \"Ордер на покупку исполнен, ID - \" + msg.bot.currentfloor[8];\nconst tilog = global.get('tilog')(msg.bot.settings.botname, data);\ntilog;\n\n\nnode.status({ fill: \"green\", shape: \"ring\"});\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1740,
        "y": 680,
        "wires": [
            [
                "a7faaa6d526e6c9c"
            ]
        ]
    },
    {
        "id": "1a6d2417d3c7f21d",
        "type": "link out",
        "z": "cde16a2385b7b659",
        "name": "",
        "links": [
            "8c8e6e2242d53271"
        ],
        "x": 495,
        "y": 220,
        "wires": []
    },
    {
        "id": "e940ea9779e7f564",
        "type": "subflow:cde16a2385b7b659",
        "z": "5df15275.2888ec",
        "g": "d4a5f2307ef8b222",
        "name": "",
        "env": [],
        "x": 1650,
        "y": 1620,
        "wires": [
            [
                "43b759ee534eaeb9"
            ]
        ]
    },
    {
        "id": "6bd09445ea4cfa5d",
        "type": "comment",
        "z": "654ea140.2275a8",
        "g": "7a59f38fd450bc7d",
        "name": "1 - Покупаем",
        "info": "",
        "x": 590,
        "y": 1780,
        "wires": []
    },
    {
        "id": "8ea14c0c4254702d",
        "type": "comment",
        "z": "654ea140.2275a8",
        "g": "7a59f38fd450bc7d",
        "name": "2 - Купили. Держим",
        "info": "",
        "x": 620,
        "y": 2060,
        "wires": []
    },
    {
        "id": "1c1561bf79d84f5e",
        "type": "comment",
        "z": "654ea140.2275a8",
        "g": "7a59f38fd450bc7d",
        "name": "3 - Продаём",
        "info": "",
        "x": 590,
        "y": 2320,
        "wires": []
    },
    {
        "id": "7a89f79851e3fc19",
        "type": "switch",
        "z": "654ea140.2275a8",
        "g": "7a59f38fd450bc7d",
        "name": "проверка запрета на закуп",
        "property": "bot.zapret_na_zakup",
        "propertyType": "msg",
        "rules": [
            {
                "t": "false"
            },
            {
                "t": "true"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 640,
        "y": 1660,
        "wires": [
            [
                "3df425e238c0d1da"
            ],
            [
                "0d8119922d0693a3",
                "04f838f4dcf92c27"
            ]
        ]
    },
    {
        "id": "96e86140a0d370e4",
        "type": "comment",
        "z": "654ea140.2275a8",
        "g": "7a59f38fd450bc7d",
        "name": "запрещено закупать",
        "info": "",
        "x": 940,
        "y": 1660,
        "wires": []
    },
    {
        "id": "cdbdd8e65652e3b2",
        "type": "comment",
        "z": "654ea140.2275a8",
        "g": "7a59f38fd450bc7d",
        "name": "0 - Свободно",
        "info": "",
        "x": 590,
        "y": 1620,
        "wires": []
    },
    {
        "id": "a012b4f4fc85f98c",
        "type": "comment",
        "z": "654ea140.2275a8",
        "g": "7a59f38fd450bc7d",
        "name": "PARTIALLY_FILLED",
        "info": "",
        "x": 1670,
        "y": 2180,
        "wires": []
    },
    {
        "id": "c6c39dcb7d895ddf",
        "type": "switch",
        "z": "654ea140.2275a8",
        "g": "7a59f38fd450bc7d",
        "name": "проверка запрета на закуп",
        "property": "bot.zapret_na_zakup",
        "propertyType": "msg",
        "rules": [
            {
                "t": "false"
            },
            {
                "t": "true"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 640,
        "y": 1820,
        "wires": [
            [
                "1372785db49fe674"
            ],
            [
                "f3d40cd94bf7d8a0"
            ]
        ]
    },
    {
        "id": "a90ab6ee4120c6a2",
        "type": "comment",
        "z": "654ea140.2275a8",
        "g": "7a59f38fd450bc7d",
        "name": "NEW",
        "info": "",
        "x": 1590,
        "y": 2000,
        "wires": []
    },
    {
        "id": "f71d1ca52f7148c9",
        "type": "switch",
        "z": "654ea140.2275a8",
        "g": "7a59f38fd450bc7d",
        "name": "статус ордера",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "NEW",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "PARTIALLY_FILLED",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "CANCELED",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "FILLED",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "REJECTED",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "EXPIRED",
                "vt": "str"
            },
            {
                "t": "null"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 7,
        "x": 1380,
        "y": 2080,
        "wires": [
            [
                "f6755d5ca47d8a1c"
            ],
            [
                "d2965d20fb057ea3"
            ],
            [
                "77930cad44b21fb9"
            ],
            [
                "bae47583a4cbccac"
            ],
            [
                "04e23e81161e4a2f"
            ],
            [
                "04e23e81161e4a2f"
            ],
            [
                "04e23e81161e4a2f"
            ]
        ]
    },
    {
        "id": "f3d40cd94bf7d8a0",
        "type": "function",
        "z": "654ea140.2275a8",
        "g": "7a59f38fd450bc7d",
        "name": "prepare get order status",
        "func": "//<трекер<\nlet trackname = \"track-\" + msg.botname;\nlet track = flow.get(trackname);\nlet start_node_time = new Date().getTime();\nlet steptitle = node.name;\n\nlet laststep = track[track.length - 1];\nlet last_node_end_time = laststep.end_node_time;\n//>трекер>\nlet orderid = msg.bot.currentfloor[8];\nmsg.moneta = msg.bot.settings.moneta;\nmsg.orderid = orderid;\n\n//msg.payload = [];\n//msg.topic = \"orders-status-\" + msg.bot.settings.userid + \":\" + moneta + \":\" + orderid;\n\n//>трекер>\nlet end_node_time = new Date().getTime();\nlet duration = end_node_time - start_node_time;\nlet duration_step = end_node_time - last_node_end_time;\ntrack.push({\n    \"steptitle\": steptitle,\n    \"start_node_time\": start_node_time,\n    \"end_node_time\": end_node_time,\n    \"duration_node\": duration,\n    \"duration_step\": duration_step\n});\nflow.set(trackname, track);\n//>трекер>\nnode.status({ fill: \"green\", shape: \"ring\", text: orderid });\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 950,
        "y": 1980,
        "wires": [
            [
                "51d6f38d11893094"
            ]
        ],
        "inputLabels": [
            "orderid"
        ],
        "outputLabels": [
            "status"
        ],
        "icon": "node-red-contrib-binance/binance.png"
    },
    {
        "id": "2cea6a146451bd26",
        "type": "comment",
        "z": "654ea140.2275a8",
        "g": "7a59f38fd450bc7d",
        "name": "FILLED",
        "info": "",
        "x": 1590,
        "y": 2120,
        "wires": []
    },
    {
        "id": "3889576055e4c23d",
        "type": "comment",
        "z": "654ea140.2275a8",
        "g": "7a59f38fd450bc7d",
        "name": "CANCELED",
        "info": "",
        "x": 1610,
        "y": 2060,
        "wires": []
    },
    {
        "id": "0fb624218c2007e5",
        "type": "function",
        "z": "654ea140.2275a8",
        "g": "7a59f38fd450bc7d",
        "name": "change floors, finance ",
        "func": "//<трекер<\nlet trackname = \"track-\" + msg.botname;\nlet track = flow.get(trackname);\nlet start_node_time = new Date().getTime();\nlet steptitle = node.name;\n\nlet laststep = track[track.length - 1];\nlet last_node_end_time = laststep.end_node_time;\n//>трекер>\nnode.warn(\"cancel order \" + msg.bot.currentfloor[14]);\nlet tempfin = Number(Number(msg.bot.finance.baseinorders) - Number(msg.bot.currentfloor[14]) * Number(msg.bot.currentfloor[10]));\nlet tempfin2 = Number(Number(msg.bot.finance.basenal) + Number(msg.bot.currentfloor[14]) * Number(msg.bot.currentfloor[10]));\n\nmsg.bot.finance.baseinorders = tempfin.toFixed(msg.bot.settings.digitprice);\nmsg.bot.finance.basenal = tempfin2.toFixed(msg.bot.settings.digitprice);\n\nif (msg.bot.finance.baseinorders == -0) { msg.bot.finance.baseinorders = 0; }\nif (msg.bot.finance.basenal == -0) { msg.bot.finance.basenal = 0; }\n\nlet botname = msg.bot.settings.botname;\n\nlet data = \"Ордер на покупку отменен, ID - \" + msg.bot.currentfloor[8];\nconst tilog = global.get('tilog')(botname, data);\ntilog;\n\nlet currentfloor = msg.bot.currentfloor;\ncurrentfloor[7] = 0;\ncurrentfloor[8] = 0;\ncurrentfloor[10] = 0;\ncurrentfloor[14] = 0;\n\nmsg.bot.floors[currentfloor[0] - 1] = currentfloor;\n\n//>трекер>\nlet end_node_time = new Date().getTime();\nlet duration = end_node_time - start_node_time;\nlet duration_step = end_node_time - last_node_end_time;\ntrack.push({\n    \"steptitle\": steptitle,\n    \"start_node_time\": start_node_time,\n    \"end_node_time\": end_node_time,\n    \"duration_node\": duration,\n    \"duration_step\": duration_step\n});\nflow.set(trackname, track);\n//>трекер>\nnode.status({ fill: \"green\", shape: \"ring\", text: start_node_time });\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1800,
        "y": 1760,
        "wires": [
            [
                "f554d352967975a2"
            ]
        ]
    },
    {
        "id": "fe4f4c121afe87c6",
        "type": "comment",
        "z": "654ea140.2275a8",
        "g": "7a59f38fd450bc7d",
        "name": "NEW",
        "info": "",
        "x": 1630,
        "y": 1700,
        "wires": []
    },
    {
        "id": "32b6aaeab9305494",
        "type": "switch",
        "z": "654ea140.2275a8",
        "g": "7a59f38fd450bc7d",
        "name": "статус ордера",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "NEW",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "PARTIALLY_FILLED",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "CANCELED",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "FILLED",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "REJECTED",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "EXPIRED",
                "vt": "str"
            },
            {
                "t": "null"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 7,
        "x": 1380,
        "y": 1800,
        "wires": [
            [
                "072c1d3a07edfbfb"
            ],
            [
                "072c1d3a07edfbfb"
            ],
            [
                "0fb624218c2007e5"
            ],
            [
                "55bc90e605e1cfc4"
            ],
            [],
            [],
            [
                "072c1d3a07edfbfb"
            ]
        ]
    },
    {
        "id": "1372785db49fe674",
        "type": "function",
        "z": "654ea140.2275a8",
        "g": "7a59f38fd450bc7d",
        "name": "prepare get order status",
        "func": "//<трекер<\nlet trackname = \"track-\" + msg.botname;\nlet track = flow.get(trackname);\nlet start_node_time = new Date().getTime();\nlet steptitle = node.name;\n\nlet laststep = track[track.length - 1];\nlet last_node_end_time = laststep.end_node_time;\n//>трекер>\nlet orderid = msg.bot.currentfloor[8];\n\nmsg.moneta = msg.bot.settings.moneta;\nmsg.orderid = orderid;\n\n//msg.payload = [];\n//msg.topic = \"orders-status-\" + msg.bot.settings.userid + \":\" + moneta + \":\" + orderid;\n\n//>трекер>\nlet end_node_time = new Date().getTime();\nlet duration = end_node_time - start_node_time;\nlet duration_step = end_node_time - last_node_end_time;\ntrack.push({\n    \"steptitle\": steptitle,\n    \"start_node_time\": start_node_time,\n    \"end_node_time\": end_node_time,\n    \"duration_node\": duration,\n    \"duration_step\": duration_step\n});\nflow.set(trackname, track);\n//>трекер>\nnode.status({ fill: \"green\", shape: \"ring\", text: orderid });\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 950,
        "y": 1800,
        "wires": [
            [
                "e850dfccd699dcdb"
            ]
        ],
        "inputLabels": [
            "orderid"
        ],
        "outputLabels": [
            "status"
        ],
        "icon": "node-red-contrib-binance/binance.png"
    },
    {
        "id": "f554d352967975a2",
        "type": "function",
        "z": "654ea140.2275a8",
        "g": "7a59f38fd450bc7d",
        "name": "update bot floors, finance",
        "func": "//<трекер<\nlet trackname = \"track-\" + msg.botname;\nlet track = flow.get(trackname);\nlet start_node_time = new Date().getTime();\nlet steptitle = node.name;\n\nlet laststep = track[track.length - 1];\nlet last_node_end_time = laststep.end_node_time;\n//>трекер>\nlet volname = msg.bot.settings.userid + \"-bots:\" + msg.botname + \":data\";\nlet botdata = {\n    \"finance\": JSON.stringify(msg.bot.finance),\n    \"floors\": JSON.stringify(msg.bot.floors),\n    \"sales\": JSON.stringify(msg.bot.sales)\n\n};\n\nconst upd = global.get('setbot_data')(volname, botdata);\n\nupd.then(upd => {\n\n    msg.payload = upd;\n\n    //>трекер>\n    let end_node_time = new Date().getTime();\n    let duration = end_node_time - start_node_time;\n    let duration_step = end_node_time - last_node_end_time;\n    track.push({\n        \"steptitle\": steptitle,\n        \"start_node_time\": start_node_time,\n        \"end_node_time\": end_node_time,\n        \"duration_node\": duration,\n        \"duration_step\": duration_step\n    });\n    flow.set(trackname, track);\n    //>трекер>\n    node.status({ fill: \"green\", shape: \"ring\", text: start_node_time });\n\n    node.send(msg);\n\n}).catch(error => {\n\n    //>трекер>\n    let end_node_time = new Date().getTime();\n    let duration = end_node_time - start_node_time;\n    let duration_step = end_node_time - last_node_end_time;\n    track.push({\n        \"steptitle\": steptitle + \"-faile\",\n        \"start_node_time\": start_node_time,\n        \"end_node_time\": end_node_time,\n        \"duration\": duration,\n        \"duration_step\": duration_step,\n        \"error\": error\n    });\n    flow.set(trackname, track);\n    //>трекер>\n    node.status({ fill: \"red\", shape: \"ring\", text: \"error\" });\n    node.error(error);\n});",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2050,
        "y": 1760,
        "wires": [
            [
                "84de70195e8eeec9"
            ]
        ],
        "icon": "font-awesome/fa-bolt"
    },
    {
        "id": "45022e6cd5d6f461",
        "type": "comment",
        "z": "654ea140.2275a8",
        "g": "7a59f38fd450bc7d",
        "name": "FILLED",
        "info": "",
        "x": 1590,
        "y": 1820,
        "wires": []
    },
    {
        "id": "04c3a69de7fcc892",
        "type": "comment",
        "z": "654ea140.2275a8",
        "g": "7a59f38fd450bc7d",
        "name": "CANCELED",
        "info": "",
        "x": 1610,
        "y": 1760,
        "wires": []
    },
    {
        "id": "55bc90e605e1cfc4",
        "type": "function",
        "z": "654ea140.2275a8",
        "g": "7a59f38fd450bc7d",
        "name": "change floors, finance ",
        "func": "//<трекер<\nlet trackname = \"track-\" + msg.botname;\nlet track = flow.get(trackname);\nlet start_node_time = new Date().getTime();\nlet steptitle = node.name;\n\nlet laststep = track[track.length - 1];\nlet last_node_end_time = laststep.end_node_time;\n//>трекер>\nnode.warn(\"filled order \" + msg.bot.currentfloor[14]);\nlet tempfin = Number(Number(msg.bot.finance.baseinorders) - Number(msg.bot.currentfloor[14]) * Number(msg.bot.currentfloor[10]));\n\nlet tempfin2 = Number(Number(msg.bot.finance.quotanal) + Number(msg.bot.currentfloor[14]));\n\nmsg.bot.finance.baseinorders = tempfin.toFixed(msg.bot.settings.digitprice);\nmsg.bot.finance.quotanal = tempfin2.toFixed(msg.bot.settings.digitq);\n\nif (msg.bot.finance.baseinorders == -0) { msg.bot.finance.baseinorders = 0; }\nif (msg.bot.finance.basenal == -0) { msg.bot.finance.basenal = 0; }\n\nlet currentfloor = msg.bot.currentfloor;\ncurrentfloor[7] = 2;\n//currentfloor[10] = Number(msg.bot.currentfloor[14]) * Number(msg.bot.currentfloor[3]);\n\n\nmsg.bot.floors[currentfloor[0] - 1] = currentfloor;\n\nlet data = \"Ордер на покупку исполнен, ID - \" + msg.bot.currentfloor[8];\nconst tilog = global.get('tilog')(msg.bot.settings.botname, data);\ntilog;\n\n//>трекер>\nlet end_node_time = new Date().getTime();\nlet duration = end_node_time - start_node_time;\nlet duration_step = end_node_time - last_node_end_time;\ntrack.push({\n    \"steptitle\": steptitle,\n    \"start_node_time\": start_node_time,\n    \"end_node_time\": end_node_time,\n    \"duration_node\": duration,\n    \"duration_step\": duration_step\n});\nflow.set(trackname, track);\n//>трекер>\nnode.status({ fill: \"green\", shape: \"ring\", text: start_node_time });\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1800,
        "y": 1840,
        "wires": [
            [
                "d2cfd33757bb3510"
            ]
        ]
    },
    {
        "id": "d2cfd33757bb3510",
        "type": "function",
        "z": "654ea140.2275a8",
        "g": "7a59f38fd450bc7d",
        "name": "update bot floors, finance",
        "func": "//<трекер<\nlet trackname = \"track-\" + msg.botname;\nlet track = flow.get(trackname);\n    let start_node_time = new Date().getTime();\n    let steptitle = node.name;\n\n    let laststep = track[track.length-1];\n    let last_node_end_time = laststep.end_node_time;\n//>трекер>\nlet volname = msg.bot.settings.userid+\"-bots:\"+msg.botname+\":data\";\nlet botdata = {\n    \"finance\":JSON.stringify(msg.bot.finance),\n    \"floors\":JSON.stringify(msg.bot.floors),\n    \"sales\":JSON.stringify(msg.bot.sales)\n    \n};\n\nconst upd = global.get('setbot_data')(volname, botdata);\n\nupd.then(upd => {\n    \n    msg.payload = upd;\n    \n    //>трекер>\n        let end_node_time = new Date().getTime();\n        let duration = end_node_time - start_node_time;\n        let duration_step = end_node_time - last_node_end_time;\n        track.push({\n            \"steptitle\": steptitle,\n            \"start_node_time\": start_node_time,\n            \"end_node_time\": end_node_time,\n            \"duration_node\": duration,\n            \"duration_step\": duration_step\n        });\n    flow.set(trackname, track);\n    //>трекер>\nnode.status({fill: \"green\", shape: \"ring\", text: start_node_time});\n    \n    node.send(msg);\n\n}).catch(error => {\n    \n    //>трекер>\n        let end_node_time = new Date().getTime();\n        let duration = end_node_time - start_node_time;\n        let duration_step = end_node_time - last_node_end_time;\n        track.push({\n            \"steptitle\": steptitle+\"-faile\",\n            \"start_node_time\": start_node_time,\n            \"end_node_time\": end_node_time,\n            \"duration\": duration,\n            \"duration_step\": duration_step,\n            \"error\": error\n        });\n    flow.set(trackname, track);\n    //>трекер>\n    node.status({fill: \"red\", shape: \"ring\", text: \"error\"});\n    node.error(error);\n});",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2050,
        "y": 1840,
        "wires": [
            [
                "197f2eae23350bde"
            ]
        ],
        "icon": "font-awesome/fa-bolt"
    },
    {
        "id": "0c611d59b0b33741",
        "type": "comment",
        "z": "654ea140.2275a8",
        "g": "7a59f38fd450bc7d",
        "name": "PARTIALLY_FILLED",
        "info": "",
        "x": 1790,
        "y": 1700,
        "wires": []
    },
    {
        "id": "7fc1d6c34498924f",
        "type": "comment",
        "z": "654ea140.2275a8",
        "g": "7a59f38fd450bc7d",
        "name": "null",
        "info": "",
        "x": 1970,
        "y": 1700,
        "wires": []
    },
    {
        "id": "7f47b2ddd7c4d760",
        "type": "function",
        "z": "654ea140.2275a8",
        "g": "7a59f38fd450bc7d",
        "name": "check price for sale start",
        "func": "if (msg.bot.status.currentprice >= msg.bot.currentfloor[5]){\n    msg.bot.currentfloor[7] = 3;\n    \n\n    return [null,msg];\n    \n} else {\n    return [msg,null];\n}",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 630,
        "y": 2180,
        "wires": [
            [
                "8af930a1b87f39c6",
                "97c944361390ef7f"
            ],
            [
                "20cd1e0df469fde7"
            ]
        ]
    },
    {
        "id": "20cd1e0df469fde7",
        "type": "function",
        "z": "654ea140.2275a8",
        "g": "7a59f38fd450bc7d",
        "name": "setbot_ttp_q",
        "func": "//<трекер<\nlet trackname = \"track-\" + msg.botname;\nlet track = flow.get(trackname);\nlet start_node_time = new Date().getTime();\nlet steptitle = node.name;\n\nlet laststep = track[track.length - 1];\nlet last_node_end_time = laststep.end_node_time;\n//>трекер>\n\n\nlet currentfloor = msg.bot.currentfloor;\nlet guid = global.get('guid');\nlet botname = msg.bot.settings.botname;\n\nmsg.topic = botname;\nmsg.payload = JSON.stringify(currentfloor[14]);\n\nconst upd = global.get('set_ttp_q')(msg.topic, msg.payload);\n\nupd.then(upd => {\n\n    //>трекер>\n        let end_node_time = new Date().getTime();\n        let duration = end_node_time - start_node_time;\n        let duration_step = end_node_time - last_node_end_time;\n        track.push({\n            \"steptitle\": steptitle,\n            \"start_node_time\": start_node_time,\n            \"end_node_time\": end_node_time,\n            \"duration_node\": duration,\n            \"duration_step\": duration_step\n        });\n    flow.set(trackname, track);\n    //>трекер>\n    node.status({fill:\"green\",shape:\"dot\"});\n    node.send(msg);\n\n}).catch(error => {\n\n    //>трекер>\n        let end_node_time = new Date().getTime();\n        let duration = end_node_time - start_node_time;\n        let duration_step = end_node_time - last_node_end_time;\n        track.push({\n            \"steptitle\": steptitle+\"-faile\",\n            \"start_node_time\": start_node_time,\n            \"end_node_time\": end_node_time,\n            \"duration\": duration,\n            \"duration_step\": duration_step,\n            \"error\": error\n        });\n    flow.set(trackname, track);\n    //>трекер>\n    node.status({fill:\"red\",shape:\"dot\"}); \n    node.error(error);\n    node.send(msg);\n});",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 870,
        "y": 2200,
        "wires": [
            [
                "d07e29cc7696cb8c"
            ]
        ],
        "icon": "font-awesome/fa-bolt"
    },
    {
        "id": "d07e29cc7696cb8c",
        "type": "function",
        "z": "654ea140.2275a8",
        "g": "7a59f38fd450bc7d",
        "name": "change floors, finance, ttp",
        "func": "//<трекер<\nlet trackname = \"track-\" + msg.botname;\nlet track = flow.get(trackname);\nlet start_node_time = new Date().getTime();\nlet steptitle = node.name;\n\nlet laststep = track[track.length - 1];\nlet last_node_end_time = laststep.end_node_time;\n//>трекер>\nnode.warn(\"start ttp on floor \"+msg.bot.currentfloor[0]);     \n\nlet tempfin = Number(Number(msg.bot.finance.quotainorders) + Number(msg.bot.currentfloor[14]));\n\nlet tempfin2 = Number(Number(msg.bot.finance.quotanal) - Number(msg.bot.currentfloor[14]));\n\nmsg.bot.finance.quotainorders = tempfin.toFixed(msg.bot.settings.digitprice);\nmsg.bot.finance.quotanal = tempfin2.toFixed(msg.bot.settings.digitq);\n\nif (msg.bot.finance.baseinorders == -0) {msg.bot.finance.baseinorders = 0;}\nif (msg.bot.finance.basenal == -0) {msg.bot.finance.basenal = 0;}\n\nlet currentfloor = msg.bot.currentfloor;\ncurrentfloor[7] = 3;\n\nmsg.bot.floors[currentfloor[0]-1] = currentfloor;\n\n//>трекер>\n    let end_node_time = new Date().getTime();\n    let duration = end_node_time - start_node_time;\n    let duration_step = end_node_time - last_node_end_time;\n    track.push({\n        \"steptitle\": steptitle,\n        \"start_node_time\": start_node_time,\n        \"end_node_time\": end_node_time,\n        \"duration_node\": duration,\n        \"duration_step\": duration_step\n    });\nflow.set(trackname, track);\n//>трекер>\nnode.status({fill: \"green\", shape: \"ring\", text: start_node_time});\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1090,
        "y": 2200,
        "wires": [
            [
                "e2f50e5dd6bd8293"
            ]
        ]
    },
    {
        "id": "e2f50e5dd6bd8293",
        "type": "function",
        "z": "654ea140.2275a8",
        "g": "7a59f38fd450bc7d",
        "name": "setbot_data",
        "func": "//<трекер<\nlet trackname = \"track-\" + msg.botname;\nlet track = flow.get(trackname);\n    let start_node_time = new Date().getTime();\n    let steptitle = node.name;\n\n    let laststep = track[track.length-1];\n    let last_node_end_time = laststep.end_node_time;\n//>трекер>\nlet volname = msg.bot.settings.userid+\"-bots:\"+msg.botname+\":data\";\nlet botdata = {\n    \"finance\":JSON.stringify(msg.bot.finance),\n    \"floors\":JSON.stringify(msg.bot.floors),\n    \"sales\":JSON.stringify(msg.bot.sales)\n    \n};\n\nconst upd = global.get('setbot_data')(volname, botdata);\n\nupd.then(upd => {\n    \n    msg.payload = upd;\n    \n    //>трекер>\n        let end_node_time = new Date().getTime();\n        let duration = end_node_time - start_node_time;\n        let duration_step = end_node_time - last_node_end_time;\n        track.push({\n            \"steptitle\": steptitle,\n            \"start_node_time\": start_node_time,\n            \"end_node_time\": end_node_time,\n            \"duration_node\": duration,\n            \"duration_step\": duration_step\n        });\n    flow.set(trackname, track);\n    //>трекер>\n    node.status({fill: \"green\", shape: \"ring\", text: start_node_time});\n    \n    node.send(msg);\n\n}).catch(error => {\n    \n    //>трекер>\n        let end_node_time = new Date().getTime();\n        let duration = end_node_time - start_node_time;\n        let duration_step = end_node_time - last_node_end_time;\n        track.push({\n            \"steptitle\": steptitle+\"-faile\",\n            \"start_node_time\": start_node_time,\n            \"end_node_time\": end_node_time,\n            \"duration\": duration,\n            \"duration_step\": duration_step,\n            \"error\": error\n        });\n    flow.set(trackname, track);\n    //>трекер>\n    node.status({fill: \"red\", shape: \"ring\", text: \"error\"});\n    node.error(error);\n});",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1050,
        "y": 2260,
        "wires": [
            [
                "d108b7f4de207c72"
            ]
        ],
        "icon": "font-awesome/fa-bolt"
    },
    {
        "id": "3df425e238c0d1da",
        "type": "function",
        "z": "654ea140.2275a8",
        "g": "7a59f38fd450bc7d",
        "name": "orderexec setbuy",
        "func": "//<трекер<\nlet trackname = \"track-\" + msg.botname;\nlet track = flow.get(trackname);\nlet start_node_time = new Date().getTime();\nlet steptitle = node.name;\n\nlet laststep = track[track.length - 1];\nlet last_node_end_time = laststep.end_node_time;\n//>трекер>\n\nlet cmd = \"setbuy\";\nlet quantity = Number((Number(msg.bot.finance.depo) * Number(msg.bot.settings.ordersize) / 100 / msg.bot.status.currentprice).toFixed(msg.bot.settings.digitq));\nlet price = Number((msg.bot.currentfloor[3]).toFixed(msg.bot.settings.digitprice));\n\n\nlet data = { moneta: msg.bot.settings.moneta, price: price, quantity: quantity, bot: msg.bot };\nconst orderexec = global.get('order_exec')(cmd, data);\n\nlet botname = msg.bot.settings.botname;\n\nlet data2 = botname + \":\" + cmd + \": price:\" + data.price + \", quantity: \" + data.quantity;\nconst tilog = global.get('tilog')(botname, data2);\ntilog;\n\norderexec.then(orderexec => {\n    msg.orderexec = orderexec;\n    if (orderexec.statusCode === \"ok\") {\n        node.status({ fill: \"green\", shape: \"dot\", text: orderexec.statusBody.orderId });\n        msg.bot = msg.orderexec.bot;\n\n        //>трекер>\n        let end_node_time = new Date().getTime();\n        let duration = end_node_time - start_node_time;\n        let duration_step = end_node_time - last_node_end_time;\n        track.push({\n            \"steptitle\": steptitle,\n            \"start_node_time\": start_node_time,\n            \"end_node_time\": end_node_time,\n            \"duration_node\": duration,\n            \"duration_step\": duration_step\n        });\n        flow.set(trackname, track);\n        //>трекер>\n\n        node.send(msg);\n\n    } else {\n        node.status({ fill: \"red\", shape: \"dot\" });\n\n        //>трекер>\n        let end_node_time = new Date().getTime();\n        let duration = end_node_time - start_node_time;\n        let duration_step = end_node_time - last_node_end_time;\n        track.push({\n            \"steptitle\": steptitle + \"-faile\",\n            \"start_node_time\": start_node_time,\n            \"end_node_time\": end_node_time,\n            \"duration\": duration,\n            \"duration_step\": duration_step,\n            \"error\": orderexec.statusBody\n        });\n        flow.set(trackname, track);\n        //>трекер>\n\n        node.send(msg);\n    }\n\n\n}).catch(error => {\n\n    msg.error = error;\n    node.status({ fill: \"red\", shape: \"ring\" });\n\n    node.error(error);\n});\n\n\n\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 930,
        "y": 1560,
        "wires": [
            [
                "2ace1a8c5d56d7fb"
            ]
        ]
    },
    {
        "id": "2ace1a8c5d56d7fb",
        "type": "switch",
        "z": "654ea140.2275a8",
        "g": "7a59f38fd450bc7d",
        "name": "statusCode",
        "property": "orderexec.statusCode",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "ok",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "not ok",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 1130,
        "y": 1560,
        "wires": [
            [],
            [
                "b301048f945266e9"
            ]
        ]
    },
    {
        "id": "b301048f945266e9",
        "type": "function",
        "z": "654ea140.2275a8",
        "g": "7a59f38fd450bc7d",
        "name": "tilog",
        "func": "let botname = msg.bot.settings.botname;\nlet data = \"Ошибка при выставлении ордера - \"+msg.orderexec.statusBody;\nconst tilog = global.get('tilog')(botname,data);\n\ntilog.then(tilog => {\n\n\n        node.status({fill:\"green\",shape:\"dot\"});\n    node.send(msg);\n     \n    \n\n}).catch(error => {\n    \n    msg.error = error;\n    node.status({fill:\"red\",shape: \"ring\"});\n    \n    node.error(error);\n});",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1150,
        "y": 1600,
        "wires": [
            [
                "1ee59cd0dcc3c69b"
            ]
        ]
    },
    {
        "id": "f6755d5ca47d8a1c",
        "type": "function",
        "z": "654ea140.2275a8",
        "g": "7a59f38fd450bc7d",
        "name": "orderexec cansel",
        "func": "//<трекер<\nlet trackname = \"track-\" + msg.botname;\nlet track = flow.get(trackname);\nlet start_node_time = new Date().getTime();\nlet steptitle = node.name;\n\nlet laststep = track[track.length - 1];\nlet last_node_end_time = laststep.end_node_time;\n//>трекер>\n\nlet cmd = \"cansel\";\nlet quantity = Number((Number(msg.bot.finance.depo)*Number(msg.bot.settings.ordersize)/100/msg.bot.status.currentprice).toFixed(msg.bot.settings.digitq));\nlet price = Number((msg.bot.currentfloor[3]).toFixed(msg.bot.settings.digitprice));\n\nlet orderid = msg.bot.currentfloor[8];\n\nlet data = {moneta:msg.bot.settings.moneta, orderid: orderid, bot: msg.bot};\nconst orderexec = global.get('order_exec')(cmd,data);\n\nlet botname = msg.bot.settings.botname;\n\nlet data2 = botname+\":\"+cmd+\": orderid:\"+orderid;\nconst tilog = global.get('tilog')(botname,data2);\ntilog;\n\norderexec.then(orderexec => {\n    msg.orderexec = orderexec;\n    if (orderexec.statusCode === \"ok\"){\n        node.status({fill:\"green\",shape:\"dot\", text: orderexec.statusBody.orderId});\n        msg.bot = msg.orderexec.bot;\n\n                                //msg.bot.ttp.curorderid = resp.orderId;\n                        //msg.bot.ttp.curstop = stopprice;\n                        //msg.bot.ttp.quantity = quantity;\n        \n    //>трекер>\n        let end_node_time = new Date().getTime();\n        let duration = end_node_time - start_node_time;\n        let duration_step = end_node_time - last_node_end_time;\n        track.push({\n            \"steptitle\": steptitle,\n            \"start_node_time\": start_node_time,\n            \"end_node_time\": end_node_time,\n            \"duration_node\": duration,\n            \"duration_step\": duration_step\n        });\n        flow.set(trackname, track);\n    //>трекер>\n        \n        node.send(msg);\n        \n    } else {\n        node.status({fill:\"red\",shape:\"dot\"});\n        \n    //>трекер>\n        let end_node_time = new Date().getTime();\n        let duration = end_node_time - start_node_time;\n        let duration_step = end_node_time - last_node_end_time;\n        track.push({\n            \"steptitle\": steptitle+\"-faile\",\n            \"start_node_time\": start_node_time,\n            \"end_node_time\": end_node_time,\n            \"duration\": duration,\n            \"duration_step\": duration_step,\n            \"error\": orderexec.statusBody\n        });\n        flow.set(trackname, track);\n    //>трекер>\n        \n        node.send(msg);\n    }\n    \n\n}).catch(error => {\n    \n    msg.error = error;\n    node.status({fill:\"red\",shape: \"ring\"});\n    \n    node.error(error);\n});\n\n\n\n\n\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1710,
        "y": 1980,
        "wires": [
            [
                "b2649467a02170a2"
            ]
        ]
    },
    {
        "id": "b2649467a02170a2",
        "type": "switch",
        "z": "654ea140.2275a8",
        "g": "7a59f38fd450bc7d",
        "name": "statusCode",
        "property": "orderexec.statusCode",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "ok",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "not ok",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 1910,
        "y": 1980,
        "wires": [
            [
                "77930cad44b21fb9"
            ],
            [
                "d64be0547902d730"
            ]
        ]
    },
    {
        "id": "d64be0547902d730",
        "type": "function",
        "z": "654ea140.2275a8",
        "g": "7a59f38fd450bc7d",
        "name": "tilog",
        "func": "let botname = msg.bot.settings.botname;\nlet data = \"Ошибка при снятии ордера - \"+msg.orderexec.statusBody;\nconst tilog = global.get('tilog')(botname,data);\n\ntilog.then(tilog => {\n\n\n        node.status({fill:\"green\",shape:\"dot\"});\n    node.send(msg);\n     \n    \n\n}).catch(error => {\n    \n    msg.error = error;\n    node.status({fill:\"red\",shape: \"ring\"});\n    \n    node.error(error);\n});",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 1890,
        "y": 2020,
        "wires": [
            [
                "6460e25babb0c7cc"
            ]
        ]
    },
    {
        "id": "e850dfccd699dcdb",
        "type": "function",
        "z": "654ea140.2275a8",
        "g": "7a59f38fd450bc7d",
        "name": "get_order_status",
        "func": "//<трекер<\nlet trackname = \"track-\" + msg.botname;\nlet track = flow.get(trackname);\nlet start_node_time = new Date().getTime();\nlet steptitle = node.name;\n\nlet laststep = track[track.length - 1];\nlet last_node_end_time = laststep.end_node_time;\n//>трекер>\n\nlet moneta = msg.moneta;\nlet orderid = Number(msg.orderid);\n\nconst get_order_status = global.get('get_order_status')(moneta, orderid);\n\nget_order_status.then(result => {\n\n    msg.payload = result;\n\n    //>трекер>\n    let end_node_time = new Date().getTime();\n    let duration = end_node_time - start_node_time;\n    let duration_step = end_node_time - last_node_end_time;\n    track.push({\n        \"steptitle\": steptitle,\n        \"start_node_time\": start_node_time,\n        \"end_node_time\": end_node_time,\n        \"duration_node\": duration,\n        \"duration_step\": duration_step\n    });\n    flow.set(trackname, track);\n    //>трекер>\n    node.status({ fill: \"green\", shape: \"dot\" });\n    node.send(msg);\n\n}).catch(error => {\n\n    //>трекер>\n    let end_node_time = new Date().getTime();\n    let duration = end_node_time - start_node_time;\n    let duration_step = end_node_time - last_node_end_time;\n    track.push({\n        \"steptitle\": steptitle + \"-outgrid\",\n        \"start_node_time\": start_node_time,\n        \"end_node_time\": end_node_time,\n        \"duration\": duration,\n        \"duration_step\": duration_step,\n\n    });\n    flow.set(trackname, track);\n    //>трекер>\n    node.status({ fill: \"red\", shape: \"dot\" });\n    node.error(error);\n});",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1190,
        "y": 1800,
        "wires": [
            [
                "32b6aaeab9305494"
            ]
        ]
    },
    {
        "id": "db2ab2b36d0491f6",
        "type": "comment",
        "z": "654ea140.2275a8",
        "g": "7a59f38fd450bc7d",
        "name": "null",
        "info": "",
        "x": 1630,
        "y": 2240,
        "wires": []
    },
    {
        "id": "c55a262c8df9a1d7",
        "type": "comment",
        "z": "654ea140.2275a8",
        "g": "7a59f38fd450bc7d",
        "name": "запрещено закупать",
        "info": "",
        "x": 740,
        "y": 1920,
        "wires": []
    },
    {
        "id": "0d8119922d0693a3",
        "type": "function",
        "z": "654ea140.2275a8",
        "g": "7a59f38fd450bc7d",
        "name": "tester___",
        "func": "let start_node_time = new Date().getTime();\n\nnode.status({fill: \"green\", shape: \"ring\", text: start_node_time});\n    \n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 1180,
        "y": 1660,
        "wires": [
            []
        ]
    },
    {
        "id": "7f61934422e27f95",
        "type": "function",
        "z": "654ea140.2275a8",
        "g": "7a59f38fd450bc7d",
        "name": "tester___",
        "func": "let start_node_time = new Date().getTime();\n\nnode.status({fill: \"green\", shape: \"ring\", text: start_node_time});\n    \n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 720,
        "y": 1760,
        "wires": [
            []
        ]
    },
    {
        "id": "446153795da90d76",
        "type": "function",
        "z": "654ea140.2275a8",
        "g": "7a59f38fd450bc7d",
        "name": "tester___",
        "func": "let start_node_time = new Date().getTime();\n\nnode.status({fill: \"green\", shape: \"ring\", text: start_node_time});\n    \n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 580,
        "y": 2120,
        "wires": [
            []
        ]
    },
    {
        "id": "8af930a1b87f39c6",
        "type": "function",
        "z": "654ea140.2275a8",
        "g": "7a59f38fd450bc7d",
        "name": "tester___",
        "func": "let start_node_time = new Date().getTime();\n\nnode.status({fill: \"green\", shape: \"ring\", text: start_node_time});\n    \n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 860,
        "y": 2100,
        "wires": [
            []
        ]
    },
    {
        "id": "b260528d5ba032dc",
        "type": "function",
        "z": "654ea140.2275a8",
        "g": "7a59f38fd450bc7d",
        "name": "tester___",
        "func": "let start_node_time = new Date().getTime();\n\nnode.status({fill: \"green\", shape: \"ring\", text: start_node_time});\n    \n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 620,
        "y": 2380,
        "wires": [
            []
        ]
    },
    {
        "id": "51d6f38d11893094",
        "type": "function",
        "z": "654ea140.2275a8",
        "g": "7a59f38fd450bc7d",
        "name": "get_order_status",
        "func": "//<трекер<\nlet trackname = \"track-\" + msg.botname;\nlet track = flow.get(trackname);\nlet start_node_time = new Date().getTime();\nlet steptitle = node.name;\n\nlet laststep = track[track.length - 1];\nlet last_node_end_time = laststep.end_node_time;\n//>трекер>\n\nlet moneta = msg.moneta;\nlet orderid = Number(msg.orderid);\n\nconst get_order_status = global.get('get_order_status')(moneta, orderid);\n\nget_order_status.then(result => {\n\n    msg.payload = result;\n\n    //>трекер>\n    let end_node_time = new Date().getTime();\n    let duration = end_node_time - start_node_time;\n    let duration_step = end_node_time - last_node_end_time;\n    track.push({\n        \"steptitle\": steptitle,\n        \"start_node_time\": start_node_time,\n        \"end_node_time\": end_node_time,\n        \"duration_node\": duration,\n        \"duration_step\": duration_step\n    });\n    flow.set(trackname, track);\n    //>трекер>\n    node.status({ fill: \"green\", shape: \"dot\" });\n    node.send(msg);\n\n}).catch(error => {\n\n    //>трекер>\n    let end_node_time = new Date().getTime();\n    let duration = end_node_time - start_node_time;\n    let duration_step = end_node_time - last_node_end_time;\n    track.push({\n        \"steptitle\": steptitle + \"-outgrid\",\n        \"start_node_time\": start_node_time,\n        \"end_node_time\": end_node_time,\n        \"duration\": duration,\n        \"duration_step\": duration_step,\n\n    });\n    flow.set(trackname, track);\n    //>трекер>\n    node.status({ fill: \"red\", shape: \"dot\" });\n    node.error(error);\n});",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1190,
        "y": 1980,
        "wires": [
            [
                "f71d1ca52f7148c9"
            ]
        ]
    },
    {
        "id": "77930cad44b21fb9",
        "type": "function",
        "z": "654ea140.2275a8",
        "g": "7a59f38fd450bc7d",
        "name": "change floors, finance ",
        "func": "//<трекер<\nlet trackname = \"track-\" + msg.botname;\nlet track = flow.get(trackname);\nlet start_node_time = new Date().getTime();\nlet steptitle = node.name;\n\nlet laststep = track[track.length - 1];\nlet last_node_end_time = laststep.end_node_time;\n//>трекер>\nnode.warn(\"cancel order \" + msg.bot.currentfloor[14]);\nlet tempfin = Number(Number(msg.bot.finance.baseinorders) - Number(msg.bot.currentfloor[14]) * Number(msg.bot.currentfloor[10]));\nlet tempfin2 = Number(Number(msg.bot.finance.basenal) + Number(msg.bot.currentfloor[14]) * Number(msg.bot.currentfloor[10]));\n\nmsg.bot.finance.baseinorders = tempfin.toFixed(msg.bot.settings.digitprice);\nmsg.bot.finance.basenal = tempfin2.toFixed(msg.bot.settings.digitprice);\n\nif (msg.bot.finance.baseinorders == -0) { msg.bot.finance.baseinorders = 0; }\nif (msg.bot.finance.basenal == -0) { msg.bot.finance.basenal = 0; }\n\nlet botname = msg.bot.settings.botname;\n\nlet data = \"Ордер на покупку отменен, ID - \" + msg.bot.currentfloor[8];\nconst tilog = global.get('tilog')(botname, data);\ntilog;\n\nlet currentfloor = msg.bot.currentfloor;\ncurrentfloor[7] = 0;\ncurrentfloor[8] = 0;\ncurrentfloor[10] = 0;\ncurrentfloor[14] = 0;\n\nmsg.bot.floors[currentfloor[0] - 1] = currentfloor;\n\n//>трекер>\nlet end_node_time = new Date().getTime();\nlet duration = end_node_time - start_node_time;\nlet duration_step = end_node_time - last_node_end_time;\ntrack.push({\n    \"steptitle\": steptitle,\n    \"start_node_time\": start_node_time,\n    \"end_node_time\": end_node_time,\n    \"duration_node\": duration,\n    \"duration_step\": duration_step\n});\nflow.set(trackname, track);\n//>трекер>\nnode.status({ fill: \"green\", shape: \"ring\", text: start_node_time });\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2180,
        "y": 2040,
        "wires": [
            [
                "ed90264248f8fa19"
            ]
        ]
    },
    {
        "id": "ed90264248f8fa19",
        "type": "function",
        "z": "654ea140.2275a8",
        "g": "7a59f38fd450bc7d",
        "name": "update bot floors, finance",
        "func": "//<трекер<\nlet trackname = \"track-\" + msg.botname;\nlet track = flow.get(trackname);\nlet start_node_time = new Date().getTime();\nlet steptitle = node.name;\n\nlet laststep = track[track.length - 1];\nlet last_node_end_time = laststep.end_node_time;\n//>трекер>\nlet volname = msg.bot.settings.userid + \"-bots:\" + msg.botname + \":data\";\nlet botdata = {\n    \"finance\": JSON.stringify(msg.bot.finance),\n    \"floors\": JSON.stringify(msg.bot.floors),\n    \"sales\": JSON.stringify(msg.bot.sales)\n\n};\n\nconst upd = global.get('setbot_data')(volname, botdata);\n\nupd.then(upd => {\n\n    msg.payload = upd;\n\n    //>трекер>\n    let end_node_time = new Date().getTime();\n    let duration = end_node_time - start_node_time;\n    let duration_step = end_node_time - last_node_end_time;\n    track.push({\n        \"steptitle\": steptitle,\n        \"start_node_time\": start_node_time,\n        \"end_node_time\": end_node_time,\n        \"duration_node\": duration,\n        \"duration_step\": duration_step\n    });\n    flow.set(trackname, track);\n    //>трекер>\n    node.status({ fill: \"green\", shape: \"ring\", text: start_node_time });\n\n    node.send(msg);\n\n}).catch(error => {\n\n    //>трекер>\n    let end_node_time = new Date().getTime();\n    let duration = end_node_time - start_node_time;\n    let duration_step = end_node_time - last_node_end_time;\n    track.push({\n        \"steptitle\": steptitle + \"-faile\",\n        \"start_node_time\": start_node_time,\n        \"end_node_time\": end_node_time,\n        \"duration\": duration,\n        \"duration_step\": duration_step,\n        \"error\": error\n    });\n    flow.set(trackname, track);\n    //>трекер>\n    node.status({ fill: \"red\", shape: \"ring\", text: \"error\" });\n    node.error(error);\n});",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2430,
        "y": 2040,
        "wires": [
            [
                "e0a18e1cc9e2532d"
            ]
        ],
        "icon": "font-awesome/fa-bolt"
    },
    {
        "id": "bae47583a4cbccac",
        "type": "function",
        "z": "654ea140.2275a8",
        "g": "7a59f38fd450bc7d",
        "name": "change floors, finance ",
        "func": "//<трекер<\nlet trackname = \"track-\" + msg.botname;\nlet track = flow.get(trackname);\nlet start_node_time = new Date().getTime();\nlet steptitle = node.name;\n\nlet laststep = track[track.length - 1];\nlet last_node_end_time = laststep.end_node_time;\n//>трекер>\nnode.warn(\"filled order \" + msg.bot.currentfloor[14]);\nlet tempfin = Number(Number(msg.bot.finance.baseinorders) - Number(msg.bot.currentfloor[14]) * Number(msg.bot.currentfloor[10]));\n\nlet tempfin2 = Number(Number(msg.bot.finance.quotanal) + Number(msg.bot.currentfloor[14]));\n\nmsg.bot.finance.baseinorders = tempfin.toFixed(msg.bot.settings.digitprice);\nmsg.bot.finance.quotanal = tempfin2.toFixed(msg.bot.settings.digitq);\n\nif (msg.bot.finance.baseinorders == -0) { msg.bot.finance.baseinorders = 0; }\nif (msg.bot.finance.basenal == -0) { msg.bot.finance.basenal = 0; }\n\nlet currentfloor = msg.bot.currentfloor;\ncurrentfloor[7] = 2;\n//currentfloor[10] = Number(msg.bot.currentfloor[14]) * Number(msg.bot.currentfloor[3]);\n\n\nmsg.bot.floors[currentfloor[0] - 1] = currentfloor;\n\nlet data = \"Ордер на покупку исполнен, ID - \" + msg.bot.currentfloor[8];\nconst tilog = global.get('tilog')(msg.bot.settings.botname, data);\ntilog;\n\n//>трекер>\nlet end_node_time = new Date().getTime();\nlet duration = end_node_time - start_node_time;\nlet duration_step = end_node_time - last_node_end_time;\ntrack.push({\n    \"steptitle\": steptitle,\n    \"start_node_time\": start_node_time,\n    \"end_node_time\": end_node_time,\n    \"duration_node\": duration,\n    \"duration_step\": duration_step\n});\nflow.set(trackname, track);\n//>трекер>\nnode.status({ fill: \"green\", shape: \"ring\", text: start_node_time });\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1780,
        "y": 2120,
        "wires": [
            [
                "ac4ac8fa94ec4d39"
            ]
        ]
    },
    {
        "id": "ac4ac8fa94ec4d39",
        "type": "function",
        "z": "654ea140.2275a8",
        "g": "7a59f38fd450bc7d",
        "name": "update bot floors, finance",
        "func": "//<трекер<\nlet trackname = \"track-\" + msg.botname;\nlet track = flow.get(trackname);\n    let start_node_time = new Date().getTime();\n    let steptitle = node.name;\n\n    let laststep = track[track.length-1];\n    let last_node_end_time = laststep.end_node_time;\n//>трекер>\nlet volname = msg.bot.settings.userid+\"-bots:\"+msg.botname+\":data\";\nlet botdata = {\n    \"finance\":JSON.stringify(msg.bot.finance),\n    \"floors\":JSON.stringify(msg.bot.floors),\n    \"sales\":JSON.stringify(msg.bot.sales)\n    \n};\n\nconst upd = global.get('setbot_data')(volname, botdata);\n\nupd.then(upd => {\n    \n    msg.payload = upd;\n    \n    //>трекер>\n        let end_node_time = new Date().getTime();\n        let duration = end_node_time - start_node_time;\n        let duration_step = end_node_time - last_node_end_time;\n        track.push({\n            \"steptitle\": steptitle,\n            \"start_node_time\": start_node_time,\n            \"end_node_time\": end_node_time,\n            \"duration_node\": duration,\n            \"duration_step\": duration_step\n        });\n    flow.set(trackname, track);\n    //>трекер>\nnode.status({fill: \"green\", shape: \"ring\", text: start_node_time});\n    \n    node.send(msg);\n\n}).catch(error => {\n    \n    //>трекер>\n        let end_node_time = new Date().getTime();\n        let duration = end_node_time - start_node_time;\n        let duration_step = end_node_time - last_node_end_time;\n        track.push({\n            \"steptitle\": steptitle+\"-faile\",\n            \"start_node_time\": start_node_time,\n            \"end_node_time\": end_node_time,\n            \"duration\": duration,\n            \"duration_step\": duration_step,\n            \"error\": error\n        });\n    flow.set(trackname, track);\n    //>трекер>\n    node.status({fill: \"red\", shape: \"ring\", text: \"error\"});\n    node.error(error);\n});",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2030,
        "y": 2120,
        "wires": [
            [
                "563d3c7cf2cd4b45"
            ]
        ],
        "icon": "font-awesome/fa-bolt"
    },
    {
        "id": "991366fdffaad269",
        "type": "comment",
        "z": "654ea140.2275a8",
        "g": "7a59f38fd450bc7d",
        "name": "4 - Продали",
        "info": "",
        "x": 590,
        "y": 2520,
        "wires": []
    },
    {
        "id": "482e3d85ed1f80fb",
        "type": "switch",
        "z": "654ea140.2275a8",
        "g": "7a59f38fd450bc7d",
        "name": "статус этажа",
        "property": "bot.currentfloor[7]",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "0",
                "vt": "num"
            },
            {
                "t": "eq",
                "v": "1",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "2",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "3",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "4",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 5,
        "x": 300,
        "y": 1880,
        "wires": [
            [
                "7a89f79851e3fc19"
            ],
            [
                "c6c39dcb7d895ddf",
                "7f61934422e27f95"
            ],
            [
                "7f47b2ddd7c4d760",
                "446153795da90d76"
            ],
            [
                "b260528d5ba032dc",
                "159777891efadb83"
            ],
            []
        ]
    },
    {
        "id": "4b2aa483ef8798d3",
        "type": "switch",
        "z": "654ea140.2275a8",
        "name": "bot.downfloor[7] = 1 ?",
        "property": "bot.downfloor[7]",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "0",
                "vt": "num"
            },
            {
                "t": "eq",
                "v": "1",
                "vt": "num"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 880,
        "y": 2640,
        "wires": [
            [],
            [
                "2ee9aaa407d95b0a"
            ]
        ]
    },
    {
        "id": "47c53ce7912eea38",
        "type": "function",
        "z": "654ea140.2275a8",
        "name": "change floors, finance ",
        "func": "//<трекер<\nlet trackname = \"track-\" + msg.botname;\nlet track = flow.get(trackname);\nlet start_node_time = new Date().getTime();\nlet steptitle = node.name;\n\nlet laststep = track[track.length - 1];\nlet last_node_end_time = laststep.end_node_time;\n//>трекер>\nnode.warn(\"cancel order \" + msg.bot.downfloor[14]);\nlet tempfin = Number(Number(msg.bot.finance.baseinorders) - Number(msg.bot.downfloor[14]) * Number(msg.bot.downfloor[10]));\nlet tempfin2 = Number(Number(msg.bot.finance.basenal) + Number(msg.bot.downfloor[14]) * Number(msg.bot.downfloor[10]));\n\nmsg.bot.finance.baseinorders = tempfin.toFixed(msg.bot.settings.digitprice);\nmsg.bot.finance.basenal = tempfin2.toFixed(msg.bot.settings.digitprice);\n\nif (msg.bot.finance.baseinorders == -0) { msg.bot.finance.baseinorders = 0; }\nif (msg.bot.finance.basenal == -0) { msg.bot.finance.basenal = 0; }\n\nlet downfloor = msg.bot.downfloor;\n\n\n\nlet data = \"Ордер на покупку отменен, ID - \" + msg.bot.downfloor[8];\nconst tilog = global.get('tilog')(msg.bot.settings.botname, data);\ntilog;\n\n\n\n\ndownfloor[7] = 0;\ndownfloor[8] = 0;\ndownfloor[10] = 0;\ndownfloor[14] = 0;\n\nmsg.bot.floors[downfloor[0] - 1] = downfloor;\n\n//>трекер>\nlet end_node_time = new Date().getTime();\nlet duration = end_node_time - start_node_time;\nlet duration_step = end_node_time - last_node_end_time;\ntrack.push({\n    \"steptitle\": steptitle,\n    \"start_node_time\": start_node_time,\n    \"end_node_time\": end_node_time,\n    \"duration_node\": duration,\n    \"duration_step\": duration_step\n});\nflow.set(trackname, track);\n//>трекер>\nnode.status({ fill: \"green\", shape: \"ring\", text: start_node_time });\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 940,
        "y": 2720,
        "wires": [
            [
                "96bde4d235dbb29a"
            ]
        ]
    },
    {
        "id": "96bde4d235dbb29a",
        "type": "function",
        "z": "654ea140.2275a8",
        "name": "update bot floors, finance",
        "func": "//<трекер<\nlet trackname = \"track-\" + msg.botname;\nlet track = flow.get(trackname);\nlet start_node_time = new Date().getTime();\nlet steptitle = node.name;\n\nlet laststep = track[track.length - 1];\nlet last_node_end_time = laststep.end_node_time;\n//>трекер>\nlet volname = msg.bot.settings.userid + \"-bots:\" + msg.botname + \":data\";\nlet botdata = {\n    \"finance\": JSON.stringify(msg.bot.finance),\n    \"floors\": JSON.stringify(msg.bot.floors),\n    \"sales\": JSON.stringify(msg.bot.sales)\n\n};\n\nconst upd = global.get('setbot_data')(volname, botdata);\n\nupd.then(upd => {\n\n    msg.payload = upd;\n\n    //>трекер>\n    let end_node_time = new Date().getTime();\n    let duration = end_node_time - start_node_time;\n    let duration_step = end_node_time - last_node_end_time;\n    track.push({\n        \"steptitle\": steptitle,\n        \"start_node_time\": start_node_time,\n        \"end_node_time\": end_node_time,\n        \"duration_node\": duration,\n        \"duration_step\": duration_step\n    });\n    flow.set(trackname, track);\n    //>трекер>\n    node.status({ fill: \"green\", shape: \"ring\", text: start_node_time });\n\n    node.send(msg);\n\n}).catch(error => {\n\n    //>трекер>\n    let end_node_time = new Date().getTime();\n    let duration = end_node_time - start_node_time;\n    let duration_step = end_node_time - last_node_end_time;\n    track.push({\n        \"steptitle\": steptitle + \"-faile\",\n        \"start_node_time\": start_node_time,\n        \"end_node_time\": end_node_time,\n        \"duration\": duration,\n        \"duration_step\": duration_step,\n        \"error\": error\n    });\n    flow.set(trackname, track);\n    //>трекер>\n    node.status({ fill: \"red\", shape: \"ring\", text: error });\n    node.error(error);\n});",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 930,
        "y": 2760,
        "wires": [
            [
                "cd755212ebaa0a1e"
            ]
        ],
        "icon": "font-awesome/fa-bolt"
    },
    {
        "id": "2ee9aaa407d95b0a",
        "type": "function",
        "z": "654ea140.2275a8",
        "name": "orderexec cansel",
        "func": "//<трекер<\nlet trackname = \"track-\" + msg.botname;\nlet track = flow.get(trackname);\nlet start_node_time = new Date().getTime();\nlet steptitle = node.name;\n\nlet laststep = track[track.length - 1];\nlet last_node_end_time = laststep.end_node_time;\n//>трекер>\n\nlet cmd = \"cansel\";\nlet quantity = Number((Number(msg.bot.finance.depo) * Number(msg.bot.settings.ordersize) / 100 / msg.bot.status.currentprice).toFixed(msg.bot.settings.digitq));\nlet price = Number((msg.bot.downfloor[3]).toFixed(msg.bot.settings.digitprice));\n\nlet orderid = msg.bot.downfloor[8];\n\nlet data = { moneta: msg.bot.settings.moneta, orderid: orderid, bot: msg.bot };\nconst orderexec = global.get('order_exec')(cmd, data);\n\nlet botname = msg.bot.settings.botname;\n\nlet data2 = botname + \":\" + cmd + \": orderid:\" + orderid;\nconst tilog = global.get('tilog')(botname, data2);\ntilog;\n\norderexec.then(orderexec => {\n    msg.orderexec = orderexec;\n    if (orderexec.statusCode === \"ok\") {\n        node.status({ fill: \"green\", shape: \"dot\", text: orderexec.statusBody.orderId });\n        msg.bot = msg.orderexec.bot;\n\n        //>трекер>\n        let end_node_time = new Date().getTime();\n        let duration = end_node_time - start_node_time;\n        let duration_step = end_node_time - last_node_end_time;\n        track.push({\n            \"steptitle\": steptitle,\n            \"start_node_time\": start_node_time,\n            \"end_node_time\": end_node_time,\n            \"duration_node\": duration,\n            \"duration_step\": duration_step\n        });\n        flow.set(trackname, track);\n        //>трекер>\n\n        node.send(msg);\n\n    } else {\n        node.status({ fill: \"red\", shape: \"dot\" });\n\n        //>трекер>\n        let end_node_time = new Date().getTime();\n        let duration = end_node_time - start_node_time;\n        let duration_step = end_node_time - last_node_end_time;\n        track.push({\n            \"steptitle\": steptitle + \"-faile\",\n            \"start_node_time\": start_node_time,\n            \"end_node_time\": end_node_time,\n            \"duration\": duration,\n            \"duration_step\": duration_step,\n            \"error\": orderexec.statusBody\n        });\n        flow.set(trackname, track);\n        //>трекер>\n\n        node.send(msg);\n    }\n\n\n}).catch(error => {\n\n    msg.error = error;\n    node.status({ fill: \"red\", shape: \"ring\" });\n\n    node.error(error);\n});\n\n\n\n\n\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 650,
        "y": 2720,
        "wires": [
            [
                "ae699b5f1e8352d5"
            ]
        ]
    },
    {
        "id": "ae699b5f1e8352d5",
        "type": "switch",
        "z": "654ea140.2275a8",
        "name": "statusCode",
        "property": "orderexec.statusCode",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "ok",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "not ok",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 670,
        "y": 2760,
        "wires": [
            [
                "47c53ce7912eea38"
            ],
            [
                "2102f4c435b8f21d"
            ]
        ]
    },
    {
        "id": "2102f4c435b8f21d",
        "type": "function",
        "z": "654ea140.2275a8",
        "name": "tilog",
        "func": "let botname = msg.bot.settings.botname;\nlet data = \"Ошибка при снятии ордера - \"+msg.orderexec.statusBody;\nconst tilog = global.get('tilog')(botname,data);\n\ntilog.then(tilog => {\n\n\n        node.status({fill:\"green\",shape:\"dot\"});\n    node.send(msg);\n     \n    \n\n}).catch(error => {\n    \n    msg.error = error;\n    node.status({fill:\"red\",shape: \"ring\"});\n    \n    node.error(error);\n});",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 690,
        "y": 2800,
        "wires": [
            [
                "720d521686c307c6"
            ]
        ]
    },
    {
        "id": "cd755212ebaa0a1e",
        "type": "debug",
        "z": "654ea140.2275a8",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 930,
        "y": 2900,
        "wires": []
    },
    {
        "id": "04f838f4dcf92c27",
        "type": "link out",
        "z": "654ea140.2275a8",
        "g": "7a59f38fd450bc7d",
        "name": "",
        "links": [
            "e34a5b68.726ec8",
            "e3e1e22a.f958b",
            "f45f3249dbec7058"
        ],
        "x": 1075,
        "y": 1660,
        "wires": []
    },
    {
        "id": "84de70195e8eeec9",
        "type": "link out",
        "z": "654ea140.2275a8",
        "g": "7a59f38fd450bc7d",
        "name": "",
        "links": [
            "e34a5b68.726ec8",
            "e3e1e22a.f958b",
            "f45f3249dbec7058"
        ],
        "x": 2215,
        "y": 1760,
        "wires": []
    },
    {
        "id": "197f2eae23350bde",
        "type": "link out",
        "z": "654ea140.2275a8",
        "g": "7a59f38fd450bc7d",
        "name": "",
        "links": [
            "e34a5b68.726ec8",
            "e3e1e22a.f958b",
            "f45f3249dbec7058"
        ],
        "x": 2215,
        "y": 1840,
        "wires": []
    },
    {
        "id": "072c1d3a07edfbfb",
        "type": "link out",
        "z": "654ea140.2275a8",
        "g": "7a59f38fd450bc7d",
        "name": "",
        "links": [
            "e34a5b68.726ec8",
            "e3e1e22a.f958b",
            "f45f3249dbec7058"
        ],
        "x": 1555,
        "y": 1700,
        "wires": []
    },
    {
        "id": "d2965d20fb057ea3",
        "type": "link out",
        "z": "654ea140.2275a8",
        "g": "7a59f38fd450bc7d",
        "name": "",
        "links": [
            "e34a5b68.726ec8",
            "e3e1e22a.f958b",
            "f45f3249dbec7058"
        ],
        "x": 1555,
        "y": 2180,
        "wires": []
    },
    {
        "id": "97c944361390ef7f",
        "type": "link out",
        "z": "654ea140.2275a8",
        "g": "7a59f38fd450bc7d",
        "name": "",
        "links": [
            "e34a5b68.726ec8",
            "e3e1e22a.f958b",
            "f45f3249dbec7058"
        ],
        "x": 815,
        "y": 2140,
        "wires": []
    },
    {
        "id": "159777891efadb83",
        "type": "link out",
        "z": "654ea140.2275a8",
        "g": "7a59f38fd450bc7d",
        "name": "",
        "links": [
            "e34a5b68.726ec8",
            "e3e1e22a.f958b",
            "f45f3249dbec7058"
        ],
        "x": 535,
        "y": 2380,
        "wires": []
    },
    {
        "id": "04e23e81161e4a2f",
        "type": "link out",
        "z": "654ea140.2275a8",
        "g": "7a59f38fd450bc7d",
        "name": "",
        "links": [
            "e34a5b68.726ec8",
            "e3e1e22a.f958b",
            "f45f3249dbec7058"
        ],
        "x": 1555,
        "y": 2240,
        "wires": []
    },
    {
        "id": "d108b7f4de207c72",
        "type": "link out",
        "z": "654ea140.2275a8",
        "g": "7a59f38fd450bc7d",
        "name": "",
        "links": [
            "e34a5b68.726ec8",
            "e3e1e22a.f958b",
            "f45f3249dbec7058"
        ],
        "x": 1175,
        "y": 2260,
        "wires": []
    },
    {
        "id": "1ee59cd0dcc3c69b",
        "type": "link out",
        "z": "654ea140.2275a8",
        "g": "7a59f38fd450bc7d",
        "name": "",
        "links": [
            "e34a5b68.726ec8",
            "e3e1e22a.f958b",
            "f45f3249dbec7058"
        ],
        "x": 1255,
        "y": 1600,
        "wires": []
    },
    {
        "id": "6460e25babb0c7cc",
        "type": "link out",
        "z": "654ea140.2275a8",
        "g": "7a59f38fd450bc7d",
        "name": "",
        "links": [
            "e34a5b68.726ec8",
            "e3e1e22a.f958b",
            "f45f3249dbec7058"
        ],
        "x": 1975,
        "y": 2020,
        "wires": []
    },
    {
        "id": "e0a18e1cc9e2532d",
        "type": "link out",
        "z": "654ea140.2275a8",
        "g": "7a59f38fd450bc7d",
        "name": "",
        "links": [
            "e34a5b68.726ec8",
            "e3e1e22a.f958b",
            "f45f3249dbec7058"
        ],
        "x": 2595,
        "y": 2040,
        "wires": []
    },
    {
        "id": "563d3c7cf2cd4b45",
        "type": "link out",
        "z": "654ea140.2275a8",
        "g": "7a59f38fd450bc7d",
        "name": "",
        "links": [
            "e34a5b68.726ec8",
            "e3e1e22a.f958b",
            "f45f3249dbec7058"
        ],
        "x": 2195,
        "y": 2120,
        "wires": []
    },
    {
        "id": "720d521686c307c6",
        "type": "link out",
        "z": "654ea140.2275a8",
        "name": "",
        "links": [
            "e34a5b68.726ec8",
            "e3e1e22a.f958b",
            "f45f3249dbec7058"
        ],
        "x": 795,
        "y": 2800,
        "wires": []
    },
    {
        "id": "f640acc7df5a7f1c",
        "type": "catch",
        "z": "654ea140.2275a8",
        "g": "c54480d87a18b156",
        "name": "",
        "scope": null,
        "uncaught": false,
        "x": 1660,
        "y": 380,
        "wires": [
            [
                "9d1e34b27b37fdd4"
            ]
        ]
    },
    {
        "id": "9d1e34b27b37fdd4",
        "type": "debug",
        "z": "654ea140.2275a8",
        "g": "c54480d87a18b156",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1710,
        "y": 420,
        "wires": []
    },
    {
        "id": "331bd8926b5fe7f0",
        "type": "inject",
        "z": "654ea140.2275a8",
        "g": "c54480d87a18b156",
        "name": "start1",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 1510,
        "y": 380,
        "wires": [
            [
                "3fb2e4e22e831909"
            ]
        ]
    },
    {
        "id": "3fb2e4e22e831909",
        "type": "redis-out",
        "z": "654ea140.2275a8",
        "g": "c54480d87a18b156",
        "server": "f120eab2.0a60a8",
        "command": "publish",
        "name": "",
        "topic": "start1",
        "obj": false,
        "x": 1510,
        "y": 420,
        "wires": []
    },
    {
        "id": "1dfc59494b056a73",
        "type": "catch",
        "z": "654ea140.2275a8",
        "g": "6d6802907a34719d",
        "name": "",
        "scope": null,
        "uncaught": false,
        "x": 940,
        "y": 4160,
        "wires": [
            [
                "e0c6df4acdc09987"
            ]
        ]
    },
    {
        "id": "e0c6df4acdc09987",
        "type": "debug",
        "z": "654ea140.2275a8",
        "g": "6d6802907a34719d",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "x": 1090,
        "y": 4160,
        "wires": []
    },
    {
        "id": "4beb6bee89191b2c",
        "type": "inject",
        "z": "654ea140.2275a8",
        "g": "6d6802907a34719d",
        "name": "start",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            },
            {
                "p": "botname",
                "v": "payload.botname",
                "vt": "msg"
            },
            {
                "p": "start",
                "v": "",
                "vt": "date"
            },
            {
                "p": "userid",
                "v": "d3fmoh2rVoVNgIcpLTFZBE0jHnI2",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "botlist:d3fmoh2rVoVNgIcpLTFZBE0jHnI2",
        "payload": "{}",
        "payloadType": "json",
        "x": 116,
        "y": 4340,
        "wires": [
            []
        ]
    },
    {
        "id": "6e676bce0149a568",
        "type": "trigger",
        "z": "654ea140.2275a8",
        "g": "6d6802907a34719d",
        "name": "",
        "op1": "",
        "op2": "0",
        "op1type": "pay",
        "op2type": "str",
        "duration": "-500",
        "extend": false,
        "units": "ms",
        "reset": "",
        "bytopic": "all",
        "topic": "topic",
        "outputs": 1,
        "x": 166,
        "y": 4220,
        "wires": [
            [
                "6b472db8a26e881f"
            ]
        ]
    },
    {
        "id": "bece6d1bf84db0e5",
        "type": "comment",
        "z": "654ea140.2275a8",
        "g": "6d6802907a34719d",
        "name": "Получаем список ботов пользователя",
        "info": "Получаем список ботов пользователя",
        "x": 320,
        "y": 3778,
        "wires": []
    },
    {
        "id": "075add5232111063",
        "type": "inject",
        "z": "654ea140.2275a8",
        "g": "6d6802907a34719d",
        "name": "stop",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "reset",
                "v": "true",
                "vt": "bool"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 296,
        "y": 4340,
        "wires": [
            []
        ]
    },
    {
        "id": "4da801b7823b5aa0",
        "type": "split",
        "z": "654ea140.2275a8",
        "g": "6d6802907a34719d",
        "name": "split",
        "splt": ",",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "x": 213,
        "y": 3819,
        "wires": [
            [
                "1f80872966579308"
            ]
        ]
    },
    {
        "id": "8f8c6d4e6b670c18",
        "type": "json",
        "z": "654ea140.2275a8",
        "g": "6d6802907a34719d",
        "name": "",
        "property": "payload",
        "action": "",
        "pretty": true,
        "x": 216,
        "y": 3900,
        "wires": [
            [
                "4da801b7823b5aa0"
            ]
        ]
    },
    {
        "id": "1f80872966579308",
        "type": "function",
        "z": "654ea140.2275a8",
        "g": "6d6802907a34719d",
        "name": "name +\"-settings\";",
        "func": "var a = msg.payload[1]+\"-settings\";\nvar ttpprefix = msg.payload[1]+\":ttp\";\n//node.warn(a);\n//node.send(msg,false);\nmsg.botname =  msg.payload[1];\nmsg.ttpprefix = ttpprefix;\n\nmsg.payload = [];\nmsg.topic = a;\n\nreturn msg;",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 633,
        "y": 3819,
        "wires": [
            [
                "000deb87a0348c69"
            ],
            []
        ]
    },
    {
        "id": "d2462558caae9bf4",
        "type": "comment",
        "z": "654ea140.2275a8",
        "g": "6d6802907a34719d",
        "name": "для каждого бота - получение данных",
        "info": "",
        "x": 703,
        "y": 3778,
        "wires": []
    },
    {
        "id": "33c339510a7ccd51",
        "type": "json",
        "z": "654ea140.2275a8",
        "g": "6d6802907a34719d",
        "name": "",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 593,
        "y": 3939,
        "wires": [
            [
                "e65ef98d1295b092"
            ]
        ]
    },
    {
        "id": "e65ef98d1295b092",
        "type": "function",
        "z": "654ea140.2275a8",
        "g": "6d6802907a34719d",
        "name": "",
        "func": "let moneta = msg.payload.quotacoin + msg.payload.basecoin;\nmsg.topic = \"prices:\"+moneta;\nmsg.moneta = moneta;\nmsg.digitq =  msg.payload.digitq;\nmsg.digitprice =  msg.payload.digitprice;\nmsg.minprice =  msg.payload.minprice;\nmsg.ofsetbottom =  msg.payload.ofsetbottom;\nmsg.ofsettop =  msg.payload.ofsettop;\nmsg.minpriceforzakup =  msg.payload.minpriceforzakup;\n\nmsg.payload = [];\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 603,
        "y": 3999,
        "wires": [
            [
                "67831fc8c9a40edf"
            ]
        ]
    },
    {
        "id": "e70da76f151fb410",
        "type": "function",
        "z": "654ea140.2275a8",
        "g": "6d6802907a34719d",
        "name": "",
        "func": "msg.price = msg.payload;\nmsg.payload = [];\n\nmsg.topic = msg.ttpprefix + \":busy\";\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 603,
        "y": 4119,
        "wires": [
            [
                "f1be1df36da23a6e"
            ]
        ]
    },
    {
        "id": "fcbcf0e05abbda11",
        "type": "function",
        "z": "654ea140.2275a8",
        "g": "6d6802907a34719d",
        "name": "",
        "func": "msg.busy = msg.payload;\nmsg.payload = [];\n\nmsg.topic = msg.ttpprefix + \":curorderid\";\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 603,
        "y": 4239,
        "wires": [
            [
                "6b588e688c3d99f6"
            ]
        ]
    },
    {
        "id": "7c4eaeecf6d76197",
        "type": "function",
        "z": "654ea140.2275a8",
        "g": "6d6802907a34719d",
        "name": "",
        "func": "msg.curorderid = msg.payload;\nmsg.payload = [];\n\nmsg.topic = msg.ttpprefix + \":curstop\";\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 603,
        "y": 4359,
        "wires": [
            [
                "a552b6406b9ee3da"
            ]
        ]
    },
    {
        "id": "0b5582c012edbab5",
        "type": "function",
        "z": "654ea140.2275a8",
        "g": "6d6802907a34719d",
        "name": "",
        "func": "msg.curstop = msg.payload;\nmsg.payload = [];\n\nmsg.topic = msg.ttpprefix + \":issell\";\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 603,
        "y": 4479,
        "wires": [
            [
                "f1ead0e62bbb5074"
            ]
        ]
    },
    {
        "id": "ec3532237df3d45d",
        "type": "function",
        "z": "654ea140.2275a8",
        "g": "6d6802907a34719d",
        "name": "",
        "func": "msg.issell = msg.payload;\nmsg.payload = [];\n\nmsg.topic = msg.ttpprefix + \":quantity\";\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 603,
        "y": 4599,
        "wires": [
            [
                "6d207d038eeaad2c"
            ]
        ]
    },
    {
        "id": "3662a85f7fdb2d18",
        "type": "function",
        "z": "654ea140.2275a8",
        "g": "6d6802907a34719d",
        "name": "",
        "func": "msg.quantity = msg.payload;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 603,
        "y": 4719,
        "wires": [
            [
                "629a66d95364d694"
            ]
        ]
    },
    {
        "id": "629a66d95364d694",
        "type": "switch",
        "z": "654ea140.2275a8",
        "g": "6d6802907a34719d",
        "name": "quantity check",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "gt",
                "v": "0",
                "vt": "num"
            },
            {
                "t": "lte",
                "v": "0",
                "vt": "num"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 940,
        "y": 3940,
        "wires": [
            [
                "9e31ae86227c8207"
            ],
            [
                "f546192afeaa4eda"
            ]
        ]
    },
    {
        "id": "ce7dd270ab70fc59",
        "type": "comment",
        "z": "654ea140.2275a8",
        "g": "6d6802907a34719d",
        "name": "ttp pilot",
        "info": "",
        "x": 910,
        "y": 3901,
        "wires": []
    },
    {
        "id": "863c12030905b90b",
        "type": "function",
        "z": "654ea140.2275a8",
        "g": "6d6802907a34719d",
        "name": "Вычисление raschstopprice",
        "func": "msg.curstop = Number(msg.curstop);\nmsg.raschstopprice = Number((msg.price - msg.price / 100 * msg.ofsettop).toFixed(msg.digitprice));\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 1600,
        "y": 3821,
        "wires": [
            [
                "475d4281a5f72ba7"
            ]
        ]
    },
    {
        "id": "475d4281a5f72ba7",
        "type": "switch",
        "z": "654ea140.2275a8",
        "g": "6d6802907a34719d",
        "name": "если raschstopprice > curstop",
        "property": "msg.raschstopprice",
        "propertyType": "msg",
        "rules": [
            {
                "t": "gt",
                "v": "curstop",
                "vt": "msg"
            },
            {
                "t": "lt",
                "v": "curstop",
                "vt": "msg"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 2,
        "x": 1890,
        "y": 3821,
        "wires": [
            [
                "5ab5a242ff8647ee"
            ],
            [
                "87f059d7cba7c146"
            ]
        ]
    },
    {
        "id": "90c965319d8e34ae",
        "type": "comment",
        "z": "654ea140.2275a8",
        "g": "6d6802907a34719d",
        "name": "запускаем ТТП / передвигаем ордер",
        "info": "",
        "x": 2233,
        "y": 3781,
        "wires": []
    },
    {
        "id": "2f5c8b721830107a",
        "type": "comment",
        "z": "654ea140.2275a8",
        "g": "6d6802907a34719d",
        "name": "слушаем статус ордера",
        "info": "",
        "x": 2196,
        "y": 4300,
        "wires": []
    },
    {
        "id": "23caaa7d4da5a6a1",
        "type": "switch",
        "z": "654ea140.2275a8",
        "g": "6d6802907a34719d",
        "name": "curorderid > 0 check",
        "property": "curorderid",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "0",
                "vt": "num"
            },
            {
                "t": "neq",
                "v": "0",
                "vt": "num"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 2373,
        "y": 3815,
        "wires": [
            [
                "c193d63a633ed422"
            ],
            [
                "e5f26a3b2f160247"
            ]
        ]
    },
    {
        "id": "c193d63a633ed422",
        "type": "function",
        "z": "654ea140.2275a8",
        "g": "6d6802907a34719d",
        "name": "stopsell order",
        "func": "function parseApiError(error) {\n\tif (error.body) {\n\t\ttry {\n\t\t\tvar resp = JSON.parse(error.body);\n\t\t\treturn resp.msg;\n\t\t} catch (error) {/* pass thru */ }\n\t}\n\treturn \"Unknown error. Status code: \" + error.statsCode;\n}\n\nlet LBinance = global.get(\"gBinance\");\n\n\nlet binance = new LBinance().options({\n\tAPIKEY: \"1mUrLnaTdDiUHWQ2drxlQPnr0MqaJevIwJaqnEJFi5JIHLdTwLxTbnbMzMm5dj7i\",\n\tAPISECRET: \"exqgFmgHcb4Fr13JI6pDIpMTBXRDqzgbTelDoEikKRvzVU5KbB3F9iq9GPP2Onjn\",\n\t\"reconnect\": false\n});\n\n\nlet priceb = parseFloat((msg.raschstopprice - msg.raschstopprice / 100 * msg.ofsetbottom).toFixed(msg.digitprice));\nlet stopprice = parseFloat(msg.raschstopprice);\n\nlet moneta = msg.moneta;\n\nlet quantity = parseFloat(msg.quantity);\n//node.warn(binance);\n\n\n\n\n binance.sell(moneta, quantity, priceb, { stopPrice: stopprice, type: \"STOP_LOSS_LIMIT\" }, function (err, resp) {\n          if (err) {\n            var errorMsg = parseApiError(err) + \", moneta:\" + moneta;\n            node.error(errorMsg, msg);\n            node.status({fill: \"red\", shape: \"ring\", text: errorMsg});\n            node.send(msg);\n          return;\n            \n          }\n          if (resp) {\n                        msg.orderid = resp.orderId;\n                        msg.curstop = stopprice;\n                        node.status({fill: \"green\", shape: \"ring\", text: resp.orderId});\n          }\n          //node.status({}); //clear status message\n\n          \n          node.send(msg);\n          return;\n        });\n\n    \n    \n\n\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 2609,
        "y": 3809,
        "wires": [
            [
                "0ac214621e21b21c",
                "d864f9e0173130c1",
                "fd0d13b23b95cafc"
            ]
        ],
        "inputLabels": [
            "orderid"
        ],
        "outputLabels": [
            "status"
        ],
        "icon": "font-awesome/fa-bolt"
    },
    {
        "id": "0ee1d8650fcf42ad",
        "type": "comment",
        "z": "654ea140.2275a8",
        "g": "6d6802907a34719d",
        "name": "стартуем ттп",
        "info": "",
        "x": 2599,
        "y": 3775,
        "wires": []
    },
    {
        "id": "0d36353a3648f681",
        "type": "comment",
        "z": "654ea140.2275a8",
        "g": "6d6802907a34719d",
        "name": "Передвигаем ордер",
        "info": "",
        "x": 2629,
        "y": 3976,
        "wires": []
    },
    {
        "id": "be92eae3c497607e",
        "type": "function",
        "z": "654ea140.2275a8",
        "g": "6d6802907a34719d",
        "name": "Let Free!",
        "func": "\nmsg.busy = \"0\";\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 3340,
        "y": 3809,
        "wires": [
            [
                "86da9b3847237ec1"
            ]
        ]
    },
    {
        "id": "e5f26a3b2f160247",
        "type": "function",
        "z": "654ea140.2275a8",
        "g": "6d6802907a34719d",
        "name": "cansel order",
        "func": "function parseApiError(error) {\n  if (error.body) {\n    try {\n      var resp = JSON.parse(error.body);\n      return resp.msg;\n    } catch (error) {/* pass thru */}\n  }\n  return \"Unknown error. Status code: \"+error.statsCode;\n}\n\nlet LBinance = global.get(\"gBinance\");\n\n\nlet binance = new LBinance().options({\n    APIKEY: \"1mUrLnaTdDiUHWQ2drxlQPnr0MqaJevIwJaqnEJFi5JIHLdTwLxTbnbMzMm5dj7i\",\n    APISECRET: \"exqgFmgHcb4Fr13JI6pDIpMTBXRDqzgbTelDoEikKRvzVU5KbB3F9iq9GPP2Onjn\",\n    \"reconnect\": false\n});\n\nlet orderid = msg.curorderid;\nlet moneta = msg.moneta;\n//node.warn(binance);\n\n    binance.cancel(moneta, orderid, function (error, response) {\n                    if (error) {\n                        var errorMsg = parseApiError(error);\n                        errorMsg = errorMsg + \":\" + orderid;\n    \t\t            node.error(errorMsg);\n    \t            \tnode.status({ fill: \"red\", shape: \"ring\", text: errorMsg });\n    \t            \tnode.send(msg);\n    \t            \treturn;\n    \n                    }\n                    if (response) {\n                        \n                        node.send(msg);\n                        return;\n                    }\n                });\n\n            \n//msg.payload = \"qjson.status\";\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 2599,
        "y": 4010,
        "wires": [
            [
                "d34a51ee4207c39b",
                "fd0d13b23b95cafc",
                "665fb17c22667fc8"
            ]
        ],
        "inputLabels": [
            "orderid"
        ],
        "outputLabels": [
            "status"
        ],
        "icon": "node-red-contrib-binance/binance.png"
    },
    {
        "id": "0ac214621e21b21c",
        "type": "function",
        "z": "654ea140.2275a8",
        "g": "6d6802907a34719d",
        "name": "parse order id",
        "func": "\nmsg.payload = [msg.ttpprefix+\":curorderid\", msg.orderid];\nmsg.topic = \"\";\n\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 2809,
        "y": 3809,
        "wires": [
            [
                "132fb542b7e7a88d"
            ]
        ],
        "inputLabels": [
            "orderid"
        ],
        "outputLabels": [
            "status"
        ],
        "icon": "node-red-contrib-binance/binance.png"
    },
    {
        "id": "d864f9e0173130c1",
        "type": "function",
        "z": "654ea140.2275a8",
        "g": "6d6802907a34719d",
        "name": "parse curstop",
        "func": "\nmsg.payload = [msg.ttpprefix+\":curstop\", msg.curstop];\nmsg.topic = \"\";\n\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 2810,
        "y": 3856,
        "wires": [
            [
                "c3b88926069614ae"
            ]
        ],
        "inputLabels": [
            "orderid"
        ],
        "outputLabels": [
            "status"
        ],
        "icon": "node-red-contrib-binance/binance.png"
    },
    {
        "id": "30c99e0ffe8f381c",
        "type": "debug",
        "z": "654ea140.2275a8",
        "g": "6d6802907a34719d",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": true,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "payload",
        "statusType": "auto",
        "x": 3910,
        "y": 3869,
        "wires": []
    },
    {
        "id": "d34a51ee4207c39b",
        "type": "function",
        "z": "654ea140.2275a8",
        "g": "6d6802907a34719d",
        "name": "stopsell order",
        "func": "function parseApiError(error) {\n\tif (error.body) {\n\t\ttry {\n\t\t\tvar resp = JSON.parse(error.body);\n\t\t\treturn resp.msg;\n\t\t} catch (error) {/* pass thru */ }\n\t}\n\treturn \"Unknown error. Status code: \" + error.statsCode;\n}\n\nlet LBinance = global.get(\"gBinance\");\n\n\nlet binance = new LBinance().options({\n\tAPIKEY: \"1mUrLnaTdDiUHWQ2drxlQPnr0MqaJevIwJaqnEJFi5JIHLdTwLxTbnbMzMm5dj7i\",\n\tAPISECRET: \"exqgFmgHcb4Fr13JI6pDIpMTBXRDqzgbTelDoEikKRvzVU5KbB3F9iq9GPP2Onjn\",\n\t\"reconnect\": false\n});\n\n\nlet priceb = parseFloat((msg.raschstopprice - msg.raschstopprice / 100 * msg.ofsetbottom).toFixed(msg.digitprice));\nlet stopprice = parseFloat(msg.raschstopprice);\n\nlet moneta = msg.moneta;\n\nlet quantity = parseFloat(msg.quantity);\n//node.warn(binance);\n\n\n\n\n binance.sell(moneta, quantity, priceb, { stopPrice: stopprice, type: \"STOP_LOSS_LIMIT\" }, function (err, resp) {\n          if (err) {\n            var errorMsg = parseApiError(err);\n            node.error(errorMsg, msg);\n            node.status({fill: \"red\", shape: \"ring\", text: errorMsg});\n            \n          }\n          if (resp) {\n                        msg.orderid = resp.orderId;\n                        msg.curstop = stopprice;\n          }\n          node.status({}); //clear status message\n\n          \n          node.send(msg);\n          return;\n        });\n\n\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 2789,
        "y": 4010,
        "wires": [
            [
                "4afe7cf87488fade",
                "a397a8c340a5abac"
            ]
        ],
        "inputLabels": [
            "orderid"
        ],
        "outputLabels": [
            "status"
        ],
        "icon": "font-awesome/fa-bolt"
    },
    {
        "id": "4afe7cf87488fade",
        "type": "function",
        "z": "654ea140.2275a8",
        "g": "6d6802907a34719d",
        "name": "parse order id",
        "func": "\nmsg.payload = [msg.ttpprefix+\":curorderid\", msg.orderid];\nmsg.topic = \"\";\n\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 3009,
        "y": 4010,
        "wires": [
            [
                "b1c98d94ab07d052"
            ]
        ],
        "inputLabels": [
            "orderid"
        ],
        "outputLabels": [
            "status"
        ],
        "icon": "node-red-contrib-binance/binance.png"
    },
    {
        "id": "a397a8c340a5abac",
        "type": "function",
        "z": "654ea140.2275a8",
        "g": "6d6802907a34719d",
        "name": "parse curstop",
        "func": "\nmsg.payload = [msg.ttpprefix+\":curstop\", msg.curstop];\nmsg.topic = \"\";\n\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 3009,
        "y": 3970,
        "wires": [
            [
                "768bb7560e26759d"
            ]
        ],
        "inputLabels": [
            "orderid"
        ],
        "outputLabels": [
            "status"
        ],
        "icon": "node-red-contrib-binance/binance.png"
    },
    {
        "id": "4d770b76a15022e4",
        "type": "switch",
        "z": "654ea140.2275a8",
        "g": "6d6802907a34719d",
        "name": "",
        "property": "st",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "FILLED",
                "vt": "str"
            },
            {
                "t": "neq",
                "v": "FILLED",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 2393,
        "y": 4341,
        "wires": [
            [
                "4d43f920cbc01357"
            ],
            []
        ]
    },
    {
        "id": "4d43f920cbc01357",
        "type": "function",
        "z": "654ea140.2275a8",
        "g": "6d6802907a34719d",
        "name": "prepare issel 1",
        "func": "\nmsg.payload = [msg.ttpprefix+\":issell\", \"1\"];\nmsg.topic = \"\";\n\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 2563,
        "y": 4334,
        "wires": [
            [
                "0824abbc13f177f2"
            ]
        ],
        "inputLabels": [
            "orderid"
        ],
        "outputLabels": [
            "status"
        ],
        "icon": "node-red-contrib-binance/binance.png"
    },
    {
        "id": "6b472db8a26e881f",
        "type": "delay",
        "z": "654ea140.2275a8",
        "g": "6d6802907a34719d",
        "name": "",
        "pauseType": "rate",
        "timeout": "5",
        "timeoutUnits": "seconds",
        "rate": "2",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": true,
        "x": 376,
        "y": 4220,
        "wires": [
            [
                "50a6cb97e1d9a45f"
            ]
        ]
    },
    {
        "id": "fd0d13b23b95cafc",
        "type": "debug",
        "z": "654ea140.2275a8",
        "g": "6d6802907a34719d",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 2790,
        "y": 4120,
        "wires": []
    },
    {
        "id": "4ab36d4af5ef3a05",
        "type": "function",
        "z": "654ea140.2275a8",
        "g": "6d6802907a34719d",
        "name": "pepare busy 0",
        "func": "\nmsg.payload = [msg.ttpprefix+\":busy\", \"0\"];\nmsg.topic = \"\";\n\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 3700,
        "y": 3809,
        "wires": [
            [
                "ed5921c36d15b09e",
                "30c99e0ffe8f381c"
            ]
        ],
        "inputLabels": [
            "orderid"
        ],
        "outputLabels": [
            "status"
        ],
        "icon": "node-red-contrib-binance/binance.png"
    },
    {
        "id": "665fb17c22667fc8",
        "type": "function",
        "z": "654ea140.2275a8",
        "g": "6d6802907a34719d",
        "name": "prepare order id 0",
        "func": "\nmsg.payload = [msg.ttpprefix+\":curorderid\", \"0\"];\nmsg.topic = \"\";\n\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 2799,
        "y": 4056,
        "wires": [
            [
                "6e1b7f28c9f6481f"
            ]
        ],
        "inputLabels": [
            "orderid"
        ],
        "outputLabels": [
            "status"
        ],
        "icon": "node-red-contrib-binance/binance.png"
    },
    {
        "id": "b2e04c7fe56786bb",
        "type": "switch",
        "z": "654ea140.2275a8",
        "g": "6d6802907a34719d",
        "name": "busy check",
        "property": "busy",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "0",
                "vt": "str"
            },
            {
                "t": "neq",
                "v": "0",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 1179,
        "y": 3827,
        "wires": [
            [
                "89c44489038ab0e4"
            ],
            []
        ]
    },
    {
        "id": "8296b2a9118bb691",
        "type": "function",
        "z": "654ea140.2275a8",
        "g": "6d6802907a34719d",
        "name": "prepare busy 1",
        "func": "\nmsg.payload = [msg.ttpprefix+\":busy\", \"1\"];\nmsg.topic = \"\";\n\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 2163,
        "y": 3941,
        "wires": [
            [
                "8761f23b64d7a2f9",
                "998942bb43d20db8"
            ]
        ],
        "inputLabels": [
            "orderid"
        ],
        "outputLabels": [
            "status"
        ],
        "icon": "node-red-contrib-binance/binance.png"
    },
    {
        "id": "f546192afeaa4eda",
        "type": "function",
        "z": "654ea140.2275a8",
        "g": "6d6802907a34719d",
        "name": "Let Free!",
        "func": "msg.busy = \"0\";\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 1180,
        "y": 4040,
        "wires": [
            [
                "5ab6a3bcae284753"
            ]
        ]
    },
    {
        "id": "5ab6a3bcae284753",
        "type": "function",
        "z": "654ea140.2275a8",
        "g": "6d6802907a34719d",
        "name": "pepare busy 0",
        "func": "\nmsg.payload = [msg.ttpprefix+\":busy\", \"0\"];\nmsg.topic = \"\";\n\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 1340,
        "y": 4040,
        "wires": [
            [
                "978fe36d9c01fa64"
            ]
        ],
        "inputLabels": [
            "orderid"
        ],
        "outputLabels": [
            "status"
        ],
        "icon": "node-red-contrib-binance/binance.png"
    },
    {
        "id": "89c44489038ab0e4",
        "type": "delay",
        "z": "654ea140.2275a8",
        "g": "6d6802907a34719d",
        "name": "",
        "pauseType": "rate",
        "timeout": "5",
        "timeoutUnits": "seconds",
        "rate": "2",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": true,
        "x": 1350,
        "y": 3821,
        "wires": [
            [
                "863c12030905b90b"
            ]
        ]
    },
    {
        "id": "86da9b3847237ec1",
        "type": "delay",
        "z": "654ea140.2275a8",
        "g": "6d6802907a34719d",
        "name": "",
        "pauseType": "delay",
        "timeout": "25",
        "timeoutUnits": "milliseconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "x": 3510,
        "y": 3809,
        "wires": [
            [
                "4ab36d4af5ef3a05"
            ]
        ]
    },
    {
        "id": "87f059d7cba7c146",
        "type": "delay",
        "z": "654ea140.2275a8",
        "g": "6d6802907a34719d",
        "name": "",
        "pauseType": "delay",
        "timeout": "400",
        "timeoutUnits": "milliseconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "x": 1973,
        "y": 4341,
        "wires": [
            [
                "61f3c56bf5b1d0ad"
            ]
        ]
    },
    {
        "id": "5ab5a242ff8647ee",
        "type": "function",
        "z": "654ea140.2275a8",
        "g": "6d6802907a34719d",
        "name": "Let Busy!",
        "func": "msg.busy = \"1\";\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 2144,
        "y": 3815,
        "wires": [
            [
                "8296b2a9118bb691",
                "23caaa7d4da5a6a1"
            ]
        ]
    },
    {
        "id": "998942bb43d20db8",
        "type": "debug",
        "z": "654ea140.2275a8",
        "g": "6d6802907a34719d",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 2350,
        "y": 3900,
        "wires": []
    },
    {
        "id": "61f3c56bf5b1d0ad",
        "type": "function",
        "z": "654ea140.2275a8",
        "g": "6d6802907a34719d",
        "name": "",
        "func": "let orderid = msg.curorderid;\nlet moneta = msg.moneta;\nlet userid = msg.userid;\n\n\nmsg.topic = \"orders-status-\" + userid + \":\" + moneta +\":\"+orderid;\nmsg.payload = [];\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 2070,
        "y": 4660,
        "wires": [
            [
                "315a6dc929402e0e"
            ]
        ]
    },
    {
        "id": "16aa10e995b20267",
        "type": "debug",
        "z": "654ea140.2275a8",
        "g": "6d6802907a34719d",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": true,
        "tostatus": true,
        "complete": "true",
        "targetType": "full",
        "statusVal": "payload",
        "statusType": "auto",
        "x": 2630,
        "y": 4660,
        "wires": []
    },
    {
        "id": "62e85e3917296c6c",
        "type": "inject",
        "z": "654ea140.2275a8",
        "g": "6d6802907a34719d",
        "name": "",
        "props": [
            {
                "p": "curorderid",
                "v": "2274007",
                "vt": "str"
            },
            {
                "p": "userid",
                "v": "d3fmoh2rVoVNgIcpLTFZBE0jHnI2",
                "vt": "str"
            },
            {
                "p": "moneta",
                "v": "SUNUSDT",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 1880,
        "y": 4660,
        "wires": [
            [
                "61f3c56bf5b1d0ad"
            ]
        ]
    },
    {
        "id": "7ab04c7bf934d908",
        "type": "function",
        "z": "654ea140.2275a8",
        "g": "6d6802907a34719d",
        "name": "",
        "func": "msg.st = msg.payload;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 2460,
        "y": 4570,
        "wires": [
            [
                "16aa10e995b20267",
                "4d770b76a15022e4"
            ]
        ]
    },
    {
        "id": "9e31ae86227c8207",
        "type": "switch",
        "z": "654ea140.2275a8",
        "g": "6d6802907a34719d",
        "name": "check issel",
        "property": "issell",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "0",
                "vt": "num"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 1090,
        "y": 3880,
        "wires": [
            [
                "b2e04c7fe56786bb"
            ]
        ]
    },
    {
        "id": "5128d1e7c48ca858",
        "type": "function",
        "z": "654ea140.2275a8",
        "g": "6d6802907a34719d",
        "name": "",
        "func": "\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 1810,
        "y": 3740,
        "wires": [
            [
                "ac46bb0276956f73"
            ]
        ]
    },
    {
        "id": "ac46bb0276956f73",
        "type": "debug",
        "z": "654ea140.2275a8",
        "g": "6d6802907a34719d",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1980,
        "y": 3740,
        "wires": []
    },
    {
        "id": "50a6cb97e1d9a45f",
        "type": "redis-command",
        "z": "654ea140.2275a8",
        "g": "6d6802907a34719d",
        "server": "f120eab2.0a60a8",
        "command": "GET",
        "name": "get mybots",
        "topic": "",
        "params": "[]",
        "paramsType": "json",
        "payloadType": "json",
        "block": false,
        "x": 236,
        "y": 3980,
        "wires": [
            [
                "8f8c6d4e6b670c18"
            ]
        ]
    },
    {
        "id": "000deb87a0348c69",
        "type": "redis-command",
        "z": "654ea140.2275a8",
        "g": "6d6802907a34719d",
        "server": "f120eab2.0a60a8",
        "command": "GET",
        "name": "get bot settings",
        "topic": "msg.topic",
        "params": "[]",
        "paramsType": "json",
        "payloadType": "json",
        "block": false,
        "x": 623,
        "y": 3879,
        "wires": [
            [
                "33c339510a7ccd51"
            ]
        ]
    },
    {
        "id": "67831fc8c9a40edf",
        "type": "redis-command",
        "z": "654ea140.2275a8",
        "g": "6d6802907a34719d",
        "server": "f120eab2.0a60a8",
        "command": "GET",
        "name": "get currentprice",
        "topic": "msg.topic",
        "params": "[]",
        "paramsType": "json",
        "payloadType": "json",
        "block": false,
        "x": 623,
        "y": 4059,
        "wires": [
            [
                "e70da76f151fb410"
            ]
        ]
    },
    {
        "id": "f1be1df36da23a6e",
        "type": "redis-command",
        "z": "654ea140.2275a8",
        "g": "6d6802907a34719d",
        "server": "f120eab2.0a60a8",
        "command": "GET",
        "name": "get ttp:busy",
        "topic": "msg.topic",
        "params": "[]",
        "paramsType": "json",
        "payloadType": "json",
        "block": false,
        "x": 613,
        "y": 4179,
        "wires": [
            [
                "fcbcf0e05abbda11"
            ]
        ]
    },
    {
        "id": "6b588e688c3d99f6",
        "type": "redis-command",
        "z": "654ea140.2275a8",
        "g": "6d6802907a34719d",
        "server": "f120eab2.0a60a8",
        "command": "GET",
        "name": "get ttp:curorderid",
        "topic": "msg.topic",
        "params": "[]",
        "paramsType": "json",
        "payloadType": "json",
        "block": false,
        "x": 633,
        "y": 4299,
        "wires": [
            [
                "7c4eaeecf6d76197"
            ]
        ]
    },
    {
        "id": "a552b6406b9ee3da",
        "type": "redis-command",
        "z": "654ea140.2275a8",
        "g": "6d6802907a34719d",
        "server": "f120eab2.0a60a8",
        "command": "GET",
        "name": "get ttp:curstop",
        "topic": "msg.topic",
        "params": "[]",
        "paramsType": "json",
        "payloadType": "json",
        "block": false,
        "x": 623,
        "y": 4419,
        "wires": [
            [
                "0b5582c012edbab5"
            ]
        ]
    },
    {
        "id": "f1ead0e62bbb5074",
        "type": "redis-command",
        "z": "654ea140.2275a8",
        "g": "6d6802907a34719d",
        "server": "f120eab2.0a60a8",
        "command": "GET",
        "name": "get ttp:issell",
        "topic": "msg.topic",
        "params": "[]",
        "paramsType": "json",
        "payloadType": "json",
        "block": false,
        "x": 613,
        "y": 4539,
        "wires": [
            [
                "ec3532237df3d45d"
            ]
        ]
    },
    {
        "id": "6d207d038eeaad2c",
        "type": "redis-command",
        "z": "654ea140.2275a8",
        "g": "6d6802907a34719d",
        "server": "f120eab2.0a60a8",
        "command": "GET",
        "name": "get ttp:quantity",
        "topic": "msg.topic",
        "params": "[]",
        "paramsType": "json",
        "payloadType": "json",
        "block": false,
        "x": 623,
        "y": 4659,
        "wires": [
            [
                "3662a85f7fdb2d18"
            ]
        ]
    },
    {
        "id": "132fb542b7e7a88d",
        "type": "redis-command",
        "z": "654ea140.2275a8",
        "g": "6d6802907a34719d",
        "server": "f120eab2.0a60a8",
        "command": "set",
        "name": "set curorderid",
        "topic": "",
        "params": "[]",
        "paramsType": "json",
        "payloadType": "json",
        "block": false,
        "x": 2992,
        "y": 3809,
        "wires": [
            [
                "be92eae3c497607e"
            ]
        ]
    },
    {
        "id": "c3b88926069614ae",
        "type": "redis-command",
        "z": "654ea140.2275a8",
        "g": "6d6802907a34719d",
        "server": "f120eab2.0a60a8",
        "command": "set",
        "name": "set curstop",
        "topic": "",
        "params": "[]",
        "paramsType": "json",
        "payloadType": "json",
        "block": false,
        "x": 2983,
        "y": 3856,
        "wires": [
            []
        ]
    },
    {
        "id": "b1c98d94ab07d052",
        "type": "redis-command",
        "z": "654ea140.2275a8",
        "g": "6d6802907a34719d",
        "server": "f120eab2.0a60a8",
        "command": "set",
        "name": "set curorderid",
        "topic": "",
        "params": "[]",
        "paramsType": "json",
        "payloadType": "json",
        "block": false,
        "x": 3192,
        "y": 4010,
        "wires": [
            [
                "be92eae3c497607e"
            ]
        ]
    },
    {
        "id": "768bb7560e26759d",
        "type": "redis-command",
        "z": "654ea140.2275a8",
        "g": "6d6802907a34719d",
        "server": "f120eab2.0a60a8",
        "command": "set",
        "name": "set curstop",
        "topic": "",
        "params": "[]",
        "paramsType": "json",
        "payloadType": "json",
        "block": false,
        "x": 3182,
        "y": 3970,
        "wires": [
            []
        ]
    },
    {
        "id": "0824abbc13f177f2",
        "type": "redis-command",
        "z": "654ea140.2275a8",
        "g": "6d6802907a34719d",
        "server": "f120eab2.0a60a8",
        "command": "set",
        "name": "set issell 1",
        "topic": "",
        "params": "[]",
        "paramsType": "json",
        "payloadType": "json",
        "block": false,
        "x": 2753,
        "y": 4334,
        "wires": [
            []
        ]
    },
    {
        "id": "ed5921c36d15b09e",
        "type": "redis-command",
        "z": "654ea140.2275a8",
        "g": "6d6802907a34719d",
        "server": "f120eab2.0a60a8",
        "command": "set",
        "name": "set busy 0",
        "topic": "",
        "params": "[]",
        "paramsType": "json",
        "payloadType": "json",
        "block": false,
        "x": 3890,
        "y": 3809,
        "wires": [
            []
        ]
    },
    {
        "id": "6e1b7f28c9f6481f",
        "type": "redis-command",
        "z": "654ea140.2275a8",
        "g": "6d6802907a34719d",
        "server": "f120eab2.0a60a8",
        "command": "set",
        "name": "set curorderid 0",
        "topic": "",
        "params": "[]",
        "paramsType": "json",
        "payloadType": "json",
        "block": false,
        "x": 3029,
        "y": 4056,
        "wires": [
            []
        ]
    },
    {
        "id": "8761f23b64d7a2f9",
        "type": "redis-command",
        "z": "654ea140.2275a8",
        "g": "6d6802907a34719d",
        "server": "f120eab2.0a60a8",
        "command": "set",
        "name": "set busy 1",
        "topic": "",
        "params": "[]",
        "paramsType": "json",
        "payloadType": "json",
        "block": false,
        "x": 2353,
        "y": 3941,
        "wires": [
            []
        ]
    },
    {
        "id": "978fe36d9c01fa64",
        "type": "redis-command",
        "z": "654ea140.2275a8",
        "g": "6d6802907a34719d",
        "server": "f120eab2.0a60a8",
        "command": "set",
        "name": "set busy 0",
        "topic": "",
        "params": "[]",
        "paramsType": "json",
        "payloadType": "json",
        "block": false,
        "x": 1510,
        "y": 4041,
        "wires": [
            []
        ]
    },
    {
        "id": "315a6dc929402e0e",
        "type": "redis-command",
        "z": "654ea140.2275a8",
        "g": "6d6802907a34719d",
        "server": "f120eab2.0a60a8",
        "command": "GET",
        "name": "get order status",
        "topic": "msg.topic",
        "params": "[]",
        "paramsType": "json",
        "payloadType": "json",
        "block": false,
        "x": 2240,
        "y": 4660,
        "wires": [
            [
                "7ab04c7bf934d908"
            ]
        ]
    },
    {
        "id": "5b3d6aab5b78c5a1",
        "type": "function",
        "z": "cde16a2385b7b659",
        "name": "check price for sale start",
        "func": "if (msg.bot.status.currentprice >= msg.bot.currentfloor[5]){\n    \n    msg.bot.currentfloor[7] = 3;\n\n    return [null,msg];\n} else {\n\n    return [msg,null];\n}",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 590,
        "y": 740,
        "wires": [
            [
                "182303bbbca545ed"
            ],
            [
                "232587e11c4339b3"
            ]
        ]
    },
    {
        "id": "182303bbbca545ed",
        "type": "link out",
        "z": "cde16a2385b7b659",
        "name": "",
        "links": [
            "8c8e6e2242d53271"
        ],
        "x": 775,
        "y": 700,
        "wires": []
    },
    {
        "id": "232587e11c4339b3",
        "type": "function",
        "z": "cde16a2385b7b659",
        "name": "change floors",
        "func": "node.warn(\"start ttp on floor \"+msg.bot.currentfloor[0]);     \n\n//let tempfin = Number(Number(msg.bot.finance.quotainorders) + Number(msg.bot.currentfloor[14]));\n//\n//let tempfin2 = Number(Number(msg.bot.finance.quotanal) - Number(msg.bot.currentfloor[14]));\n//\n//msg.bot.finance.quotainorders = tempfin.toFixed(msg.bot.settings.digitprice);\n//msg.bot.finance.quotanal = tempfin2.toFixed(msg.bot.settings.digitq);\n//\n//if (msg.bot.finance.baseinorders == -0) {msg.bot.finance.baseinorders = 0;}\n//if (msg.bot.finance.basenal == -0) {msg.bot.finance.basenal = 0;}\n\nlet currentfloor = msg.bot.currentfloor;\ncurrentfloor[7] = 3;\n\nmsg.bot.floors[currentfloor[0]-1] = currentfloor;\n\nnode.status({fill: \"green\", shape: \"ring\"});\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 840,
        "y": 760,
        "wires": [
            [
                "de748f799ff1f766"
            ]
        ]
    },
    {
        "id": "a0731e6ebbef3bfd",
        "type": "function",
        "z": "ef9c825cf92ee31b",
        "d": true,
        "name": "get env",
        "func": "let guid = env.get(\"GOOGLEUID\");\nglobal.set('guid', guid);\n\nlet botlistname = guid + \"-botlist\";\nglobal.set(botlistname, []);\n\nlet key = env.get(\"BINANCEKEY\");\nlet secret = env.get(\"BINANCESECRET\");\nglobal.set('key', key);\nglobal.set('secret', secret);\n\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 550,
        "y": 360,
        "wires": [
            [
                "4fce16d210d954ce"
            ]
        ]
    },
    {
        "id": "495a8602ba41d57e",
        "type": "inject",
        "z": "ef9c825cf92ee31b",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 380,
        "y": 360,
        "wires": [
            [
                "a0731e6ebbef3bfd"
            ]
        ]
    },
    {
        "id": "4fce16d210d954ce",
        "type": "debug",
        "z": "ef9c825cf92ee31b",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 700,
        "y": 360,
        "wires": []
    },
    {
        "id": "1e2bf3cbcaff3749",
        "type": "debug",
        "z": "654ea140.2275a8",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 490,
        "y": 620,
        "wires": []
    },
    {
        "id": "3e9d9a0522243c87",
        "type": "http response",
        "z": "654ea140.2275a8",
        "name": "",
        "statusCode": "200",
        "headers": {},
        "x": 340,
        "y": 600,
        "wires": []
    },
    {
        "id": "9026a7e0e8829057",
        "type": "rbe",
        "z": "654ea140.2275a8",
        "name": "",
        "func": "rbe",
        "gap": "",
        "start": "",
        "inout": "out",
        "septopics": true,
        "property": "payload",
        "topi": "topic",
        "x": 2540,
        "y": 1260,
        "wires": [
            [
                "a17b29df043df727"
            ]
        ]
    },
    {
        "id": "ba49f874ccbe47f5",
        "type": "inject",
        "z": "654ea140.2275a8",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "jjh:e",
        "payload": "{\"a\":1,\"b\":2}",
        "payloadType": "json",
        "x": 2020,
        "y": 1380,
        "wires": [
            [
                "f6a7ea8032597382"
            ]
        ]
    },
    {
        "id": "f6a7ea8032597382",
        "type": "redis-out",
        "z": "654ea140.2275a8",
        "server": "f120eab2.0a60a8",
        "command": "publish",
        "name": "",
        "topic": "",
        "obj": true,
        "x": 2180,
        "y": 1380,
        "wires": []
    },
    {
        "id": "805da40a60d5db31",
        "type": "function",
        "z": "90fc9ad8367cb513",
        "name": "проверка баланса",
        "func": "let quantity = Number((Number(msg.bot.finance.depo) * Number(msg.bot.settings.ordersize) / 100 / msg.bot.status.currentprice).toFixed(msg.bot.settings.digitq));\nlet price = Number((msg.bot.currentfloor[3]).toFixed(msg.bot.settings.digitprice));\n\nlet ordersum = price * quantity;\n//node.warn(ordersum);\n\nif (ordersum <= msg.bot.finance.basenal) {\n    return [msg, null];\n} else {\n    return [null, msg];\n}\n\n",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 830,
        "y": 120,
        "wires": [
            [
                "4b70a3ede126670e",
                "134f7480a4c5af5c"
            ],
            [
                "feffddc4a9baa795"
            ]
        ]
    },
    {
        "id": "feffddc4a9baa795",
        "type": "link out",
        "z": "90fc9ad8367cb513",
        "name": "",
        "links": [
            "cf818f1f6ec91c1b"
        ],
        "x": 975,
        "y": 140,
        "wires": []
    },
    {
        "id": "e99da6578187f6b1",
        "type": "rbe",
        "z": "5f98db3a.7ab21c",
        "name": "",
        "func": "rbe",
        "gap": "",
        "start": "",
        "inout": "out",
        "septopics": false,
        "property": "payload",
        "topi": "topic",
        "x": 580,
        "y": 1120,
        "wires": [
            [
                "ac3992bd.d4dd5"
            ]
        ]
    },
    {
        "id": "bf1c13c6979ef555",
        "type": "function",
        "z": "5f98db3a.7ab21c",
        "g": "1af578fa0e07ad5a",
        "name": "getbot_data",
        "func": "msg.bot = {};\nlet botname = msg.payload;\n\nconst gb = global.get('getbot_data')(botname);\n\n\ngb.then(gb => {\n    //node.warn(gb);\n    let floors = JSON.parse(gb.floors);\n    let finance = JSON.parse(gb.finance);\n    let sales = JSON.parse(gb.sales);\n    let bot = {\n        \"floors\": floors,\n        \"finance\": finance,\n        \"sales\": sales\n    };\n    msg.bot = bot;\n    node.send(msg);\n\n}).catch(error => {\n    node.error(error);\n});",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3050,
        "y": 1220,
        "wires": [
            [
                "d3749cac89a0e2c9",
                "d350ef9a48368ee2"
            ]
        ]
    },
    {
        "id": "3ca4a7878a84e004",
        "type": "debug",
        "z": "5df15275.2888ec",
        "g": "d4a5f2307ef8b222",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 890,
        "y": 1660,
        "wires": []
    },
    {
        "id": "d3749cac89a0e2c9",
        "type": "function",
        "z": "5f98db3a.7ab21c",
        "g": "1af578fa0e07ad5a",
        "name": "getbot_settings",
        "func": "\n\n\nconst gb = global.get('getbot_settings')(msg.payload);\n\ngb.then(gb => {\n    \n    msg.bot.settings = JSON.parse(gb);\n    node.send(msg);\n\n}).catch(error => {\n    node.error(error);\n});",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3220,
        "y": 1220,
        "wires": [
            [
                "b4a4e83ed0643f2c"
            ]
        ]
    },
    {
        "id": "61acbe1ca90546ee",
        "type": "debug",
        "z": "5f98db3a.7ab21c",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1310,
        "y": 940,
        "wires": []
    },
    {
        "id": "af22321898c8895b",
        "type": "debug",
        "z": "5f98db3a.7ab21c",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 2050,
        "y": 900,
        "wires": []
    },
    {
        "id": "3e830c03aa1c5334",
        "type": "function",
        "z": "5f98db3a.7ab21c",
        "name": "clean payload",
        "func": "let moneta = msg.payload.moneta;\nlet price = msg.payload.price;\nlet quantity = msg.payload.quantity;\n\nmsg.payload = {};\n\nmsg.payload.moneta = moneta;\nmsg.payload.price = price;\nmsg.payload.quantity = quantity;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1480,
        "y": 920,
        "wires": [
            [
                "4536c9aab720b34a"
            ]
        ]
    },
    {
        "id": "4536c9aab720b34a",
        "type": "debug",
        "z": "5f98db3a.7ab21c",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1550,
        "y": 860,
        "wires": []
    },
    {
        "id": "264a85cd815392d3",
        "type": "function",
        "z": "5df15275.2888ec",
        "name": "tester___",
        "func": "let start_node_time = new Date().getTime();\n\nnode.status({fill: \"green\", shape: \"ring\", text: start_node_time});\n    \n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2460,
        "y": 900,
        "wires": [
            []
        ]
    },
    {
        "id": "7669643f6654329b",
        "type": "http in",
        "z": "5f98db3a.7ab21c",
        "g": "9364657534c1325f",
        "name": "",
        "url": "/bot_settings",
        "method": "post",
        "upload": false,
        "swaggerDoc": "",
        "x": 2630,
        "y": 1480,
        "wires": [
            [
                "62dad41be283ec5d"
            ]
        ]
    },
    {
        "id": "ef2d9f7d62da9638",
        "type": "http response",
        "z": "5f98db3a.7ab21c",
        "g": "9364657534c1325f",
        "name": "",
        "statusCode": "200",
        "headers": {},
        "x": 3220,
        "y": 1480,
        "wires": []
    },
    {
        "id": "62dad41be283ec5d",
        "type": "function",
        "z": "5f98db3a.7ab21c",
        "g": "9364657534c1325f",
        "name": "getbot_settings",
        "func": "\nconst gb = global.get('getbot_settings')(msg.payload.botname);\n\ngb.then(gb => {\n    \n    msg.payload = JSON.parse(gb);\n    node.send(msg);\n\n}).catch(error => {\n    node.error(error);\n});",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2820,
        "y": 1480,
        "wires": [
            [
                "ef2d9f7d62da9638",
                "1cf435ecad99a012"
            ]
        ]
    },
    {
        "id": "71d456b214e6f53d",
        "type": "function",
        "z": "5f98db3a.7ab21c",
        "name": "getbot_settings",
        "func": "\n\nlet bot = {};\nmsg.bot = bot;\nconst gb = global.get('getbot_settings')(msg.payload.botname);\n\ngb.then(gb => {\n    \n    msg.bot.settings = JSON.parse(gb);\n    node.send(msg);\n\n}).catch(error => {\n    node.error(error);\n});",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2300,
        "y": 1460,
        "wires": [
            []
        ]
    },
    {
        "id": "6edabced39e8ae30",
        "type": "http in",
        "z": "5f98db3a.7ab21c",
        "g": "a2350d1c1b2611d2",
        "name": "",
        "url": "/bot_onoff",
        "method": "post",
        "upload": false,
        "swaggerDoc": "",
        "x": 2640,
        "y": 1580,
        "wires": [
            [
                "f2b2077b7903a0bf"
            ]
        ]
    },
    {
        "id": "0f71f73828a4d664",
        "type": "http response",
        "z": "5f98db3a.7ab21c",
        "g": "a2350d1c1b2611d2",
        "name": "",
        "statusCode": "200",
        "headers": {},
        "x": 3240,
        "y": 1580,
        "wires": []
    },
    {
        "id": "f2b2077b7903a0bf",
        "type": "function",
        "z": "5f98db3a.7ab21c",
        "g": "a2350d1c1b2611d2",
        "name": "getbot_onoff",
        "func": "\nlet botname = msg.payload.botname;\n\nconst gb = global.get('getbot_onoff')(botname);\n\ngb.then(gb => {\n    \n    msg.payload = gb;\n\n\n    node.status({fill:\"green\",shape:\"dot\"});\n    \n    node.send(msg);\n\n}).catch(error => {\n    \n\n    node.status({fill:\"red\",shape:\"dot\"});\n    \n    node.error(error);\n});",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2870,
        "y": 1580,
        "wires": [
            [
                "0f71f73828a4d664",
                "e33907d1e02218ea"
            ]
        ]
    },
    {
        "id": "61097010aa5aa657",
        "type": "debug",
        "z": "5f98db3a.7ab21c",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 3710,
        "y": 1420,
        "wires": []
    },
    {
        "id": "1cf435ecad99a012",
        "type": "debug",
        "z": "5f98db3a.7ab21c",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 3050,
        "y": 1400,
        "wires": []
    },
    {
        "id": "e33907d1e02218ea",
        "type": "debug",
        "z": "5f98db3a.7ab21c",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 3010,
        "y": 1640,
        "wires": []
    },
    {
        "id": "3b02c75b1b966e0c",
        "type": "debug",
        "z": "5f98db3a.7ab21c",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1230,
        "y": 1200,
        "wires": []
    },
    {
        "id": "abf8cd54d2242e28",
        "type": "redis-in",
        "z": "901cd11f1c81ce5d",
        "server": "f120eab2.0a60a8",
        "command": "subscribe",
        "name": "",
        "topic": "MUT",
        "obj": true,
        "timeout": 0,
        "x": 210,
        "y": 360,
        "wires": [
            [
                "0307b0af80bb45f3",
                "ecde09f37fe399fb",
                "99d6e48354b6a474"
            ]
        ]
    },
    {
        "id": "7d13a92171590c5f",
        "type": "inject",
        "z": "901cd11f1c81ce5d",
        "name": "",
        "props": [
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "MUT",
        "x": 1550,
        "y": 1000,
        "wires": [
            [
                "c7c50b82d4751d23"
            ]
        ]
    },
    {
        "id": "9df11f607ae426b9",
        "type": "redis-out",
        "z": "901cd11f1c81ce5d",
        "server": "f120eab2.0a60a8",
        "command": "publish",
        "name": "",
        "topic": "",
        "obj": true,
        "x": 2020,
        "y": 1000,
        "wires": []
    },
    {
        "id": "c7c50b82d4751d23",
        "type": "function",
        "z": "901cd11f1c81ce5d",
        "name": "task",
        "func": "\nlet botname = \"botname-111\";\nlet cmd = \"a\";\nlet data = {\n    \"price\": 11,\n    \"sp\": 12,\n    \"q\": 0.212\n}\nmsg.payload = {botname, cmd, data};\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1770,
        "y": 1000,
        "wires": [
            [
                "9df11f607ae426b9"
            ]
        ]
    },
    {
        "id": "0307b0af80bb45f3",
        "type": "debug",
        "z": "901cd11f1c81ce5d",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "x": 330,
        "y": 420,
        "wires": []
    },
    {
        "id": "f8e38f111434cab0",
        "type": "switch",
        "z": "901cd11f1c81ce5d",
        "name": "cmd",
        "property": "payload.cmd",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "setbuy",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "canselbuy",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "update",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "canselsell",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 4,
        "x": 770,
        "y": 360,
        "wires": [
            [
                "bd1d9bdc5c2c8b4c",
                "440bf51b5f35818f"
            ],
            [
                "9b72287608f77d0f"
            ],
            [
                "4ee69cb630ca0202",
                "755f44bee432bd17"
            ],
            [
                "ad577ba17817a4bb"
            ]
        ]
    },
    {
        "id": "4f8750aa45e880f1",
        "type": "inject",
        "z": "901cd11f1c81ce5d",
        "name": "",
        "props": [
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "MUT",
        "x": 1570,
        "y": 1120,
        "wires": [
            [
                "86786ee60ee5eb93"
            ]
        ]
    },
    {
        "id": "6b2dedde1bc12c8d",
        "type": "redis-out",
        "z": "901cd11f1c81ce5d",
        "server": "f120eab2.0a60a8",
        "command": "publish",
        "name": "",
        "topic": "",
        "obj": true,
        "x": 2040,
        "y": 1120,
        "wires": []
    },
    {
        "id": "86786ee60ee5eb93",
        "type": "function",
        "z": "901cd11f1c81ce5d",
        "name": "mutate task",
        "func": "\nlet botname = \"botname-111\";\nlet cmd = \"a\";\nlet data = {\n    \"price\": 22,\n    \"sp\": 2,\n    \"q\": 0.222212\n}\nmsg.payload = {botname, cmd, data};\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1810,
        "y": 1120,
        "wires": [
            [
                "6b2dedde1bc12c8d"
            ]
        ]
    },
    {
        "id": "ecbd7009e187355c",
        "type": "comment",
        "z": "901cd11f1c81ce5d",
        "name": "обновить статус",
        "info": "",
        "x": 240,
        "y": 1080,
        "wires": []
    },
    {
        "id": "681119d6662e10f0",
        "type": "comment",
        "z": "901cd11f1c81ce5d",
        "name": "setbuy",
        "info": "",
        "x": 970,
        "y": 220,
        "wires": []
    },
    {
        "id": "2fda759a1d0e76b9",
        "type": "comment",
        "z": "901cd11f1c81ce5d",
        "name": "canselbuy",
        "info": "",
        "x": 980,
        "y": 320,
        "wires": []
    },
    {
        "id": "12b5363587ebce65",
        "type": "comment",
        "z": "901cd11f1c81ce5d",
        "name": "setsell",
        "info": "",
        "x": 270,
        "y": 780,
        "wires": []
    },
    {
        "id": "d724ece23450c46d",
        "type": "comment",
        "z": "901cd11f1c81ce5d",
        "name": "marketsell",
        "info": "",
        "x": 260,
        "y": 840,
        "wires": []
    },
    {
        "id": "246e0349a6681672",
        "type": "comment",
        "z": "901cd11f1c81ce5d",
        "name": "marketbuy",
        "info": "",
        "x": 260,
        "y": 900,
        "wires": []
    },
    {
        "id": "ff0c5f59977339e9",
        "type": "comment",
        "z": "901cd11f1c81ce5d",
        "name": "обновить настройки",
        "info": "",
        "x": 220,
        "y": 1120,
        "wires": []
    },
    {
        "id": "a61d380ef55a5813",
        "type": "comment",
        "z": "901cd11f1c81ce5d",
        "name": "зарегистрировать сделку",
        "info": "",
        "x": 210,
        "y": 1200,
        "wires": []
    },
    {
        "id": "4739cd8e9ffaa492",
        "type": "debug",
        "z": "901cd11f1c81ce5d",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "x": 1670,
        "y": 280,
        "wires": []
    },
    {
        "id": "431fcc8955d13b19",
        "type": "comment",
        "z": "901cd11f1c81ce5d",
        "name": "обновить этаж",
        "info": "",
        "x": 240,
        "y": 1040,
        "wires": []
    },
    {
        "id": "ecde09f37fe399fb",
        "type": "function",
        "z": "901cd11f1c81ce5d",
        "name": "topic = botname",
        "func": "\n//msg.bot = msg.payload.bot;\nmsg.topic = msg.payload.data.botname;\nmsg.botname = msg.payload.data.botname;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 380,
        "y": 360,
        "wires": [
            [
                "c549fb11603edbb2",
                "1b695a9a61786224"
            ]
        ]
    },
    {
        "id": "05aebb6a2a3633d2",
        "type": "inject",
        "z": "901cd11f1c81ce5d",
        "name": "",
        "props": [
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "MUT",
        "x": 1370,
        "y": 920,
        "wires": [
            [
                "c4a108c5a416829a"
            ]
        ]
    },
    {
        "id": "30d2be6752ba32c6",
        "type": "redis-out",
        "z": "901cd11f1c81ce5d",
        "server": "f120eab2.0a60a8",
        "command": "publish",
        "name": "",
        "topic": "",
        "obj": true,
        "x": 2020,
        "y": 920,
        "wires": []
    },
    {
        "id": "c4a108c5a416829a",
        "type": "function",
        "z": "901cd11f1c81ce5d",
        "name": "task",
        "func": "\nlet botname = \"botname-11121\";\nlet cmd = \"a\";\nlet data = {\n    \"price\": 11,\n    \"sp\": 12,\n    \"q\": 0.212\n}\nmsg.payload = {botname, cmd, data};\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1770,
        "y": 920,
        "wires": [
            [
                "30d2be6752ba32c6"
            ]
        ]
    },
    {
        "id": "c549fb11603edbb2",
        "type": "rbe",
        "z": "901cd11f1c81ce5d",
        "name": "",
        "func": "rbe",
        "gap": "",
        "start": "",
        "inout": "out",
        "septopics": false,
        "property": "payload.data",
        "topi": "topic",
        "x": 550,
        "y": 360,
        "wires": [
            [
                "f8e38f111434cab0",
                "8f3efbb09a2cc47a",
                "241445ccf5ab4e35"
            ]
        ]
    },
    {
        "id": "da469969e111ace6",
        "type": "comment",
        "z": "901cd11f1c81ce5d",
        "name": "дропаем дубликаты",
        "info": "",
        "x": 540,
        "y": 400,
        "wires": []
    },
    {
        "id": "48e8346ef9e105cc",
        "type": "comment",
        "z": "901cd11f1c81ce5d",
        "name": "обновить этаж",
        "info": "",
        "x": 420,
        "y": 1200,
        "wires": []
    },
    {
        "id": "4c85df4a2f8926df",
        "type": "comment",
        "z": "901cd11f1c81ce5d",
        "name": "panic sell",
        "info": "",
        "x": 260,
        "y": 1260,
        "wires": []
    },
    {
        "id": "dffd9485f884c928",
        "type": "comment",
        "z": "901cd11f1c81ce5d",
        "name": "проскальзывание",
        "info": "",
        "x": 230,
        "y": 1320,
        "wires": []
    },
    {
        "id": "25bafa0116434f92",
        "type": "redis-out",
        "z": "90fc9ad8367cb513",
        "server": "f120eab2.0a60a8",
        "command": "publish",
        "name": "",
        "topic": "",
        "obj": true,
        "x": 1200,
        "y": 40,
        "wires": []
    },
    {
        "id": "4b70a3ede126670e",
        "type": "function",
        "z": "90fc9ad8367cb513",
        "name": "task setbuy",
        "func": "msg.topic = \"MUT\";\n\n//let bot = msg.bot;\nlet cmd = \"setbuy\";\n//let quantity = Number((Number(msg.bot.finance.depo) * Number(msg.bot.settings.ordersize) / 100 / msg.bot.status.currentprice).toFixed(msg.bot.settings.digitq));\n//let price = Number((msg.bot.currentfloor[3]).toFixed(msg.bot.settings.digitprice));\nlet floorindex = msg.bot.currentfloor[0] - 1;\n\nlet data = {\n    \"botname\": msg.botname,\n    \"cmd\": cmd,\n    \"floorindex\": floorindex\n}\nmsg.payload = { cmd, data };\nlet q = {\n    \"msg.bot.status.currentprice \": msg.bot.status.currentprice,\n    \"msg.bot.status.sr_ma_big \": msg.bot.status.sr_ma_big,\n    \"msg.bot.status.sr_ma_small \": msg.bot.status.sr_ma_small\n}\n\n//node.warn(q);\nreturn msg;\n\n\n\n\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1030,
        "y": 40,
        "wires": [
            [
                "25bafa0116434f92"
            ]
        ]
    },
    {
        "id": "1a069936d7387c52",
        "type": "function",
        "z": "901cd11f1c81ce5d",
        "name": "orderexec setbuy",
        "func": "let cmd = \"setbuy\";\n//let quantity = Number(msg.payload.data.quantity);\nlet quantity = Number((Number(msg.bot.finance.depo) * Number(msg.bot.settings.ordersize) / 100 / msg.bot.status.currentprice).toFixed(msg.bot.settings.digitq));\n//let price = Number(msg.payload.data.price);\nlet floor = msg.floorindex;\nlet price = msg.bot.floors[floor][3].toFixed(msg.bot.settings.digitprice);\nlet data = { moneta: msg.bot.settings.moneta, price: price, quantity: quantity};\nconst orderexec = global.get('order_exec')(cmd, data);\n\nlet botname = msg.bot.settings.botname;\n\n//let data2 = botname + \":\" + cmd + \": price:\" + data.price + \", quantity: \" + data.quantity;\n//const tilog = global.get('tilog')(botname, data2);\n//tilog;\n\norderexec.then(orderexec => {\n    msg.orderexec = orderexec;\n    if (orderexec.statusCode === \"ok\") {\n        node.status({ fill: \"green\", shape: \"dot\", text: orderexec.statusBody.orderId });\n        //msg.bot = msg.orderexec.bot;\n        //node.done();\n        node.send(msg);\n\n    } else {\n        node.status({ fill: \"red\", shape: \"dot\" });\n        node.done();\n        node.send(msg);\n    }\n    \n\n}).catch(error => {\n\n    msg.error = error;\n    node.status({ fill: \"red\", shape: \"ring\" });\n\n    node.error(error);\n});\n\n\n\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1310,
        "y": 260,
        "wires": [
            [
                "a2520642114e399e",
                "4fbd14afcd5f921d"
            ]
        ]
    },
    {
        "id": "a2520642114e399e",
        "type": "switch",
        "z": "901cd11f1c81ce5d",
        "name": "statusCode",
        "property": "orderexec.statusCode",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "ok",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "not ok",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 1510,
        "y": 260,
        "wires": [
            [
                "8a3a5f2d194e9072"
            ],
            [
                "4739cd8e9ffaa492",
                "24b7b6edbf44e542"
            ]
        ]
    },
    {
        "id": "8a3a5f2d194e9072",
        "type": "function",
        "z": "901cd11f1c81ce5d",
        "name": "register buy",
        "func": "let floor = msg.floorindex;\nlet currentfloor = msg.bot.floors[floor];\n\ncurrentfloor[7] = 1;\ncurrentfloor[8] = msg.orderexec.statusBody.orderId;\ncurrentfloor[14] = msg.orderexec.statusBody.origQty;\ncurrentfloor[10] = msg.orderexec.statusBody.price;\n\nmsg.bot.floors[currentfloor[0] - 1] = currentfloor;\n\n//msg.bot.finance.baseinorders = (Number(Number(msg.bot.finance.baseinorders) + Number(msg.orderexec.statusBody.origQty) * Number(msg.orderexec.statusBody.price))).toFixed(msg.bot.settings.digitprice);\n//msg.bot.finance.basenal = (Number(Number(msg.bot.finance.basenal) - Number(msg.orderexec.statusBody.origQty) * Number(msg.orderexec.statusBody.price))).toFixed(msg.bot.settings.digitprice);\n\nnode.status({ fill: \"green\", shape: \"ring\", text: currentfloor[0] });\n\n//let data = \"Выставлен ордер - \" + currentfloor[8];\n//const tilog = global.get('tilog')(msg.bot.settings.botname, data);\n//tilog;\n//\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1690,
        "y": 240,
        "wires": [
            [
                "02ce8ba2f5ca8f84"
            ]
        ]
    },
    {
        "id": "134f7480a4c5af5c",
        "type": "link out",
        "z": "90fc9ad8367cb513",
        "d": true,
        "name": "",
        "links": [
            "cf818f1f6ec91c1b"
        ],
        "x": 975,
        "y": 80,
        "wires": []
    },
    {
        "id": "4020a2430d5b3cfb",
        "type": "inject",
        "z": "901cd11f1c81ce5d",
        "g": "5cf80cfa258dfe5b",
        "name": " stop",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "reset",
                "v": "true",
                "vt": "bool"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 730,
        "y": 80,
        "wires": [
            [
                "21ba2e59916313a2"
            ]
        ]
    },
    {
        "id": "21ba2e59916313a2",
        "type": "redis-out",
        "z": "901cd11f1c81ce5d",
        "g": "5cf80cfa258dfe5b",
        "server": "f120eab2.0a60a8",
        "command": "publish",
        "name": "",
        "topic": "stop",
        "obj": false,
        "x": 730,
        "y": 120,
        "wires": []
    },
    {
        "id": "f20f76f59629adc2",
        "type": "inject",
        "z": "901cd11f1c81ce5d",
        "g": "5cf80cfa258dfe5b",
        "name": "start",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 310,
        "y": 80,
        "wires": [
            [
                "5d2efe22cf62c1cd"
            ]
        ]
    },
    {
        "id": "5d2efe22cf62c1cd",
        "type": "redis-out",
        "z": "901cd11f1c81ce5d",
        "g": "5cf80cfa258dfe5b",
        "server": "f120eab2.0a60a8",
        "command": "publish",
        "name": "",
        "topic": "start",
        "obj": false,
        "x": 310,
        "y": 120,
        "wires": []
    },
    {
        "id": "22860af12b84149d",
        "type": "inject",
        "z": "901cd11f1c81ce5d",
        "g": "5cf80cfa258dfe5b",
        "name": "start1",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 490,
        "y": 80,
        "wires": [
            [
                "79ac04bc884585a0"
            ]
        ]
    },
    {
        "id": "79ac04bc884585a0",
        "type": "redis-out",
        "z": "901cd11f1c81ce5d",
        "g": "5cf80cfa258dfe5b",
        "server": "f120eab2.0a60a8",
        "command": "publish",
        "name": "",
        "topic": "start1",
        "obj": false,
        "x": 490,
        "y": 120,
        "wires": []
    },
    {
        "id": "e4eeb03c78ec0577",
        "type": "redis-instance",
        "z": "901cd11f1c81ce5d",
        "g": "5cf80cfa258dfe5b",
        "server": "f120eab2.0a60a8",
        "name": "",
        "topic": "redis",
        "location": "flow",
        "x": 930,
        "y": 100,
        "wires": []
    },
    {
        "id": "d3ee6389fac5f32d",
        "type": "function",
        "z": "901cd11f1c81ce5d",
        "name": "orderexec cansel",
        "func": "let cmd = \"cansel\";\n\nlet orderid = msg.payload.data.orderid;\nlet moneta = msg.payload.data.moneta;\n\nlet data = {\"moneta\":moneta, \"orderid\": orderid};\nconst orderexec = global.get('order_exec')(cmd,data);\n\nlet botname = msg.topic;\n\n//let data2 = botname+\":\"+cmd+\": orderid:\"+orderid;\n//const tilog = global.get('tilog')(botname,data2);\n//tilog;\n\norderexec.then(orderexec => {\n    msg.orderexec = orderexec;\n    if (orderexec.statusCode === \"ok\"){\n        node.status({fill:\"green\",shape:\"dot\", text: orderexec.statusBody.orderId});\n        //msg.bot = msg.orderexec.bot;\n\n                                //msg.bot.ttp.curorderid = resp.orderId;\n                        //msg.bot.ttp.curstop = stopprice;\n                        //msg.bot.ttp.quantity = quantity;\n        \n\n        \n        node.send(msg);\n        \n    } else {\n        node.status({fill:\"red\",shape:\"dot\"});\n        //msg.bot.ttp.curorderid = 0;\n        node.done();\n        node.send(msg);\n    }\n    \n\n}).catch(error => {\n    \n    msg.error = error;\n    node.status({fill:\"red\",shape: \"ring\"});\n    \n    node.error(error);\n});\n\n\n\n\n\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1430,
        "y": 360,
        "wires": [
            [
                "5da0e186ee7f18ee"
            ]
        ]
    },
    {
        "id": "5da0e186ee7f18ee",
        "type": "switch",
        "z": "901cd11f1c81ce5d",
        "name": "statusCode",
        "property": "orderexec.statusCode",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "ok",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "not ok",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 1630,
        "y": 360,
        "wires": [
            [
                "1ff96b1ae0552dbe",
                "201cd455e30830bf"
            ],
            [
                "11a5c4150d018ca6",
                "c48a76fa56f88a29"
            ]
        ]
    },
    {
        "id": "58d2cee52c41aedd",
        "type": "redis-out",
        "z": "90fc9ad8367cb513",
        "server": "f120eab2.0a60a8",
        "command": "publish",
        "name": "",
        "topic": "",
        "obj": true,
        "x": 1920,
        "y": 540,
        "wires": []
    },
    {
        "id": "2b6bf8f4980871fd",
        "type": "function",
        "z": "90fc9ad8367cb513",
        "name": "task canselbuy",
        "func": "msg.topic = \"MUT\";\n\nlet cmd = \"canselbuy\";\nlet orderid = msg.bot.currentfloor[8];\nlet floorindex = msg.bot.currentfloor[0] - 1;\n\nlet data = {\n    \"botname\": msg.botname,\n    \"cmd\": cmd,\n    \"orderid\": orderid,\n    \"moneta\": msg.bot.settings.moneta,\n    \"floorindex\": floorindex\n}\nmsg.payload = {cmd, data};\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1740,
        "y": 540,
        "wires": [
            [
                "58d2cee52c41aedd"
            ]
        ]
    },
    {
        "id": "11a5c4150d018ca6",
        "type": "debug",
        "z": "901cd11f1c81ce5d",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "x": 1790,
        "y": 380,
        "wires": []
    },
    {
        "id": "9749ef3a9a8c6349",
        "type": "link out",
        "z": "90fc9ad8367cb513",
        "d": true,
        "name": "",
        "links": [
            "cf818f1f6ec91c1b"
        ],
        "x": 1675,
        "y": 500,
        "wires": []
    },
    {
        "id": "a6b3380fc3396db1",
        "type": "redis-out",
        "z": "cde16a2385b7b659",
        "server": "f120eab2.0a60a8",
        "command": "publish",
        "name": "",
        "topic": "",
        "obj": true,
        "x": 1820,
        "y": 520,
        "wires": []
    },
    {
        "id": "afbb5f7ec1c6d799",
        "type": "function",
        "z": "cde16a2385b7b659",
        "name": "task canselbuy",
        "func": "msg.topic = \"MUT\";\n\nlet cmd = \"canselbuy\";\nlet orderid = msg.bot.currentfloor[8];\nlet floorindex = msg.bot.currentfloor[0] - 1;\n\nlet data = {\n    \"botname\": msg.botname,\n    \"cmd\": cmd,\n    \"orderid\": orderid,\n    \"moneta\": msg.bot.settings.moneta,\n    \"floorindex\": floorindex\n}\nmsg.payload = {cmd, data};\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1660,
        "y": 520,
        "wires": [
            [
                "a6b3380fc3396db1"
            ]
        ]
    },
    {
        "id": "a370932bd18df9e5",
        "type": "link out",
        "z": "cde16a2385b7b659",
        "d": true,
        "name": "",
        "links": [
            "8c8e6e2242d53271"
        ],
        "x": 1515,
        "y": 520,
        "wires": []
    },
    {
        "id": "4ce0a48bf5dffca8",
        "type": "link out",
        "z": "cde16a2385b7b659",
        "name": "",
        "links": [
            "8c8e6e2242d53271"
        ],
        "x": 1915,
        "y": 620,
        "wires": []
    },
    {
        "id": "a7faaa6d526e6c9c",
        "type": "link out",
        "z": "cde16a2385b7b659",
        "name": "",
        "links": [
            "8c8e6e2242d53271"
        ],
        "x": 1915,
        "y": 680,
        "wires": []
    },
    {
        "id": "34931257ff9e6898",
        "type": "link out",
        "z": "cde16a2385b7b659",
        "name": "",
        "links": [
            "8c8e6e2242d53271"
        ],
        "x": 1915,
        "y": 320,
        "wires": []
    },
    {
        "id": "5d3d637e90a55a63",
        "type": "link out",
        "z": "cde16a2385b7b659",
        "name": "",
        "links": [
            "8c8e6e2242d53271"
        ],
        "x": 1915,
        "y": 400,
        "wires": []
    },
    {
        "id": "de748f799ff1f766",
        "type": "link out",
        "z": "cde16a2385b7b659",
        "name": "",
        "links": [
            "8c8e6e2242d53271"
        ],
        "x": 1035,
        "y": 760,
        "wires": []
    },
    {
        "id": "bb61ca341de9e577",
        "type": "redis-out",
        "z": "90fc9ad8367cb513",
        "server": "f120eab2.0a60a8",
        "command": "publish",
        "name": "",
        "topic": "",
        "obj": true,
        "x": 2140,
        "y": 360,
        "wires": []
    },
    {
        "id": "89699a879776b15f",
        "type": "function",
        "z": "90fc9ad8367cb513",
        "name": "task update",
        "func": "msg.topic = \"MUT\";\n\nlet cmd = \"update\";\n\nlet data = {\n    \"botname\": msg.botname,\n    \"cmd\": cmd,\n    \"floors\": msg.bot.floors,\n    \"finance\": msg.bot.finance,\n    \"sales\": msg.bot.sales\n\n}\nmsg.payload = {cmd, data};\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1990,
        "y": 360,
        "wires": [
            [
                "bb61ca341de9e577"
            ]
        ]
    },
    {
        "id": "edc02330fb9cd001",
        "type": "link out",
        "z": "90fc9ad8367cb513",
        "name": "",
        "links": [
            "cf818f1f6ec91c1b"
        ],
        "x": 1915,
        "y": 320,
        "wires": []
    },
    {
        "id": "c5bb7cb3aa6ea35a",
        "type": "link out",
        "z": "90fc9ad8367cb513",
        "name": "",
        "links": [
            "cf818f1f6ec91c1b"
        ],
        "x": 1875,
        "y": 400,
        "wires": []
    },
    {
        "id": "c9a0a43259a49081",
        "type": "link out",
        "z": "90fc9ad8367cb513",
        "name": "",
        "links": [
            "cf818f1f6ec91c1b"
        ],
        "x": 1915,
        "y": 680,
        "wires": []
    },
    {
        "id": "e9aacb0ba78c7334",
        "type": "link out",
        "z": "90fc9ad8367cb513",
        "name": "",
        "links": [
            "cf818f1f6ec91c1b"
        ],
        "x": 1915,
        "y": 600,
        "wires": []
    },
    {
        "id": "433f865cc1911ab1",
        "type": "redis-out",
        "z": "90fc9ad8367cb513",
        "server": "f120eab2.0a60a8",
        "command": "publish",
        "name": "",
        "topic": "",
        "obj": true,
        "x": 3480,
        "y": 140,
        "wires": []
    },
    {
        "id": "fa151a6886b00af3",
        "type": "function",
        "z": "90fc9ad8367cb513",
        "name": "task update",
        "func": "msg.topic = \"MUT\";\n\nlet bot = msg.bot;\nlet cmd = \"update\";\n\n\nlet data = {\n    \"cmd\": cmd,\n    \"floors\": msg.bot.floors,\n    \"finance\": msg.bot.finance,\n    \"sales\": msg.bot.sales\n\n}\nmsg.payload = {bot, cmd, data};\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3310,
        "y": 140,
        "wires": [
            [
                "433f865cc1911ab1"
            ]
        ]
    },
    {
        "id": "3b489b91837a0c1b",
        "type": "link out",
        "z": "90fc9ad8367cb513",
        "name": "",
        "links": [
            "cf818f1f6ec91c1b"
        ],
        "x": 975,
        "y": 760,
        "wires": []
    },
    {
        "id": "04ae917016906fc7",
        "type": "comment",
        "z": "901cd11f1c81ce5d",
        "name": "update",
        "info": "",
        "x": 990,
        "y": 460,
        "wires": []
    },
    {
        "id": "9b72287608f77d0f",
        "type": "switch",
        "z": "901cd11f1c81ce5d",
        "name": "orderid > 0",
        "property": "payload.data.orderid",
        "propertyType": "msg",
        "rules": [
            {
                "t": "gt",
                "v": "0",
                "vt": "num"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 1030,
        "y": 360,
        "wires": [
            [
                "4a189b4385237720",
                "011fa77a88868c27"
            ]
        ]
    },
    {
        "id": "4a189b4385237720",
        "type": "debug",
        "z": "901cd11f1c81ce5d",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "x": 1210,
        "y": 400,
        "wires": []
    },
    {
        "id": "1ff96b1ae0552dbe",
        "type": "debug",
        "z": "901cd11f1c81ce5d",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "x": 1790,
        "y": 340,
        "wires": []
    },
    {
        "id": "1b695a9a61786224",
        "type": "debug",
        "z": "901cd11f1c81ce5d",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "x": 590,
        "y": 440,
        "wires": []
    },
    {
        "id": "8f3efbb09a2cc47a",
        "type": "debug",
        "z": "901cd11f1c81ce5d",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "x": 790,
        "y": 440,
        "wires": []
    },
    {
        "id": "ed4fd6ba46f8516f",
        "type": "debug",
        "z": "5f98db3a.7ab21c",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1790,
        "y": 1080,
        "wires": []
    },
    {
        "id": "0c245c89ee18c959",
        "type": "catch",
        "z": "5f98db3a.7ab21c",
        "name": "",
        "scope": [
            "241d62c4.835d6e"
        ],
        "uncaught": false,
        "x": 1730,
        "y": 900,
        "wires": [
            [
                "d82e020b5a4a47a5"
            ]
        ]
    },
    {
        "id": "d82e020b5a4a47a5",
        "type": "debug",
        "z": "5f98db3a.7ab21c",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1900,
        "y": 900,
        "wires": []
    },
    {
        "id": "bd1d9bdc5c2c8b4c",
        "type": "function",
        "z": "901cd11f1c81ce5d",
        "name": "global.get(msg.botname);",
        "func": "\nmsg.floorindex = msg.payload.data.floorindex;\nlet bot = global.get(msg.botname);\nmsg.bot = bot;\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1070,
        "y": 260,
        "wires": [
            [
                "1a069936d7387c52",
                "6c31547e74d94439"
            ]
        ]
    },
    {
        "id": "f37eab2f7b907f13",
        "type": "redis-out",
        "z": "90fc9ad8367cb513",
        "server": "f120eab2.0a60a8",
        "command": "publish",
        "name": "",
        "topic": "",
        "obj": true,
        "x": 2140,
        "y": 440,
        "wires": []
    },
    {
        "id": "ef010e6b55ded352",
        "type": "function",
        "z": "90fc9ad8367cb513",
        "name": "task update",
        "func": "msg.topic = \"MUT\";\n\nlet cmd = \"update\";\n\nlet data = {\n    \"botname\": msg.botname,\n    \"cmd\": cmd,\n    \"floors\": msg.bot.floors,\n    \"finance\": msg.bot.finance,\n    \"sales\": msg.bot.sales\n\n}\nmsg.payload = {cmd, data};\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1990,
        "y": 440,
        "wires": [
            [
                "f37eab2f7b907f13"
            ]
        ]
    },
    {
        "id": "ff53bf9c68a0aba8",
        "type": "redis-out",
        "z": "90fc9ad8367cb513",
        "server": "f120eab2.0a60a8",
        "command": "publish",
        "name": "",
        "topic": "",
        "obj": true,
        "x": 2180,
        "y": 740,
        "wires": []
    },
    {
        "id": "659d6dc62cb0f27d",
        "type": "function",
        "z": "90fc9ad8367cb513",
        "name": "task update",
        "func": "msg.topic = \"MUT\";\n\nlet cmd = \"update\";\n\nlet data = {\n    \"botname\": msg.botname,\n    \"cmd\": cmd,\n    \"floors\": msg.bot.floors,\n    \"finance\": msg.bot.finance,\n    \"sales\": msg.bot.sales\n\n}\nmsg.payload = {cmd, data};\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2030,
        "y": 740,
        "wires": [
            [
                "ff53bf9c68a0aba8"
            ]
        ]
    },
    {
        "id": "f9b8e633fe81af01",
        "type": "redis-out",
        "z": "90fc9ad8367cb513",
        "server": "f120eab2.0a60a8",
        "command": "publish",
        "name": "",
        "topic": "",
        "obj": true,
        "x": 2180,
        "y": 640,
        "wires": []
    },
    {
        "id": "545fab0c1a179fb3",
        "type": "function",
        "z": "90fc9ad8367cb513",
        "name": "task update",
        "func": "msg.topic = \"MUT\";\n\nlet cmd = \"update\";\n\nlet data = {\n    \"botname\": msg.botname,\n    \"cmd\": cmd,\n    \"floors\": msg.bot.floors,\n    \"finance\": msg.bot.finance,\n    \"sales\": msg.bot.sales\n\n}\nmsg.payload = {cmd, data};\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2030,
        "y": 640,
        "wires": [
            [
                "f9b8e633fe81af01"
            ]
        ]
    },
    {
        "id": "c55aa818edeee318",
        "type": "link out",
        "z": "901cd11f1c81ce5d",
        "name": "",
        "links": [
            "e34a5b68.726ec8",
            "f45f3249dbec7058"
        ],
        "x": 2135,
        "y": 240,
        "wires": []
    },
    {
        "id": "ff26ac7ccf964923",
        "type": "link out",
        "z": "901cd11f1c81ce5d",
        "name": "",
        "links": [
            "e34a5b68.726ec8",
            "f45f3249dbec7058"
        ],
        "x": 2395,
        "y": 340,
        "wires": []
    },
    {
        "id": "011fa77a88868c27",
        "type": "function",
        "z": "901cd11f1c81ce5d",
        "name": "getbot_settings",
        "func": "\nmsg.floorindex = msg.payload.data.floorindex;\n\nlet bot = global.get(msg.botname);\nmsg.bot = bot;\nreturn msg;\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1220,
        "y": 360,
        "wires": [
            [
                "d3ee6389fac5f32d"
            ]
        ]
    },
    {
        "id": "378e488cecf6ffc2",
        "type": "link out",
        "z": "901cd11f1c81ce5d",
        "name": "",
        "links": [
            "e34a5b68.726ec8",
            "f45f3249dbec7058"
        ],
        "x": 1975,
        "y": 420,
        "wires": []
    },
    {
        "id": "113ec5ce8fcdef3a",
        "type": "switch",
        "z": "2a761808.610238",
        "name": "currentprice < curstop ",
        "property": "bot.ttp.currentprice",
        "propertyType": "msg",
        "rules": [
            {
                "t": "gte",
                "v": "bot.ttp.curstop",
                "vt": "msg"
            },
            {
                "t": "lt",
                "v": "bot.ttp.curstop",
                "vt": "msg"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 460,
        "y": 1620,
        "wires": [
            [
                "d9cd8b69.9e4298",
                "15ed4f36d4e7c9da",
                "ae92ec1796ac14de"
            ],
            [
                "79c849c0dbfa5d25",
                "217c43fc2b7e5524",
                "87238f2de96efe56"
            ]
        ]
    },
    {
        "id": "74bba3301ae3c8e3",
        "type": "function",
        "z": "2a761808.610238",
        "name": "orderexec cansel",
        "func": "\nlet cmd = \"cansel\";\nlet orderid = msg.bot.ttp.curorderid;\n\n\nlet data = { moneta: msg.bot.settings.moneta, orderid: orderid};\nconst orderexec = global.get('order_exec')(cmd, data);\n\n//let botname = msg.bot.settings.botname;\n//let data2 = \"cansel order id:\" + orderid;\n//const tilog = global.get('tilog')(botname, data2);\n//tilog;\n\norderexec.then(orderexec => {\n    msg.orderexec = orderexec;\n    if (orderexec.statusCode === \"ok\") {\n        node.status({ fill: \"green\", shape: \"dot\", text: orderexec.statusBody.orderId });\n        //msg.bot = msg.orderexec.bot;\n        msg.bot.ttp.curorderid = 0;\n\n\n       \n\n\n        let tempfin = Number(Number(msg.bot.finance.baseinorders) - Number(msg.bot.ttp.quantity) * Number(msg.bot.ttp.curstop));\n        let tempfin2 = Number(Number(msg.bot.finance.basenal) + Number(msg.bot.ttp.quantity) * Number(msg.bot.ttp.curstop));\n\n        msg.bot.finance.baseinorders = tempfin.toFixed(msg.bot.settings.digitprice);\n        msg.bot.finance.basenal = tempfin2.toFixed(msg.bot.settings.digitprice);\n\n\n        node.send(msg);\n\n    } else {\n        node.status({ fill: \"red\", shape: \"dot\" });\n\n        \n\n        node.send(msg);\n    }\n\n\n}).catch(error => {\n\n    msg.error = error;\n    node.status({ fill: \"red\", shape: \"ring\" });\n\n    node.error(error);\n});\n\n\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 890,
        "y": 1760,
        "wires": [
            [
                "dec1e5ad1faa22d5"
            ]
        ]
    },
    {
        "id": "dec1e5ad1faa22d5",
        "type": "switch",
        "z": "2a761808.610238",
        "name": "statusCode",
        "property": "orderexec.statusCode",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "ok",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "not ok",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 1090,
        "y": 1760,
        "wires": [
            [
                "46607ceede3526b3"
            ],
            [
                "1d3063e027dc1c0c"
            ]
        ]
    },
    {
        "id": "46607ceede3526b3",
        "type": "function",
        "z": "2a761808.610238",
        "name": "orderexec marketsell",
        "func": "//<трекер<\nlet trackname = \"ttp-track-\" + msg.botname;\nlet track = flow.get(trackname);\nlet start_node_time = new Date().getTime();\n\nlet steptitle = node.name;\n\nlet laststep = track[track.length - 1];\nlet last_node_end_time = laststep.end_node_time;\n//>трекер>\n\nlet cmd = \"marketsell\";\n\nlet data = { moneta: msg.bot.settings.moneta, quantity: msg.bot.ttp.quantity, bot: msg.bot };\n\n\nconst orderexec = global.get('order_exec')(cmd, data);\n\n//let botname = msg.bot.settings.botname;\n//let data2 = \"setsell\" + msg.botname;\n//const tilog = global.get('tilog')(botname, data2);\n//tilog;\n\norderexec.then(orderexec => {\n    msg.orderexec = orderexec;\n    if (orderexec.statusCode == \"ok\") {\n        node.status({ fill: \"green\", shape: \"dot\", text: orderexec.statusBody.orderId });\n        //msg.bot = msg.orderexec.bot;\n        \n        //msg.bot.ttp.curorderid = 0;\n        msg.bot.ttp.curstop = 0;\n        msg.bot.ttp.finalorder = orderexec.statusBody.orderId;\n        //msg.bot.ttp.quantity = 0;\n        \n        //>трекер>\n        let end_node_time = new Date().getTime();\n        let duration = end_node_time - start_node_time;\n        let duration_step = end_node_time - last_node_end_time;\n        track.push({\n            \"steptitle\": steptitle,\n            \"start_node_time\": start_node_time,\n            \"end_node_time\": end_node_time,\n            \"duration_node\": duration,\n            \"duration_step\": duration_step\n        });\n        flow.set(trackname, track);\n        //>трекер>\n\n        node.send(msg);\n\n    } else {\n        node.status({ fill: \"red\", shape: \"dot\" });\n\n        //>трекер>\n        let end_node_time = new Date().getTime();\n        let duration = end_node_time - start_node_time;\n        let duration_step = end_node_time - last_node_end_time;\n        track.push({\n            \"steptitle\": steptitle + \"-faile\",\n            \"start_node_time\": start_node_time,\n            \"end_node_time\": end_node_time,\n            \"duration\": duration,\n            \"duration_step\": duration_step,\n            \"error\": orderexec.statusBody\n        });\n        flow.set(trackname, track);\n        //>трекер>\n\n        node.send(msg);\n    }\n\n\n}).catch(error => {\n\n    msg.error = error;\n    node.status({ fill: \"red\", shape: \"ring\" });\n\n    node.error(error);\n});\n\n\n\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1300,
        "y": 1720,
        "wires": [
            [
                "44b5fd4edf5c653b"
            ]
        ]
    },
    {
        "id": "44b5fd4edf5c653b",
        "type": "switch",
        "z": "2a761808.610238",
        "name": "statusCode",
        "property": "orderexec.statusCode",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "ok",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "not ok",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 1510,
        "y": 1720,
        "wires": [
            [
                "2a4008a7dacc6a1d"
            ],
            [
                "ae42249cd5628036"
            ]
        ]
    },
    {
        "id": "ae42249cd5628036",
        "type": "function",
        "z": "2a761808.610238",
        "name": "tilog",
        "func": "let botname = msg.bot.settings.botname;\nlet data = \"Ошибка при выставлении ордера - \"+msg.orderexec.statusBody;\nconst tilog = global.get('tilog')(botname,data);\n\ntilog.then(tilog => {\n\n\n        node.status({fill:\"green\",shape:\"dot\"});\n    node.send(msg);\n     \n    \n\n}).catch(error => {\n    \n    msg.error = error;\n    node.status({fill:\"red\",shape: \"ring\"});\n    \n    node.error(error);\n});",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1670,
        "y": 1760,
        "wires": [
            [
                "25e5da747f055ffb"
            ]
        ]
    },
    {
        "id": "25e5da747f055ffb",
        "type": "link out",
        "z": "2a761808.610238",
        "name": "",
        "links": [
            "ccd55cdb.7ed72"
        ],
        "x": 1775,
        "y": 1760,
        "wires": []
    },
    {
        "id": "e2792195433f8db3",
        "type": "catch",
        "z": "2a761808.610238",
        "name": "",
        "scope": [
            "74bba3301ae3c8e3"
        ],
        "uncaught": false,
        "x": 850,
        "y": 1800,
        "wires": [
            [
                "d4eb6a51a2569940"
            ]
        ]
    },
    {
        "id": "d4eb6a51a2569940",
        "type": "debug",
        "z": "2a761808.610238",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 890,
        "y": 1840,
        "wires": []
    },
    {
        "id": "19361e3af7e3567c",
        "type": "comment",
        "z": "901cd11f1c81ce5d",
        "name": "canselsell",
        "info": "",
        "x": 1000,
        "y": 580,
        "wires": []
    },
    {
        "id": "96c37d8f31461f54",
        "type": "function",
        "z": "901cd11f1c81ce5d",
        "name": "orderexec cansel",
        "func": "let cmd = \"cansel\";\n\nlet orderid = msg.payload.data.orderid;\nlet moneta = msg.payload.data.moneta;\n\nlet data = {\"moneta\":moneta, \"orderid\": orderid};\nconst orderexec = global.get('order_exec')(cmd,data);\n\nlet botname = msg.topic;\n\n//let data2 = botname+\":\"+cmd+\": orderid:\"+orderid;\n//const tilog = global.get('tilog')(botname,data2);\n//tilog;\n\norderexec.then(orderexec => {\n    msg.orderexec = orderexec;\n    if (orderexec.statusCode === \"ok\"){\n        node.status({fill:\"green\",shape:\"dot\", text: orderexec.statusBody.orderId});\n        msg.bot = msg.orderexec.bot;\n\n                                //msg.bot.ttp.curorderid = resp.orderId;\n                        //msg.bot.ttp.curstop = stopprice;\n                        //msg.bot.ttp.quantity = quantity;\n        \n\n        \n        node.send(msg);\n        \n    } else {\n        node.status({fill:\"red\",shape:\"dot\"});\n        \n        node.send(msg);\n    }\n    \n\n}).catch(error => {\n    \n    msg.error = error;\n    node.status({fill:\"red\",shape: \"ring\"});\n    \n    node.error(error);\n});\n\n\n\n\n\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1410,
        "y": 640,
        "wires": [
            [
                "4223ce3dccf32fd2"
            ]
        ]
    },
    {
        "id": "4223ce3dccf32fd2",
        "type": "switch",
        "z": "901cd11f1c81ce5d",
        "name": "statusCode",
        "property": "orderexec.statusCode",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "ok",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "not ok",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 1610,
        "y": 640,
        "wires": [
            [
                "2cdf686a891a2ddc",
                "18718405350be09f"
            ],
            [
                "a70a058ad33bf569",
                "b7144266c845692c"
            ]
        ]
    },
    {
        "id": "a70a058ad33bf569",
        "type": "debug",
        "z": "901cd11f1c81ce5d",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "x": 1770,
        "y": 660,
        "wires": []
    },
    {
        "id": "ad577ba17817a4bb",
        "type": "switch",
        "z": "901cd11f1c81ce5d",
        "d": true,
        "name": "orderid > 0",
        "property": "payload.data.orderid",
        "propertyType": "msg",
        "rules": [
            {
                "t": "gt",
                "v": "0",
                "vt": "num"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 1030,
        "y": 640,
        "wires": [
            [
                "885387f4685c4d38",
                "d1d6bd692b514076"
            ]
        ]
    },
    {
        "id": "885387f4685c4d38",
        "type": "debug",
        "z": "901cd11f1c81ce5d",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "x": 1190,
        "y": 680,
        "wires": []
    },
    {
        "id": "2cdf686a891a2ddc",
        "type": "debug",
        "z": "901cd11f1c81ce5d",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "x": 1710,
        "y": 620,
        "wires": []
    },
    {
        "id": "d1d6bd692b514076",
        "type": "function",
        "z": "901cd11f1c81ce5d",
        "name": "getbot_settings",
        "func": "\nmsg.floor = msg.payload.data.floor - 1;\nlet bot = {};\nmsg.bot = bot;\nconst gb = global.get('getbot_settings')(msg.topic);\n\ngb.then(gb => {\n\n    msg.bot.settings = JSON.parse(gb);\n\n   \n    node.status({ fill: \"green\", shape: \"dot\" });\n\n    node.send(msg);\n\n}).catch(error => {\n\n   \n    node.status({ fill: \"red\", shape: \"dot\" });\n\n    node.error(error);\n});",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1200,
        "y": 640,
        "wires": [
            [
                "96c37d8f31461f54"
            ]
        ]
    },
    {
        "id": "18718405350be09f",
        "type": "link out",
        "z": "901cd11f1c81ce5d",
        "d": true,
        "name": "",
        "links": [
            "ccd55cdb.7ed72",
            "f6b5200578938ada",
            "6bc676d5547374d8"
        ],
        "x": 1815,
        "y": 620,
        "wires": []
    },
    {
        "id": "b7144266c845692c",
        "type": "link out",
        "z": "901cd11f1c81ce5d",
        "d": true,
        "name": "",
        "links": [
            "6bc676d5547374d8",
            "ccd55cdb.7ed72"
        ],
        "x": 1875,
        "y": 660,
        "wires": []
    },
    {
        "id": "c48a76fa56f88a29",
        "type": "function",
        "z": "901cd11f1c81ce5d",
        "name": "get_order_status",
        "func": "\nlet orderid = msg.payload.data.orderid;\nlet moneta = msg.payload.data.moneta;\n\nconst get_order_status = global.get('get_order_status')(moneta, orderid);\n\nget_order_status.then(result => {\n\n    msg.payload = result;\n\n    node.status({ fill: \"green\", shape: \"dot\" });\n    node.send(msg);\n\n}).catch(error => {\n\n    node.status({ fill: \"red\", shape: \"dot\" });\n    node.error(error);\n});",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1830,
        "y": 420,
        "wires": [
            [
                "378e488cecf6ffc2"
            ]
        ]
    },
    {
        "id": "a27961fd36927619",
        "type": "debug",
        "z": "5f98db3a.7ab21c",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 3060,
        "y": 1160,
        "wires": []
    },
    {
        "id": "ce8d836f2e10dc86",
        "type": "debug",
        "z": "5f98db3a.7ab21c",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 2910,
        "y": 1140,
        "wires": []
    },
    {
        "id": "d2defd5285e34ff1",
        "type": "function",
        "z": "5df15275.2888ec",
        "g": "d4a5f2307ef8b222",
        "name": "tester___",
        "func": "let start_node_time = new Date().getTime();\n\nnode.status({fill: \"green\", shape: \"ring\", text: start_node_time});\n    \n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 1100,
        "y": 1560,
        "wires": [
            []
        ]
    },
    {
        "id": "4ee69cb630ca0202",
        "type": "debug",
        "z": "901cd11f1c81ce5d",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "x": 1190,
        "y": 460,
        "wires": []
    },
    {
        "id": "c62c23ae0ab35614",
        "type": "debug",
        "z": "901cd11f1c81ce5d",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "x": 1630,
        "y": 540,
        "wires": []
    },
    {
        "id": "8363e0919dd1093d",
        "type": "function",
        "z": "901cd11f1c81ce5d",
        "name": "update bot floors, finance triger",
        "func": "let botname = msg.topic;\nlet guid = global.get('guid');\n\nlet finance = msg.payload.data.finance;\nlet floors = msg.payload.data.floors;\nlet sales = msg.payload.data.sales;\n\nlet sumsales = 0;\nsales.all.forEach(function (element) {\n    sumsales = sumsales + element[5];\n\n});\n\nlet quotanal = 0;\nlet quotainorders = 0;\nlet basenal = Number(finance.startdepo) + Number(sumsales); \nlet baseinorders = 0;\n\n\n\nfloors.forEach(function (item, i, floors) {\n\n    if (item[7] === 1) {\n        baseinorders = baseinorders + Number(item[14]) * Number(item[3]);\n        basenal = basenal - Number(item[14]) * Number(item[3]);\n\n    }\n    if (item[7] === 2) {\n        quotanal = quotanal + Number(item[14]);\n        basenal = basenal - Number(item[14]) * Number(item[10]);\n    }\n    if (item[7] === 3) {\n        quotainorders = quotainorders + Number(item[14]);\n        //quotanal = quotanal - Number(item[14]);\n        basenal = basenal - Number(item[14]) * Number(item[10]);\n    }\n\n\n\n});\nfinance.quotanal = (Number(quotanal)).toFixed(msg.bot.settings.digitq);\nfinance.quotainorders = (Number(quotainorders)).toFixed(msg.bot.settings.digitq);\nfinance.basenal = (Number(basenal)).toFixed(msg.bot.settings.digitprice);\nfinance.baseinorders = (Number(baseinorders)).toFixed(msg.bot.settings.digitprice);\n\nlet p = Number(msg.bot.status.currentprice);\nfinance.depo = Number((Number(finance.quotanal) * p + Number(finance.quotainorders) * p + Number(finance.basenal) + Number(finance.baseinorders)).toFixed(msg.bot.settings.digitprice));\n\nmsg.bot.finance = finance;\nmsg.bot.floors = floors;\nmsg.bot.sales = sales;\n\n\nglobal.set(msg.botname, msg.bot);\n\n\n\nlet volname = guid + \"-bots:\" + botname + \":data\";\nlet botdata = {\n    \"finance\": JSON.stringify(finance),\n    \"floors\": JSON.stringify(floors),\n    \"sales\": JSON.stringify(sales)\n\n};\n\n//node.warn([baseinorders, basenal, quotainorders, quotanal]);\n\n\nconst upd = global.get('setbot_data')(volname, botdata);\n\nupd.then(upd => {\n\n    msg.payload = upd;\n\n    node.status({ fill: \"green\", shape: \"ring\" });\n    node.send(msg);\n\n}).catch(error => {\n\n    node.status({ fill: \"red\", shape: \"ring\", text: \"error\" });\n    node.error(error);\n});\n\n\n\n\n\n//let buyprice = Number(item[10]);\n//let quantity = Number(item[14]);\n//let p = quantity * (sellprice - buyprice);\n//let c = quantity * (Number(sellprice + buyprice)) / 100 * commision;\n//let net = p - c;\n//tempfin2 = tempfin2 - c;\n//msg.bot.sales.today.push([buyprice, sellprice, quantity, p, c, net]);\n//msg.bot.sales.all.push([buyprice, sellprice, quantity, p, c, net]);\n//\n//node.warn([buyprice, sellprice, quantity, p, c, net]);\n\n\n\n\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1490,
        "y": 500,
        "wires": [
            [
                "c62c23ae0ab35614",
                "c6b2e3e9d09dc7ab"
            ]
        ]
    },
    {
        "id": "c6b2e3e9d09dc7ab",
        "type": "link out",
        "z": "901cd11f1c81ce5d",
        "name": "",
        "links": [
            "e34a5b68.726ec8",
            "f45f3249dbec7058"
        ],
        "x": 1675,
        "y": 500,
        "wires": []
    },
    {
        "id": "ab2e499319b986e4",
        "type": "switch",
        "z": "2a761808.610238",
        "name": "order id > 0 ",
        "property": "bot.ttp.curorderid",
        "propertyType": "msg",
        "rules": [
            {
                "t": "gt",
                "v": "0",
                "vt": "num"
            },
            {
                "t": "eq",
                "v": "0",
                "vt": "num"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 1010,
        "y": 1380,
        "wires": [
            [
                "22ce871e.981968"
            ],
            [
                "4fd0e3157fd756b5"
            ]
        ]
    },
    {
        "id": "4fd0e3157fd756b5",
        "type": "link out",
        "z": "2a761808.610238",
        "name": "",
        "links": [
            "ccd55cdb.7ed72"
        ],
        "x": 1135,
        "y": 1420,
        "wires": []
    },
    {
        "id": "201cd455e30830bf",
        "type": "function",
        "z": "901cd11f1c81ce5d",
        "name": "register cansel",
        "func": "let floor = msg.floorindex;\nlet currentfloor = msg.bot.floors[floor];\n\ncurrentfloor[7] = 0;\ncurrentfloor[8] = 0;\ncurrentfloor[14] = 0;\ncurrentfloor[10] = 0;\n\nmsg.bot.floors[currentfloor[0] - 1] = currentfloor;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1960,
        "y": 340,
        "wires": [
            [
                "d8f1c68c3be91e21"
            ]
        ]
    },
    {
        "id": "24b7b6edbf44e542",
        "type": "link out",
        "z": "901cd11f1c81ce5d",
        "name": "",
        "links": [
            "e34a5b68.726ec8",
            "f45f3249dbec7058"
        ],
        "x": 1795,
        "y": 280,
        "wires": []
    },
    {
        "id": "02ce8ba2f5ca8f84",
        "type": "function",
        "z": "901cd11f1c81ce5d",
        "name": "update bot floors, finance triger",
        "func": "let botname = msg.topic;\nlet guid = global.get('guid');\n\nlet finance = msg.bot.finance;\nlet floors = msg.bot.floors;\nlet sales = msg.bot.sales;\n\nlet sumsales = 0;\nsales.all.forEach(function (element) {\n    sumsales = sumsales + element[5];\n\n});\n\nlet quotanal = 0;\nlet quotainorders = 0;\nlet basenal = Number(finance.startdepo) + Number(sumsales);\nlet baseinorders = 0;\n\n\nfloors.forEach(function (item, i, floors) {\n\n    if (item[7] === 1) {\n        baseinorders = baseinorders + Number(item[14]) * Number(item[3]);\n        basenal = basenal - Number(item[14]) * Number(item[3]);\n\n    }\n    if (item[7] === 2) {\n        quotanal = quotanal + Number(item[14]);\n        basenal = basenal - Number(item[14]) * Number(item[10]);\n    }\n    if (item[7] === 3) {\n        quotainorders = quotainorders + Number(item[14]);\n        //quotanal = quotanal - Number(item[14]);\n        basenal = basenal - Number(item[14]) * Number(item[10]);\n    }\n\n\n\n});\nfinance.quotanal = (Number(quotanal)).toFixed(msg.bot.settings.digitq);\nfinance.quotainorders = (Number(quotainorders)).toFixed(msg.bot.settings.digitq);\nfinance.basenal = (Number(basenal)).toFixed(msg.bot.settings.digitprice);\nfinance.baseinorders = (Number(baseinorders)).toFixed(msg.bot.settings.digitprice);\n\nlet p = Number(msg.bot.status.currentprice);\nfinance.depo = Number((Number(finance.quotanal) * p + Number(finance.quotainorders) * p + Number(finance.basenal) + Number(finance.baseinorders)).toFixed(msg.bot.settings.digitprice));\n\n\n\n\n\nmsg.bot.finance = finance;\nmsg.bot.floors = floors;\nmsg.bot.sales = sales;\n\n\nglobal.set(msg.botname, msg.bot);\n\n\nlet volname = guid + \"-bots:\" + botname + \":data\";\nlet botdata = {\n    \"finance\": JSON.stringify(finance),\n    \"floors\": JSON.stringify(floors),\n    \"sales\": JSON.stringify(sales)\n\n};\nconst upd = global.get('setbot_data')(volname, botdata);\n\nupd.then(upd => {\n\n    msg.payload = upd;\n\n    node.status({ fill: \"green\", shape: \"ring\" });\n    node.send(msg);\n\n}).catch(error => {\n\n    node.status({ fill: \"red\", shape: \"ring\", text: \"error\" });\n    node.error(error);\n});\n\nreturn msg;\n//node.warn([baseinorders, basenal, quotainorders, quotanal]);\n\n\n//const upd = global.get('setbot_data')(volname, botdata);\n//\n//upd.then(upd => {\n//\n//    msg.payload = upd;\n//\n//    node.status({ fill: \"green\", shape: \"ring\" });\n//    node.send(msg);\n//\n//}).catch(error => {\n//\n//    node.status({ fill: \"red\", shape: \"ring\", text: \"error\" });\n//    node.error(error);\n//});\n\n\n\n\n\n//let buyprice = Number(item[10]);\n//let quantity = Number(item[14]);\n//let p = quantity * (sellprice - buyprice);\n//let c = quantity * (Number(sellprice + buyprice)) / 100 * commision;\n//let net = p - c;\n//tempfin2 = tempfin2 - c;\n//msg.bot.sales.today.push([buyprice, sellprice, quantity, p, c, net]);\n//msg.bot.sales.all.push([buyprice, sellprice, quantity, p, c, net]);\n//\n//node.warn([buyprice, sellprice, quantity, p, c, net]);\n\n\n\n\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1930,
        "y": 240,
        "wires": [
            [
                "c55aa818edeee318",
                "2da8146ec0d56935"
            ]
        ]
    },
    {
        "id": "d8f1c68c3be91e21",
        "type": "function",
        "z": "901cd11f1c81ce5d",
        "name": "update bot floors, finance triger",
        "func": "let botname = msg.topic;\nlet guid = global.get('guid');\n\nlet finance = msg.bot.finance;\nlet floors = msg.bot.floors;\nlet sales = msg.bot.sales;\n\nlet sumsales = 0;\nsales.all.forEach(function (element) {\n    sumsales = sumsales + element[5];\n\n});\n\nlet quotanal = 0;\nlet quotainorders = 0;\nlet basenal = Number(finance.startdepo) + Number(sumsales);\nlet baseinorders = 0;\n\n\nfloors.forEach(function (item, i, floors) {\n\n    if (item[7] === 1) {\n        baseinorders = baseinorders + Number(item[14]) * Number(item[3]);\n        basenal = basenal - Number(item[14]) * Number(item[3]);\n\n    }\n    if (item[7] === 2) {\n        quotanal = quotanal + Number(item[14]);\n        basenal = basenal - Number(item[14]) * Number(item[10]);\n    }\n    if (item[7] === 3) {\n        quotainorders = quotainorders + Number(item[14]);\n        //quotanal = quotanal - Number(item[14]);\n        basenal = basenal - Number(item[14]) * Number(item[10]);\n    }\n\n\n\n});\nfinance.quotanal = (Number(quotanal)).toFixed(msg.bot.settings.digitq);\nfinance.quotainorders = (Number(quotainorders)).toFixed(msg.bot.settings.digitq);\nfinance.basenal = (Number(basenal)).toFixed(msg.bot.settings.digitprice);\nfinance.baseinorders = (Number(baseinorders)).toFixed(msg.bot.settings.digitprice);\n\nlet p = Number(msg.bot.status.currentprice);\nfinance.depo = Number((Number(finance.quotanal) * p + Number(finance.quotainorders) * p + Number(finance.basenal) + Number(finance.baseinorders)).toFixed(msg.bot.settings.digitprice));\n\n\n\n\nmsg.bot.finance = finance;\nmsg.bot.floors = floors;\nmsg.bot.sales = sales;\n\nglobal.set(msg.botname, msg.bot);\n\nlet volname = guid + \"-bots:\" + botname + \":data\";\nlet botdata = {\n    \"finance\": JSON.stringify(finance),\n    \"floors\": JSON.stringify(floors),\n    \"sales\": JSON.stringify(sales)\n\n};\nconst upd = global.get('setbot_data')(volname, botdata);\n\nupd.then(upd => {\n\n    msg.payload = upd;\n\n    node.status({ fill: \"green\", shape: \"ring\" });\n    node.send(msg);\n\n}).catch(error => {\n\n    node.status({ fill: \"red\", shape: \"ring\", text: \"error\" });\n    node.error(error);\n});\n\nreturn msg;\n\n//node.warn([baseinorders, basenal, quotainorders, quotanal]);\n\n\n//const upd = global.get('setbot_data')(volname, botdata);\n//\n//upd.then(upd => {\n//\n//    msg.payload = upd;\n//\n//    node.status({ fill: \"green\", shape: \"ring\" });\n//    node.send(msg);\n//\n//}).catch(error => {\n//\n//    node.status({ fill: \"red\", shape: \"ring\", text: \"error\" });\n//    node.error(error);\n//});\n\n\n\n\n\n//let buyprice = Number(item[10]);\n//let quantity = Number(item[14]);\n//let p = quantity * (sellprice - buyprice);\n//let c = quantity * (Number(sellprice + buyprice)) / 100 * commision;\n//let net = p - c;\n//tempfin2 = tempfin2 - c;\n//msg.bot.sales.today.push([buyprice, sellprice, quantity, p, c, net]);\n//msg.bot.sales.all.push([buyprice, sellprice, quantity, p, c, net]);\n//\n//node.warn([buyprice, sellprice, quantity, p, c, net]);\n\n\n\n\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2210,
        "y": 340,
        "wires": [
            [
                "ff26ac7ccf964923",
                "66b3e3d03896da0c"
            ]
        ]
    },
    {
        "id": "755f44bee432bd17",
        "type": "function",
        "z": "901cd11f1c81ce5d",
        "name": "getbot_settings",
        "func": "\nmsg.floorindex = msg.payload.data.floorindex;\nlet bot = global.get(msg.botname);\nmsg.bot = bot;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1040,
        "y": 500,
        "wires": [
            [
                "d7156eb4bf62cf87"
            ]
        ]
    },
    {
        "id": "31c5cd0acc2cc4ef",
        "type": "function",
        "z": "5df15275.2888ec",
        "name": "msg = {}",
        "func": "\nmsg = {};\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1860,
        "y": 1200,
        "wires": [
            [
                "a74c609d7aa41a7c",
                "c653c95b25c87284"
            ]
        ]
    },
    {
        "id": "a74c609d7aa41a7c",
        "type": "redis-out",
        "z": "5df15275.2888ec",
        "server": "f120eab2.0a60a8",
        "command": "publish",
        "name": "",
        "topic": "stop",
        "obj": true,
        "x": 2010,
        "y": 1200,
        "wires": []
    },
    {
        "id": "a739f31f028c526e",
        "type": "function",
        "z": "2a761808.610238",
        "g": "f4f90b1391070951",
        "name": "msg = {}",
        "func": "msg = {};\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1840,
        "y": 360,
        "wires": [
            [
                "c29cb45a64cff649",
                "00fa2627f41a6d22"
            ]
        ]
    },
    {
        "id": "c29cb45a64cff649",
        "type": "redis-out",
        "z": "2a761808.610238",
        "g": "f4f90b1391070951",
        "server": "f120eab2.0a60a8",
        "command": "publish",
        "name": "",
        "topic": "stop",
        "obj": true,
        "x": 2080,
        "y": 340,
        "wires": []
    },
    {
        "id": "e979b4b0d8d88283",
        "type": "function",
        "z": "5df15275.2888ec",
        "name": "dump msg",
        "func": "let trackname = msg.botname+'-dumpmsg';\n//node.warn(trackname);\nlet dumpmsg = JSON.stringify(msg);\nflow.set(trackname, msg);\nreturn msg;\n",
        "outputs": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2790,
        "y": 1480,
        "wires": []
    },
    {
        "id": "85d1e7884404218a",
        "type": "link in",
        "z": "5df15275.2888ec",
        "name": "dump",
        "links": [
            "f3ba2f9026195dd2",
            "59d8a18476243435",
            "6bfb4baf5f0bda62",
            "ed01713a0f7a87c7",
            "ab5c06142b412e58",
            "9c807c67d5893c3b",
            "aef48af278abbb63",
            "fdc19edac875acf3",
            "99d6e48354b6a474",
            "241445ccf5ab4e35",
            "0080451aaafcadd8",
            "17aeeef6a2ea0467",
            "2869480f6ddecc85",
            "070f09d236c25724",
            "120969bfc4862a7d",
            "1eb94b3ec3aae58d",
            "617cef96efe3397b",
            "728f0b8d88ea3459",
            "3064611857547212",
            "bf61541489fa3866"
        ],
        "x": 2675,
        "y": 1480,
        "wires": [
            [
                "e979b4b0d8d88283"
            ]
        ]
    },
    {
        "id": "99d6e48354b6a474",
        "type": "link out",
        "z": "901cd11f1c81ce5d",
        "name": "",
        "links": [
            "85d1e7884404218a",
            "b1e4411ac2339191"
        ],
        "x": 295,
        "y": 480,
        "wires": [],
        "icon": "font-awesome/fa-neuter"
    },
    {
        "id": "241445ccf5ab4e35",
        "type": "link out",
        "z": "901cd11f1c81ce5d",
        "name": "",
        "links": [
            "85d1e7884404218a",
            "b1e4411ac2339191"
        ],
        "x": 695,
        "y": 500,
        "wires": []
    },
    {
        "id": "c653c95b25c87284",
        "type": "delay",
        "z": "5df15275.2888ec",
        "name": "",
        "pauseType": "delay",
        "timeout": "4",
        "timeoutUnits": "milliseconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "x": 2030,
        "y": 1260,
        "wires": [
            [
                "4609483c43ef19de"
            ]
        ]
    },
    {
        "id": "4609483c43ef19de",
        "type": "redis-out",
        "z": "5df15275.2888ec",
        "server": "f120eab2.0a60a8",
        "command": "publish",
        "name": "",
        "topic": "start",
        "obj": false,
        "x": 2190,
        "y": 1260,
        "wires": []
    },
    {
        "id": "00fa2627f41a6d22",
        "type": "delay",
        "z": "2a761808.610238",
        "g": "f4f90b1391070951",
        "name": "",
        "pauseType": "delay",
        "timeout": "4",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "x": 2020,
        "y": 380,
        "wires": [
            [
                "69a60ba2aa9a2bf3"
            ]
        ]
    },
    {
        "id": "69a60ba2aa9a2bf3",
        "type": "redis-out",
        "z": "2a761808.610238",
        "g": "f4f90b1391070951",
        "server": "f120eab2.0a60a8",
        "command": "publish",
        "name": "",
        "topic": "start",
        "obj": false,
        "x": 2180,
        "y": 380,
        "wires": []
    },
    {
        "id": "c8becf6bb0419135",
        "type": "function",
        "z": "5f98db3a.7ab21c",
        "name": "обработчик ошибок",
        "func": "if (msg.err) {\n    msg.payload.statusCode = \"not ok\";\n    msg.payload.statusBody = msg.err.body;\n    //node.warn(msg.err.statusCode)\n    \n\n    \n    \n    return [null,msg];\n} else {\n    msg.payload.statusCode = \"ok\";\n    msg.payload.statusBody = msg.resp;\n    //msg.payload.bot = msg.bot;\n    return [msg,null];\n}\n\n\n\n",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2080,
        "y": 1200,
        "wires": [
            [
                "0ba1f4d05ad6d76a"
            ],
            [
                "6250c3310b6d177b"
            ]
        ]
    },
    {
        "id": "0ba1f4d05ad6d76a",
        "type": "link out",
        "z": "5f98db3a.7ab21c",
        "name": "",
        "links": [
            "5a624a9b.734534",
            "17bad0f2.7af38f"
        ],
        "x": 2295,
        "y": 1180,
        "wires": []
    },
    {
        "id": "6250c3310b6d177b",
        "type": "link out",
        "z": "5f98db3a.7ab21c",
        "name": "",
        "links": [
            "5a624a9b.734534",
            "17bad0f2.7af38f"
        ],
        "x": 2295,
        "y": 1220,
        "wires": []
    },
    {
        "id": "2a4008a7dacc6a1d",
        "type": "function",
        "z": "2a761808.610238",
        "name": "set sold",
        "func": "msg.bot.ttp.sold = true;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1680,
        "y": 1680,
        "wires": [
            [
                "ecf3cf3a14142710"
            ]
        ]
    },
    {
        "id": "ecf3cf3a14142710",
        "type": "function",
        "z": "2a761808.610238",
        "name": "prepare get ttp order price",
        "func": "\n\nlet moneta = msg.bot.settings.moneta;\nlet orderid = msg.bot.ttp.finalorder;\n\nmsg.payload = [];\nmsg.topic = \"orders-status-\" + msg.bot.settings.userid + \":\" + moneta + \":\" + orderid + \"-price\";\n\n\n\n\nnode.status({fill: \"green\", shape: \"ring\", text: orderid});\nreturn msg;\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1900,
        "y": 1680,
        "wires": [
            [
                "32577813722491b0"
            ]
        ],
        "inputLabels": [
            "orderid"
        ],
        "outputLabels": [
            "status"
        ],
        "icon": "node-red-contrib-binance/binance.png"
    },
    {
        "id": "32577813722491b0",
        "type": "redis-command",
        "z": "2a761808.610238",
        "server": "f120eab2.0a60a8",
        "command": "GET",
        "name": "get order status",
        "topic": "msg.payload",
        "params": "[]",
        "paramsType": "json",
        "payloadType": "json",
        "block": false,
        "x": 2140,
        "y": 1680,
        "wires": [
            [
                "40bcf14c4c7a5a7c",
                "4bf2884a90f22869"
            ]
        ]
    },
    {
        "id": "40bcf14c4c7a5a7c",
        "type": "link out",
        "z": "2a761808.610238",
        "name": "",
        "links": [
            "ccd55cdb.7ed72"
        ],
        "x": 2275,
        "y": 1680,
        "wires": []
    },
    {
        "id": "f92ebd4bb67eba8e",
        "type": "function",
        "z": "ef9c825cf92ee31b",
        "name": "",
        "func": "\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1230,
        "y": 300,
        "wires": [
            []
        ]
    },
    {
        "id": "d7156eb4bf62cf87",
        "type": "function",
        "z": "901cd11f1c81ce5d",
        "name": "getbot_status",
        "func": "\nconst gb = global.get('getbot_status')(msg.botname);\n\ngb.then(gb => {\n    msg.bot.status = JSON.parse(gb);\n\n    node.status({ fill: \"green\", shape: \"dot\" });\n\n    node.send(msg);\n\n}).catch(error => {\n\n\n    node.status({ fill: \"red\", shape: \"dot\" });\n    node.error(error);\n});",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1240,
        "y": 500,
        "wires": [
            [
                "8363e0919dd1093d"
            ]
        ]
    },
    {
        "id": "2da8146ec0d56935",
        "type": "debug",
        "z": "901cd11f1c81ce5d",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "x": 2050,
        "y": 180,
        "wires": []
    },
    {
        "id": "66b3e3d03896da0c",
        "type": "debug",
        "z": "901cd11f1c81ce5d",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "x": 2310,
        "y": 280,
        "wires": []
    },
    {
        "id": "01e5aa9471136dfe",
        "type": "catch",
        "z": "2a761808.610238",
        "name": "",
        "scope": [
            "49f41bcf9057e789"
        ],
        "uncaught": false,
        "x": 1810,
        "y": 760,
        "wires": [
            [
                "75793e9c7472a645"
            ]
        ]
    },
    {
        "id": "75793e9c7472a645",
        "type": "debug",
        "z": "2a761808.610238",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1930,
        "y": 760,
        "wires": []
    },
    {
        "id": "822afc1aa34b350c",
        "type": "redis-out",
        "z": "3c980e5965444d95",
        "server": "f120eab2.0a60a8",
        "command": "publish",
        "name": "",
        "topic": "",
        "obj": true,
        "x": 400,
        "y": 120,
        "wires": []
    },
    {
        "id": "76eec4c2b1bb4046",
        "type": "function",
        "z": "3c980e5965444d95",
        "name": "task update",
        "func": "msg.topic = \"MUT\";\n\nlet cmd = \"update\";\n\nlet data = {\n    \"botname\": msg.botname,\n    \"cmd\": cmd,\n    \"floors\": msg.bot.floors,\n    \"finance\": msg.bot.finance,\n    \"sales\": msg.bot.sales\n\n}\nmsg.payload = {cmd, data};\n\n//global.set(msg.botname, msg.bot);\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 230,
        "y": 120,
        "wires": [
            [
                "822afc1aa34b350c"
            ]
        ]
    },
    {
        "id": "cdc5fb07676b212c",
        "type": "function",
        "z": "ef9c825cf92ee31b",
        "name": "set named bot in context",
        "func": "let memobots = global.get(\"memobots\") || [];\nlet botname = \"bn-3\";\nlet bot = { \"bn\": botname, \"data\": [11,22,33]};\n\nmemobots[botname] = bot;\nmsg.memobots = memobots;\n\nglobal.set(\"memobots\", memobots);\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1370,
        "y": 400,
        "wires": [
            [
                "e71c2218f6afbae1"
            ]
        ]
    },
    {
        "id": "d4ec7139cc5b28d1",
        "type": "inject",
        "z": "ef9c825cf92ee31b",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 1160,
        "y": 420,
        "wires": [
            [
                "cdc5fb07676b212c"
            ]
        ]
    },
    {
        "id": "e71c2218f6afbae1",
        "type": "debug",
        "z": "ef9c825cf92ee31b",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1630,
        "y": 400,
        "wires": []
    },
    {
        "id": "6fb8a3a3207452b8",
        "type": "catch",
        "z": "5df15275.2888ec",
        "name": "",
        "scope": null,
        "uncaught": false,
        "x": 2720,
        "y": 1400,
        "wires": [
            [
                "f6ddfdb09036a498"
            ]
        ]
    },
    {
        "id": "f6ddfdb09036a498",
        "type": "debug",
        "z": "5df15275.2888ec",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 2880,
        "y": 1400,
        "wires": []
    },
    {
        "id": "0080451aaafcadd8",
        "type": "link out",
        "z": "5df15275.2888ec",
        "g": "d4a5f2307ef8b222",
        "name": "",
        "links": [
            "85d1e7884404218a"
        ],
        "x": 1495,
        "y": 1440,
        "wires": [],
        "icon": "node-red/db.svg"
    },
    {
        "id": "b72d192f770419d4",
        "type": "link out",
        "z": "5df15275.2888ec",
        "g": "d4a5f2307ef8b222",
        "name": "",
        "links": [
            "e34a5b68.726ec8"
        ],
        "x": 1935,
        "y": 1620,
        "wires": []
    },
    {
        "id": "8e61bffed06403e3",
        "type": "function",
        "z": "ef9c825cf92ee31b",
        "name": "",
        "func": "node.warn(msg.payload);\n\nlet a=1;\nmsg.a = a;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2010,
        "y": 280,
        "wires": [
            [
                "8bc7ebcb16108871",
                "1d14ad6fc556469a"
            ]
        ]
    },
    {
        "id": "7c270a1dbf4078d5",
        "type": "inject",
        "z": "ef9c825cf92ee31b",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "qqq",
        "payloadType": "date",
        "x": 1820,
        "y": 260,
        "wires": [
            [
                "8e61bffed06403e3"
            ]
        ]
    },
    {
        "id": "8bc7ebcb16108871",
        "type": "debug",
        "z": "ef9c825cf92ee31b",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 2190,
        "y": 280,
        "wires": []
    },
    {
        "id": "1d14ad6fc556469a",
        "type": "function",
        "z": "ef9c825cf92ee31b",
        "name": "",
        "func": "let b = msg.a + 2;\nmsg.b=b;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2210,
        "y": 200,
        "wires": [
            [
                "3aaf9adda442852a"
            ]
        ]
    },
    {
        "id": "3aaf9adda442852a",
        "type": "debug",
        "z": "ef9c825cf92ee31b",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 2310,
        "y": 80,
        "wires": []
    },
    {
        "id": "2a7738b4.a110b8",
        "type": "debug",
        "z": "ef9c825cf92ee31b",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "x": 2070,
        "y": 1060,
        "wires": []
    },
    {
        "id": "5b2ca394.0d1aec",
        "type": "inject",
        "z": "ef9c825cf92ee31b",
        "name": "",
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "click",
        "payloadType": "str",
        "x": 1350,
        "y": 1000,
        "wires": [
            [
                "31da16f5.5b832a"
            ]
        ]
    },
    {
        "id": "d502aec9.6bc65",
        "type": "rx operator",
        "z": "ef9c825cf92ee31b",
        "name": "",
        "bufferCount_bufferSize": 1,
        "bufferCount_startEvery": "",
        "catch_func": "return { topic : \"error\", payload: error }",
        "distinct_key": "payload",
        "mapTo_topic": "foo",
        "mapTo_payload": "bar",
        "mapTo_payloadType": "str",
        "map_func": "",
        "take_count": 1,
        "filter_func": "return msg.payload > 0",
        "scan_seed": 0,
        "scan_seedType": "num",
        "scan_func": "return acc + msg.payload",
        "skip_count": 1,
        "repeat_count": 1,
        "retry_number": 1,
        "timeout": 1000,
        "delay": 1000,
        "operatorType": "timeInterval",
        "x": 1500,
        "y": 1100,
        "wires": [
            [
                "7daea084.c6927"
            ],
            []
        ]
    },
    {
        "id": "7daea084.c6927",
        "type": "rx operator",
        "z": "ef9c825cf92ee31b",
        "name": "",
        "bufferCount_bufferSize": 1,
        "bufferCount_startEvery": "",
        "catch_func": "return { topic : \"error\", payload: error }",
        "distinct_key": "payload",
        "mapTo_topic": "foo",
        "mapTo_payload": "bar",
        "mapTo_payloadType": "str",
        "map_func": "",
        "take_count": 1,
        "filter_func": "return msg.interval < 300",
        "scan_seed": 0,
        "scan_seedType": "num",
        "scan_func": "return acc + msg.payload",
        "skip_count": 1,
        "repeat_count": 1,
        "retry_number": 1,
        "timeout": 1000,
        "delay": 1000,
        "operatorType": "filter",
        "x": 1690,
        "y": 1100,
        "wires": [
            [
                "2ed7c0fc.d32e6"
            ],
            []
        ]
    },
    {
        "id": "2d784b0c.7aa9c4",
        "type": "rx subscriber",
        "z": "ef9c825cf92ee31b",
        "name": "",
        "auto_subscribe": true,
        "bundle": false,
        "x": 1890,
        "y": 1060,
        "wires": [
            [
                "2a7738b4.a110b8"
            ],
            [],
            []
        ]
    },
    {
        "id": "2ed7c0fc.d32e6",
        "type": "rx operator",
        "z": "ef9c825cf92ee31b",
        "name": "",
        "bufferCount_bufferSize": 1,
        "bufferCount_startEvery": "",
        "catch_func": "return { topic : \"error\", payload: error }",
        "distinct_key": "payload",
        "mapTo_topic": "",
        "mapTo_payload": "double-click",
        "mapTo_payloadType": "str",
        "map_func": "",
        "take_count": 1,
        "filter_func": "return msg.payload > 0",
        "scan_seed": 0,
        "scan_seedType": "num",
        "scan_func": "return acc + msg.payload",
        "skip_count": 1,
        "repeat_count": 1,
        "retry_number": 1,
        "timeout": 1000,
        "delay": 1000,
        "operatorType": "mapTo",
        "x": 1740,
        "y": 1000,
        "wires": [
            [
                "2d784b0c.7aa9c4"
            ],
            []
        ]
    },
    {
        "id": "31da16f5.5b832a",
        "type": "rx observer",
        "z": "ef9c825cf92ee31b",
        "name": "",
        "x": 1510,
        "y": 1000,
        "wires": [
            [
                "d502aec9.6bc65"
            ],
            []
        ]
    },
    {
        "id": "65a090e6.1476c",
        "type": "rx observer",
        "z": "ef9c825cf92ee31b",
        "name": "",
        "x": 1610,
        "y": 1300,
        "wires": [
            [
                "7034ff47.7d735"
            ],
            [
                "10525566.03493b"
            ]
        ]
    },
    {
        "id": "12e4978f.1c14a8",
        "type": "rx subscriber",
        "z": "ef9c825cf92ee31b",
        "name": "",
        "auto_subscribe": false,
        "bundle": false,
        "x": 2010,
        "y": 1300,
        "wires": [
            [
                "1093291d.70e2f7"
            ],
            [],
            []
        ]
    },
    {
        "id": "1093291d.70e2f7",
        "type": "debug",
        "z": "ef9c825cf92ee31b",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 2170,
        "y": 1300,
        "wires": []
    },
    {
        "id": "10525566.03493b",
        "type": "http request",
        "z": "ef9c825cf92ee31b",
        "name": "",
        "method": "GET",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "https://yandex.ru",
        "tls": "",
        "persist": false,
        "proxy": "",
        "authType": "",
        "x": 1390,
        "y": 1240,
        "wires": [
            [
                "65a090e6.1476c"
            ]
        ]
    },
    {
        "id": "82af8421.224f68",
        "type": "catch",
        "z": "ef9c825cf92ee31b",
        "name": "",
        "scope": [
            "10525566.03493b"
        ],
        "uncaught": false,
        "x": 1370,
        "y": 1360,
        "wires": [
            [
                "986b234.e1561e"
            ]
        ]
    },
    {
        "id": "986b234.e1561e",
        "type": "change",
        "z": "ef9c825cf92ee31b",
        "name": "set msg.topic = error",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "error",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1440,
        "y": 1400,
        "wires": [
            [
                "65a090e6.1476c"
            ]
        ]
    },
    {
        "id": "7034ff47.7d735",
        "type": "rx operator",
        "z": "ef9c825cf92ee31b",
        "name": "",
        "bufferCount_bufferSize": 1,
        "bufferCount_startEvery": "",
        "catch_func": "return { topic : \"error\", payload: error }",
        "distinct_key": "payload",
        "mapTo_topic": "foo",
        "mapTo_payload": "bar",
        "mapTo_payloadType": "str",
        "map_func": "",
        "take_count": 1,
        "filter_func": "return msg.payload > 0",
        "scan_seed": 0,
        "scan_seedType": "num",
        "scan_func": "return acc + msg.payload",
        "skip_count": 1,
        "repeat_count": "3",
        "retry_number": "3",
        "timeout": 1000,
        "delay": 1000,
        "operatorType": "retry",
        "x": 1800,
        "y": 1300,
        "wires": [
            [
                "12e4978f.1c14a8"
            ],
            []
        ]
    },
    {
        "id": "13b394a1.464c1b",
        "type": "inject",
        "z": "ef9c825cf92ee31b",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "subscribe",
        "payloadType": "str",
        "x": 1780,
        "y": 1420,
        "wires": [
            [
                "12e4978f.1c14a8"
            ]
        ]
    },
    {
        "id": "1b9785be.6e12ba",
        "type": "comment",
        "z": "ef9c825cf92ee31b",
        "name": "press to subscribe to observable",
        "info": "",
        "x": 1830,
        "y": 1380,
        "wires": []
    },
    {
        "id": "46ac64d8.11e48c",
        "type": "comment",
        "z": "ef9c825cf92ee31b",
        "name": "retry 3 times on error",
        "info": "",
        "x": 1830,
        "y": 1260,
        "wires": []
    },
    {
        "id": "73df1bf.136a1e4",
        "type": "comment",
        "z": "ef9c825cf92ee31b",
        "name": "create observable",
        "info": "",
        "x": 1630,
        "y": 1260,
        "wires": []
    },
    {
        "id": "9cfb1905.cf9ce8",
        "type": "comment",
        "z": "ef9c825cf92ee31b",
        "name": "catch http errors",
        "info": "",
        "x": 1400,
        "y": 1320,
        "wires": []
    },
    {
        "id": "0ed71afeb06cccf1",
        "type": "function",
        "z": "ef9c825cf92ee31b",
        "d": true,
        "name": "register guid",
        "func": "let guid = msg.payload;\nglobal.set('guid',guid);\n\nlet botlistname = guid+\"-botlist\";\nglobal.set('guid',guid);\nglobal.set(botlistname,[]);\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 510,
        "y": 280,
        "wires": [
            []
        ]
    },
    {
        "id": "b5fe42929eaaba46",
        "type": "inject",
        "z": "ef9c825cf92ee31b",
        "name": "d3fmoh2rVoVNgIcpLTFZBE0jHnI2",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "d3fmoh2rVoVNgIcpLTFZBE0jHnI2",
        "payloadType": "str",
        "x": 260,
        "y": 280,
        "wires": [
            [
                "0ed71afeb06cccf1"
            ]
        ]
    },
    {
        "id": "fde693da5d1265e6",
        "type": "function",
        "z": "ef9c825cf92ee31b",
        "d": true,
        "name": "register keypar",
        "func": "let key = msg.key;\nlet secret = msg.secret\nglobal.set('key',key);\nglobal.set('secret',secret);\n\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 960,
        "y": 280,
        "wires": [
            []
        ]
    },
    {
        "id": "f35c30187a088fe7",
        "type": "inject",
        "z": "ef9c825cf92ee31b",
        "name": "my keypair",
        "props": [
            {
                "p": "key",
                "v": "m0dqmIilej2JPuK6vTzNGPMSc0N6pCHCCA0L5Jtes15gWIDteQ23mlrqCxJjSXOb",
                "vt": "str"
            },
            {
                "p": "secret",
                "v": "AI4qXclwJWQcBdkNZdGDAB3wVdiJMEwc9OBp54XxFECGjZRHL96Kcv0siBaPC5Kh",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payloadType": "str",
        "x": 730,
        "y": 280,
        "wires": [
            [
                "fde693da5d1265e6"
            ]
        ]
    },
    {
        "id": "d3e0688d41cc172c",
        "type": "function",
        "z": "5df15275.2888ec",
        "g": "44cf135596e2716e",
        "name": "get env",
        "func": "let guid = env.get(\"GOOGLEUID\");\nglobal.set(\"guid\", guid);\n\n//let botlistname = guid + \"-botlist\";\n//global.set(botlistname, []);\n\nlet key = env.get(\"BINANCEKEY\");\nlet secret = env.get(\"BINANCESECRET\");\nglobal.set(\"key\", key);\nglobal.set(\"secret\", secret);\n\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1200,
        "y": 80,
        "wires": [
            []
        ]
    },
    {
        "id": "579577e08c6abb4c",
        "type": "inject",
        "z": "5df15275.2888ec",
        "g": "44cf135596e2716e",
        "name": "onLoad",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "0.01",
        "topic": "",
        "payloadType": "date",
        "x": 1040,
        "y": 80,
        "wires": [
            [
                "d3e0688d41cc172c"
            ]
        ]
    },
    {
        "id": "f5dded96240dc58f",
        "type": "function",
        "z": "5df15275.2888ec",
        "name": "getbotlist",
        "func": "\n\nlet guid = global.get('guid');\nnode.warn(guid);\nconst gbl = global.get('getbotlist')(guid);\n\ngbl.then(gbl => {\n    \n    msg.payload = gbl;\n    \n\n    node.status({fill:\"green\",shape:\"dot\"});\n    node.send(msg);\n\n}).catch(error => {\n    \n\n    node.status({fill:\"red\",shape:\"dot\"});\n    \n    node.error(error);\n});",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3460,
        "y": 1440,
        "wires": [
            [
                "83b312f3a26edf84"
            ]
        ]
    },
    {
        "id": "b1e15277d42abc47",
        "type": "inject",
        "z": "5df15275.2888ec",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 3290,
        "y": 1440,
        "wires": [
            [
                "f5dded96240dc58f"
            ]
        ]
    },
    {
        "id": "83b312f3a26edf84",
        "type": "debug",
        "z": "5df15275.2888ec",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 3630,
        "y": 1440,
        "wires": []
    },
    {
        "id": "d350ef9a48368ee2",
        "type": "debug",
        "z": "5f98db3a.7ab21c",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 3270,
        "y": 1160,
        "wires": []
    },
    {
        "id": "f722345a15da1b71",
        "type": "function",
        "z": "aa608523e76bb32e",
        "name": "set buy order",
        "func": "function parseApiError(error) {\n  if (error.body) {\n    try {\n      var resp = JSON.parse(error.body);\n      return resp.msg;\n    } catch (error) {/* pass thru */}\n  }\n  return \"Unknown error. Status code: \"+error.statsCode;\n}\n\nlet LBinance = global.get('gBinance');\n//node.warn(LBinance);\nlet binance = new LBinance().options({\n\tAPIKEY: \"m0dqmIilej2JPuK6vTzNGPMSc0N6pCHCCA0L5Jtes15gWIDteQ23mlrqCxJjSXOb\",\n\tAPISECRET: \"AI4qXclwJWQcBdkNZdGDAB3wVdiJMEwc9OBp54XxFECGjZRHL96Kcv0siBaPC5Kh\",\n\t\"reconnect\": false,\n    'useServerTime': true,\n    \n});\n\n\n//'options': {\n//        'adjustForTimeDifference': true,\n//        'verbose': true, // if needed, not mandatory\n//        'recvWindow': 10000000, // not really needed\n//    }\n\n \n\n\nlet moneta = \"ALPHAUSDT\";\nlet quantity = Number(100);\nlet price = Number(0.137);\nnode.warn(quantity);\nnode.warn(moneta);\nnode.warn(price);\n//msg.payload = \"qjson.status\";\n\nbinance.buy(moneta, quantity, price, {type:'LIMIT'}, (err, resp) => {\n    if (resp) {\n        msg.orderid = resp.orderId;\n        msg.resp = resp.orderId;\n        msg.payload = resp.orderId;\n        node.status({fill: \"green\", shape: \"ring\", text: resp.orderId});\n        node.send(msg);\n       // return [null,msg];\n    }\n    if (err) {\n        var errorMsg = parseApiError(err) + \", moneta:\" + moneta;\n        node.error(errorMsg, msg);\n        node.warn(err);\n        node.status({fill: \"red\", shape: \"ring\", text: errorMsg});\n        node.send(msg);\n        //return [msg, null];\n    }\n    //node.status({}); //clear status message\n});\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 4090,
        "y": 2020,
        "wires": [
            [
                "3cc862dcaae8a36f"
            ]
        ],
        "inputLabels": [
            "orderid, moneta"
        ],
        "outputLabels": [
            "status"
        ],
        "icon": "font-awesome/fa-compress"
    },
    {
        "id": "3cc862dcaae8a36f",
        "type": "debug",
        "z": "aa608523e76bb32e",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 4340,
        "y": 2020,
        "wires": []
    },
    {
        "id": "123f941e97f3af70",
        "type": "inject",
        "z": "aa608523e76bb32e",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 3860,
        "y": 2020,
        "wires": [
            [
                "f722345a15da1b71"
            ]
        ]
    },
    {
        "id": "a8c7b4028051b508",
        "type": "inject",
        "z": "aa608523e76bb32e",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 3860,
        "y": 1860,
        "wires": [
            [
                "97d886648f34caaa"
            ]
        ]
    },
    {
        "id": "87b76eafbc0f7e05",
        "type": "debug",
        "z": "aa608523e76bb32e",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 4350,
        "y": 1860,
        "wires": []
    },
    {
        "id": "97d886648f34caaa",
        "type": "function",
        "z": "aa608523e76bb32e",
        "name": "current time",
        "func": "msg.payload = new Date();\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 4070,
        "y": 1860,
        "wires": [
            [
                "87b76eafbc0f7e05"
            ]
        ]
    },
    {
        "id": "31abd4da174ac5b2",
        "type": "function",
        "z": "aa608523e76bb32e",
        "name": "prepare getprice",
        "func": "\n//let moneta = msg.payload.bot.settings.moneta;\n//msg.bot = msg.payload.bot;\n\nmoneta= msg.payload;\n\nmsg.payload = [];\nmsg.topic = \"prices:\" + moneta;\n    \n\nnode.status({fill:\"green\",shape:\"dot\"});\n    \nreturn msg;\n    \n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 4060,
        "y": 1940,
        "wires": [
            [
                "5b2edb0a0c105516"
            ]
        ],
        "inputLabels": [
            "orderid"
        ],
        "outputLabels": [
            "status"
        ],
        "icon": "node-red-contrib-binance/binance.png"
    },
    {
        "id": "5b2edb0a0c105516",
        "type": "redis-command",
        "z": "aa608523e76bb32e",
        "server": "f120eab2.0a60a8",
        "command": "GET",
        "name": "get price",
        "topic": "msg.payload",
        "params": "[]",
        "paramsType": "json",
        "payloadType": "json",
        "block": false,
        "x": 4260,
        "y": 1940,
        "wires": [
            [
                "4fc6e838631ede99"
            ]
        ]
    },
    {
        "id": "4fc6e838631ede99",
        "type": "debug",
        "z": "aa608523e76bb32e",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 4370,
        "y": 1860,
        "wires": []
    },
    {
        "id": "34401dcb3ad0b14f",
        "type": "inject",
        "z": "aa608523e76bb32e",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "BTCUSDT",
        "payloadType": "str",
        "x": 3860,
        "y": 1940,
        "wires": [
            [
                "31abd4da174ac5b2"
            ]
        ]
    },
    {
        "id": "0391bd7fee59beda",
        "type": "inject",
        "z": "aa608523e76bb32e",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "BTCUSDT",
        "payloadType": "str",
        "x": 3740,
        "y": 1560,
        "wires": [
            [
                "f7aae182124a6803"
            ]
        ]
    },
    {
        "id": "f7aae182124a6803",
        "type": "function",
        "z": "aa608523e76bb32e",
        "name": "getprice",
        "func": "\nlet moneta = msg.payload;\n\nconst gp = global.get('getprice')(moneta);\n\ngp.then(gp => {\n    \n    msg.payload = gp;\n    node.send(msg);\n\n}).catch(error => {\n    node.error(error);\n});",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 3940,
        "y": 1560,
        "wires": [
            [
                "c35a67714514e6a3"
            ]
        ]
    },
    {
        "id": "c35a67714514e6a3",
        "type": "debug",
        "z": "aa608523e76bb32e",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 4140,
        "y": 1560,
        "wires": []
    },
    {
        "id": "fb8a08547b5af731",
        "type": "inject",
        "z": "aa608523e76bb32e",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "BNBUSDT-1606062710",
        "payloadType": "str",
        "x": 3760,
        "y": 1440,
        "wires": [
            [
                "1de730b8ff32b466"
            ]
        ]
    },
    {
        "id": "1de730b8ff32b466",
        "type": "function",
        "z": "aa608523e76bb32e",
        "name": "getbot",
        "func": "\nlet botname = msg.payload;\n\nconst gb = global.get('getbot_status')(botname);\n\ngb.then(gb => {\n    \n    msg.payload = gb;\n    node.send(msg);\n\n}).catch(error => {\n    node.error(error);\n});",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 3990,
        "y": 1440,
        "wires": [
            [
                "a68642a743bc73f0",
                "0845f93b675cb841"
            ]
        ]
    },
    {
        "id": "a68642a743bc73f0",
        "type": "debug",
        "z": "aa608523e76bb32e",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 4220,
        "y": 1460,
        "wires": []
    },
    {
        "id": "ee52fa6994154019",
        "type": "inject",
        "z": "aa608523e76bb32e",
        "name": "d3fmoh2rVoVNgIcpLTFZBE0jHnI2",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "d3fmoh2rVoVNgIcpLTFZBE0jHnI2",
        "payloadType": "str",
        "x": 3820,
        "y": 1640,
        "wires": [
            [
                "903692a70ab656f2"
            ]
        ]
    },
    {
        "id": "903692a70ab656f2",
        "type": "function",
        "z": "aa608523e76bb32e",
        "name": "getbotlist",
        "func": "\nlet guid = msg.payload;\n\nconst gbl = global.get('getbotlist')(guid);\n\ngbl.then(gbl => {\n    \n    msg.payload = gbl;\n    node.send(msg);\n\n}).catch(error => {\n    node.error(error);\n});",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 4040,
        "y": 1640,
        "wires": [
            [
                "e799d360ae7b8016"
            ]
        ]
    },
    {
        "id": "e799d360ae7b8016",
        "type": "debug",
        "z": "aa608523e76bb32e",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 4210,
        "y": 1640,
        "wires": []
    },
    {
        "id": "0845f93b675cb841",
        "type": "json",
        "z": "aa608523e76bb32e",
        "name": "",
        "property": "payload",
        "action": "obj",
        "pretty": false,
        "x": 4230,
        "y": 1420,
        "wires": [
            [
                "1f05122d96797ef1"
            ]
        ]
    },
    {
        "id": "1f05122d96797ef1",
        "type": "debug",
        "z": "aa608523e76bb32e",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 4370,
        "y": 1440,
        "wires": []
    },
    {
        "id": "c77d7c11b75f6f62",
        "type": "link in",
        "z": "aa608523e76bb32e",
        "name": "",
        "links": [
            "1d7ec925a626478d",
            "7e6df2c2.aa43bc"
        ],
        "x": 55,
        "y": 840,
        "wires": [
            [
                "8cb6d9146b0cb47c",
                "16abde3e7530c355"
            ]
        ]
    },
    {
        "id": "2d6bbcd139680628",
        "type": "function",
        "z": "aa608523e76bb32e",
        "name": "setbot_free",
        "func": "//<трекер<\n    let track = flow.get(\"track\");\n    let start_node_time = Date.parse(new Date()) / 1000;\n    let steptitle = node.name;\n\n    let laststep = track[track.length-1];\n    let last_node_end_time = laststep.end_node_time;\n    node.warn(last_node_end_time);\n//>трекер>\n\nconst upd = global.get('setbot_free')(msg.botname);\n\nupd.then(upd => {\n\n    //>трекер>\n        let end_node_time = Date.parse(new Date()) / 1000;\n        let duration = end_node_time - start_node_time;\n        let duration_step = end_node_time - last_node_end_time;\n        track.push({\n            \"steptitle\": steptitle,\n            \"start_node_time\": start_node_time,\n            \"end_node_time\": end_node_time,\n            \"duration_node\": duration,\n            \"duration_step\": duration_step\n        });\n        flow.set(\"track\", track);\n    //>трекер>\n    node.status({fill:\"green\",shape:\"dot\"});\n    \n    node.send(msg);\n\n}).catch(error => {\n    //>трекер>\n        let end_node_time = Date.parse(new Date()) / 1000;\n        let duration = end_node_time - start_node_time;\n        let duration_step = end_node_time - last_node_end_time;\n        track.push({\n            \"steptitle\": steptitle+\"-faile\",\n            \"start_node_time\": start_node_time,\n            \"end_node_time\": end_node_time,\n            \"duration\": duration,\n            \"duration_step\": duration_step,\n            \"error\": error\n        });\n        flow.set(\"track\", track);\n    //>трекер>\n    node.status({fill:\"red\",shape:\"dot\"});\n    node.error(error);\n});",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 4630,
        "y": 1220,
        "wires": [
            [
                "69f429f26b464f4a"
            ]
        ],
        "icon": "font-awesome/fa-bolt"
    },
    {
        "id": "0e0d506824065789",
        "type": "inject",
        "z": "aa608523e76bb32e",
        "name": "",
        "props": [
            {
                "p": "botname",
                "v": "BNBUSDT-1606088829",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 4400,
        "y": 1560,
        "wires": [
            [
                "2d6bbcd139680628"
            ]
        ]
    },
    {
        "id": "69f429f26b464f4a",
        "type": "debug",
        "z": "aa608523e76bb32e",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 4820,
        "y": 1220,
        "wires": []
    },
    {
        "id": "f522f55fc740951f",
        "type": "function",
        "z": "aa608523e76bb32e",
        "name": "getprice",
        "func": "//<трекер<\nlet trackname = \"track-\" + msg.botname;\nlet track = flow.get(trackname);\nlet start_node_time = new Date().getTime();\nlet steptitle = node.name;\n\nlet laststep = track[track.length - 1];\nlet last_node_end_time = laststep.end_node_time;\n//>трекер>\nlet moneta = msg.bot.settings.moneta;\n\nconst gp = global.get('getprice')(moneta);\n\ngp.then(gp => {\n\n    msg.bot.status.currentprice = gp;\n    let volname = msg.bot.settings.botname + \"-MA-big\";\n    msg.bot.status.sr_ma_big = Number(flow.get(volname));\n\n    let volname2 = msg.bot.settings.botname + \"-MA-small\";\n    msg.bot.status.sr_ma_small = Number(flow.get(volname2));\n\n\n    //>трекер>\n    let end_node_time = new Date().getTime();\n    let duration = end_node_time - start_node_time;\n    let duration_step = end_node_time - last_node_end_time;\n    track.push({\n        \"steptitle\": steptitle,\n        \"start_node_time\": start_node_time,\n        \"end_node_time\": end_node_time,\n        \"duration_node\": duration,\n        \"duration_step\": duration_step\n    });\n    flow.set(trackname, track);\n    //>трекер>\n    node.status({ fill: \"green\", shape: \"dot\" });\n    node.send(msg);\n\n}).catch(error => {\n\n    //>трекер>\n    let end_node_time = new Date().getTime();\n    let duration = end_node_time - start_node_time;\n    let duration_step = end_node_time - last_node_end_time;\n    track.push({\n        \"steptitle\": steptitle + \"-faile\",\n        \"start_node_time\": start_node_time,\n        \"end_node_time\": end_node_time,\n        \"duration\": duration,\n        \"duration_step\": duration_step,\n        \"error\": error\n    });\n    flow.set(trackname, track);\n    //>трекер>\n    node.status({ fill: \"red\", shape: \"dot\" });\n    node.error(error);\n});",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 620,
        "y": 840,
        "wires": [
            [
                "2438e99971328983"
            ]
        ]
    },
    {
        "id": "1e441062d1768768",
        "type": "function",
        "z": "aa608523e76bb32e",
        "name": "setbot_status",
        "func": "//<трекер<\nlet trackname = \"track-\" + msg.botname;\nlet track = flow.get(trackname);\nlet start_node_time = new Date().getTime();\nlet steptitle = node.name;\nlet laststep = track[track.length - 1];\nlet last_node_end_time = laststep.end_node_time;\n//>трекер>\n\nmsg.topic = msg.bot.settings.userid + \"-bots:\" + msg.bot.settings.botname + \":status\";\nmsg.bot.status.updated = new Date().getTime();\nmsg.payload = JSON.stringify(msg.bot.status);\nconst upd = global.get('setbot_status')(msg.topic, msg.payload);\n\n\nupd.then(upd => {\n\n    //>трекер>\n    let end_node_time = new Date().getTime();\n    let duration = end_node_time - start_node_time;\n    let duration_step = end_node_time - last_node_end_time;\n    track.push({\n        \"steptitle\": steptitle,\n        \"start_node_time\": start_node_time,\n        \"end_node_time\": end_node_time,\n        \"duration_node\": duration,\n        \"duration_step\": duration_step\n    });\n    flow.set(trackname, track);\n    //>трекер>\n    node.status({ fill: \"green\", shape: \"dot\" });\n    node.send(msg);\n\n}).catch(error => {\n\n    //>трекер>\n    let end_node_time = new Date().getTime();\n    let duration = end_node_time - start_node_time;\n    let duration_step = end_node_time - last_node_end_time;\n    track.push({\n        \"steptitle\": steptitle + \"-faile\",\n        \"start_node_time\": start_node_time,\n        \"end_node_time\": end_node_time,\n        \"duration\": duration,\n        \"duration_step\": duration_step,\n        \"error\": error\n    });\n    flow.set(trackname, track);\n    //>трекер>\n    node.status({ fill: \"red\", shape: \"dot\" });\n    node.error(error);\n});",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1040,
        "y": 840,
        "wires": [
            [
                "fa31bf453965e721"
            ]
        ],
        "icon": "font-awesome/fa-bolt"
    },
    {
        "id": "8cb6d9146b0cb47c",
        "type": "debug",
        "z": "aa608523e76bb32e",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 210,
        "y": 880,
        "wires": []
    },
    {
        "id": "16abde3e7530c355",
        "type": "function",
        "z": "aa608523e76bb32e",
        "name": "getbot_settings",
        "func": "//<трекер<\nlet trackname = \"track-\" + msg.botname;\nlet track = flow.get(trackname);\nlet start_node_time = new Date().getTime();\nlet steptitle = node.name;\n\nlet laststep = track[track.length - 1];\nlet last_node_end_time = laststep.end_node_time;\n//>трекер>\n\nlet bot = {};\nmsg.bot = bot;\nconst gb = global.get('getbot_settings')(msg.botname);\n\ngb.then(gb => {\n\n    msg.bot.settings = JSON.parse(gb);\n\n    //>трекер>\n    let end_node_time = new Date().getTime();\n    let duration = end_node_time - start_node_time;\n    let duration_step = end_node_time - last_node_end_time;\n    track.push({\n        \"steptitle\": steptitle,\n        \"start_node_time\": start_node_time,\n        \"end_node_time\": end_node_time,\n        \"duration_node\": duration,\n        \"duration_step\": duration_step\n    });\n    flow.set(trackname, track);\n    //>трекер>\n    node.status({ fill: \"green\", shape: \"dot\" });\n\n    node.send(msg);\n\n}).catch(error => {\n\n    //>трекер>\n    let end_node_time = new Date().getTime();\n    let duration = end_node_time - start_node_time;\n    let duration_step = end_node_time - last_node_end_time;\n    track.push({\n        \"steptitle\": steptitle + \"-faile\",\n        \"start_node_time\": start_node_time,\n        \"end_node_time\": end_node_time,\n        \"duration\": duration,\n        \"duration_step\": duration_step,\n        \"error\": error\n    });\n    flow.set(trackname, track);\n    //>трекер>\n    node.status({ fill: \"red\", shape: \"dot\" });\n\n    node.error(error);\n});",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 240,
        "y": 840,
        "wires": [
            [
                "50e983ccaec10405"
            ]
        ]
    },
    {
        "id": "50e983ccaec10405",
        "type": "function",
        "z": "aa608523e76bb32e",
        "name": "getbot_status",
        "func": "//<трекер<\nlet trackname = \"track-\" + msg.botname;\nlet track = flow.get(trackname);\nlet start_node_time = new Date().getTime();\nlet steptitle = node.name;\n\nlet laststep = track[track.length - 1];\nlet last_node_end_time = laststep.end_node_time;\n//>трекер>\nconst gb = global.get('getbot_status')(msg.botname);\n\ngb.then(gb => {\n    msg.bot.status = JSON.parse(gb);\n    //>трекер>\n    let end_node_time = new Date().getTime();\n    let duration = end_node_time - start_node_time;\n    let duration_step = end_node_time - last_node_end_time;\n    track.push({\n        \"steptitle\": steptitle,\n        \"start_node_time\": start_node_time,\n        \"end_node_time\": end_node_time,\n        \"duration_node\": duration,\n        \"duration_step\": duration_step\n    });\n    flow.set(trackname, track);\n    //>трекер>\n    node.status({ fill: \"green\", shape: \"dot\" });\n\n    node.send(msg);\n\n}).catch(error => {\n\n    //>трекер>\n    let end_node_time = new Date().getTime();\n    let duration = end_node_time - start_node_time;\n    let duration_step = end_node_time - last_node_end_time;\n    track.push({\n        \"steptitle\": steptitle + \"-faile\",\n        \"start_node_time\": start_node_time,\n        \"end_node_time\": end_node_time,\n        \"duration\": duration,\n        \"duration_step\": duration_step,\n        \"error\": error\n    });\n    flow.set(trackname, track);\n    //>трекер>\n    node.status({ fill: \"red\", shape: \"dot\" });\n    node.error(error);\n});",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 440,
        "y": 840,
        "wires": [
            [
                "f522f55fc740951f"
            ]
        ]
    },
    {
        "id": "f45f3249dbec7058",
        "type": "link in",
        "z": "aa608523e76bb32e",
        "name": "finish track setbotfree",
        "links": [
            "04e23e81161e4a2f",
            "04f838f4dcf92c27",
            "072c1d3a07edfbfb",
            "159777891efadb83",
            "197f2eae23350bde",
            "1ee59cd0dcc3c69b",
            "2292385e984e3b76",
            "563d3c7cf2cd4b45",
            "6460e25babb0c7cc",
            "720d521686c307c6",
            "84de70195e8eeec9",
            "b0ebb7cb4fe037aa",
            "97c944361390ef7f",
            "a382f08ac98f120f",
            "d108b7f4de207c72",
            "d2965d20fb057ea3",
            "e0a18e1cc9e2532d",
            "c55aa818edeee318",
            "ff26ac7ccf964923",
            "1b3e671be6b572d5",
            "378e488cecf6ffc2",
            "822a640986e32473",
            "9a2a545194209ea6",
            "c6b2e3e9d09dc7ab",
            "24b7b6edbf44e542",
            "9844101281395ce5",
            "79b7058be9c74b39",
            "bc399ab7fd3e6b72"
        ],
        "x": 2355,
        "y": 580,
        "wires": [
            [
                "681eb1a0fb01db89"
            ]
        ]
    },
    {
        "id": "fa31bf453965e721",
        "type": "function",
        "z": "aa608523e76bb32e",
        "name": "getbot_data",
        "func": "//<трекер<\nlet trackname = \"track-\" + msg.botname;\nlet track = flow.get(trackname);\nlet start_node_time = new Date().getTime();\nlet steptitle = node.name;\nlet laststep = track[track.length - 1];\nlet last_node_end_time = laststep.end_node_time;\n//>трекер>\n\nlet botname = msg.botname;\n\nconst gb = global.get('getbot_data')(botname);\n\ngb.then(gb => {\n    //node.warn(gb);\n    let bot = {\n        ...msg.bot,\n        \"floors\": JSON.parse(gb.floors),\n        \"finance\": JSON.parse(gb.finance),\n        \"sales\": JSON.parse(gb.sales)\n    };\n    msg.bot = bot;\n    //>трекер>\n    let end_node_time = new Date().getTime();\n    let duration = end_node_time - start_node_time;\n    let duration_step = end_node_time - last_node_end_time;\n    track.push({\n        \"steptitle\": steptitle,\n        \"start_node_time\": start_node_time,\n        \"end_node_time\": end_node_time,\n        \"duration_node\": duration,\n        \"duration_step\": duration_step\n    });\n    flow.set(trackname, track);\n    //>трекер>\n\n    node.send(msg);\n\n}).catch(error => {\n\n    //>трекер>\n    let end_node_time = new Date().getTime();\n    let duration = end_node_time - start_node_time;\n    let duration_step = end_node_time - last_node_end_time;\n    track.push({\n        \"steptitle\": steptitle + \"-faile\",\n        \"start_node_time\": start_node_time,\n        \"end_node_time\": end_node_time,\n        \"duration\": duration,\n        \"duration_step\": duration_step,\n        \"error\": error\n    });\n    flow.set(trackname, track);\n    //>трекер>\n    node.error(error);\n});",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1230,
        "y": 840,
        "wires": [
            [
                "bdea1e1a36639224",
                "e721e50779c24c1a"
            ]
        ]
    },
    {
        "id": "bdea1e1a36639224",
        "type": "debug",
        "z": "aa608523e76bb32e",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1250,
        "y": 880,
        "wires": []
    },
    {
        "id": "2438e99971328983",
        "type": "function",
        "z": "aa608523e76bb32e",
        "name": "MA zapret calculate",
        "func": "//<трекер<\nlet trackname = \"track-\" + msg.botname;\nlet track = flow.get(trackname);\nlet start_node_time = new Date().getTime();\nlet steptitle = node.name;\n\nlet laststep = track[track.length - 1];\nlet last_node_end_time = laststep.end_node_time;\n//>трекер>\n\nmsg.bot.status.currentprice = Number(msg.bot.status.currentprice);\n\nif ((msg.bot.status.currentprice > msg.bot.status.sr_ma_big) && (msg.bot.status.currentprice > msg.bot.status.sr_ma_small)) {\n    msg.bot.zapret_na_zakup = false;\n    msg.bot.status.rezhim = \"МА - закуп разрешен\";\n\n} else {\n    msg.bot.zapret_na_zakup = true;\n    msg.bot.status.rezhim = \"МА - закуп запрещён\";\n\n}\n\n//if ((msg.bot.status.sr_ma_big == 0) || (msg.bot.status.sr_ma_small == 0)) {\n//    msg.bot.zapret_na_zakup = true;\n//    msg.bot.status.rezhim = \"МА - закуп запрещён\";\n//\n//}\n\n//>трекер>\nlet end_node_time = new Date().getTime();\nlet duration = end_node_time - start_node_time;\nlet duration_step = end_node_time - last_node_end_time;\ntrack.push({\n    \"steptitle\": steptitle,\n    \"start_node_time\": start_node_time,\n    \"end_node_time\": end_node_time,\n    \"duration_node\": duration,\n    \"duration_step\": duration_step\n});\nflow.set(trackname, track);\n//>трекер>\nnode.status({ fill: \"green\", shape: \"dot\" });\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 820,
        "y": 840,
        "wires": [
            [
                "1e441062d1768768"
            ]
        ]
    },
    {
        "id": "faa0d58c66f18f5b",
        "type": "function",
        "z": "aa608523e76bb32e",
        "name": "",
        "func": "msg.topic = \"jurnal\";\nmsg.payload = flow.get(\"track\");\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 3620,
        "y": 1260,
        "wires": [
            [
                "4ef444a2aae0b37a"
            ]
        ]
    },
    {
        "id": "be51aa0a5cb2d715",
        "type": "debug",
        "z": "aa608523e76bb32e",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 4130,
        "y": 1560,
        "wires": []
    },
    {
        "id": "79a4aedeb7f56605",
        "type": "inject",
        "z": "aa608523e76bb32e",
        "name": "",
        "props": [
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "\"jurnal\"",
        "x": 3630,
        "y": 1500,
        "wires": [
            [
                "07736ae184dc17ce",
                "f15ea8b7d11b23ef"
            ]
        ]
    },
    {
        "id": "4a07da22891e30a2",
        "type": "function",
        "z": "aa608523e76bb32e",
        "name": "",
        "func": "msg.payload = JSON.parse(msg.payload);\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 4010,
        "y": 1480,
        "wires": [
            [
                "be51aa0a5cb2d715"
            ]
        ]
    },
    {
        "id": "049d43d953e6f98d",
        "type": "redis-command",
        "z": "aa608523e76bb32e",
        "server": "f120eab2.0a60a8",
        "command": "sadd",
        "name": "",
        "topic": "",
        "params": "",
        "paramsType": "json",
        "payloadType": "json",
        "block": false,
        "x": 3810,
        "y": 1200,
        "wires": [
            [
                "94fb9dfefa8832fb"
            ]
        ]
    },
    {
        "id": "4ef444a2aae0b37a",
        "type": "join",
        "z": "aa608523e76bb32e",
        "name": "",
        "mode": "auto",
        "build": "string",
        "property": "payload",
        "propertyType": "msg",
        "key": "topic",
        "joiner": "\\n",
        "joinerType": "str",
        "accumulate": "false",
        "timeout": "",
        "count": "",
        "reduceRight": false,
        "x": 3750,
        "y": 1140,
        "wires": [
            [
                "049d43d953e6f98d"
            ]
        ]
    },
    {
        "id": "94fb9dfefa8832fb",
        "type": "debug",
        "z": "aa608523e76bb32e",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 3930,
        "y": 1260,
        "wires": []
    },
    {
        "id": "07736ae184dc17ce",
        "type": "function",
        "z": "aa608523e76bb32e",
        "name": "prepare getprice",
        "func": "\nmsg.topic = [];\nmsg.payload = \"jurnal\";\n    \n\nnode.status({fill:\"green\",shape:\"dot\"});\n    \nreturn msg;\n    \n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 3840,
        "y": 1500,
        "wires": [
            []
        ],
        "inputLabels": [
            "orderid"
        ],
        "outputLabels": [
            "status"
        ],
        "icon": "node-red-contrib-binance/binance.png"
    },
    {
        "id": "0f291e716f520d59",
        "type": "redis-command",
        "z": "aa608523e76bb32e",
        "server": "f120eab2.0a60a8",
        "command": "GET",
        "name": "get price",
        "topic": "msg.topic",
        "params": "",
        "paramsType": "json",
        "payloadType": "json",
        "block": false,
        "x": 3880,
        "y": 1380,
        "wires": [
            [
                "b877f214c283d6c4"
            ]
        ]
    },
    {
        "id": "b877f214c283d6c4",
        "type": "debug",
        "z": "aa608523e76bb32e",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 4050,
        "y": 1380,
        "wires": []
    },
    {
        "id": "144b8499e1cdf8aa",
        "type": "inject",
        "z": "aa608523e76bb32e",
        "name": "",
        "props": [
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "jurnal",
        "x": 3670,
        "y": 1380,
        "wires": [
            [
                "0f291e716f520d59"
            ]
        ]
    },
    {
        "id": "f15ea8b7d11b23ef",
        "type": "redis-command",
        "z": "aa608523e76bb32e",
        "server": "f120eab2.0a60a8",
        "command": "hgetall",
        "name": "",
        "topic": "",
        "params": "{}",
        "paramsType": "json",
        "payloadType": "json",
        "block": false,
        "x": 3850,
        "y": 1520,
        "wires": [
            [
                "4a07da22891e30a2"
            ]
        ]
    },
    {
        "id": "85c941aadd8bfc7c",
        "type": "debug",
        "z": "aa608523e76bb32e",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 4010,
        "y": 2120,
        "wires": []
    },
    {
        "id": "be9a3e70a51ffa9c",
        "type": "switch",
        "z": "aa608523e76bb32e",
        "name": "service tick",
        "property": "service",
        "propertyType": "msg",
        "rules": [
            {
                "t": "false"
            },
            {
                "t": "true"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 230,
        "y": 1260,
        "wires": [
            [
                "f8fb29692cd284fc"
            ],
            [
                "89de05a8904fd835",
                "4975bddfee80252f"
            ]
        ]
    },
    {
        "id": "a382f08ac98f120f",
        "type": "link out",
        "z": "aa608523e76bb32e",
        "d": true,
        "name": "",
        "links": [
            "f45f3249dbec7058"
        ],
        "x": 1395,
        "y": 1440,
        "wires": []
    },
    {
        "id": "39d39ced89c0a04e",
        "type": "function",
        "z": "aa608523e76bb32e",
        "name": "определяем этаж",
        "func": "//<трекер<\nlet trackname = \"track-\" + msg.botname;\nlet track = flow.get(trackname);\nlet start_node_time = new Date().getTime();\nlet steptitle = node.name;\n\nlet laststep = track[track.length - 1];\nlet last_node_end_time = laststep.end_node_time;\n//>трекер>\n\nlet lp = Number(msg.bot.status.currentprice);\nlet f = msg.bot.floors;\n\nvar curfloor = f.filter(function (floor) {\n    return ((floor[1] <= lp) && (floor[2] > lp));\n});\n\nif (curfloor[0]) {\n\n    //>трекер>\n    let end_node_time = new Date().getTime();\n    let duration = end_node_time - start_node_time;\n    let duration_step = end_node_time - last_node_end_time;\n    track.push({\n        \"steptitle\": steptitle,\n        \"start_node_time\": start_node_time,\n        \"end_node_time\": end_node_time,\n        \"duration_node\": duration,\n        \"duration_step\": duration_step\n    });\n    flow.set(trackname, track);\n    //>трекер>\n    node.status({ fill: \"green\", shape: \"dot\" });\n\n\n    msg.bot.currentfloor = curfloor[0];\n    msg.bot.status.lastfloor = msg.bot.status.currentfloor;\n    msg.bot.status.currentfloor = curfloor[0][0];\n\n    msg.bot.downfloor = f[msg.bot.status.currentfloor - 2];\n    return [msg, null];\n}\nelse {\n\n    //>трекер>\n    let end_node_time = new Date().getTime();\n    let duration = end_node_time - start_node_time;\n    let duration_step = end_node_time - last_node_end_time;\n    track.push({\n        \"steptitle\": steptitle + \"-outgrid\",\n        \"start_node_time\": start_node_time,\n        \"end_node_time\": end_node_time,\n        \"duration\": duration,\n        \"duration_step\": duration_step,\n\n    });\n    flow.set(trackname, track);\n    //>трекер>\n    node.status({ fill: \"blue\", shape: \"dot\" });\n    // node.warn(\"вне сетки\"); \n    return [null, msg];\n}\n\n",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 830,
        "y": 1160,
        "wires": [
            [
                "795d7f2b2f40f98c"
            ],
            []
        ]
    },
    {
        "id": "2d7bb715dfd65bad",
        "type": "comment",
        "z": "aa608523e76bb32e",
        "name": "вне сетки",
        "info": "",
        "x": 920,
        "y": 1200,
        "wires": []
    },
    {
        "id": "795d7f2b2f40f98c",
        "type": "function",
        "z": "aa608523e76bb32e",
        "name": "setbot_status",
        "func": "//<трекер<\nlet trackname = \"track-\" + msg.botname;\nlet track = flow.get(trackname);\nlet start_node_time = new Date().getTime();\n\nlet steptitle = node.name;\n\nlet laststep = track[track.length - 1];\nlet last_node_end_time = laststep.end_node_time;\n//>трекер>\nmsg.topic = msg.bot.settings.userid + \"-bots:\" + msg.bot.settings.botname + \":status\";\nmsg.bot.status.updated = new Date().getTime();\nmsg.payload = JSON.stringify(msg.bot.status);\nconst upd = global.get('setbot_status')(msg.topic, msg.payload);\n\n\nupd.then(upd => {\n\n    //>трекер>\n    let end_node_time = new Date().getTime();\n    let duration = end_node_time - start_node_time;\n    let duration_step = end_node_time - last_node_end_time;\n    track.push({\n        \"steptitle\": steptitle,\n        \"start_node_time\": start_node_time,\n        \"end_node_time\": end_node_time,\n        \"duration_node\": duration,\n        \"duration_step\": duration_step\n    });\n    flow.set(trackname, track);\n    //>трекер>\n    node.status({ fill: \"green\", shape: \"dot\" });\n    node.send(msg);\n\n}).catch(error => {\n\n    //>трекер>\n    let end_node_time = new Date().getTime();\n    let duration = end_node_time - start_node_time;\n    let duration_step = end_node_time - last_node_end_time;\n    track.push({\n        \"steptitle\": steptitle + \"-faile\",\n        \"start_node_time\": start_node_time,\n        \"end_node_time\": end_node_time,\n        \"duration\": duration,\n        \"duration_step\": duration_step,\n        \"error\": error\n    });\n    flow.set(trackname, track);\n    //>трекер>\n    node.status({ fill: \"red\", shape: \"dot\" });\n    node.error(error);\n});",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1060,
        "y": 1140,
        "wires": [
            [
                "aa47f3fdd4a429a7"
            ]
        ],
        "icon": "font-awesome/fa-bolt"
    },
    {
        "id": "0fd17c3bc25c0510",
        "type": "function",
        "z": "aa608523e76bb32e",
        "name": "getbot_ttp",
        "func": "\nconst gb = global.get('getbot_ttp')(msg.bot.settings.botname);\n\ngb.then(gb => {\n    msg.bot.ttp = JSON.parse(gb);\n    \nnode.status({fill: \"green\", shape: \"ring\"});\n\n    node.send(msg);\n\n}).catch(error => {\n    \n    \n    node.status({fill: \"red\", shape: \"ring\", text: \"error\"});\n    node.error(error);\n});",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 430,
        "y": 1100,
        "wires": [
            [
                "bf3eacd4819faca6",
                "73959fe11acf273a"
            ]
        ]
    },
    {
        "id": "bf3eacd4819faca6",
        "type": "switch",
        "z": "aa608523e76bb32e",
        "name": "sold ?",
        "property": "bot.ttp.sold",
        "propertyType": "msg",
        "rules": [
            {
                "t": "true"
            },
            {
                "t": "false"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 590,
        "y": 1100,
        "wires": [
            [
                "c9d07b86ae121d5a"
            ],
            [
                "39d39ced89c0a04e"
            ]
        ]
    },
    {
        "id": "0ecba83f2bf71053",
        "type": "function",
        "z": "aa608523e76bb32e",
        "name": "setbot_ttp reset",
        "func": "//<трекер<\n    let trackname = \"track-\"+msg.botname;\n    let track = flow.get(trackname);\n    let start_node_time = new Date().getTime();\n    \n    let steptitle = node.name;\n\n    let laststep = track[track.length-1];\n    let last_node_end_time = laststep.end_node_time;\n//>трекер>\n\nmsg.bot.ttp.curstop = 0;\nmsg.bot.ttp.raschstopprice = 0;\nmsg.bot.ttp.curorderid = 0;\nmsg.bot.ttp.sold = false;\nmsg.bot.ttp.ttpbusy = false;\nmsg.bot.ttp.currentprice = 0;\nmsg.bot.ttp.quantity = 0;\nmsg.bot.ttp.final_price = 0;\n\n\nmsg.topic = msg.bot.settings.userid+\"-bots:\"+msg.bot.settings.botname+\":ttp\";\n\nmsg.payload = JSON.stringify(msg.bot.ttp);\nconst upd = global.get('setbot_ttp')(msg.topic, msg.payload);\n\n\nupd.then(upd => {\n\n    //>трекер>\n        let end_node_time = new Date().getTime();\n        let duration = end_node_time - start_node_time;\n        let duration_step = end_node_time - last_node_end_time;\n        track.push({\n            \"steptitle\": steptitle,\n            \"start_node_time\": start_node_time,\n            \"end_node_time\": end_node_time,\n            \"duration_node\": duration,\n            \"duration_step\": duration_step\n        });\n        flow.set(trackname, track);\n    //>трекер>\n    node.status({fill:\"green\",shape:\"dot\"});\n\n    let botname = msg.botname;\n    let datamsg = \"обнуление ттп\";\n    const tilog = global.get('tilog')(botname, datamsg);\n    tilog;\n    \n    node.send(msg);\n\n}).catch(error => {\n\n    //>трекер>\n        let end_node_time = new Date().getTime();\n        let duration = end_node_time - start_node_time;\n        let duration_step = end_node_time - last_node_end_time;\n        track.push({\n            \"steptitle\": steptitle+\"-faile\",\n            \"start_node_time\": start_node_time,\n            \"end_node_time\": end_node_time,\n            \"duration\": duration,\n            \"duration_step\": duration_step,\n            \"error\": error\n        });\n        flow.set(trackname, track);\n    //>трекер>\n    node.status({fill:\"red\",shape:\"dot\"}); \n    node.error(error);\n});",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1060,
        "y": 1040,
        "wires": [
            [
                "1c4763f97ecc0228",
                "b0ebb7cb4fe037aa"
            ]
        ],
        "icon": "font-awesome/fa-bolt"
    },
    {
        "id": "1c4763f97ecc0228",
        "type": "debug",
        "z": "aa608523e76bb32e",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "x": 1010,
        "y": 1080,
        "wires": []
    },
    {
        "id": "b0ebb7cb4fe037aa",
        "type": "link out",
        "z": "aa608523e76bb32e",
        "d": true,
        "name": "",
        "links": [
            "f45f3249dbec7058"
        ],
        "x": 1195,
        "y": 1040,
        "wires": []
    },
    {
        "id": "c9d07b86ae121d5a",
        "type": "function",
        "z": "aa608523e76bb32e",
        "name": "регистрация сделки",
        "func": "//<трекер<\nlet trackname = \"track-\" + msg.botname;\nlet track = flow.get(trackname);\nlet start_node_time = new Date().getTime();\n\nlet steptitle = node.name;\n\nlet laststep = track[track.length - 1];\nlet last_node_end_time = laststep.end_node_time;\n//>трекер>\n\nnode.warn(\"регистрация сделки\");\nlet commision = global.get(\"commision\");\n\nlet sellprice = Number(msg.bot.ttp.final_price);\n\nlet tempfin = Number(Number(msg.bot.finance.quotainorders) - Number(msg.bot.ttp.quantity));\nlet tempfin2 = Number(Number(msg.bot.finance.basenal) + Number(msg.bot.ttp.quantity) * sellprice);\n//let tempfin2 = Number(Number(msg.bot.finance.basenal) + (Number(msg.bot.ttp.quantity) - Number(msg.bot.ttp.quantity / 100 * Number(commision))) * sellprice);\n\n\n\n\n//обнуление всех этажей со статусом 3\n\nvar floors = msg.bot.floors;\n\nfloors.forEach(function (item, i, floors) {\n\n    if (item[7] === 3) {\n        let buyprice = Number(item[10]);\n        let quantity = Number(item[14]);\n        let p = quantity * (sellprice - buyprice);\n        let c = quantity * (Number(sellprice + buyprice)) / 100 * commision;\n        let net = p - c;\n        tempfin2 = tempfin2 - c;\n        msg.bot.sales.today.push([buyprice, sellprice, quantity, p, c, net]);\n        msg.bot.sales.all.push([buyprice, sellprice, quantity, p, c, net]);\n\n        node.warn([buyprice, sellprice, quantity, p, c, net]);\n        \n        let botname = msg.botname;\n        let datamsg = \"регистрация сделки - \" + [buyprice, sellprice, quantity, p, c, net];\n        const tilog = global.get('tilog')(botname, datamsg);\n        tilog;\n\n        item[7] = 0;\n        item[8] = 0;\n        item[9] = 0;\n        item[10] = 0;\n        item[11] = 0;\n        item[12] = 0;\n        item[13] = 0;\n        item[14] = 0;\n\n    }\n});\n\nmsg.bot.finance.quotainorders = tempfin.toFixed(msg.bot.settings.digitprice);\nmsg.bot.finance.basenal = tempfin2.toFixed(msg.bot.settings.digitq);\n\nif (msg.bot.finance.baseinorders == -0) { msg.bot.finance.baseinorders = 0; }\nif (msg.bot.finance.basenal == -0) { msg.bot.finance.basenal = 0; }\n\nmsg.bot.floors = floors;\n\n//>трекер>\nlet end_node_time = new Date().getTime();\nlet duration = end_node_time - start_node_time;\nlet duration_step = end_node_time - last_node_end_time;\ntrack.push({\n    \"steptitle\": steptitle,\n    \"start_node_time\": start_node_time,\n    \"end_node_time\": end_node_time,\n    \"duration_node\": duration,\n    \"duration_step\": duration_step\n});\nflow.set(trackname, track);\n//>трекер>\nreturn msg;\n\n\n\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 840,
        "y": 1020,
        "wires": [
            [
                "0ecba83f2bf71053",
                "3efc2d5e17a67cca"
            ]
        ]
    },
    {
        "id": "aa47f3fdd4a429a7",
        "type": "subflow:90fc9ad8367cb513",
        "z": "aa608523e76bb32e",
        "name": "",
        "env": [],
        "x": 1250,
        "y": 1140,
        "wires": [
            [
                "41d6697b79db07c0",
                "31110cc3ecf39685"
            ]
        ]
    },
    {
        "id": "2292385e984e3b76",
        "type": "link out",
        "z": "aa608523e76bb32e",
        "name": "",
        "links": [
            "f45f3249dbec7058"
        ],
        "x": 1555,
        "y": 1140,
        "wires": []
    },
    {
        "id": "2c04413b32a9b0d6",
        "type": "function",
        "z": "aa608523e76bb32e",
        "name": "floors array prepare",
        "func": "msg.payload = msg.bot.floors;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 470,
        "y": 1400,
        "wires": [
            [
                "b0f439956c9f1b03",
                "cbdd06535da0973e",
                "efd17fc3c59e91a4"
            ]
        ]
    },
    {
        "id": "b0f439956c9f1b03",
        "type": "split",
        "z": "aa608523e76bb32e",
        "name": "",
        "splt": "\\n",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "x": 650,
        "y": 1400,
        "wires": [
            [
                "b5f53b9d6fd85b71"
            ]
        ]
    },
    {
        "id": "b5f53b9d6fd85b71",
        "type": "function",
        "z": "aa608523e76bb32e",
        "name": "concrete floor select",
        "func": "msg.bot.currentfloor = msg.payload;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 840,
        "y": 1400,
        "wires": [
            [
                "feec91cf79b4900e"
            ]
        ]
    },
    {
        "id": "13786f91ead10bdd",
        "type": "join",
        "z": "aa608523e76bb32e",
        "name": "",
        "mode": "auto",
        "build": "object",
        "property": "payload",
        "propertyType": "msg",
        "key": "topic",
        "joiner": "\\n",
        "joinerType": "str",
        "accumulate": true,
        "timeout": "",
        "count": "",
        "reduceRight": false,
        "reduceExp": "",
        "reduceInit": "",
        "reduceInitType": "",
        "reduceFixup": "",
        "x": 1210,
        "y": 1400,
        "wires": [
            [
                "a382f08ac98f120f",
                "d4daebfb9035a18a",
                "7ab3d6e0059f60a2",
                "91dd0ec682c359a4"
            ]
        ]
    },
    {
        "id": "feec91cf79b4900e",
        "type": "subflow:cde16a2385b7b659",
        "z": "aa608523e76bb32e",
        "name": "",
        "env": [],
        "x": 1050,
        "y": 1400,
        "wires": [
            [
                "13786f91ead10bdd"
            ]
        ]
    },
    {
        "id": "e721e50779c24c1a",
        "type": "link out",
        "z": "aa608523e76bb32e",
        "name": "",
        "links": [
            "af5802d0d551156c"
        ],
        "x": 1375,
        "y": 840,
        "wires": []
    },
    {
        "id": "af5802d0d551156c",
        "type": "link in",
        "z": "aa608523e76bb32e",
        "name": "",
        "links": [
            "e721e50779c24c1a"
        ],
        "x": 95,
        "y": 1260,
        "wires": [
            [
                "be9a3e70a51ffa9c"
            ]
        ]
    },
    {
        "id": "89de05a8904fd835",
        "type": "function",
        "z": "aa608523e76bb32e",
        "name": "пересчет депо",
        "func": "\nlet p = Number(msg.bot.status.currentprice);\nmsg.bot.finance.depo = Number((Number(msg.bot.finance.quotanal) * p + Number(msg.bot.finance.quotainorders) * p + Number(msg.bot.finance.basenal) + Number(msg.bot.finance.baseinorders)).toFixed(msg.bot.settings.digitprice));\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 260,
        "y": 1400,
        "wires": [
            [
                "47e1044bcf8803e0",
                "2c04413b32a9b0d6"
            ]
        ]
    },
    {
        "id": "4975bddfee80252f",
        "type": "debug",
        "z": "aa608523e76bb32e",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 500,
        "y": 1220,
        "wires": []
    },
    {
        "id": "47e1044bcf8803e0",
        "type": "debug",
        "z": "aa608523e76bb32e",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 290,
        "y": 1440,
        "wires": []
    },
    {
        "id": "d38d8e403e6fe801",
        "type": "function",
        "z": "aa608523e76bb32e",
        "name": "tester___",
        "func": "let start_node_time = new Date().getTime();\n\nnode.status({fill: \"green\", shape: \"ring\", text: start_node_time});\n    \n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 2800,
        "y": 420,
        "wires": [
            []
        ]
    },
    {
        "id": "d8cd3823f43a3823",
        "type": "redis-in",
        "z": "aa608523e76bb32e",
        "server": "f120eab2.0a60a8",
        "command": "psubscribe",
        "name": "",
        "topic": "main",
        "obj": true,
        "timeout": 0,
        "x": 130,
        "y": 760,
        "wires": [
            [
                "90411351dc0ce001"
            ]
        ]
    },
    {
        "id": "90411351dc0ce001",
        "type": "function",
        "z": "aa608523e76bb32e",
        "name": "task",
        "func": "msg.topic = \"main\";\nmsg.botname = msg.payload.botname;\nmsg.service = msg.payload.service;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 270,
        "y": 760,
        "wires": [
            [
                "55d27a25a393244f"
            ]
        ]
    },
    {
        "id": "55d27a25a393244f",
        "type": "debug",
        "z": "aa608523e76bb32e",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 470,
        "y": 760,
        "wires": []
    },
    {
        "id": "60258f2c7ba97597",
        "type": "redis-out",
        "z": "aa608523e76bb32e",
        "server": "f120eab2.0a60a8",
        "command": "publish",
        "name": "",
        "topic": "",
        "obj": true,
        "x": 2360,
        "y": 1260,
        "wires": []
    },
    {
        "id": "45adb579cdeb9f99",
        "type": "function",
        "z": "aa608523e76bb32e",
        "name": "task update",
        "func": "msg.topic = \"MUT\";\n\nlet cmd = \"update\";\n\nlet data = {\n    \"botname\": msg.botname,\n    \"cmd\": cmd,\n    \"floors\": msg.bot.floors,\n    \"finance\": msg.bot.finance,\n    \"sales\": msg.bot.sales\n\n}\nmsg.payload = {cmd, data};\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2210,
        "y": 1260,
        "wires": [
            [
                "60258f2c7ba97597"
            ]
        ]
    },
    {
        "id": "7438ca5ca1691693",
        "type": "debug",
        "z": "aa608523e76bb32e",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1430,
        "y": 500,
        "wires": []
    },
    {
        "id": "cbdd06535da0973e",
        "type": "function",
        "z": "aa608523e76bb32e",
        "name": "tester___",
        "func": "let start_node_time = new Date().getTime();\n\nnode.status({fill: \"green\", shape: \"ring\", text: start_node_time});\n    \n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 680,
        "y": 1340,
        "wires": [
            []
        ]
    },
    {
        "id": "73959fe11acf273a",
        "type": "function",
        "z": "aa608523e76bb32e",
        "name": "tester___",
        "func": "let start_node_time = new Date().getTime();\n\nnode.status({fill: \"green\", shape: \"ring\", text: start_node_time});\n    \n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 460,
        "y": 1040,
        "wires": [
            []
        ]
    },
    {
        "id": "efd17fc3c59e91a4",
        "type": "debug",
        "z": "aa608523e76bb32e",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "bot.zapret_na_zakup",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 550,
        "y": 1480,
        "wires": []
    },
    {
        "id": "9844101281395ce5",
        "type": "link out",
        "z": "aa608523e76bb32e",
        "name": "",
        "links": [
            "f45f3249dbec7058",
            "e3e1e22a.f958b"
        ],
        "x": 475,
        "y": 1260,
        "wires": []
    },
    {
        "id": "f8fb29692cd284fc",
        "type": "function",
        "z": "aa608523e76bb32e",
        "name": "пересчет депо",
        "func": "\nlet p = Number(msg.bot.status.currentprice);\nmsg.bot.finance.depo = Number((Number(msg.bot.finance.quotanal) * p + Number(msg.bot.finance.quotainorders) * p + Number(msg.bot.finance.basenal) + Number(msg.bot.finance.baseinorders)).toFixed(msg.bot.settings.digitprice));\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 240,
        "y": 1100,
        "wires": [
            [
                "0fd17c3bc25c0510"
            ]
        ]
    },
    {
        "id": "54eb708f184b5ff9",
        "type": "function",
        "z": "aa608523e76bb32e",
        "name": "msg = {}",
        "func": "\nmsg = {};\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1760,
        "y": 760,
        "wires": [
            [
                "c80c04ec0aceea0d",
                "63afc8c67a643987"
            ]
        ]
    },
    {
        "id": "c80c04ec0aceea0d",
        "type": "redis-out",
        "z": "aa608523e76bb32e",
        "server": "f120eab2.0a60a8",
        "command": "publish",
        "name": "",
        "topic": "stop",
        "obj": true,
        "x": 1910,
        "y": 760,
        "wires": []
    },
    {
        "id": "be9c9ba9350d68bb",
        "type": "debug",
        "z": "aa608523e76bb32e",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1590,
        "y": 720,
        "wires": []
    },
    {
        "id": "6a8ccd23b49691c4",
        "type": "function",
        "z": "aa608523e76bb32e",
        "name": "get dump",
        "func": "\nlet trackname = msg.botname + '-dumpmsg';\nmsg.dump = flow.get(trackname);\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1520,
        "y": 760,
        "wires": [
            [
                "be9c9ba9350d68bb"
            ]
        ]
    },
    {
        "id": "91aea7b9a5296063",
        "type": "function",
        "z": "aa608523e76bb32e",
        "name": "dump msg",
        "func": "let trackname = msg.botname+'-dumpmsg';\n//node.warn(trackname);\nlet dumpmsg = JSON.stringify(msg);\nflow.set(trackname, msg);\nreturn msg;\n",
        "outputs": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1670,
        "y": 820,
        "wires": []
    },
    {
        "id": "b1e4411ac2339191",
        "type": "link in",
        "z": "aa608523e76bb32e",
        "name": "dump",
        "links": [
            "f3ba2f9026195dd2",
            "59d8a18476243435",
            "6bfb4baf5f0bda62",
            "ed01713a0f7a87c7",
            "7ab3d6e0059f60a2",
            "9c807c67d5893c3b",
            "02838af5da76abf7",
            "fdc19edac875acf3",
            "99d6e48354b6a474",
            "241445ccf5ab4e35",
            "31110cc3ecf39685"
        ],
        "x": 1555,
        "y": 820,
        "wires": [
            [
                "91aea7b9a5296063"
            ]
        ]
    },
    {
        "id": "02838af5da76abf7",
        "type": "link out",
        "z": "aa608523e76bb32e",
        "name": "",
        "links": [
            "b1e4411ac2339191"
        ],
        "x": 1995,
        "y": 620,
        "wires": []
    },
    {
        "id": "63afc8c67a643987",
        "type": "delay",
        "z": "aa608523e76bb32e",
        "name": "",
        "pauseType": "delay",
        "timeout": "4",
        "timeoutUnits": "milliseconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "x": 1940,
        "y": 840,
        "wires": [
            [
                "c80d5e616dd41fd1"
            ]
        ]
    },
    {
        "id": "c80d5e616dd41fd1",
        "type": "redis-out",
        "z": "aa608523e76bb32e",
        "server": "f120eab2.0a60a8",
        "command": "publish",
        "name": "",
        "topic": "start",
        "obj": false,
        "x": 2090,
        "y": 840,
        "wires": []
    },
    {
        "id": "c8d7a14639ad9eff",
        "type": "debug",
        "z": "aa608523e76bb32e",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1930,
        "y": 920,
        "wires": []
    },
    {
        "id": "d4daebfb9035a18a",
        "type": "debug",
        "z": "aa608523e76bb32e",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "x": 1270,
        "y": 1340,
        "wires": []
    },
    {
        "id": "7ab3d6e0059f60a2",
        "type": "link out",
        "z": "aa608523e76bb32e",
        "name": "",
        "links": [
            "b1e4411ac2339191"
        ],
        "x": 1335,
        "y": 1440,
        "wires": []
    },
    {
        "id": "3efc2d5e17a67cca",
        "type": "subflow:3c980e5965444d95",
        "z": "aa608523e76bb32e",
        "name": "",
        "x": 1050,
        "y": 940,
        "wires": [
            [
                "bc399ab7fd3e6b72"
            ]
        ]
    },
    {
        "id": "41d6697b79db07c0",
        "type": "subflow:3c980e5965444d95",
        "z": "aa608523e76bb32e",
        "name": "",
        "x": 1430,
        "y": 1140,
        "wires": [
            [
                "2292385e984e3b76"
            ]
        ]
    },
    {
        "id": "91dd0ec682c359a4",
        "type": "subflow:3c980e5965444d95",
        "z": "aa608523e76bb32e",
        "name": "",
        "x": 1430,
        "y": 1400,
        "wires": [
            [
                "79b7058be9c74b39"
            ]
        ]
    },
    {
        "id": "0c35cf1e3494a965",
        "type": "catch",
        "z": "aa608523e76bb32e",
        "name": "",
        "scope": null,
        "uncaught": false,
        "x": 1840,
        "y": 1080,
        "wires": [
            [
                "0e56c328b79a80b5"
            ]
        ]
    },
    {
        "id": "0e56c328b79a80b5",
        "type": "debug",
        "z": "aa608523e76bb32e",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 2000,
        "y": 1080,
        "wires": []
    },
    {
        "id": "31110cc3ecf39685",
        "type": "link out",
        "z": "aa608523e76bb32e",
        "name": "",
        "links": [
            "b1e4411ac2339191"
        ],
        "x": 1375,
        "y": 1180,
        "wires": []
    },
    {
        "id": "79b7058be9c74b39",
        "type": "link out",
        "z": "aa608523e76bb32e",
        "name": "",
        "links": [
            "f45f3249dbec7058"
        ],
        "x": 1555,
        "y": 1400,
        "wires": []
    },
    {
        "id": "bc399ab7fd3e6b72",
        "type": "link out",
        "z": "aa608523e76bb32e",
        "name": "",
        "links": [
            "f45f3249dbec7058"
        ],
        "x": 1175,
        "y": 940,
        "wires": []
    },
    {
        "id": "0c3aeafe75593692",
        "type": "ui_button",
        "z": "aa608523e76bb32e",
        "name": "",
        "group": "a328c3be.7f91c8",
        "order": 4,
        "width": 0,
        "height": 0,
        "passthru": false,
        "label": "button1111",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "icon": "",
        "payload": "",
        "payloadType": "str",
        "topic": "topic",
        "topicType": "msg",
        "x": 2490,
        "y": 80,
        "wires": [
            [
                "783dc54501f9e4b9"
            ]
        ]
    },
    {
        "id": "20aec4d75772ce9e",
        "type": "ui_text_input",
        "z": "aa608523e76bb32e",
        "name": "",
        "label": "",
        "tooltip": "",
        "group": "a328c3be.7f91c8",
        "order": 2,
        "width": 0,
        "height": 0,
        "passthru": true,
        "mode": "number",
        "delay": 300,
        "topic": "topic",
        "topicType": "msg",
        "x": 2850,
        "y": 160,
        "wires": [
            [
                "8b1b582af74cfdfd"
            ]
        ]
    },
    {
        "id": "a837ad8b5b7d14c0",
        "type": "ui_text_input",
        "z": "aa608523e76bb32e",
        "name": "",
        "label": "",
        "tooltip": "",
        "group": "a328c3be.7f91c8",
        "order": 2,
        "width": 0,
        "height": 0,
        "passthru": true,
        "mode": "number",
        "delay": 300,
        "topic": "topic",
        "topicType": "msg",
        "x": 2870,
        "y": 240,
        "wires": [
            [
                "525ca8c5b1b51ec1"
            ]
        ]
    },
    {
        "id": "8b1b582af74cfdfd",
        "type": "function",
        "z": "aa608523e76bb32e",
        "name": "",
        "func": "msg.a = msg.payload;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3040,
        "y": 160,
        "wires": [
            [
                "c85e79e70afa1c09"
            ]
        ]
    },
    {
        "id": "525ca8c5b1b51ec1",
        "type": "function",
        "z": "aa608523e76bb32e",
        "name": "",
        "func": "msg.b = msg.payload;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3060,
        "y": 240,
        "wires": [
            [
                "c85e79e70afa1c09"
            ]
        ]
    },
    {
        "id": "c85e79e70afa1c09",
        "type": "function",
        "z": "aa608523e76bb32e",
        "name": "",
        "func": "let c = Number(msg.a) * Number(msg.b);\nmsg.c = c;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3250,
        "y": 200,
        "wires": [
            [
                "0f1a04b9309c606a"
            ]
        ]
    },
    {
        "id": "0f1a04b9309c606a",
        "type": "debug",
        "z": "aa608523e76bb32e",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 3390,
        "y": 200,
        "wires": []
    },
    {
        "id": "783dc54501f9e4b9",
        "type": "debug",
        "z": "aa608523e76bb32e",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 2840,
        "y": 80,
        "wires": []
    },
    {
        "id": "90f190c6bb0181cf",
        "type": "catch",
        "z": "aa608523e76bb32e",
        "g": "b3c2073060265260",
        "name": "",
        "scope": null,
        "uncaught": false,
        "x": 2780,
        "y": 760,
        "wires": [
            [
                "b19d1af0ec51f5f9"
            ]
        ]
    },
    {
        "id": "b19d1af0ec51f5f9",
        "type": "debug",
        "z": "aa608523e76bb32e",
        "g": "b3c2073060265260",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 3030,
        "y": 760,
        "wires": []
    },
    {
        "id": "5f6a22967b74ea92",
        "type": "function",
        "z": "aa608523e76bb32e",
        "d": true,
        "g": "b3c2073060265260",
        "name": "get flow.track",
        "func": "\n//<трекер<\nlet trackname = \"track-\" + msg.botname;\nlet track = flow.get(trackname);\nlet start_node_time = Date.parse(new Date())/1000;\nlet steptitle = node.name;\n//>трекер>\n\nmsg.payload = track;\n\n//<трекер< \n //   let end_node_time = Date.parse(new Date())/1000;\n //   let duration = end_node_time-start_node_time;\n //   track.push([steptitle,start_node_time,end_node_time,duration]);\n //   msg.track = track;\n //   flow.set(\"track\", track);\n//>трекер>\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2980,
        "y": 880,
        "wires": [
            [
                "176f90fd0e8dd63f",
                "d207ea32f3462e0d"
            ]
        ]
    },
    {
        "id": "ad9170df43804eb1",
        "type": "inject",
        "z": "aa608523e76bb32e",
        "g": "b3c2073060265260",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 2680,
        "y": 820,
        "wires": [
            [
                "5f6a22967b74ea92"
            ]
        ]
    },
    {
        "id": "176f90fd0e8dd63f",
        "type": "debug",
        "z": "aa608523e76bb32e",
        "g": "b3c2073060265260",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 3150,
        "y": 840,
        "wires": []
    },
    {
        "id": "d207ea32f3462e0d",
        "type": "ui_table",
        "z": "aa608523e76bb32e",
        "d": true,
        "g": "b3c2073060265260",
        "group": "a328c3be.7f91c8",
        "name": "",
        "order": 2,
        "width": "14",
        "height": "9",
        "columns": [
            {
                "field": "steptitle",
                "title": "steptitle",
                "width": "",
                "align": "left",
                "formatter": "plaintext",
                "formatterParams": {
                    "target": "_blank"
                }
            },
            {
                "field": "duration_node",
                "title": "duration_node",
                "width": "",
                "align": "left",
                "formatter": "plaintext",
                "formatterParams": {
                    "target": "_blank"
                }
            },
            {
                "field": "duration_step",
                "title": "duration_step",
                "width": "",
                "align": "left",
                "formatter": "plaintext",
                "formatterParams": {
                    "target": "_blank"
                }
            }
        ],
        "outputs": 0,
        "cts": false,
        "x": 3150,
        "y": 880,
        "wires": []
    },
    {
        "id": "bc15ae6a3cd8bd9d",
        "type": "comment",
        "z": "aa608523e76bb32e",
        "g": "b3c2073060265260",
        "name": "Отладка",
        "info": "",
        "x": 2520,
        "y": 760,
        "wires": []
    },
    {
        "id": "a8b6a4a24eb9b044",
        "type": "delay",
        "z": "aa608523e76bb32e",
        "g": "b3c2073060265260",
        "name": "",
        "pauseType": "delay",
        "timeout": "500",
        "timeoutUnits": "milliseconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "x": 2570,
        "y": 880,
        "wires": [
            [
                "5f6a22967b74ea92"
            ]
        ]
    },
    {
        "id": "21f0c7079facaed4",
        "type": "redis-in",
        "z": "aa608523e76bb32e",
        "g": "b3c2073060265260",
        "server": "f120eab2.0a60a8",
        "command": "subscribe",
        "name": "",
        "topic": "start1",
        "obj": true,
        "timeout": 0,
        "x": 2430,
        "y": 880,
        "wires": [
            [
                "a8b6a4a24eb9b044"
            ]
        ]
    },
    {
        "id": "b83e78d7646ccec4",
        "type": "trigger",
        "z": "aa608523e76bb32e",
        "g": "3652595e4dbe64b8",
        "name": "",
        "op1": "1",
        "op2": "0",
        "op1type": "str",
        "op2type": "str",
        "duration": "-10",
        "extend": false,
        "overrideDelay": false,
        "units": "s",
        "reset": "",
        "bytopic": "all",
        "topic": "topic",
        "outputs": 1,
        "x": 490,
        "y": 280,
        "wires": [
            [
                "39f8c193c97b8c4c"
            ]
        ]
    },
    {
        "id": "bb349c20cfb2f917",
        "type": "redis-in",
        "z": "aa608523e76bb32e",
        "g": "3652595e4dbe64b8",
        "server": "f120eab2.0a60a8",
        "command": "subscribe",
        "name": "",
        "topic": "stop",
        "obj": true,
        "timeout": 0,
        "x": 90,
        "y": 340,
        "wires": [
            [
                "b0f9cad57124b76b"
            ]
        ]
    },
    {
        "id": "b0f9cad57124b76b",
        "type": "function",
        "z": "aa608523e76bb32e",
        "g": "3652595e4dbe64b8",
        "name": "stop",
        "func": "msg.reset = true;\nmsg.payload = \"\";\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 230,
        "y": 340,
        "wires": [
            [
                "b83e78d7646ccec4"
            ]
        ]
    },
    {
        "id": "40635dae7a5b27bc",
        "type": "redis-in",
        "z": "aa608523e76bb32e",
        "g": "3652595e4dbe64b8",
        "server": "f120eab2.0a60a8",
        "command": "subscribe",
        "name": "",
        "topic": "start",
        "obj": true,
        "timeout": 0,
        "x": 90,
        "y": 280,
        "wires": [
            [
                "a895462d73185a7a"
            ]
        ]
    },
    {
        "id": "a895462d73185a7a",
        "type": "delay",
        "z": "aa608523e76bb32e",
        "g": "3652595e4dbe64b8",
        "name": "",
        "pauseType": "delay",
        "timeout": "1",
        "timeoutUnits": "milliseconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "x": 250,
        "y": 280,
        "wires": [
            [
                "b83e78d7646ccec4"
            ]
        ]
    },
    {
        "id": "59399a1b3ddaf724",
        "type": "redis-in",
        "z": "aa608523e76bb32e",
        "g": "3652595e4dbe64b8",
        "server": "f120eab2.0a60a8",
        "command": "subscribe",
        "name": "",
        "topic": "start1",
        "obj": true,
        "timeout": 0,
        "x": 530,
        "y": 340,
        "wires": [
            [
                "39f8c193c97b8c4c"
            ]
        ]
    },
    {
        "id": "39f8c193c97b8c4c",
        "type": "function",
        "z": "aa608523e76bb32e",
        "d": true,
        "g": "3652595e4dbe64b8",
        "name": "getbotlist",
        "func": "let guid = global.get('guid');\n\nconst gbl = global.get('getbotlist')(guid);\n\ngbl.then(gbl => {\n\n    msg.payload = gbl;\n\n\n    node.status({ fill: \"green\", shape: \"dot\" });\n    node.send(msg);\n\n}).catch(error => {\n\n\n    node.status({ fill: \"red\", shape: \"dot\" });\n\n    node.error(error);\n});",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 680,
        "y": 280,
        "wires": [
            [
                "12d19f43b91c9412"
            ]
        ]
    },
    {
        "id": "12d19f43b91c9412",
        "type": "json",
        "z": "aa608523e76bb32e",
        "g": "3652595e4dbe64b8",
        "name": "",
        "property": "payload",
        "action": "obj",
        "pretty": false,
        "x": 830,
        "y": 280,
        "wires": [
            [
                "a614713741d4206a"
            ]
        ]
    },
    {
        "id": "a614713741d4206a",
        "type": "split",
        "z": "aa608523e76bb32e",
        "g": "3652595e4dbe64b8",
        "name": "",
        "splt": "1",
        "spltType": "len",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "x": 970,
        "y": 280,
        "wires": [
            [
                "9615e127848816c1"
            ]
        ]
    },
    {
        "id": "9615e127848816c1",
        "type": "function",
        "z": "aa608523e76bb32e",
        "g": "3652595e4dbe64b8",
        "name": "getbot_onoff",
        "func": "\n\nlet botname = msg.payload;\nmsg.botname = botname;\n\nconst gb = global.get('getbot_onoff')(botname);\n\ngb.then(gb => {\n\n    msg.payload = JSON.parse(gb);\n\n\n    node.status({ fill: \"green\", shape: \"dot\" });\n\n    node.send(msg);\n\n}).catch(error => {\n\n\n    node.status({ fill: \"red\", shape: \"dot\" });\n\n    node.error(error);\n});",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1130,
        "y": 280,
        "wires": [
            [
                "3b6e35b0b0f85959"
            ]
        ]
    },
    {
        "id": "3b6e35b0b0f85959",
        "type": "filter",
        "z": "aa608523e76bb32e",
        "g": "3652595e4dbe64b8",
        "name": "filter off",
        "property": "payload",
        "propertyType": "msg",
        "asArray": false,
        "itemProperty": "",
        "itemPropertyType": "item",
        "rules": [
            {
                "t": "true",
                "output": 1
            }
        ],
        "checkall": "true",
        "outputs": 1,
        "x": 1300,
        "y": 280,
        "wires": [
            [
                "21741104b1c6ebf0"
            ]
        ]
    },
    {
        "id": "576cc0c4bcfa1270",
        "type": "function",
        "z": "aa608523e76bb32e",
        "g": "3652595e4dbe64b8",
        "name": "get candlestick",
        "func": "\n\nfunction parseApiError(error) {\n  if (error.body) {\n    try {\n      var resp = JSON.parse(error.body);\n      return resp.msg;\n    } catch (error) {/* pass thru */ }\n  }\n  return \"Unknown error. Status code: \" + error.statsCode;\n}\n\nlet LBinance = global.get('gBinance');\nlet key = global.get('key');\nlet secret = global.get('secret');\n\nlet binance = new LBinance().options({\n  APIKEY: key,\n  APISECRET: secret,\n  \"reconnect\": false\n});\n\nlet moneta = msg.bot.settings.moneta;\nlet deep = Number(msg.bot.settings.ma2);\n\n//node.warn(binance);\n\n\n//msg.payload = \"qjson.status\";\n\n\nbinance.candlesticks(moneta, \"1m\", (error, ticks, symbol) => {\n  // console.info(\"candlesticks()\", ticks);\n  // let last_tick = ticks[ticks.length - 1];\n  // let [time, open, high, low, close, volume, closeTime, assetVolume, trades, buyBaseVolume, buyAssetVolume, ignored] = ticks;\n  //console.info(symbol+\" last close: \"+close);\n  msg.payload = ticks;\n\n  node.send(msg);\n  return;\n\n}, { limit: deep });",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "gBinance",
                "module": "node-binance-api"
            }
        ],
        "x": 1880,
        "y": 280,
        "wires": [
            [
                "12979bb10572f963"
            ]
        ],
        "inputLabels": [
            "orderid, moneta"
        ],
        "outputLabels": [
            "status"
        ],
        "icon": "font-awesome/fa-compress"
    },
    {
        "id": "12979bb10572f963",
        "type": "function",
        "z": "aa608523e76bb32e",
        "g": "3652595e4dbe64b8",
        "name": "расчет и запись MA flow.set",
        "func": "\n\nlet candles = msg.payload;\n\n\nlet heiken = candles.map(function(tick){\n  //  node.warn(tick);\n    \n    \n    return (Number(tick[1]) + Number(tick[2]) + Number(tick[3]) + Number(tick[4]))/4;\n});\n\n\n//node.warn(heiken);\nmsg.heiken = heiken;\n\n\nlet heiken_small = heiken.slice(-msg.bot.settings.ma1);\n\n//node.warn(heiken_small);\nlet sum_all = heiken.reduce(function(sum, current) {\n  return sum + current\n});\n\nlet sum_small = heiken_small.reduce(function(sum, current) {\n  return sum + current\n});\n\nmsg.bot.status.sr_ma_big = sum_all / msg.bot.settings.ma2;\nmsg.bot.status.sr_ma_small = sum_small / msg.bot.settings.ma1;\n\nlet volname = msg.bot.settings.botname + \"-MA-big\";\nflow.set(volname, msg.bot.status.sr_ma_big);\n\nlet volname2 = msg.bot.settings.botname + \"-MA-small\";\nflow.set(volname2, msg.bot.status.sr_ma_small);\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2120,
        "y": 280,
        "wires": [
            [
                "9038633804e5cf32"
            ]
        ]
    },
    {
        "id": "21741104b1c6ebf0",
        "type": "function",
        "z": "aa608523e76bb32e",
        "g": "3652595e4dbe64b8",
        "name": "getbot_settings",
        "func": "\n\nlet bot = {};\nmsg.bot = bot;\nconst gb = global.get('getbot_settings')(msg.botname);\n\ngb.then(gb => {\n\n    msg.bot.settings = JSON.parse(gb);\n\n\n\n    node.send(msg);\n\n}).catch(error => {\n\n\n    node.error(error);\n});",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1480,
        "y": 280,
        "wires": [
            [
                "d01152d531f38899"
            ]
        ]
    },
    {
        "id": "d01152d531f38899",
        "type": "function",
        "z": "aa608523e76bb32e",
        "g": "3652595e4dbe64b8",
        "name": "getbot_status",
        "func": "\nconst gb = global.get('getbot_status')(msg.botname);\n\ngb.then(gb => {\n\n    msg.bot.status = JSON.parse(gb);\n\n\n\n    node.send(msg);\n\n}).catch(error => {\n\n\n    node.error(error);\n});\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1680,
        "y": 280,
        "wires": [
            [
                "576cc0c4bcfa1270"
            ]
        ]
    },
    {
        "id": "9038633804e5cf32",
        "type": "debug",
        "z": "aa608523e76bb32e",
        "g": "3652595e4dbe64b8",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 2190,
        "y": 320,
        "wires": []
    },
    {
        "id": "f7abb61a21731640",
        "type": "debug",
        "z": "aa608523e76bb32e",
        "g": "6e143f4c404de0c0",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 2610,
        "y": 640,
        "wires": []
    },
    {
        "id": "49cd39f1c0ff30ed",
        "type": "comment",
        "z": "aa608523e76bb32e",
        "g": "6e143f4c404de0c0",
        "name": "Финиш трека. Семафор = \"Свободно\"",
        "info": "",
        "x": 2580,
        "y": 520,
        "wires": []
    },
    {
        "id": "681eb1a0fb01db89",
        "type": "function",
        "z": "aa608523e76bb32e",
        "g": "6e143f4c404de0c0",
        "name": "setbot_free",
        "func": "//<трекер<\nlet trackname = \"track-\" + msg.botname;\nlet track = flow.get(trackname);\nlet start_node_time = new Date().getTime();\nlet steptitle = node.name;\n\nlet laststep = track[track.length - 1];\nlet last_node_end_time = laststep.end_node_time;\n\nlet firststep = track[0];\nlet first_node_start_time = firststep.start_node_time;\n\nlet duration_track = last_node_end_time - first_node_start_time;\n//>трекер>\n\nconst upd = global.get('setbot_free')(msg.botname);\n\nupd.then(upd => {\n\n    //>трекер>\n    let end_node_time = new Date().getTime();\n    let duration = end_node_time - start_node_time;\n    let duration_step = end_node_time - last_node_end_time;\n    track.push({\n        \"steptitle\": steptitle,\n        \"start_node_time\": start_node_time,\n        \"end_node_time\": end_node_time,\n        \"duration_node\": duration,\n        \"duration_step\": duration_track //только для финишной ноды\n    });\n    flow.set(trackname, track);\n\n    flow.set(msg.botname, 0);\n    //>трекер>\n    node.status({ fill: \"green\", shape: \"dot\" });\n\n    node.send(msg);\n\n}).catch(error => {\n    //>трекер>\n    let end_node_time = new Date().getTime();\n    let duration = end_node_time - start_node_time;\n    let duration_step = end_node_time - last_node_end_time;\n    track.push({\n        \"steptitle\": steptitle + \"-faile\",\n        \"start_node_time\": start_node_time,\n        \"end_node_time\": end_node_time,\n        \"duration\": duration,\n        \"duration_step\": duration_step,\n        \"error\": error\n    });\n    flow.set(trackname, track);\n    //>трекер>\n    node.status({ fill: \"red\", shape: \"dot\" });\n\n    node.error(error);\n});",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2590,
        "y": 580,
        "wires": [
            [
                "f7abb61a21731640",
                "e6489ba7801d2470",
                "5f6a22967b74ea92",
                "d38d8e403e6fe801"
            ]
        ],
        "icon": "font-awesome/fa-bolt"
    },
    {
        "id": "e6489ba7801d2470",
        "type": "function",
        "z": "aa608523e76bb32e",
        "g": "6e143f4c404de0c0",
        "name": "duration",
        "func": "let trackname = \"track-\" + msg.botname;\nlet track = flow.get(trackname);\n\nlet laststep = track[track.length-1];\nlet firststep = track[0];\nlet last_node_end_time = laststep.end_node_time;\nlet first_node_start_time = firststep.start_node_time;\n\nlet duration = last_node_end_time - first_node_start_time;\n//node.warn(duration);\nmsg.payload = duration;\n\nif (duration > 1900){\n            //запись в журнал\n\n        \n        let botname2 = msg.botname;\n        let data2 = \"Длительноть трека -\"+duration;\n        const tilog = global.get('tilog')(botname2,data2);\n        tilog;\n        //запись в журнал\n    \n}\n    \nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2860,
        "y": 580,
        "wires": [
            [
                "7c0b6c3b3fbbf050",
                "8e04bb7da48a1bd4"
            ]
        ]
    },
    {
        "id": "7c0b6c3b3fbbf050",
        "type": "debug",
        "z": "aa608523e76bb32e",
        "g": "6e143f4c404de0c0",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 3030,
        "y": 620,
        "wires": []
    },
    {
        "id": "8e04bb7da48a1bd4",
        "type": "ui_chart",
        "z": "aa608523e76bb32e",
        "g": "6e143f4c404de0c0",
        "name": "",
        "group": "f244fee6.d2627",
        "order": 0,
        "width": "4",
        "height": "7",
        "label": "chart track",
        "chartType": "line",
        "legend": "false",
        "xformat": "ss",
        "interpolate": "cubic",
        "nodata": "",
        "dot": true,
        "ymin": "",
        "ymax": "",
        "removeOlder": "10",
        "removeOlderPoints": "20",
        "removeOlderUnit": "1",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": true,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9a244f",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "x": 3030,
        "y": 580,
        "wires": [
            []
        ]
    },
    {
        "id": "c5f02583e873f1ad",
        "type": "function",
        "z": "aa608523e76bb32e",
        "g": "6e143f4c404de0c0",
        "name": "floors",
        "func": "let reversefloors = msg.bot.floors.reverse();\nmsg.payload = reversefloors.filter(function(floor) {\n    return (floor[7]!= 0);\n});\nreturn msg;\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2850,
        "y": 520,
        "wires": [
            [
                "82abc2cd12a182c2",
                "f4f7e6a5637d10a9"
            ]
        ]
    },
    {
        "id": "82abc2cd12a182c2",
        "type": "ui_table",
        "z": "aa608523e76bb32e",
        "d": true,
        "g": "6e143f4c404de0c0",
        "group": "a328c3be.7f91c8",
        "name": "",
        "order": 1,
        "width": "0",
        "height": "0",
        "columns": [
            {
                "field": "0",
                "title": "num",
                "width": "",
                "align": "left",
                "formatter": "plaintext",
                "formatterParams": {
                    "target": "_blank"
                }
            },
            {
                "field": "7",
                "title": "status",
                "width": "",
                "align": "left",
                "formatter": "plaintext",
                "formatterParams": {
                    "target": "_blank"
                }
            },
            {
                "field": "8",
                "title": "buy id",
                "width": "",
                "align": "left",
                "formatter": "plaintext",
                "formatterParams": {
                    "target": "_blank"
                }
            },
            {
                "field": "14",
                "title": "quantity",
                "width": "",
                "align": "left",
                "formatter": "plaintext",
                "formatterParams": {
                    "target": "_blank"
                }
            }
        ],
        "outputs": 0,
        "cts": false,
        "x": 3010,
        "y": 500,
        "wires": []
    },
    {
        "id": "f4f7e6a5637d10a9",
        "type": "filter",
        "z": "aa608523e76bb32e",
        "g": "6e143f4c404de0c0",
        "name": "filter off",
        "property": "payload[7]",
        "propertyType": "msg",
        "asArray": false,
        "itemProperty": "",
        "itemPropertyType": "item",
        "rules": [
            {
                "t": "neq",
                "v": "0",
                "vt": "num",
                "output": 1
            }
        ],
        "checkall": "true",
        "outputs": 1,
        "x": 2980,
        "y": 540,
        "wires": [
            [
                "c54ad2d2fbc18d31"
            ]
        ]
    },
    {
        "id": "c54ad2d2fbc18d31",
        "type": "debug",
        "z": "aa608523e76bb32e",
        "g": "6e143f4c404de0c0",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 3170,
        "y": 540,
        "wires": []
    },
    {
        "id": "043fc5ddf2d98d78",
        "type": "comment",
        "z": "aa608523e76bb32e",
        "g": "cc1e358ffcdcb6f5",
        "name": "Старт трека",
        "info": "",
        "x": 110,
        "y": 520,
        "wires": []
    },
    {
        "id": "d6f26758d0a1b75b",
        "type": "trigger",
        "z": "aa608523e76bb32e",
        "g": "cc1e358ffcdcb6f5",
        "name": "",
        "op1": "1",
        "op2": "0",
        "op1type": "str",
        "op2type": "str",
        "duration": "-250",
        "extend": false,
        "overrideDelay": false,
        "units": "ms",
        "reset": "",
        "bytopic": "all",
        "topic": "topic",
        "outputs": 1,
        "x": 460,
        "y": 580,
        "wires": [
            [
                "d2148bf29790dc51"
            ]
        ]
    },
    {
        "id": "2ab3c7b048e0466b",
        "type": "delay",
        "z": "aa608523e76bb32e",
        "g": "cc1e358ffcdcb6f5",
        "name": "",
        "pauseType": "delay",
        "timeout": "3",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "x": 240,
        "y": 580,
        "wires": [
            [
                "d6f26758d0a1b75b"
            ]
        ]
    },
    {
        "id": "2bf11cfb68e94e52",
        "type": "function",
        "z": "aa608523e76bb32e",
        "g": "cc1e358ffcdcb6f5",
        "name": "stop",
        "func": "let botname = \"syslog.txt\";\nlet data = \"Стоп\";\nconst syslog = global.get('tilog')(botname,data);\nsyslog;\n        \n\n        \nmsg.reset = true;\nmsg.payload = \"\";\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 230,
        "y": 640,
        "wires": [
            [
                "d6f26758d0a1b75b"
            ]
        ]
    },
    {
        "id": "bf8dd1f027f4b378",
        "type": "redis-in",
        "z": "aa608523e76bb32e",
        "g": "cc1e358ffcdcb6f5",
        "server": "f120eab2.0a60a8",
        "command": "subscribe",
        "name": "",
        "topic": "stop",
        "obj": true,
        "timeout": 0,
        "x": 90,
        "y": 640,
        "wires": [
            [
                "2bf11cfb68e94e52"
            ]
        ]
    },
    {
        "id": "6eacd5963b50dc15",
        "type": "redis-in",
        "z": "aa608523e76bb32e",
        "g": "cc1e358ffcdcb6f5",
        "server": "f120eab2.0a60a8",
        "command": "subscribe",
        "name": "",
        "topic": "start",
        "obj": true,
        "timeout": 0,
        "x": 90,
        "y": 580,
        "wires": [
            [
                "2ab3c7b048e0466b",
                "3b85159e0cbdfc50"
            ]
        ]
    },
    {
        "id": "59c46e1375b8372a",
        "type": "redis-in",
        "z": "aa608523e76bb32e",
        "g": "cc1e358ffcdcb6f5",
        "server": "f120eab2.0a60a8",
        "command": "subscribe",
        "name": "",
        "topic": "start1",
        "obj": true,
        "timeout": 0,
        "x": 650,
        "y": 520,
        "wires": [
            [
                "d2148bf29790dc51"
            ]
        ]
    },
    {
        "id": "3fe89f51e99183d6",
        "type": "comment",
        "z": "aa608523e76bb32e",
        "g": "cc1e358ffcdcb6f5",
        "name": "Семафор = \"Занято\"",
        "info": "",
        "x": 1980,
        "y": 500,
        "wires": []
    },
    {
        "id": "0886877529092c3f",
        "type": "function",
        "z": "aa608523e76bb32e",
        "g": "cc1e358ffcdcb6f5",
        "name": "start",
        "func": "//<трекер<\n////>только для стартовой ноды>\nlet track = [];\nlet start_track_time = new Date().getTime();\nlet start_node_time = start_track_time;\nlet steptitle = node.name;\n////>только для стартовой ноды>\n//>трекер>\n\n\n\nmsg.payload = global.get('guid');\n\n\n//>трекер>\n    let end_node_time = new Date().getTime();\n    let duration = end_node_time - start_node_time;\n    track.push({\n        \"steptitle\": steptitle,\n        \"start_node_time\": start_node_time,\n        \"end_node_time\": end_node_time,\n        \"duration_node\": duration,\n        \"duration_step\": 0\n    });\n    let trackname = \"track-\" + msg.botname;\n    flow.set(trackname, track);\n//>трекер>\nnode.status({ fill: \"green\", shape: \"ring\", text: duration });\nreturn msg;\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1830,
        "y": 580,
        "wires": [
            [
                "d07564e00689101f",
                "02838af5da76abf7"
            ]
        ]
    },
    {
        "id": "d2148bf29790dc51",
        "type": "function",
        "z": "aa608523e76bb32e",
        "d": true,
        "g": "cc1e358ffcdcb6f5",
        "name": "getbotlist",
        "func": "\n\nlet guid = global.get('guid');\n\nconst gbl = global.get('getbotlist')(guid);\n\ngbl.then(gbl => {\n    \n    msg.payload = gbl;\n    \n\n    node.status({fill:\"green\",shape:\"dot\"});\n    node.send(msg);\n\n}).catch(error => {\n    \n\n    node.status({fill:\"red\",shape:\"dot\"});\n    \n    node.error(error);\n});",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 660,
        "y": 580,
        "wires": [
            [
                "0352570368368083"
            ]
        ]
    },
    {
        "id": "0352570368368083",
        "type": "json",
        "z": "aa608523e76bb32e",
        "g": "cc1e358ffcdcb6f5",
        "name": "",
        "property": "payload",
        "action": "obj",
        "pretty": false,
        "x": 810,
        "y": 580,
        "wires": [
            [
                "0fc591a98c9d1a6a"
            ]
        ]
    },
    {
        "id": "0fc591a98c9d1a6a",
        "type": "split",
        "z": "aa608523e76bb32e",
        "g": "cc1e358ffcdcb6f5",
        "name": "",
        "splt": "1",
        "spltType": "len",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "x": 950,
        "y": 580,
        "wires": [
            [
                "211dfdfe24894da6"
            ]
        ]
    },
    {
        "id": "211dfdfe24894da6",
        "type": "function",
        "z": "aa608523e76bb32e",
        "g": "cc1e358ffcdcb6f5",
        "name": "getbot_onoff",
        "func": "\n\nlet botname = msg.payload;\nmsg.botname = botname;\n\nconst gb = global.get('getbot_onoff')(botname);\n\ngb.then(gb => {\n    \n    msg.payload = JSON.parse(gb);\n    \n\n    node.status({fill:\"green\",shape:\"dot\"});\n    \n    node.send(msg);\n\n}).catch(error => {\n    \n\n    node.status({fill:\"red\",shape:\"dot\"});\n    \n    node.error(error);\n});",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1090,
        "y": 580,
        "wires": [
            [
                "316df6b785a2b949",
                "318c5dd096b9cd56"
            ]
        ]
    },
    {
        "id": "316df6b785a2b949",
        "type": "filter",
        "z": "aa608523e76bb32e",
        "g": "cc1e358ffcdcb6f5",
        "name": "filter off",
        "property": "payload",
        "propertyType": "msg",
        "asArray": false,
        "itemProperty": "",
        "itemPropertyType": "item",
        "rules": [
            {
                "t": "true",
                "output": 1
            }
        ],
        "checkall": "true",
        "outputs": 1,
        "x": 1260,
        "y": 580,
        "wires": [
            [
                "7fcae21684eead67",
                "7438ca5ca1691693"
            ]
        ]
    },
    {
        "id": "7fcae21684eead67",
        "type": "function",
        "z": "aa608523e76bb32e",
        "g": "cc1e358ffcdcb6f5",
        "name": "getbot_busy",
        "func": "\n\nconst gb = global.get('getbot_busy')(msg.botname);\n\ngb.then(gb => {\n\n    msg.payload = JSON.parse(gb);\n\n\n    node.status({ fill: \"green\", shape: \"dot\" });\n\n\n    node.send(msg);\n\n}).catch(error => {\n\n\n    node.status({ fill: \"red\", shape: \"dot\" });\n\n    node.error(error);\n});",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1430,
        "y": 580,
        "wires": [
            [
                "b97cf38cba75682f"
            ]
        ]
    },
    {
        "id": "b97cf38cba75682f",
        "type": "function",
        "z": "aa608523e76bb32e",
        "g": "cc1e358ffcdcb6f5",
        "name": "busy === false ",
        "func": "\n\nif (msg.payload === false) {\n    msg.rate = 250;\n    node.status({fill:\"green\",shape:\"dot\"});\n    \n    return [msg, null, null];\n}\n\nelse {\n\n    let id = msg.botname;\n    msg.payload = [];\n\n    var count = flow.get(id) || 0;\n    count += 1;\n\n\n    node.status({fill:\"blue\",shape:\"dot\"});\n\n\n    if (count > 16) {\n        \n        let trackname = \"track-\" + msg.botname;\n        let lasttrack = flow.get(trackname);\n        msg.lasttrack = lasttrack;\n        lasttrack = JSON.stringify(lasttrack || \"\", null, '\\t');\n        \n\n        \n        //запись в журнал\n        let botname = \"syslog.txt\";\n        let data = \"Сброс \"+msg.botname+\" \\n \"+lasttrack;\n        const syslog = global.get('tilog')(botname,data);\n        syslog;\n        \n        let botname2 = msg.botname;\n        let data2 = \"Сброс busy \\n \"+lasttrack;\n        const tilog = global.get('tilog')(botname2,data2);\n        tilog;\n        //запись в журнал\n        \n        const upd = global.get('setbot_free')(id);\n\n        upd.then(upd => {\n            \n\n            node.status({fill:\"red\",shape:\"dot\"});\n            \n            flow.set(id, 0);\n            node.warn(\"reset busy:\" + id);\n\n        }).catch(error => {\n            node.error(error);\n        });\n        return [null, null, msg];\n\n    }\n    flow.set(id, count);\n    return [null, msg, null];\n}\n\n\n\n\n\n",
        "outputs": 3,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1620,
        "y": 580,
        "wires": [
            [
                "0886877529092c3f"
            ],
            [],
            [
                "6a8ccd23b49691c4"
            ]
        ],
        "icon": "font-awesome/fa-bolt"
    },
    {
        "id": "d07564e00689101f",
        "type": "function",
        "z": "aa608523e76bb32e",
        "g": "cc1e358ffcdcb6f5",
        "name": "setbot_busy, service step count",
        "func": "//<трекер<\nlet trackname = \"track-\" + msg.botname;\nlet track = flow.get(trackname);\nlet start_node_time = new Date().getTime();\nlet steptitle = node.name;\n\nlet laststep = track[track.length - 1];\nlet last_node_end_time = laststep.end_node_time;\n//>трекер>\n\nconst upd = global.get('setbot_busy')(msg.botname);\n\nlet id = \"srv-\" + msg.botname;\nvar count = flow.get(id) || 0;\ncount += 1;\n//node.warn(count);\nflow.set(id, count);\nif (count >= 10) {\n    msg.service = true;\n    flow.set(id, 0);\n} else {\n    msg.service = false;\n\n}\n\nupd.then(upd => {\n\n    //>трекер>\n    let end_node_time = new Date().getTime();\n    let duration = end_node_time - start_node_time;\n    let duration_step = end_node_time - last_node_end_time;\n    track.push({\n        \"steptitle\": steptitle,\n        \"start_node_time\": start_node_time,\n        \"end_node_time\": end_node_time,\n        \"duration_node\": duration,\n        \"duration_step\": duration_step\n    });\n    flow.set(trackname, track);\n    //>трекер>\n    node.status({ fill: \"green\", shape: \"dot\" });\n\n    node.send(msg);\n\n}).catch(error => {\n\n    //>трекер>\n    let end_node_time = new Date().getTime();\n    let duration = end_node_time - start_node_time;\n    let duration_step = end_node_time - last_node_end_time;\n    track.push({\n        \"steptitle\": steptitle + \"-faile\",\n        \"start_node_time\": start_node_time,\n        \"end_node_time\": end_node_time,\n        \"duration\": duration,\n        \"duration_step\": duration_step,\n        \"error\": error\n    });\n    flow.set(trackname, track);\n    //>трекер>\n    node.status({ fill: \"red\", shape: \"dot\" });\n    node.error(error);\n});",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2030,
        "y": 580,
        "wires": [
            [
                "1d7ec925a626478d",
                "a8db300f4ca0f579"
            ]
        ],
        "icon": "font-awesome/fa-bolt"
    },
    {
        "id": "a8db300f4ca0f579",
        "type": "debug",
        "z": "aa608523e76bb32e",
        "g": "cc1e358ffcdcb6f5",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1990,
        "y": 540,
        "wires": []
    },
    {
        "id": "3b85159e0cbdfc50",
        "type": "function",
        "z": "aa608523e76bb32e",
        "g": "cc1e358ffcdcb6f5",
        "name": "syslog",
        "func": "let botname = \"syslog.txt\";\nlet data = \" \\n \\n Старт\";\nconst tilog = global.get('tilog')(botname,data);\n\ntilog.then(tilog => {\n\n\n        node.status({fill:\"green\",shape:\"dot\"});\n    node.send(msg);\n     \n    \n\n}).catch(error => {\n    \n    msg.error = error;\n    node.status({fill:\"red\",shape: \"ring\"});\n    \n    node.error(error);\n});",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 270,
        "y": 520,
        "wires": [
            []
        ]
    },
    {
        "id": "8997fd87d44fea11",
        "type": "function",
        "z": "aa608523e76bb32e",
        "g": "cc1e358ffcdcb6f5",
        "name": "syslog",
        "func": "let botname = \"syslog.txt\";\nlet data = \"Стоп\";\nconst tilog = global.get('tilog')(botname,data);\n\ntilog.then(tilog => {\n\n\n        node.status({fill:\"green\",shape:\"dot\"});\n    node.send(msg);\n     \n    \n\n}).catch(error => {\n    \n    msg.error = error;\n    node.status({fill:\"red\",shape: \"ring\"});\n    \n    node.error(error);\n});",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 410,
        "y": 640,
        "wires": [
            []
        ]
    },
    {
        "id": "1d7ec925a626478d",
        "type": "link out",
        "z": "aa608523e76bb32e",
        "g": "cc1e358ffcdcb6f5",
        "name": "",
        "links": [
            "c77d7c11b75f6f62"
        ],
        "x": 2215,
        "y": 580,
        "wires": []
    },
    {
        "id": "318c5dd096b9cd56",
        "type": "debug",
        "z": "aa608523e76bb32e",
        "g": "cc1e358ffcdcb6f5",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1270,
        "y": 500,
        "wires": []
    },
    {
        "id": "9e606dea4881403f",
        "type": "inject",
        "z": "aa608523e76bb32e",
        "g": "ad7d64bcaaac9c06",
        "name": " stop",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "reset",
                "v": "true",
                "vt": "bool"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 1790,
        "y": 1840,
        "wires": [
            [
                "094df78e7c0966ed"
            ]
        ]
    },
    {
        "id": "094df78e7c0966ed",
        "type": "redis-out",
        "z": "aa608523e76bb32e",
        "g": "ad7d64bcaaac9c06",
        "server": "f120eab2.0a60a8",
        "command": "publish",
        "name": "",
        "topic": "stop",
        "obj": false,
        "x": 1790,
        "y": 1880,
        "wires": []
    },
    {
        "id": "782aff6a5882d7fa",
        "type": "inject",
        "z": "aa608523e76bb32e",
        "g": "ad7d64bcaaac9c06",
        "name": "start",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payloadType": "date",
        "x": 1370,
        "y": 1840,
        "wires": [
            [
                "dfd037e71f23b16d"
            ]
        ]
    },
    {
        "id": "dfd037e71f23b16d",
        "type": "redis-out",
        "z": "aa608523e76bb32e",
        "g": "ad7d64bcaaac9c06",
        "server": "f120eab2.0a60a8",
        "command": "publish",
        "name": "",
        "topic": "start",
        "obj": false,
        "x": 1370,
        "y": 1880,
        "wires": []
    },
    {
        "id": "f262853aa528cd2f",
        "type": "inject",
        "z": "aa608523e76bb32e",
        "g": "ad7d64bcaaac9c06",
        "name": "start1",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 1550,
        "y": 1840,
        "wires": [
            [
                "c25b346707dac2ac"
            ]
        ]
    },
    {
        "id": "c25b346707dac2ac",
        "type": "redis-out",
        "z": "aa608523e76bb32e",
        "g": "ad7d64bcaaac9c06",
        "server": "f120eab2.0a60a8",
        "command": "publish",
        "name": "",
        "topic": "start1",
        "obj": false,
        "x": 1550,
        "y": 1880,
        "wires": []
    },
    {
        "id": "fd39d0b5129e61e0",
        "type": "inject",
        "z": "aa608523e76bb32e",
        "g": "6504333180454769",
        "name": " stop",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "reset",
                "v": "true",
                "vt": "bool"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 1710,
        "y": 40,
        "wires": [
            [
                "3f3c529387944d04"
            ]
        ]
    },
    {
        "id": "3f3c529387944d04",
        "type": "redis-out",
        "z": "aa608523e76bb32e",
        "g": "6504333180454769",
        "server": "f120eab2.0a60a8",
        "command": "publish",
        "name": "",
        "topic": "stop",
        "obj": false,
        "x": 1710,
        "y": 80,
        "wires": []
    },
    {
        "id": "05d3650686e812cb",
        "type": "inject",
        "z": "aa608523e76bb32e",
        "g": "6504333180454769",
        "name": "start",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": "10",
        "topic": "",
        "payloadType": "date",
        "x": 1290,
        "y": 40,
        "wires": [
            [
                "ec346f295542edc4"
            ]
        ]
    },
    {
        "id": "ec346f295542edc4",
        "type": "redis-out",
        "z": "aa608523e76bb32e",
        "g": "6504333180454769",
        "server": "f120eab2.0a60a8",
        "command": "publish",
        "name": "",
        "topic": "start",
        "obj": false,
        "x": 1290,
        "y": 80,
        "wires": []
    },
    {
        "id": "4e350476cd17623f",
        "type": "inject",
        "z": "aa608523e76bb32e",
        "g": "6504333180454769",
        "name": "start1",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 1470,
        "y": 40,
        "wires": [
            [
                "f32e44bd2984a09c"
            ]
        ]
    },
    {
        "id": "f32e44bd2984a09c",
        "type": "redis-out",
        "z": "aa608523e76bb32e",
        "g": "6504333180454769",
        "server": "f120eab2.0a60a8",
        "command": "publish",
        "name": "",
        "topic": "start1",
        "obj": false,
        "x": 1470,
        "y": 80,
        "wires": []
    },
    {
        "id": "aafdf287f8eece3e",
        "type": "redis-instance",
        "z": "aa608523e76bb32e",
        "g": "6504333180454769",
        "server": "f120eab2.0a60a8",
        "name": "",
        "topic": "redis",
        "location": "flow",
        "x": 1910,
        "y": 60,
        "wires": []
    },
    {
        "id": "204a54cdd980f6f2",
        "type": "comment",
        "z": "aa608523e76bb32e",
        "name": "копия main от 28 4-00",
        "info": "",
        "x": 390,
        "y": 100,
        "wires": []
    },
    {
        "id": "180bacca6db5568a",
        "type": "function",
        "z": "5df15275.2888ec",
        "name": "getbotlist",
        "func": "let guid = global.get('guid');\n\nconst gbl = global.get('getbotlist')(guid);\n\ngbl.then(gbl => {\n\n    msg.payload = gbl;\n\n    global.set('botlist',JSON.parse(gbl));\n    node.status({ fill: \"green\", shape: \"dot\" });\n    node.send(msg);\n\n}).catch(error => {\n\n\n    node.status({ fill: \"red\", shape: \"dot\" });\n\n    node.error(error);\n});",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 340,
        "y": 300,
        "wires": [
            [
                "0455a9fa615aae17"
            ]
        ]
    },
    {
        "id": "0455a9fa615aae17",
        "type": "json",
        "z": "5df15275.2888ec",
        "name": "",
        "property": "payload",
        "action": "obj",
        "pretty": false,
        "x": 490,
        "y": 300,
        "wires": [
            [
                "bace2b04002a3f4b"
            ]
        ]
    },
    {
        "id": "bace2b04002a3f4b",
        "type": "split",
        "z": "5df15275.2888ec",
        "name": "",
        "splt": "1",
        "spltType": "len",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "x": 630,
        "y": 300,
        "wires": [
            [
                "683b485facec8d47",
                "cc8156f9e3f2e4ef"
            ]
        ]
    },
    {
        "id": "683b485facec8d47",
        "type": "function",
        "z": "5df15275.2888ec",
        "name": "getbot_settings",
        "func": "msg.botname = msg.payload;\nlet bot = {};\nmsg.bot = bot;\nconst gb = global.get('getbot_settings')(msg.botname);\n\ngb.then(gb => {\n\n    msg.bot.settings = JSON.parse(gb);\n    node.status({ fill: \"green\", shape: \"dot\" });\n    node.send(msg);\n\n}).catch(error => {\n    node.status({ fill: \"red\", shape: \"dot\" });\n    node.error(error);\n});",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 800,
        "y": 300,
        "wires": [
            [
                "56b6e820a4625a55"
            ]
        ]
    },
    {
        "id": "56b6e820a4625a55",
        "type": "function",
        "z": "5df15275.2888ec",
        "name": "getbot_status",
        "func": "\nconst gb = global.get('getbot_status')(msg.botname);\n\ngb.then(gb => {\n\n    msg.bot.status = JSON.parse(gb);\n\n\n    node.status({ fill: \"green\", shape: \"dot\" });\n    node.send(msg);\n\n}).catch(error => {\n\n    node.status({ fill: \"red\", shape: \"dot\" });\n    node.error(error);\n});\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1000,
        "y": 300,
        "wires": [
            [
                "854a26d7e2200af1"
            ]
        ]
    },
    {
        "id": "854a26d7e2200af1",
        "type": "function",
        "z": "5df15275.2888ec",
        "name": "getbot_data",
        "func": "\n\nlet botname = msg.botname;\n\nconst gb = global.get('getbot_data')(botname);\n\ngb.then(gb => {\n    //node.warn(gb);\n    let bot = {\n        ...msg.bot,\n        \"floors\": JSON.parse(gb.floors),\n        \"finance\": JSON.parse(gb.finance),\n        \"sales\": JSON.parse(gb.sales)\n    };\n    msg.bot = bot;\n\n    node.status({ fill: \"green\", shape: \"dot\" });\n    node.send(msg);\n\n}).catch(error => {\n\n    node.status({ fill: \"red\", shape: \"dot\" });\n    node.error(error);\n});",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1190,
        "y": 300,
        "wires": [
            [
                "9f766ac1e94864ba"
            ]
        ]
    },
    {
        "id": "9f766ac1e94864ba",
        "type": "function",
        "z": "5df15275.2888ec",
        "name": "getbot_ttp",
        "func": "\nconst gb = global.get('getbot_ttp')(msg.botname);\n\ngb.then(gb => {\n    msg.bot.ttp = JSON.parse(gb);\n    \n    node.status({ fill: \"green\", shape: \"dot\" });\n\n    node.send(msg);\n\n}).catch(error => {\n    \n    \n    node.status({ fill: \"red\", shape: \"dot\" });\n    node.error(error);\n});",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1370,
        "y": 300,
        "wires": [
            [
                "f87e06e98b0d7917"
            ]
        ]
    },
    {
        "id": "7b940e6ce5fb40c7",
        "type": "inject",
        "z": "5df15275.2888ec",
        "name": "start onload",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "0.3",
        "topic": "",
        "payloadType": "date",
        "x": 170,
        "y": 300,
        "wires": [
            [
                "180bacca6db5568a"
            ]
        ]
    },
    {
        "id": "f87e06e98b0d7917",
        "type": "function",
        "z": "5df15275.2888ec",
        "name": "getbot_onoff",
        "func": "const gb = global.get('getbot_onoff')(msg.botname);\n\ngb.then(gb => {\n\n    msg.bot.onoff = JSON.parse(gb);\n\n\n    node.status({ fill: \"green\", shape: \"dot\" });\n\n    node.send(msg);\n\n}).catch(error => {\n\n\n    node.status({ fill: \"red\", shape: \"dot\" });\n\n    node.error(error);\n});",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1550,
        "y": 300,
        "wires": [
            [
                "d81b89b8431c5219"
            ]
        ]
    },
    {
        "id": "6f4a714290c3b59b",
        "type": "function",
        "z": "5df15275.2888ec",
        "name": "global.set(msg.botname, msg.bot)",
        "func": "\nglobal.set(msg.botname, msg.bot);\n\nnode.status({ fill: \"green\", shape: \"dot\" });\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2680,
        "y": 300,
        "wires": [
            [
                "1f12c2a908816a59"
            ]
        ]
    },
    {
        "id": "1f12c2a908816a59",
        "type": "debug",
        "z": "5df15275.2888ec",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 2650,
        "y": 340,
        "wires": []
    },
    {
        "id": "3e4f84dc6c2fffdd",
        "type": "change",
        "z": "901cd11f1c81ce5d",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "global",
                "to": "",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1760,
        "y": 1360,
        "wires": [
            []
        ]
    },
    {
        "id": "d0265ad83b72f060",
        "type": "trigger",
        "z": "5df15275.2888ec",
        "g": "7cf2ce1ee9aa09a0",
        "name": "",
        "op1": "1",
        "op2": "0",
        "op1type": "str",
        "op2type": "str",
        "duration": "-10",
        "extend": false,
        "overrideDelay": false,
        "units": "s",
        "reset": "",
        "bytopic": "all",
        "topic": "topic",
        "outputs": 1,
        "x": 530,
        "y": 740,
        "wires": [
            [
                "80f8ee4855b60755"
            ]
        ]
    },
    {
        "id": "55cdeaeec842ce3d",
        "type": "redis-in",
        "z": "5df15275.2888ec",
        "g": "7cf2ce1ee9aa09a0",
        "server": "f120eab2.0a60a8",
        "command": "subscribe",
        "name": "",
        "topic": "stop",
        "obj": true,
        "timeout": 0,
        "x": 130,
        "y": 800,
        "wires": [
            [
                "400760a195d1bbab"
            ]
        ]
    },
    {
        "id": "400760a195d1bbab",
        "type": "function",
        "z": "5df15275.2888ec",
        "g": "7cf2ce1ee9aa09a0",
        "name": "stop",
        "func": "msg.reset = true;\nmsg.payload = \"\";\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 270,
        "y": 800,
        "wires": [
            [
                "d0265ad83b72f060"
            ]
        ]
    },
    {
        "id": "8686597324b188ac",
        "type": "redis-in",
        "z": "5df15275.2888ec",
        "g": "7cf2ce1ee9aa09a0",
        "server": "f120eab2.0a60a8",
        "command": "subscribe",
        "name": "",
        "topic": "start",
        "obj": true,
        "timeout": 0,
        "x": 130,
        "y": 740,
        "wires": [
            [
                "698a84fcef79c165"
            ]
        ]
    },
    {
        "id": "698a84fcef79c165",
        "type": "delay",
        "z": "5df15275.2888ec",
        "g": "7cf2ce1ee9aa09a0",
        "name": "",
        "pauseType": "delay",
        "timeout": "50",
        "timeoutUnits": "milliseconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "x": 290,
        "y": 740,
        "wires": [
            [
                "d0265ad83b72f060"
            ]
        ]
    },
    {
        "id": "2bb16b5c84c65822",
        "type": "redis-in",
        "z": "5df15275.2888ec",
        "g": "7cf2ce1ee9aa09a0",
        "server": "f120eab2.0a60a8",
        "command": "subscribe",
        "name": "",
        "topic": "start1",
        "obj": true,
        "timeout": 0,
        "x": 490,
        "y": 800,
        "wires": [
            [
                "7b66467d81ab2834"
            ]
        ]
    },
    {
        "id": "80f8ee4855b60755",
        "type": "function",
        "z": "5df15275.2888ec",
        "g": "7cf2ce1ee9aa09a0",
        "name": "getbotlist",
        "func": "let a = global.get(\"botlist\");\nmsg.payload = a;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 720,
        "y": 740,
        "wires": [
            [
                "5e3edac3f8d7b5e6"
            ]
        ]
    },
    {
        "id": "5e3edac3f8d7b5e6",
        "type": "split",
        "z": "5df15275.2888ec",
        "g": "7cf2ce1ee9aa09a0",
        "name": "",
        "splt": "1",
        "spltType": "len",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "x": 870,
        "y": 740,
        "wires": [
            [
                "098806a63c0b488e"
            ]
        ]
    },
    {
        "id": "098806a63c0b488e",
        "type": "function",
        "z": "5df15275.2888ec",
        "g": "7cf2ce1ee9aa09a0",
        "name": "getbot global",
        "func": "\nlet botname = msg.payload;\nmsg.botname = botname;\nlet bot = global.get(botname);\nmsg.bot = bot;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1050,
        "y": 740,
        "wires": [
            [
                "e7c80281db2cb5f7"
            ]
        ]
    },
    {
        "id": "e7c80281db2cb5f7",
        "type": "filter",
        "z": "5df15275.2888ec",
        "g": "7cf2ce1ee9aa09a0",
        "name": "filter off",
        "property": "bot.onoff",
        "propertyType": "msg",
        "asArray": false,
        "itemProperty": "",
        "itemPropertyType": "item",
        "rules": [
            {
                "t": "true",
                "output": 1
            }
        ],
        "checkall": "true",
        "outputs": 1,
        "x": 1240,
        "y": 740,
        "wires": [
            [
                "b082667c299cc83e"
            ]
        ]
    },
    {
        "id": "b082667c299cc83e",
        "type": "function",
        "z": "5df15275.2888ec",
        "g": "7cf2ce1ee9aa09a0",
        "name": "get candlestick",
        "func": "\n\nfunction parseApiError(error) {\n  if (error.body) {\n    try {\n      var resp = JSON.parse(error.body);\n      return resp.msg;\n    } catch (error) {/* pass thru */ }\n  }\n  return \"Unknown error. Status code: \" + error.statsCode;\n}\n\nlet LBinance = global.get('gBinance');\nlet key = global.get('key');\nlet secret = global.get('secret');\n\nlet binance = new LBinance().options({\n  APIKEY: key,\n  APISECRET: secret,\n  \"reconnect\": false\n});\n\nlet moneta = msg.bot.settings.moneta;\nlet deep = Number(msg.bot.settings.ma2);\n\n//node.warn(binance);\n\n\n//msg.payload = \"qjson.status\";\n\nbinance.useServerTime(function () {\n  binance.candlesticks(moneta, \"1m\", (error, ticks, symbol) => {\n    // console.info(\"candlesticks()\", ticks);\n    // let last_tick = ticks[ticks.length - 1];\n    // let [time, open, high, low, close, volume, closeTime, assetVolume, trades, buyBaseVolume, buyAssetVolume, ignored] = ticks;\n    //console.info(symbol+\" last close: \"+close);\n    if (error) {\n      var errorMsg = parseApiError(error) + \", moneta:\" + moneta;\n      node.error(errorMsg, msg);\n\n      msg.err = error;\n      node.status({ fill: \"red\", shape: \"ring\", text: errorMsg });\n\n      node.send(msg);\n      //return [msg, null];\n\n    }\n\n    msg.payload = ticks;\n    node.status({ fill: \"green\", shape: \"ring\" });\n    node.send(msg);\n    return;\n\n  }, { limit: deep });\n\n});\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "gBinance",
                "module": "node-binance-api"
            }
        ],
        "x": 1440,
        "y": 740,
        "wires": [
            [
                "f8cd782d3223fa1e"
            ]
        ],
        "inputLabels": [
            "orderid, moneta"
        ],
        "outputLabels": [
            "status"
        ],
        "icon": "font-awesome/fa-compress"
    },
    {
        "id": "c3754613797a5259",
        "type": "function",
        "z": "5df15275.2888ec",
        "g": "7cf2ce1ee9aa09a0",
        "name": "расчет и запись MA flow.set",
        "func": "\n\nlet candles = msg.payload;\n\n\nlet heiken = candles.map(function(tick){\n  //  node.warn(tick);\n    \n    \n    return (Number(tick[1]) + Number(tick[2]) + Number(tick[3]) + Number(tick[4]))/4;\n});\n\n\n//node.warn(heiken);\nmsg.heiken = heiken;\n\n\nlet heiken_small = heiken.slice(-msg.bot.settings.ma1);\n\n//node.warn(heiken_small);\nlet sum_all = heiken.reduce(function(sum, current) {\n  return sum + current\n});\n\nlet sum_small = heiken_small.reduce(function(sum, current) {\n  return sum + current\n});\n\nmsg.bot.status.sr_ma_big = sum_all / msg.bot.settings.ma2;\nmsg.bot.status.sr_ma_small = sum_small / msg.bot.settings.ma1;\n\nlet volname = msg.bot.settings.botname + \"-MA-big\";\nflow.set(volname, msg.bot.status.sr_ma_big);\n\nlet volname2 = msg.bot.settings.botname + \"-MA-small\";\nflow.set(volname2, msg.bot.status.sr_ma_small);\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1880,
        "y": 720,
        "wires": [
            []
        ]
    },
    {
        "id": "7b66467d81ab2834",
        "type": "delay",
        "z": "5df15275.2888ec",
        "g": "7cf2ce1ee9aa09a0",
        "name": "",
        "pauseType": "delay",
        "timeout": "50",
        "timeoutUnits": "milliseconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "x": 650,
        "y": 800,
        "wires": [
            [
                "80f8ee4855b60755"
            ]
        ]
    },
    {
        "id": "387619c36681b3e5",
        "type": "comment",
        "z": "5df15275.2888ec",
        "g": "a0fe11145e7edf84",
        "name": "Старт трека",
        "info": "",
        "x": 150,
        "y": 940,
        "wires": []
    },
    {
        "id": "6d9b202399150652",
        "type": "trigger",
        "z": "5df15275.2888ec",
        "g": "a0fe11145e7edf84",
        "name": "",
        "op1": "1",
        "op2": "0",
        "op1type": "str",
        "op2type": "str",
        "duration": "-250",
        "extend": false,
        "overrideDelay": false,
        "units": "ms",
        "reset": "",
        "bytopic": "all",
        "topic": "topic",
        "outputs": 1,
        "x": 500,
        "y": 1000,
        "wires": [
            [
                "41fb2f2310eb3509"
            ]
        ]
    },
    {
        "id": "87d33f4cea444d76",
        "type": "delay",
        "z": "5df15275.2888ec",
        "g": "a0fe11145e7edf84",
        "name": "",
        "pauseType": "delay",
        "timeout": "1",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "x": 280,
        "y": 1000,
        "wires": [
            [
                "6d9b202399150652"
            ]
        ]
    },
    {
        "id": "0c6bcd5098091952",
        "type": "function",
        "z": "5df15275.2888ec",
        "g": "a0fe11145e7edf84",
        "name": "stop",
        "func": "let botname = \"syslog.txt\";\nlet data = \"Стоп\";\nconst syslog = global.get('tilog')(botname,data);\nsyslog;\n        \n\n        \nmsg.reset = true;\nmsg.payload = \"\";\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 270,
        "y": 1060,
        "wires": [
            [
                "6d9b202399150652"
            ]
        ]
    },
    {
        "id": "dcae1864d2517dea",
        "type": "redis-in",
        "z": "5df15275.2888ec",
        "g": "a0fe11145e7edf84",
        "server": "f120eab2.0a60a8",
        "command": "subscribe",
        "name": "",
        "topic": "stop",
        "obj": true,
        "timeout": 0,
        "x": 130,
        "y": 1060,
        "wires": [
            [
                "0c6bcd5098091952"
            ]
        ]
    },
    {
        "id": "37b3719a56b8b85e",
        "type": "redis-in",
        "z": "5df15275.2888ec",
        "g": "a0fe11145e7edf84",
        "server": "f120eab2.0a60a8",
        "command": "subscribe",
        "name": "",
        "topic": "start",
        "obj": true,
        "timeout": 0,
        "x": 130,
        "y": 1000,
        "wires": [
            [
                "87d33f4cea444d76",
                "b64d6fbb9005a4ce"
            ]
        ]
    },
    {
        "id": "a6fa4338d0263379",
        "type": "redis-in",
        "z": "5df15275.2888ec",
        "g": "a0fe11145e7edf84",
        "server": "f120eab2.0a60a8",
        "command": "subscribe",
        "name": "",
        "topic": "start1",
        "obj": true,
        "timeout": 0,
        "x": 550,
        "y": 940,
        "wires": [
            [
                "41fb2f2310eb3509"
            ]
        ]
    },
    {
        "id": "e9f7dafce7c78a1c",
        "type": "comment",
        "z": "5df15275.2888ec",
        "g": "a0fe11145e7edf84",
        "name": "Семафор = \"Занято\"",
        "info": "",
        "x": 2020,
        "y": 920,
        "wires": []
    },
    {
        "id": "d57be83950b3e792",
        "type": "function",
        "z": "5df15275.2888ec",
        "g": "a0fe11145e7edf84",
        "name": "start",
        "func": "//<трекер<\n////>только для стартовой ноды>\nlet track = [];\nlet start_track_time = new Date().getTime();\nlet start_node_time = start_track_time;\nlet steptitle = node.name;\n////>только для стартовой ноды>\n//>трекер>\n\n\n\nmsg.payload = global.get('guid');\n\n\n//>трекер>\n    let end_node_time = new Date().getTime();\n    let duration = end_node_time - start_node_time;\n    track.push({\n        \"steptitle\": steptitle,\n        \"start_node_time\": start_node_time,\n        \"end_node_time\": end_node_time,\n        \"duration_node\": duration,\n        \"duration_step\": 0\n    });\n    let trackname = \"track-\" + msg.botname;\n    flow.set(trackname, track);\n//>трекер>\nnode.status({ fill: \"green\", shape: \"ring\", text: duration });\nreturn msg;\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1870,
        "y": 1000,
        "wires": [
            [
                "95dc92f2a89e0c4f",
                "17aeeef6a2ea0467"
            ]
        ]
    },
    {
        "id": "cea8b787784f06b7",
        "type": "filter",
        "z": "5df15275.2888ec",
        "g": "a0fe11145e7edf84",
        "name": "filter off",
        "property": "bot.onoff",
        "propertyType": "msg",
        "asArray": false,
        "itemProperty": "",
        "itemPropertyType": "item",
        "rules": [
            {
                "t": "true",
                "output": 1
            }
        ],
        "checkall": "true",
        "outputs": 1,
        "x": 1300,
        "y": 1000,
        "wires": [
            [
                "7d520c9f3f584426"
            ]
        ]
    },
    {
        "id": "7d520c9f3f584426",
        "type": "function",
        "z": "5df15275.2888ec",
        "g": "a0fe11145e7edf84",
        "name": "getbot_busy",
        "func": "msg.payload = msg.bot.busy;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1470,
        "y": 1000,
        "wires": [
            [
                "93be3c8c8ae3e0aa"
            ]
        ]
    },
    {
        "id": "93be3c8c8ae3e0aa",
        "type": "function",
        "z": "5df15275.2888ec",
        "g": "a0fe11145e7edf84",
        "name": "busy === false ",
        "func": "\n\nif (msg.bot.busy === false) {\n    msg.rate = 250;\n    node.status({fill:\"green\",shape:\"dot\"});\n    \n    return [msg, null, null];\n}\n\nelse {\n\n    let id = msg.botname;\n    msg.payload = [];\n\n    var count = flow.get(id) || 0;\n    count += 1;\n\n\n    node.status({fill:\"blue\",shape:\"dot\"});\n\n\n    if (count > 16) {\n        \n        let trackname = \"track-\" + msg.botname;\n        let lasttrack = flow.get(trackname);\n        msg.lasttrack = lasttrack;\n        lasttrack = JSON.stringify(lasttrack || \"\", null, '\\t');\n        \n\n        \n        //запись в журнал\n        let botname = \"syslog.txt\";\n        let data = \"Сброс \"+msg.botname+\" \\n \"+lasttrack;\n        const syslog = global.get('tilog')(botname,data);\n        syslog;\n        \n        let botname2 = msg.botname;\n        let data2 = \"Сброс busy \\n \"+lasttrack;\n        const tilog = global.get('tilog')(botname2,data2);\n        tilog;\n        //запись в журнал\n        \n        node.status({ fill: \"red\", shape: \"dot\" });\n\n        flow.set(id, 0);\n\n        msg.bot.busy = false;\n\n        return [null, null, msg];\n\n    }\n    flow.set(id, count);\n    return [null, msg, null];\n}\n\n\n\n\n\n",
        "outputs": 3,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1660,
        "y": 1000,
        "wires": [
            [
                "d57be83950b3e792"
            ],
            [],
            [
                "fe2d86ea21ca74b1",
                "31c5cd0acc2cc4ef"
            ]
        ],
        "icon": "font-awesome/fa-bolt"
    },
    {
        "id": "95dc92f2a89e0c4f",
        "type": "function",
        "z": "5df15275.2888ec",
        "g": "a0fe11145e7edf84",
        "name": "setbot_busy, service step count",
        "func": "//<трекер<\nlet trackname = \"track-\" + msg.botname;\nlet track = flow.get(trackname);\nlet start_node_time = new Date().getTime();\nlet steptitle = node.name;\n\nlet laststep = track[track.length - 1];\nlet last_node_end_time = laststep.end_node_time;\n//>трекер>\n\nmsg.bot.busy = true;\n\nlet id = \"srv-\" + msg.botname;\nvar count = flow.get(id) || 0;\ncount += 1;\n//node.warn(count);\nflow.set(id, count);\nif (count >= 10) {\n    msg.service = true;\n    flow.set(id, 0);\n} else {\n    msg.service = false;\n\n}\nnode.status({ fill: \"green\", shape: \"dot\" });\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2070,
        "y": 1000,
        "wires": [
            [
                "ecc16c9fb4b93460",
                "d71599fa524f6f20"
            ]
        ],
        "icon": "font-awesome/fa-bolt"
    },
    {
        "id": "d71599fa524f6f20",
        "type": "debug",
        "z": "5df15275.2888ec",
        "g": "a0fe11145e7edf84",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 2030,
        "y": 960,
        "wires": []
    },
    {
        "id": "b64d6fbb9005a4ce",
        "type": "function",
        "z": "5df15275.2888ec",
        "g": "a0fe11145e7edf84",
        "name": "syslog",
        "func": "let botname = \"syslog.txt\";\nlet data = \" \\n \\n Старт\";\nconst tilog = global.get('tilog')(botname,data);\n\ntilog.then(tilog => {\n\n\n        node.status({fill:\"green\",shape:\"dot\"});\n    node.send(msg);\n     \n    \n\n}).catch(error => {\n    \n    msg.error = error;\n    node.status({fill:\"red\",shape: \"ring\"});\n    \n    node.error(error);\n});",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 310,
        "y": 940,
        "wires": [
            []
        ]
    },
    {
        "id": "15ea84929ccca7e8",
        "type": "function",
        "z": "5df15275.2888ec",
        "g": "a0fe11145e7edf84",
        "name": "syslog",
        "func": "let botname = \"syslog.txt\";\nlet data = \"Стоп\";\nconst tilog = global.get('tilog')(botname,data);\n\ntilog.then(tilog => {\n\n\n        node.status({fill:\"green\",shape:\"dot\"});\n    node.send(msg);\n     \n    \n\n}).catch(error => {\n    \n    msg.error = error;\n    node.status({fill:\"red\",shape: \"ring\"});\n    \n    node.error(error);\n});",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 450,
        "y": 1060,
        "wires": [
            []
        ]
    },
    {
        "id": "ecc16c9fb4b93460",
        "type": "link out",
        "z": "5df15275.2888ec",
        "g": "a0fe11145e7edf84",
        "name": "",
        "links": [
            "8ada0320.0af298",
            "4ccca7de15742d16"
        ],
        "x": 2255,
        "y": 1000,
        "wires": []
    },
    {
        "id": "f581bb390118a24e",
        "type": "debug",
        "z": "5df15275.2888ec",
        "g": "a0fe11145e7edf84",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1310,
        "y": 920,
        "wires": []
    },
    {
        "id": "41fb2f2310eb3509",
        "type": "function",
        "z": "5df15275.2888ec",
        "g": "a0fe11145e7edf84",
        "name": "getbotlist",
        "func": "let a = global.get(\"botlist\");\nmsg.payload = a;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 760,
        "y": 1000,
        "wires": [
            [
                "98795c7b07c3c6cc"
            ]
        ]
    },
    {
        "id": "98795c7b07c3c6cc",
        "type": "split",
        "z": "5df15275.2888ec",
        "g": "a0fe11145e7edf84",
        "name": "",
        "splt": "1",
        "spltType": "len",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "x": 910,
        "y": 1000,
        "wires": [
            [
                "d0dafdf34722bfa4"
            ]
        ]
    },
    {
        "id": "d0dafdf34722bfa4",
        "type": "function",
        "z": "5df15275.2888ec",
        "g": "a0fe11145e7edf84",
        "name": "getbot global",
        "func": "\nlet botname = msg.payload;\nmsg.botname = botname;\nlet bot = global.get(botname);\nmsg.bot = bot;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1090,
        "y": 1000,
        "wires": [
            [
                "f581bb390118a24e",
                "cea8b787784f06b7"
            ]
        ]
    },
    {
        "id": "fe2d86ea21ca74b1",
        "type": "function",
        "z": "5df15275.2888ec",
        "g": "a0fe11145e7edf84",
        "name": "get dump",
        "func": "\nlet trackname = msg.botname + '-dumpmsg';\nmsg.dump = flow.get(trackname);\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1720,
        "y": 1120,
        "wires": [
            [
                "5611b6a43040daf1"
            ]
        ]
    },
    {
        "id": "5611b6a43040daf1",
        "type": "debug",
        "z": "5df15275.2888ec",
        "g": "a0fe11145e7edf84",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1870,
        "y": 1120,
        "wires": []
    },
    {
        "id": "17aeeef6a2ea0467",
        "type": "link out",
        "z": "5df15275.2888ec",
        "g": "a0fe11145e7edf84",
        "name": "",
        "links": [
            "85d1e7884404218a"
        ],
        "x": 1895,
        "y": 1040,
        "wires": [],
        "icon": "node-red/db.svg"
    },
    {
        "id": "2805425bf5dafbb8",
        "type": "function",
        "z": "5df15275.2888ec",
        "g": "d4a5f2307ef8b222",
        "name": "пересчет депо",
        "func": "\nlet p = Number(msg.bot.status.currentprice);\nmsg.bot.finance.depo = Number((Number(msg.bot.finance.quotanal) * p + Number(msg.bot.finance.quotainorders) * p + Number(msg.bot.finance.basenal) + Number(msg.bot.finance.baseinorders)).toFixed(msg.bot.settings.digitprice));\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 640,
        "y": 1500,
        "wires": [
            [
                "438a4ff8.3b594"
            ]
        ]
    },
    {
        "id": "c57e23b7fabe24c4",
        "type": "subflow:3c980e5965444d95",
        "z": "5df15275.2888ec",
        "g": "89e4eb3d636bee6a",
        "name": "",
        "env": [],
        "x": 2630,
        "y": 1040,
        "wires": [
            [
                "133c3e4a.687a62",
                "9f82a757.25f3d"
            ]
        ]
    },
    {
        "id": "b41f1cae0fda56f6",
        "type": "function",
        "z": "3c980e5965444d95",
        "name": "global.set(msg.botname, msg.bot);",
        "func": "global.set(msg.botname, msg.bot);\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 270,
        "y": 300,
        "wires": [
            [
                "1cfdac89cf38a974"
            ]
        ]
    },
    {
        "id": "cc8bbb08a6ac0af2",
        "type": "function",
        "z": "5df15275.2888ec",
        "g": "d4a5f2307ef8b222",
        "name": "task update",
        "func": "msg.topic = \"MUT\";\n\nlet cmd = \"update\";\n\nlet data = {\n    \"botname\": msg.botname,\n    \"cmd\": cmd,\n    \"floors\": msg.bot.floors,\n    \"finance\": msg.bot.finance,\n    \"sales\": msg.bot.sales\n\n}\nmsg.payload = {cmd, data};\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1730,
        "y": 1720,
        "wires": [
            [
                "41d7ddab1cfc50b4"
            ]
        ]
    },
    {
        "id": "41d7ddab1cfc50b4",
        "type": "redis-out",
        "z": "5df15275.2888ec",
        "g": "d4a5f2307ef8b222",
        "server": "f120eab2.0a60a8",
        "command": "publish",
        "name": "",
        "topic": "",
        "obj": true,
        "x": 1900,
        "y": 1720,
        "wires": []
    },
    {
        "id": "1cfdac89cf38a974",
        "type": "function",
        "z": "3c980e5965444d95",
        "name": "setbot_status",
        "func": "\n\nmsg.topic = msg.bot.settings.userid + \"-bots:\" + msg.bot.settings.botname + \":status\";\nmsg.bot.status.updated = new Date().getTime();\nmsg.payload = JSON.stringify(msg.bot.status);\nconst upd = global.get('setbot_status')(msg.topic, msg.payload);\n\n\nupd.then(upd => {\n\n\n    node.status({ fill: \"green\", shape: \"dot\" });\n    node.send(msg);\n\n}).catch(error => {\n\n\n    node.status({ fill: \"red\", shape: \"dot\" });\n    node.error(error);\n});",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 520,
        "y": 300,
        "wires": [
            []
        ],
        "icon": "font-awesome/fa-bolt"
    },
    {
        "id": "2869480f6ddecc85",
        "type": "link out",
        "z": "5df15275.2888ec",
        "g": "d4a5f2307ef8b222",
        "name": "",
        "links": [
            "85d1e7884404218a"
        ],
        "x": 1275,
        "y": 1460,
        "wires": [],
        "icon": "node-red/db.svg"
    },
    {
        "id": "070f09d236c25724",
        "type": "link out",
        "z": "5df15275.2888ec",
        "name": "",
        "links": [
            "85d1e7884404218a"
        ],
        "x": 2475,
        "y": 1100,
        "wires": [],
        "icon": "node-red/db.svg"
    },
    {
        "id": "120969bfc4862a7d",
        "type": "link out",
        "z": "5df15275.2888ec",
        "g": "d4a5f2307ef8b222",
        "name": "",
        "links": [
            "85d1e7884404218a"
        ],
        "x": 1135,
        "y": 1660,
        "wires": [],
        "icon": "node-red/db.svg"
    },
    {
        "id": "1eb94b3ec3aae58d",
        "type": "link out",
        "z": "5df15275.2888ec",
        "g": "d4a5f2307ef8b222",
        "name": "",
        "links": [
            "85d1e7884404218a"
        ],
        "x": 1835,
        "y": 1660,
        "wires": [],
        "icon": "node-red/db.svg"
    },
    {
        "id": "6c31547e74d94439",
        "type": "debug",
        "z": "901cd11f1c81ce5d",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "x": 1230,
        "y": 200,
        "wires": []
    },
    {
        "id": "4fbd14afcd5f921d",
        "type": "debug",
        "z": "901cd11f1c81ce5d",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "x": 1410,
        "y": 200,
        "wires": []
    },
    {
        "id": "440bf51b5f35818f",
        "type": "debug",
        "z": "901cd11f1c81ce5d",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "x": 1070,
        "y": 180,
        "wires": []
    },
    {
        "id": "37f37f12519d1c50",
        "type": "ui_button",
        "z": "654ea140.2275a8",
        "name": "",
        "group": "a328c3be.7f91c8",
        "order": 4,
        "width": 0,
        "height": 0,
        "passthru": false,
        "label": "button1111",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "icon": "",
        "payload": "",
        "payloadType": "str",
        "topic": "topic",
        "topicType": "msg",
        "x": 3170,
        "y": 140,
        "wires": [
            [
                "d85336e43a435d22"
            ]
        ]
    },
    {
        "id": "29629e34fbd24708",
        "type": "ui_text_input",
        "z": "654ea140.2275a8",
        "name": "",
        "label": "",
        "tooltip": "",
        "group": "a328c3be.7f91c8",
        "order": 2,
        "width": 0,
        "height": 0,
        "passthru": true,
        "mode": "number",
        "delay": 300,
        "topic": "topic",
        "topicType": "msg",
        "x": 3530,
        "y": 220,
        "wires": [
            [
                "e2a6b8f8a28f8a65"
            ]
        ]
    },
    {
        "id": "c681a9fb288e2abf",
        "type": "ui_text_input",
        "z": "654ea140.2275a8",
        "name": "",
        "label": "",
        "tooltip": "",
        "group": "a328c3be.7f91c8",
        "order": 2,
        "width": 0,
        "height": 0,
        "passthru": true,
        "mode": "number",
        "delay": 300,
        "topic": "topic",
        "topicType": "msg",
        "x": 3570,
        "y": 340,
        "wires": [
            [
                "84480df35b4b2c19"
            ]
        ]
    },
    {
        "id": "e2a6b8f8a28f8a65",
        "type": "function",
        "z": "654ea140.2275a8",
        "name": "",
        "func": "msg.a = msg.payload;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3720,
        "y": 220,
        "wires": [
            [
                "a2d84327bbfa4ba8"
            ]
        ]
    },
    {
        "id": "84480df35b4b2c19",
        "type": "function",
        "z": "654ea140.2275a8",
        "name": "",
        "func": "msg.b = msg.payload;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3760,
        "y": 340,
        "wires": [
            [
                "a2d84327bbfa4ba8"
            ]
        ]
    },
    {
        "id": "a2d84327bbfa4ba8",
        "type": "function",
        "z": "654ea140.2275a8",
        "name": "",
        "func": "let c = Number(msg.a) * Number(msg.b);\nmsg.c = c;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3930,
        "y": 260,
        "wires": [
            [
                "739054bcd0aca4d8"
            ]
        ]
    },
    {
        "id": "739054bcd0aca4d8",
        "type": "debug",
        "z": "654ea140.2275a8",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 4070,
        "y": 260,
        "wires": []
    },
    {
        "id": "d85336e43a435d22",
        "type": "debug",
        "z": "654ea140.2275a8",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 3520,
        "y": 140,
        "wires": []
    },
    {
        "id": "73a399e6f328952a",
        "type": "function",
        "z": "654ea140.2275a8",
        "name": "set buy order",
        "func": "function parseApiError(error) {\n  if (error.body) {\n    try {\n      var resp = JSON.parse(error.body);\n      return resp.msg;\n    } catch (error) {/* pass thru */}\n  }\n  return \"Unknown error. Status code: \"+error.statsCode;\n}\n\nlet LBinance = global.get('gBinance');\n//node.warn(LBinance);\nlet binance = new LBinance().options({\n\tAPIKEY: \"m0dqmIilej2JPuK6vTzNGPMSc0N6pCHCCA0L5Jtes15gWIDteQ23mlrqCxJjSXOb\",\n\tAPISECRET: \"AI4qXclwJWQcBdkNZdGDAB3wVdiJMEwc9OBp54XxFECGjZRHL96Kcv0siBaPC5Kh\",\n\t\"reconnect\": false,\n    'useServerTime': true,\n    \n});\n\n\n//'options': {\n//        'adjustForTimeDifference': true,\n//        'verbose': true, // if needed, not mandatory\n//        'recvWindow': 10000000, // not really needed\n//    }\n\n \n\n\nlet moneta = \"ALPHAUSDT\";\nlet quantity = Number(100);\nlet price = Number(0.137);\nnode.warn(quantity);\nnode.warn(moneta);\nnode.warn(price);\n//msg.payload = \"qjson.status\";\n\nbinance.buy(moneta, quantity, price, {type:'LIMIT'}, (err, resp) => {\n    if (resp) {\n        msg.orderid = resp.orderId;\n        msg.resp = resp.orderId;\n        msg.payload = resp.orderId;\n        node.status({fill: \"green\", shape: \"ring\", text: resp.orderId});\n        node.send(msg);\n       // return [null,msg];\n    }\n    if (err) {\n        var errorMsg = parseApiError(err) + \", moneta:\" + moneta;\n        node.error(errorMsg, msg);\n        node.warn(err);\n        node.status({fill: \"red\", shape: \"ring\", text: errorMsg});\n        node.send(msg);\n        //return [msg, null];\n    }\n    //node.status({}); //clear status message\n});\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 3870,
        "y": 1300,
        "wires": [
            [
                "6b97e4401279737c"
            ]
        ],
        "inputLabels": [
            "orderid, moneta"
        ],
        "outputLabels": [
            "status"
        ],
        "icon": "font-awesome/fa-compress"
    },
    {
        "id": "6b97e4401279737c",
        "type": "debug",
        "z": "654ea140.2275a8",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 4120,
        "y": 1300,
        "wires": []
    },
    {
        "id": "e67c351b88368b49",
        "type": "inject",
        "z": "654ea140.2275a8",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 3640,
        "y": 1300,
        "wires": [
            [
                "73a399e6f328952a"
            ]
        ]
    },
    {
        "id": "afcda6e2db7a3298",
        "type": "inject",
        "z": "654ea140.2275a8",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 3640,
        "y": 1140,
        "wires": [
            [
                "ab3efc78b815ceeb"
            ]
        ]
    },
    {
        "id": "284e685bccbc631d",
        "type": "debug",
        "z": "654ea140.2275a8",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 4130,
        "y": 1140,
        "wires": []
    },
    {
        "id": "ab3efc78b815ceeb",
        "type": "function",
        "z": "654ea140.2275a8",
        "name": "current time",
        "func": "msg.payload = new Date();\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 3850,
        "y": 1140,
        "wires": [
            [
                "284e685bccbc631d"
            ]
        ]
    },
    {
        "id": "dbab64f99c1e6f03",
        "type": "function",
        "z": "654ea140.2275a8",
        "name": "prepare getprice",
        "func": "\n//let moneta = msg.payload.bot.settings.moneta;\n//msg.bot = msg.payload.bot;\n\nmoneta= msg.payload;\n\nmsg.payload = [];\nmsg.topic = \"prices:\" + moneta;\n    \n\nnode.status({fill:\"green\",shape:\"dot\"});\n    \nreturn msg;\n    \n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 3840,
        "y": 1220,
        "wires": [
            [
                "37c5270432eaac07"
            ]
        ],
        "inputLabels": [
            "orderid"
        ],
        "outputLabels": [
            "status"
        ],
        "icon": "node-red-contrib-binance/binance.png"
    },
    {
        "id": "37c5270432eaac07",
        "type": "redis-command",
        "z": "654ea140.2275a8",
        "server": "f120eab2.0a60a8",
        "command": "GET",
        "name": "get price",
        "topic": "msg.payload",
        "params": "[]",
        "paramsType": "json",
        "payloadType": "json",
        "block": false,
        "x": 4040,
        "y": 1220,
        "wires": [
            [
                "295013fd6e5f1a4a"
            ]
        ]
    },
    {
        "id": "295013fd6e5f1a4a",
        "type": "debug",
        "z": "654ea140.2275a8",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 4150,
        "y": 1140,
        "wires": []
    },
    {
        "id": "74579bb11f362f40",
        "type": "inject",
        "z": "654ea140.2275a8",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "BTCUSDT",
        "payloadType": "str",
        "x": 3640,
        "y": 1220,
        "wires": [
            [
                "dbab64f99c1e6f03"
            ]
        ]
    },
    {
        "id": "e215258be82fe398",
        "type": "inject",
        "z": "654ea140.2275a8",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "BTCUSDT",
        "payloadType": "str",
        "x": 3520,
        "y": 840,
        "wires": [
            [
                "ac05e30ce8981de1"
            ]
        ]
    },
    {
        "id": "ac05e30ce8981de1",
        "type": "function",
        "z": "654ea140.2275a8",
        "name": "getprice",
        "func": "\nlet moneta = msg.payload;\n\nconst gp = global.get('getprice')(moneta);\n\ngp.then(gp => {\n    \n    msg.payload = gp;\n    node.send(msg);\n\n}).catch(error => {\n    node.error(error);\n});",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 3720,
        "y": 840,
        "wires": [
            [
                "0c0f1e9ffb911739"
            ]
        ]
    },
    {
        "id": "0c0f1e9ffb911739",
        "type": "debug",
        "z": "654ea140.2275a8",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 3920,
        "y": 840,
        "wires": []
    },
    {
        "id": "cbd199e64052dc10",
        "type": "inject",
        "z": "654ea140.2275a8",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "BNBUSDT-1606062710",
        "payloadType": "str",
        "x": 3540,
        "y": 720,
        "wires": [
            [
                "cea47af42ce43601"
            ]
        ]
    },
    {
        "id": "cea47af42ce43601",
        "type": "function",
        "z": "654ea140.2275a8",
        "name": "getbot",
        "func": "\nlet botname = msg.payload;\n\nconst gb = global.get('getbot_status')(botname);\n\ngb.then(gb => {\n    \n    msg.payload = gb;\n    node.send(msg);\n\n}).catch(error => {\n    node.error(error);\n});",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 3770,
        "y": 720,
        "wires": [
            [
                "a62e7501eaf3869a",
                "832070797a6504b4"
            ]
        ]
    },
    {
        "id": "a62e7501eaf3869a",
        "type": "debug",
        "z": "654ea140.2275a8",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 4000,
        "y": 740,
        "wires": []
    },
    {
        "id": "bfbb4a0d0e169020",
        "type": "inject",
        "z": "654ea140.2275a8",
        "name": "d3fmoh2rVoVNgIcpLTFZBE0jHnI2",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "d3fmoh2rVoVNgIcpLTFZBE0jHnI2",
        "payloadType": "str",
        "x": 3600,
        "y": 920,
        "wires": [
            [
                "279b43709c31f1eb"
            ]
        ]
    },
    {
        "id": "279b43709c31f1eb",
        "type": "function",
        "z": "654ea140.2275a8",
        "name": "getbotlist",
        "func": "\nlet guid = msg.payload;\n\nconst gbl = global.get('getbotlist')(guid);\n\ngbl.then(gbl => {\n    \n    msg.payload = gbl;\n    node.send(msg);\n\n}).catch(error => {\n    node.error(error);\n});",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 3820,
        "y": 920,
        "wires": [
            [
                "19373e24b136f426"
            ]
        ]
    },
    {
        "id": "19373e24b136f426",
        "type": "debug",
        "z": "654ea140.2275a8",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 3990,
        "y": 920,
        "wires": []
    },
    {
        "id": "832070797a6504b4",
        "type": "json",
        "z": "654ea140.2275a8",
        "name": "",
        "property": "payload",
        "action": "obj",
        "pretty": false,
        "x": 4010,
        "y": 700,
        "wires": [
            [
                "2d1cf3eeea5a7573"
            ]
        ]
    },
    {
        "id": "2d1cf3eeea5a7573",
        "type": "debug",
        "z": "654ea140.2275a8",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 4150,
        "y": 720,
        "wires": []
    },
    {
        "id": "57c1d90b6d5426a4",
        "type": "function",
        "z": "654ea140.2275a8",
        "name": "setbot_free",
        "func": "//<трекер<\n    let track = flow.get(\"track\");\n    let start_node_time = Date.parse(new Date()) / 1000;\n    let steptitle = node.name;\n\n    let laststep = track[track.length-1];\n    let last_node_end_time = laststep.end_node_time;\n    node.warn(last_node_end_time);\n//>трекер>\n\nconst upd = global.get('setbot_free')(msg.botname);\n\nupd.then(upd => {\n\n    //>трекер>\n        let end_node_time = Date.parse(new Date()) / 1000;\n        let duration = end_node_time - start_node_time;\n        let duration_step = end_node_time - last_node_end_time;\n        track.push({\n            \"steptitle\": steptitle,\n            \"start_node_time\": start_node_time,\n            \"end_node_time\": end_node_time,\n            \"duration_node\": duration,\n            \"duration_step\": duration_step\n        });\n        flow.set(\"track\", track);\n    //>трекер>\n    node.status({fill:\"green\",shape:\"dot\"});\n    \n    node.send(msg);\n\n}).catch(error => {\n    //>трекер>\n        let end_node_time = Date.parse(new Date()) / 1000;\n        let duration = end_node_time - start_node_time;\n        let duration_step = end_node_time - last_node_end_time;\n        track.push({\n            \"steptitle\": steptitle+\"-faile\",\n            \"start_node_time\": start_node_time,\n            \"end_node_time\": end_node_time,\n            \"duration\": duration,\n            \"duration_step\": duration_step,\n            \"error\": error\n        });\n        flow.set(\"track\", track);\n    //>трекер>\n    node.status({fill:\"red\",shape:\"dot\"});\n    node.error(error);\n});",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 4410,
        "y": 500,
        "wires": [
            [
                "b58e0a295eae2022"
            ]
        ],
        "icon": "font-awesome/fa-bolt"
    },
    {
        "id": "59b3198c4320fc31",
        "type": "inject",
        "z": "654ea140.2275a8",
        "name": "",
        "props": [
            {
                "p": "botname",
                "v": "BNBUSDT-1606088829",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 4180,
        "y": 840,
        "wires": [
            [
                "57c1d90b6d5426a4"
            ]
        ]
    },
    {
        "id": "b58e0a295eae2022",
        "type": "debug",
        "z": "654ea140.2275a8",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 4600,
        "y": 500,
        "wires": []
    },
    {
        "id": "91354b0e90d13f2f",
        "type": "function",
        "z": "654ea140.2275a8",
        "name": "",
        "func": "msg.topic = \"jurnal\";\nmsg.payload = flow.get(\"track\");\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 3400,
        "y": 540,
        "wires": [
            [
                "7558dd859b1b8be6"
            ]
        ]
    },
    {
        "id": "4da48fa0192f0245",
        "type": "debug",
        "z": "654ea140.2275a8",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 3910,
        "y": 840,
        "wires": []
    },
    {
        "id": "aae233fbcbb16568",
        "type": "inject",
        "z": "654ea140.2275a8",
        "name": "",
        "props": [
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "\"jurnal\"",
        "x": 3410,
        "y": 780,
        "wires": [
            [
                "430fcb103a89edec",
                "318bae26d061df85"
            ]
        ]
    },
    {
        "id": "831383bab49d5dfe",
        "type": "function",
        "z": "654ea140.2275a8",
        "name": "",
        "func": "msg.payload = JSON.parse(msg.payload);\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 3790,
        "y": 760,
        "wires": [
            [
                "4da48fa0192f0245"
            ]
        ]
    },
    {
        "id": "f771c73c8b01a33f",
        "type": "redis-command",
        "z": "654ea140.2275a8",
        "server": "f120eab2.0a60a8",
        "command": "sadd",
        "name": "",
        "topic": "",
        "params": "",
        "paramsType": "json",
        "payloadType": "json",
        "block": false,
        "x": 3590,
        "y": 480,
        "wires": [
            [
                "2d4d8493baecd4e3"
            ]
        ]
    },
    {
        "id": "7558dd859b1b8be6",
        "type": "join",
        "z": "654ea140.2275a8",
        "name": "",
        "mode": "auto",
        "build": "string",
        "property": "payload",
        "propertyType": "msg",
        "key": "topic",
        "joiner": "\\n",
        "joinerType": "str",
        "accumulate": "false",
        "timeout": "",
        "count": "",
        "reduceRight": false,
        "x": 3530,
        "y": 420,
        "wires": [
            [
                "f771c73c8b01a33f"
            ]
        ]
    },
    {
        "id": "2d4d8493baecd4e3",
        "type": "debug",
        "z": "654ea140.2275a8",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 3710,
        "y": 540,
        "wires": []
    },
    {
        "id": "430fcb103a89edec",
        "type": "function",
        "z": "654ea140.2275a8",
        "name": "prepare getprice",
        "func": "\nmsg.topic = [];\nmsg.payload = \"jurnal\";\n    \n\nnode.status({fill:\"green\",shape:\"dot\"});\n    \nreturn msg;\n    \n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 3620,
        "y": 780,
        "wires": [
            []
        ],
        "inputLabels": [
            "orderid"
        ],
        "outputLabels": [
            "status"
        ],
        "icon": "node-red-contrib-binance/binance.png"
    },
    {
        "id": "76b01c5085ca7c5d",
        "type": "redis-command",
        "z": "654ea140.2275a8",
        "server": "f120eab2.0a60a8",
        "command": "GET",
        "name": "get price",
        "topic": "msg.topic",
        "params": "",
        "paramsType": "json",
        "payloadType": "json",
        "block": false,
        "x": 3660,
        "y": 660,
        "wires": [
            [
                "769cda2b3e6f673c"
            ]
        ]
    },
    {
        "id": "769cda2b3e6f673c",
        "type": "debug",
        "z": "654ea140.2275a8",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 3830,
        "y": 660,
        "wires": []
    },
    {
        "id": "70dc5ef7d052cb36",
        "type": "inject",
        "z": "654ea140.2275a8",
        "name": "",
        "props": [
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "jurnal",
        "x": 3450,
        "y": 660,
        "wires": [
            [
                "76b01c5085ca7c5d"
            ]
        ]
    },
    {
        "id": "318bae26d061df85",
        "type": "redis-command",
        "z": "654ea140.2275a8",
        "server": "f120eab2.0a60a8",
        "command": "hgetall",
        "name": "",
        "topic": "",
        "params": "{}",
        "paramsType": "json",
        "payloadType": "json",
        "block": false,
        "x": 3630,
        "y": 800,
        "wires": [
            [
                "831383bab49d5dfe"
            ]
        ]
    },
    {
        "id": "d0e54d0dbb199bce",
        "type": "debug",
        "z": "654ea140.2275a8",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 3790,
        "y": 1400,
        "wires": []
    },
    {
        "id": "28f8c5a4dccc6438",
        "type": "link out",
        "z": "654ea140.2275a8",
        "name": "",
        "links": [
            "8ed9ca2101a7bed6"
        ],
        "x": 4275,
        "y": 980,
        "wires": []
    },
    {
        "id": "8ed9ca2101a7bed6",
        "type": "link in",
        "z": "654ea140.2275a8",
        "name": "",
        "links": [
            "28f8c5a4dccc6438"
        ],
        "x": 4355,
        "y": 980,
        "wires": [
            []
        ]
    },
    {
        "id": "50503d386d89f143",
        "type": "comment",
        "z": "476b070518efd452",
        "name": "Старт трека",
        "info": "",
        "x": 170,
        "y": 320,
        "wires": []
    },
    {
        "id": "9bd23a983875fa0d",
        "type": "trigger",
        "z": "476b070518efd452",
        "name": "",
        "op1": "1",
        "op2": "0",
        "op1type": "str",
        "op2type": "str",
        "duration": "-100",
        "extend": false,
        "overrideDelay": false,
        "units": "ms",
        "reset": "",
        "bytopic": "all",
        "topic": "topic",
        "outputs": 1,
        "x": 520,
        "y": 380,
        "wires": [
            [
                "658f4be6b6019429"
            ]
        ]
    },
    {
        "id": "93c970b4b2d5b87f",
        "type": "delay",
        "z": "476b070518efd452",
        "name": "",
        "pauseType": "delay",
        "timeout": "2",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "x": 300,
        "y": 380,
        "wires": [
            [
                "9bd23a983875fa0d"
            ]
        ]
    },
    {
        "id": "d7052ab03e4fa95d",
        "type": "function",
        "z": "476b070518efd452",
        "name": "stop",
        "func": "msg.reset = true;\nmsg.payload = \"\";\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 290,
        "y": 440,
        "wires": [
            [
                "9bd23a983875fa0d"
            ]
        ]
    },
    {
        "id": "035e8f739241ac19",
        "type": "redis-in",
        "z": "476b070518efd452",
        "server": "f120eab2.0a60a8",
        "command": "subscribe",
        "name": "",
        "topic": "stop",
        "obj": true,
        "timeout": 0,
        "x": 150,
        "y": 440,
        "wires": [
            [
                "d7052ab03e4fa95d"
            ]
        ]
    },
    {
        "id": "c71852a3c317adda",
        "type": "redis-in",
        "z": "476b070518efd452",
        "server": "f120eab2.0a60a8",
        "command": "subscribe",
        "name": "",
        "topic": "start",
        "obj": true,
        "timeout": 0,
        "x": 150,
        "y": 380,
        "wires": [
            [
                "93c970b4b2d5b87f"
            ]
        ]
    },
    {
        "id": "06201dc2c8aa7f3f",
        "type": "redis-in",
        "z": "476b070518efd452",
        "server": "f120eab2.0a60a8",
        "command": "subscribe",
        "name": "",
        "topic": "start1",
        "obj": true,
        "timeout": 0,
        "x": 570,
        "y": 320,
        "wires": [
            [
                "658f4be6b6019429"
            ]
        ]
    },
    {
        "id": "fdabdb08c8b5601a",
        "type": "comment",
        "z": "476b070518efd452",
        "name": "Семафор = \"Занято\"",
        "info": "",
        "x": 2200,
        "y": 300,
        "wires": []
    },
    {
        "id": "4a400913540c018b",
        "type": "function",
        "z": "476b070518efd452",
        "name": "start ttp",
        "func": "//<трекер<\n    ////>только для стартовой ноды>\n        var track = [];\n        let start_track_time = new Date().getTime();\n        let start_node_time = start_track_time;\n        let steptitle = node.name;\n    ////>только для стартовой ноды>\n//>трекер>\n\n\n\nmsg.payload = global.get('guid');\n\n\n//>трекер>\n\n\n    let end_node_time = new Date().getTime();\n    let duration = end_node_time - start_node_time;\n    track.push({\n        \"steptitle\": steptitle,\n        \"start_node_time\": start_node_time,\n        \"end_node_time\": end_node_time,\n        \"duration_node\": duration,\n        \"duration_step\": 0\n    });\n    let trackname = \"ttp-track-\"+msg.botname;\n    flow.set(trackname, track);\n//>трекер>\nnode.status({ fill: \"green\", shape: \"ring\", text: duration });\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2020,
        "y": 380,
        "wires": [
            [
                "bf51fd115bb93dca"
            ]
        ]
    },
    {
        "id": "658f4be6b6019429",
        "type": "function",
        "z": "476b070518efd452",
        "name": "getbotlist",
        "func": "let guid = global.get('guid');\n\nconst gbl = global.get('getbotlist')(guid);\n\ngbl.then(gbl => {\n    \n    msg.payload = gbl;\n    \n    node.status({fill:\"green\",shape:\"dot\"});\n    node.send(msg);\n\n}).catch(error => {\n    \n    node.status({fill:\"red\",shape:\"dot\"});\n    node.error(error);\n});",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 720,
        "y": 380,
        "wires": [
            [
                "d06c1b35f9ea84f7",
                "5a41ca68ec12567f"
            ]
        ]
    },
    {
        "id": "d06c1b35f9ea84f7",
        "type": "json",
        "z": "476b070518efd452",
        "name": "",
        "property": "payload",
        "action": "obj",
        "pretty": false,
        "x": 870,
        "y": 380,
        "wires": [
            [
                "09a8ee0adc297e27"
            ]
        ]
    },
    {
        "id": "09a8ee0adc297e27",
        "type": "split",
        "z": "476b070518efd452",
        "name": "",
        "splt": "1",
        "spltType": "len",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "x": 1010,
        "y": 380,
        "wires": [
            [
                "d82582ffa7249823"
            ]
        ]
    },
    {
        "id": "d82582ffa7249823",
        "type": "function",
        "z": "476b070518efd452",
        "name": "getbot_onoff",
        "func": "\n\nlet botname = msg.payload;\nmsg.botname = botname;\n\nconst gb = global.get('getbot_onoff')(botname);\n\ngb.then(gb => {\n    \n    msg.payload = JSON.parse(gb);\n    \n    node.status({fill:\"green\",shape:\"dot\"});\n    node.send(msg);\n\n}).catch(error => {\n    \n    node.status({fill:\"red\",shape:\"dot\"});\n    node.error(error);\n});",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1150,
        "y": 380,
        "wires": [
            [
                "57e92769f4dca988"
            ]
        ]
    },
    {
        "id": "57e92769f4dca988",
        "type": "filter",
        "z": "476b070518efd452",
        "name": "filter off",
        "property": "payload",
        "propertyType": "msg",
        "asArray": false,
        "itemProperty": "",
        "itemPropertyType": "item",
        "rules": [
            {
                "t": "true",
                "output": 1
            }
        ],
        "checkall": "true",
        "outputs": 1,
        "x": 1320,
        "y": 380,
        "wires": [
            [
                "2fe0f6aa399d1c7d"
            ]
        ]
    },
    {
        "id": "a5f0a5a41678e9f8",
        "type": "function",
        "z": "476b070518efd452",
        "name": "busy === false ",
        "func": "\n\nif (msg.payload === false) {\n   \n    node.status({fill:\"green\",shape:\"dot\"});\n    \n    return [msg, null, null];\n}\n\nelse {\n\n    let id = msg.botname + \"-ttp\";\n    msg.payload = [];\n\n    var count = flow.get(id) || 0;\n    count += 1;\n\n    node.status({fill:\"blue\",shape:\"dot\"});\n\n\n    if (count > 40) {\n        const upd = global.get('setttp_free')(msg.botname);\n   \n        let trackname = \"ttp-track-\"+msg.botname;\n        let lasttrack = JSON.stringify(flow.get(trackname) || \"\", null, '\\t');\n        msg.lasttrack = lasttrack;\n        \n        //запись в журнал\n        let botname = \"syslog.txt\";\n        let data = \"Сброс ttp \"+msg.botname+\" \\n \"+lasttrack;\n        const syslog = global.get('tilog')(botname,data);\n        syslog;\n        \n        let botname2 = msg.botname;\n        let data2 = \"Сброс ttp busy \\n \"+lasttrack;\n        const tilog = global.get('tilog')(botname2,data2);\n        tilog;\n        //запись в журнал\n\n        upd.then(upd => {\n            \n\n            node.status({fill:\"red\",shape:\"dot\"});\n            \n            flow.set(id, 0);\n            node.warn(\"reset ttp busy:\" + id);\n\n        }).catch(error => {\n            node.error(error);\n        });\n        return [null, null, msg];\n\n    }\n    flow.set(id, count);\n    return [null, msg, null];\n}\n\n\n\n\n\n",
        "outputs": 3,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1840,
        "y": 380,
        "wires": [
            [
                "4a400913540c018b"
            ],
            [],
            [
                "38802d96f0a93ac0",
                "cd7f434bd85e07d8"
            ]
        ],
        "icon": "font-awesome/fa-bolt"
    },
    {
        "id": "5a41ca68ec12567f",
        "type": "debug",
        "z": "476b070518efd452",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 810,
        "y": 320,
        "wires": []
    },
    {
        "id": "bf51fd115bb93dca",
        "type": "function",
        "z": "476b070518efd452",
        "name": "setttp_busy",
        "func": "//<трекер<\n    let trackname = \"ttp-track-\"+msg.botname;\n    let track = flow.get(trackname);\n    let start_node_time = new Date().getTime();\n    let steptitle = node.name;\n\n    let laststep = track[track.length-1];\n    let last_node_end_time = laststep.end_node_time;\n//>трекер>\n\nconst upd = global.get('setttp_busy')(msg.botname);\n\nupd.then(upd => {\n\n    //>трекер>\n        let end_node_time = new Date().getTime();\n        let duration = end_node_time - start_node_time;\n        let duration_step = end_node_time - last_node_end_time;\n        track.push({\n            \"steptitle\": steptitle,\n            \"start_node_time\": start_node_time,\n            \"end_node_time\": end_node_time,\n            \"duration_node\": duration,\n            \"duration_step\": duration_step\n        });\n        flow.set(trackname, track);\n    //>трекер>\n    node.status({fill:\"green\",shape:\"dot\"});\n    \n    node.send(msg);\n\n}).catch(error => {\n    \n    //>трекер>\n        let end_node_time = new Date().getTime();\n        let duration = end_node_time - start_node_time;\n        let duration_step = end_node_time - last_node_end_time;\n        track.push({\n            \"steptitle\": steptitle+\"-faile\",\n            \"start_node_time\": start_node_time,\n            \"end_node_time\": end_node_time,\n            \"duration\": duration,\n            \"duration_step\": duration_step,\n            \"error\": error\n        });\n        flow.set(trackname, track);\n    //>трекер>\n    node.status({fill:\"red\",shape:\"dot\"});\n    node.error(error);\n});",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2190,
        "y": 380,
        "wires": [
            [
                "b8f0a917a92ebdeb",
                "aaf93307d16bcd50",
                "c214dd1da5011852"
            ]
        ],
        "icon": "font-awesome/fa-bolt"
    },
    {
        "id": "b8f0a917a92ebdeb",
        "type": "debug",
        "z": "476b070518efd452",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 2210,
        "y": 340,
        "wires": []
    },
    {
        "id": "cd7f434bd85e07d8",
        "type": "debug",
        "z": "476b070518efd452",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1910,
        "y": 440,
        "wires": []
    },
    {
        "id": "6bc676d5547374d8",
        "type": "link in",
        "z": "476b070518efd452",
        "name": "",
        "links": [
            "6686db1e.4b1904",
            "1cd1edd3.c1f1d2",
            "a86d359be97404d4",
            "fc4909a1c6ea8b7e",
            "d94fc0ebfa11f06a",
            "c65d4c0451447193",
            "76222c3f3fe60ff8",
            "8a8690fd532bb09f",
            "afe0fa65656cbd06",
            "333515722605ce39",
            "0cc95ba0ccde2563",
            "7657db07cf3a06d6",
            "46767c2bf999d770",
            "6f1355ee42af80a1",
            "932e507185a534a1",
            "f9ecd880187f9dcd",
            "8f467ab6ddc936e7",
            "18718405350be09f",
            "b7144266c845692c",
            "e80c8eef34ad366c",
            "3610aedcd94044e0",
            "4c73dbd4dd32bc13",
            "714ae3db6704aff6",
            "a525921f987f3c98",
            "c7aa3e83582dec39",
            "a8ad35e94e6b4915",
            "fc7930fb78f1189d"
        ],
        "x": 2595,
        "y": 360,
        "wires": [
            [
                "7bad6997813c6d63",
                "d984a56b748a1b47"
            ]
        ]
    },
    {
        "id": "aaf93307d16bcd50",
        "type": "link out",
        "z": "476b070518efd452",
        "name": "",
        "links": [
            "e9ac4d38.5faef",
            "ae1c689896377e61"
        ],
        "x": 2395,
        "y": 380,
        "wires": []
    },
    {
        "id": "2fe0f6aa399d1c7d",
        "type": "function",
        "z": "476b070518efd452",
        "name": "getttp_busy",
        "func": "\n\nconst gb = global.get('getttp_busy')(msg.botname);\n\ngb.then(gb => {\n    \n    msg.payload = JSON.parse(gb);\n    \n\n    node.status({fill:\"green\",shape:\"dot\"});\n    \n    \n    node.send(msg);\n\n}).catch(error => {\n    \n\n    node.status({fill:\"red\",shape:\"dot\"});\n    \n    node.error(error);\n});",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 1650,
        "y": 380,
        "wires": [
            [
                "a5f0a5a41678e9f8"
            ]
        ]
    },
    {
        "id": "836ca8423e5beeae",
        "type": "function",
        "z": "476b070518efd452",
        "name": "getprice",
        "func": "//<трекер<\n    let trackname = \"ttp-track-\"+msg.botname;\n    let track = flow.get(trackname);\n    let start_node_time = new Date().getTime();\n    let steptitle = node.name;\n\n    let laststep = track[track.length-1];\n    let last_node_end_time = laststep.end_node_time;\n//>трекер>\nlet moneta = msg.bot.settings.moneta;\n\nconst gp = global.get('getprice')(moneta);\n\ngp.then(gp => {\n    \n    msg.bot.ttp.currentprice = gp;\n    \n    //>трекер>\n        let end_node_time = new Date().getTime();\n        let duration = end_node_time - start_node_time;\n        let duration_step = end_node_time - last_node_end_time;\n        track.push({\n            \"steptitle\": steptitle,\n            \"start_node_time\": start_node_time,\n            \"end_node_time\": end_node_time,\n            \"duration_node\": duration,\n            \"duration_step\": duration_step\n        });\n        flow.set(trackname, track);\n    //>трекер>\n    node.status({fill:\"green\",shape:\"dot\"});\n    node.send(msg);\n\n}).catch(error => {\n    \n    //>трекер>\n        let end_node_time = new Date().getTime();\n        let duration = end_node_time - start_node_time;\n        let duration_step = end_node_time - last_node_end_time;\n        track.push({\n            \"steptitle\": steptitle+\"-faile\",\n            \"start_node_time\": start_node_time,\n            \"end_node_time\": end_node_time,\n            \"duration\": duration,\n            \"duration_step\": duration_step,\n            \"error\": error\n        });\n        flow.set(trackname, track);\n    //>трекер>\n    node.status({fill:\"red\",shape:\"dot\"});\n    node.error(error);\n});",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 220,
        "y": 880,
        "wires": [
            [
                "d09d3431da94827e"
            ]
        ]
    },
    {
        "id": "bcd202a40afaa4f0",
        "type": "comment",
        "z": "476b070518efd452",
        "name": "ситуация",
        "info": "когда stopsell частично заполнился, но потом цена отросла и бот хочет подвинуть ордер дальше вверх. \nПроблема будет если остаток меньше минимума лота.\nСейчас такой ордер мы просто оставляем висеть до заполненности.\nМожно пока в телеграмм о таких случаях стучать, чтобы хозяин вручную разруливал, но по уму надо двигать ордер, на ходу меняя quantity с соответствующей проекцией во floors",
        "x": 2020,
        "y": 800,
        "wires": []
    },
    {
        "id": "d09d3431da94827e",
        "type": "function",
        "z": "476b070518efd452",
        "name": "calculate stop price and quantity",
        "func": "var floors = msg.bot.floors;\nlet quantity = 0;\n\nfloors.forEach(function (item, i, floors) {\n\n    if (item[7] === 3) {\n\n        quantity = Number(quantity) + Number(item[14]);\n\n\n    }\n});\n\nlet currentprice = Number(msg.bot.ttp.currentprice);\nmsg.bot.ttp.raschstopprice = Number(Number(currentprice - currentprice / 100 * msg.bot.settings.ofsettop).toFixed(msg.bot.settings.digitprice));\nmsg.bot.ttp.curstop = Number(msg.bot.ttp.curstop);\nmsg.bot.ttp.curorderid = Number(msg.bot.ttp.curorderid);\n\n\nmsg.bot.ttp.quantity = Number(quantity);\n\n\nreturn msg;\n\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 460,
        "y": 880,
        "wires": [
            [
                "399ecf08c90f9cb7"
            ]
        ]
    },
    {
        "id": "f72f95133a4069fc",
        "type": "switch",
        "z": "476b070518efd452",
        "name": "raschstopprice ? curstop",
        "property": "bot.ttp.raschstopprice",
        "propertyType": "msg",
        "rules": [
            {
                "t": "gt",
                "v": "bot.ttp.curstop",
                "vt": "msg"
            },
            {
                "t": "lte",
                "v": "bot.ttp.curstop",
                "vt": "msg"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 930,
        "y": 900,
        "wires": [
            [
                "47bbb7dfa93bfd2c"
            ],
            [
                "a839d7ed54f4e2a0",
                "e5ff92cc6e134092"
            ]
        ]
    },
    {
        "id": "47bbb7dfa93bfd2c",
        "type": "switch",
        "z": "476b070518efd452",
        "name": "order id > 0 ",
        "property": "bot.ttp.curorderid",
        "propertyType": "msg",
        "rules": [
            {
                "t": "gt",
                "v": "0",
                "vt": "num"
            },
            {
                "t": "eq",
                "v": "0",
                "vt": "num"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 1150,
        "y": 860,
        "wires": [
            [
                "b2b308a14f3229e8"
            ],
            [
                "cb829d0fdcd756d5"
            ]
        ]
    },
    {
        "id": "3a2dded961ef4f28",
        "type": "function",
        "z": "476b070518efd452",
        "name": "prepare get ttp order status",
        "func": "//<трекер<\n    let trackname = \"ttp-track-\"+msg.botname;\n    let track = flow.get(trackname);\n    let start_node_time = new Date().getTime();\n    let steptitle = node.name;\n\n    let laststep = track[track.length-1];\n    let last_node_end_time = laststep.end_node_time;\n//>трекер>\nlet moneta = msg.bot.settings.moneta;\nmsg.moneta = moneta;\nlet orderid = msg.bot.ttp.curorderid\nmsg.orderid = orderid;\n\n \nmsg.topic = \"orders-status-\" + msg.bot.settings.userid + \":\" + moneta + \":\" + orderid;\n\n\n\n    //>трекер>\n        let end_node_time = new Date().getTime();\n        let duration = end_node_time - start_node_time;\n        let duration_step = end_node_time - last_node_end_time;\n        track.push({\n            \"steptitle\": steptitle,\n            \"start_node_time\": start_node_time,\n            \"end_node_time\": end_node_time,\n            \"duration_node\": duration,\n            \"duration_step\": duration_step\n        });\n        flow.set(trackname, track);\n    //>трекер>\nnode.status({fill: \"green\", shape: \"ring\", text: orderid});\nreturn msg;\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1380,
        "y": 1220,
        "wires": [
            [
                "635242efa385f647"
            ]
        ],
        "inputLabels": [
            "orderid"
        ],
        "outputLabels": [
            "status"
        ],
        "icon": "node-red-contrib-binance/binance.png"
    },
    {
        "id": "e51cb15074798a3e",
        "type": "switch",
        "z": "476b070518efd452",
        "name": "статус ордера",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "NEW",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "PARTIALLY_FILLED",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "CANCELED",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "FILLED",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "REJECTED",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "EXPIRED",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 6,
        "x": 1840,
        "y": 1220,
        "wires": [
            [
                "d94fc0ebfa11f06a"
            ],
            [
                "d94fc0ebfa11f06a"
            ],
            [
                "c81444ddf4fb4bf3",
                "c65d4c0451447193"
            ],
            [
                "e180c0c801e80a24"
            ],
            [
                "b01aee4cb5bd4386",
                "76222c3f3fe60ff8"
            ],
            [
                "b01aee4cb5bd4386",
                "76222c3f3fe60ff8"
            ]
        ]
    },
    {
        "id": "86655a758018d5c4",
        "type": "comment",
        "z": "476b070518efd452",
        "name": "NEW",
        "info": "",
        "x": 2070,
        "y": 1100,
        "wires": []
    },
    {
        "id": "0ce8a0db9d864f48",
        "type": "comment",
        "z": "476b070518efd452",
        "name": "CANCELED",
        "info": "",
        "x": 2090,
        "y": 1200,
        "wires": []
    },
    {
        "id": "d8718b515fedf042",
        "type": "comment",
        "z": "476b070518efd452",
        "name": "FILLED",
        "info": "",
        "x": 2070,
        "y": 1300,
        "wires": []
    },
    {
        "id": "1889d2d0b8a5ac13",
        "type": "comment",
        "z": "476b070518efd452",
        "name": "REJECTED или EXPIRED",
        "info": "",
        "x": 2130,
        "y": 1400,
        "wires": []
    },
    {
        "id": "8fddb3e6fe0de7be",
        "type": "comment",
        "z": "476b070518efd452",
        "name": "PARTIALLY_FILLED",
        "info": "",
        "x": 2230,
        "y": 1100,
        "wires": []
    },
    {
        "id": "e180c0c801e80a24",
        "type": "function",
        "z": "476b070518efd452",
        "name": "set sold",
        "func": "msg.bot.ttp.sold = true;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2080,
        "y": 1340,
        "wires": [
            [
                "ba57b0e053171884"
            ]
        ]
    },
    {
        "id": "71519fcd057507ef",
        "type": "switch",
        "z": "476b070518efd452",
        "name": "status NEW ?",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "true"
            },
            {
                "t": "false"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 1760,
        "y": 740,
        "wires": [
            [
                "1cd8cc8554e74af0",
                "afeed900eed91ee7"
            ],
            [
                "a86d359be97404d4"
            ]
        ]
    },
    {
        "id": "003c55773c96756e",
        "type": "function",
        "z": "476b070518efd452",
        "name": "prepare data",
        "func": "if (msg.payload == \"NEW\") {\n    msg.payload = true;\n}\nelse {\n    msg.payload = false;\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1570,
        "y": 740,
        "wires": [
            [
                "71519fcd057507ef"
            ]
        ]
    },
    {
        "id": "b01aee4cb5bd4386",
        "type": "debug",
        "z": "476b070518efd452",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 2110,
        "y": 1440,
        "wires": []
    },
    {
        "id": "ae1c689896377e61",
        "type": "link in",
        "z": "476b070518efd452",
        "name": "",
        "links": [
            "aaf93307d16bcd50"
        ],
        "x": 135,
        "y": 680,
        "wires": [
            [
                "684293f1455f638d"
            ]
        ]
    },
    {
        "id": "c81444ddf4fb4bf3",
        "type": "debug",
        "z": "476b070518efd452",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 2130,
        "y": 1220,
        "wires": []
    },
    {
        "id": "7e89fdf3494feb3b",
        "type": "function",
        "z": "476b070518efd452",
        "name": "setbot_ttp",
        "func": "//<трекер<\nlet trackname = \"ttp-track-\" + msg.botname;\nlet track = flow.get(trackname);\nlet start_node_time = new Date().getTime();\nlet steptitle = node.name;\n\nlet laststep = track[track.length - 1];\nlet last_node_end_time = laststep.end_node_time;\n//>трекер>\n\n\nmsg.bot.ttp.final_price = msg.payload;\n//msg.bot.ttp.final_quantity = msg.bot.ttp.quantity;\n//msg.bot.ttp.quantity = 0;\n\nmsg.topic = msg.bot.settings.userid + \"-bots:\" + msg.bot.settings.botname + \":ttp\";\nmsg.payload = JSON.stringify(msg.bot.ttp);\n\nconst upd = global.get('setbot_ttp')(msg.topic, msg.payload);\n\nupd.then(upd => {\n\n    msg.topic = [];\n\n    //>трекер>\n    let end_node_time = new Date().getTime();\n    let duration = end_node_time - start_node_time;\n    let duration_step = end_node_time - last_node_end_time;\n    track.push({\n        \"steptitle\": steptitle,\n        \"start_node_time\": start_node_time,\n        \"end_node_time\": end_node_time,\n        \"duration_node\": duration,\n        \"duration_step\": duration_step\n    });\n    flow.set(trackname, track);\n    //>трекер>\n\n    let botname = msg.botname;\n    let datamsg = \"ttp finish on \" + msg.bot.ttp.final_price;\n    const tilog = global.get('tilog')(botname, datamsg);\n    tilog;\n\n    node.status({ fill: \"green\", shape: \"dot\" });\n    node.send(msg);\n\n}).catch(error => {\n\n    //>трекер>\n    let end_node_time = new Date().getTime();\n    let duration = end_node_time - start_node_time;\n    let duration_step = end_node_time - last_node_end_time;\n    track.push({\n        \"steptitle\": steptitle + \"-faile\",\n        \"start_node_time\": start_node_time,\n        \"end_node_time\": end_node_time,\n        \"duration\": duration,\n        \"duration_step\": duration_step,\n        \"error\": error\n    });\n    flow.set(trackname, track);\n    //>трекер>\n\n    node.status({ fill: \"red\", shape: \"dot\" });\n    node.error(error);\n});\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2730,
        "y": 1340,
        "wires": [
            [
                "2a63d42ba80d721c",
                "8a8690fd532bb09f"
            ]
        ]
    },
    {
        "id": "2a63d42ba80d721c",
        "type": "debug",
        "z": "476b070518efd452",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 2750,
        "y": 1300,
        "wires": []
    },
    {
        "id": "4691a85fd78fe5db",
        "type": "function",
        "z": "476b070518efd452",
        "name": "update bot floors, finance, sales",
        "func": "const sellprice = msg.bot.ttpprice\nlet comsa = Number(msg.payload);\nlet quantityall = msg.bot.ttp.quantity;\n\nnode.warn(\"finish ttp on floor \");\n\n\n\nnode.send(msg);\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3130,
        "y": 960,
        "wires": [
            []
        ],
        "icon": "font-awesome/fa-bolt"
    },
    {
        "id": "ba57b0e053171884",
        "type": "function",
        "z": "476b070518efd452",
        "name": "prepare get ttp order price",
        "func": "\n\nlet moneta = msg.bot.settings.moneta;\nlet orderid = msg.bot.ttp.curorderid;\n\nmsg.payload = [];\nmsg.topic = \"orders-status-\" + msg.bot.settings.userid + \":\" + moneta + \":\" + orderid + \"-price\";\n\n\n\n\nnode.status({fill: \"green\", shape: \"ring\", text: orderid});\nreturn msg;\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2300,
        "y": 1340,
        "wires": [
            [
                "61131a0e62fbddae"
            ]
        ],
        "inputLabels": [
            "orderid"
        ],
        "outputLabels": [
            "status"
        ],
        "icon": "node-red-contrib-binance/binance.png"
    },
    {
        "id": "61131a0e62fbddae",
        "type": "redis-command",
        "z": "476b070518efd452",
        "server": "f120eab2.0a60a8",
        "command": "GET",
        "name": "get order status",
        "topic": "msg.payload",
        "params": "[]",
        "paramsType": "json",
        "payloadType": "json",
        "block": false,
        "x": 2540,
        "y": 1340,
        "wires": [
            [
                "7e89fdf3494feb3b"
            ]
        ]
    },
    {
        "id": "a86d359be97404d4",
        "type": "link out",
        "z": "476b070518efd452",
        "name": "",
        "links": [
            "6bc676d5547374d8"
        ],
        "x": 1915,
        "y": 800,
        "wires": []
    },
    {
        "id": "fc4909a1c6ea8b7e",
        "type": "link out",
        "z": "476b070518efd452",
        "name": "",
        "links": [
            "6bc676d5547374d8"
        ],
        "x": 1895,
        "y": 960,
        "wires": []
    },
    {
        "id": "d94fc0ebfa11f06a",
        "type": "link out",
        "z": "476b070518efd452",
        "name": "",
        "links": [
            "6bc676d5547374d8"
        ],
        "x": 2035,
        "y": 1140,
        "wires": []
    },
    {
        "id": "c65d4c0451447193",
        "type": "link out",
        "z": "476b070518efd452",
        "name": "",
        "links": [
            "6bc676d5547374d8"
        ],
        "x": 2035,
        "y": 1240,
        "wires": []
    },
    {
        "id": "76222c3f3fe60ff8",
        "type": "link out",
        "z": "476b070518efd452",
        "name": "",
        "links": [
            "6bc676d5547374d8"
        ],
        "x": 2035,
        "y": 1440,
        "wires": []
    },
    {
        "id": "8a8690fd532bb09f",
        "type": "link out",
        "z": "476b070518efd452",
        "name": "",
        "links": [
            "6bc676d5547374d8"
        ],
        "x": 2855,
        "y": 1340,
        "wires": []
    },
    {
        "id": "684293f1455f638d",
        "type": "function",
        "z": "476b070518efd452",
        "name": "getbot_settings",
        "func": "//<трекер<\n    let trackname = \"ttp-track-\"+msg.botname;\n    let track = flow.get(trackname);\n    let start_node_time = new Date().getTime();\n    let steptitle = node.name;\n\n    let laststep = track[track.length-1];\n    let last_node_end_time = laststep.end_node_time;\n//>трекер>\n\nlet bot = {};\nmsg.bot = bot;\nconst gb = global.get('getbot_settings')(msg.botname);\n\ngb.then(gb => {\n    \n    msg.bot.settings = JSON.parse(gb);\n    \n    //>трекер>\n        let end_node_time = new Date().getTime();\n        let duration = end_node_time - start_node_time;\n        let duration_step = end_node_time - last_node_end_time;\n        track.push({\n            \"steptitle\": steptitle,\n            \"start_node_time\": start_node_time,\n            \"end_node_time\": end_node_time,\n            \"duration_node\": duration,\n            \"duration_step\": duration_step\n        });\n        flow.set(trackname, track);\n    //>трекер>\n    node.status({fill:\"green\",shape:\"dot\"});\n    \n    node.send(msg);\n\n}).catch(error => {\n    \n    //>трекер>\n        let end_node_time = new Date().getTime();\n        let duration = end_node_time - start_node_time;\n        let duration_step = end_node_time - last_node_end_time;\n        track.push({\n            \"steptitle\": steptitle+\"-faile\",\n            \"start_node_time\": start_node_time,\n            \"end_node_time\": end_node_time,\n            \"duration\": duration,\n            \"duration_step\": duration_step,\n            \"error\": error\n        });\n        flow.set(trackname, track);\n    //>трекер>\n    node.status({fill:\"red\",shape:\"dot\"});\n    \n    node.error(error);\n});",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 280,
        "y": 680,
        "wires": [
            [
                "216afc6b1715b9b3"
            ]
        ]
    },
    {
        "id": "8143197d2271841f",
        "type": "function",
        "z": "476b070518efd452",
        "name": "getbot_ttp",
        "func": "\nconst gb = global.get('getbot_ttp')(msg.bot.settings.botname);\n\ngb.then(gb => {\n    msg.bot.ttp = JSON.parse(gb);\n    \nnode.status({fill: \"green\", shape: \"ring\"});\n\n    node.send(msg);\n\n}).catch(error => {\n    \n    \n    node.status({fill: \"red\", shape: \"ring\", text: \"error\"});\n    node.error(error);\n});",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 650,
        "y": 680,
        "wires": [
            [
                "5052d2d8b2cd230a"
            ]
        ]
    },
    {
        "id": "399ecf08c90f9cb7",
        "type": "switch",
        "z": "476b070518efd452",
        "name": "quantity > 0",
        "property": "bot.ttp.quantity",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "0",
                "vt": "num"
            },
            {
                "t": "gt",
                "v": "0",
                "vt": "num"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 710,
        "y": 880,
        "wires": [
            [
                "afe0fa65656cbd06",
                "0b1004b203cfacee"
            ],
            [
                "f72f95133a4069fc",
                "b6933092f066f004"
            ]
        ]
    },
    {
        "id": "afe0fa65656cbd06",
        "type": "link out",
        "z": "476b070518efd452",
        "name": "",
        "links": [
            "6bc676d5547374d8"
        ],
        "x": 835,
        "y": 840,
        "wires": []
    },
    {
        "id": "216afc6b1715b9b3",
        "type": "function",
        "z": "476b070518efd452",
        "name": "getbot_data",
        "func": "//<трекер<\n    let trackname = \"ttp-track-\"+msg.botname;\n    let track = flow.get(trackname);\n    let start_node_time = new Date().getTime();\n    let steptitle = node.name;\n\n    let laststep = track[track.length-1];\n    let last_node_end_time = laststep.end_node_time;\n//>трекер>\n\nlet botname = msg.botname;\n\nconst gb = global.get('getbot_data')(botname);\n\ngb.then(gb => {\n    //node.warn(gb);\n    let bot = {...msg.bot,\n        \"floors\":JSON.parse(gb.floors),\n        \"finance\":JSON.parse(gb.finance),\n        \"sales\":JSON.parse(gb.sales)\n    };\n    msg.bot = bot;\n    \n    //>трекер>\n        let end_node_time = new Date().getTime();\n        let duration = end_node_time - start_node_time;\n        let duration_step = end_node_time - last_node_end_time;\n        track.push({\n            \"steptitle\": steptitle,\n            \"start_node_time\": start_node_time,\n            \"end_node_time\": end_node_time,\n            \"duration_node\": duration,\n            \"duration_step\": duration_step\n        });\n        flow.set(trackname, track);\n    //>трекер>\n    node.status({fill:\"green\",shape:\"dot\"});\n    node.send(msg);\n\n}).catch(error => {\n        //>трекер>\n        let end_node_time = new Date().getTime();\n        let duration = end_node_time - start_node_time;\n        let duration_step = end_node_time - last_node_end_time;\n        track.push({\n            \"steptitle\": steptitle+\"-faile\",\n            \"start_node_time\": start_node_time,\n            \"end_node_time\": end_node_time,\n            \"duration\": duration,\n            \"duration_step\": duration_step,\n            \"error\": error\n        });\n        flow.set(trackname, track);\n    //>трекер>\n    node.status({fill:\"red\",shape:\"dot\"});\n    node.error(error);\n});",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 470,
        "y": 680,
        "wires": [
            [
                "8143197d2271841f"
            ]
        ]
    },
    {
        "id": "c214dd1da5011852",
        "type": "function",
        "z": "476b070518efd452",
        "name": "tester___",
        "func": "let start_node_time = new Date().getTime();\n\nnode.status({fill: \"green\", shape: \"ring\", text: start_node_time});\n    \n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 2220,
        "y": 440,
        "wires": [
            []
        ]
    },
    {
        "id": "635242efa385f647",
        "type": "function",
        "z": "476b070518efd452",
        "name": "get_order_status",
        "func": "let moneta = msg.moneta;\nlet orderid = Number(msg.orderid);\n\nconst get_order_status = global.get('get_order_status')(moneta, orderid);\n\nget_order_status.then(result => {\n    \n    msg.payload = result;\n  \n    node.status({fill:\"green\",shape:\"dot\"});\n    node.send(msg);\n\n}).catch(error => {\n    \n   \n    node.status({fill:\"red\",shape:\"dot\"});\n    node.error(error);\n});",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1630,
        "y": 1220,
        "wires": [
            [
                "e51cb15074798a3e"
            ]
        ]
    },
    {
        "id": "b2b308a14f3229e8",
        "type": "function",
        "z": "476b070518efd452",
        "name": "get_order_status",
        "func": "let moneta = msg.bot.settings.moneta;\nmsg.moneta = moneta;\nlet orderid = msg.bot.ttp.curorderid\nmsg.orderid = orderid;\n\n\n///msg.topic = \"orders-status-\" + msg.bot.settings.userid + \":\" + moneta + \":\" + orderid;\n\n\n\nconst get_order_status = global.get('get_order_status')(moneta, orderid);\n\nget_order_status.then(result => {\n    \n    msg.payload = result;\n  \n    node.status({fill:\"green\",shape:\"dot\"});\n    node.send(msg);\n\n}).catch(error => {\n    \n   \n    node.status({fill:\"red\",shape:\"dot\"});\n    node.error(error);\n});",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1370,
        "y": 740,
        "wires": [
            [
                "003c55773c96756e"
            ]
        ]
    },
    {
        "id": "0b1004b203cfacee",
        "type": "function",
        "z": "476b070518efd452",
        "name": "tester___",
        "func": "let start_node_time = new Date().getTime();\n\nnode.status({fill: \"green\", shape: \"ring\", text: start_node_time});\n    \n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 880,
        "y": 800,
        "wires": [
            []
        ]
    },
    {
        "id": "a839d7ed54f4e2a0",
        "type": "debug",
        "z": "476b070518efd452",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1150,
        "y": 1000,
        "wires": []
    },
    {
        "id": "4e67b96a04d1f9f0",
        "type": "redis-out",
        "z": "476b070518efd452",
        "server": "f120eab2.0a60a8",
        "command": "publish",
        "name": "",
        "topic": "start11",
        "obj": true,
        "x": 3140,
        "y": 180,
        "wires": []
    },
    {
        "id": "a0d2a086ef100f95",
        "type": "redis-in",
        "z": "476b070518efd452",
        "server": "f120eab2.0a60a8",
        "command": "subscribe",
        "name": "",
        "topic": "start11",
        "obj": false,
        "timeout": 0,
        "x": 2710,
        "y": 100,
        "wires": [
            [
                "abe91e3a998ce67e"
            ]
        ]
    },
    {
        "id": "abe91e3a998ce67e",
        "type": "debug",
        "z": "476b070518efd452",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 2940,
        "y": 100,
        "wires": []
    },
    {
        "id": "99c9b0d68305f423",
        "type": "function",
        "z": "476b070518efd452",
        "name": "",
        "func": "msg = {};\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3030,
        "y": 240,
        "wires": [
            [
                "4e67b96a04d1f9f0",
                "5164a40d23e09c40",
                "5d2dd8b63ca2642e"
            ]
        ]
    },
    {
        "id": "5164a40d23e09c40",
        "type": "function",
        "z": "476b070518efd452",
        "name": "tester___",
        "func": "let start_node_time = new Date().getTime();\n\nnode.status({fill: \"green\", shape: \"ring\", text: start_node_time});\n    \n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 3240,
        "y": 220,
        "wires": [
            []
        ]
    },
    {
        "id": "cb829d0fdcd756d5",
        "type": "function",
        "z": "476b070518efd452",
        "name": "orderexec setsell",
        "func": "//<трекер<\nlet trackname = \"ttp-track-\" + msg.botname;\nlet track = flow.get(trackname);\nlet start_node_time = new Date().getTime();\n\nlet steptitle = node.name;\n\nlet laststep = track[track.length - 1];\nlet last_node_end_time = laststep.end_node_time;\n//>трекер>\n\nlet cmd = \"setsell\";\nlet data = {bot: msg.bot };\nconst orderexec = global.get('order_exec')(cmd, data);\n\nlet botname = msg.bot.settings.botname;\n\n//let data2 = \"setsell\" + msg.botname;\n//const tilog = global.get('tilog')(botname, data2);\n//tilog;\n\norderexec.then(orderexec => {\n    msg.orderexec = orderexec;\n    if (orderexec.statusCode === \"ok\") {\n        node.status({ fill: \"green\", shape: \"dot\", text: orderexec.statusBody.orderId });\n        msg.bot = msg.orderexec.bot;\n        \n        msg.bot.ttp.curorderid = msg.orderexec.statusBody.orderId;\n        msg.bot.ttp.curstop = msg.bot.ttp.raschstopprice\n        //msg.bot.ttp.quantity = msg.orderexec.statusBody.origQty;\n        //>трекер>\n        let end_node_time = new Date().getTime();\n        let duration = end_node_time - start_node_time;\n        let duration_step = end_node_time - last_node_end_time;\n        track.push({\n            \"steptitle\": steptitle,\n            \"start_node_time\": start_node_time,\n            \"end_node_time\": end_node_time,\n            \"duration_node\": duration,\n            \"duration_step\": duration_step\n        });\n        flow.set(trackname, track);\n        //>трекер>\n\n        node.send(msg);\n\n    } else {\n        node.status({ fill: \"red\", shape: \"dot\" });\n        \n        //>трекер>\n        let end_node_time = new Date().getTime();\n        let duration = end_node_time - start_node_time;\n        let duration_step = end_node_time - last_node_end_time;\n        track.push({\n            \"steptitle\": steptitle + \"-faile\",\n            \"start_node_time\": start_node_time,\n            \"end_node_time\": end_node_time,\n            \"duration\": duration,\n            \"duration_step\": duration_step,\n            \"error\": orderexec.statusBody\n        });\n        flow.set(trackname, track);\n        //>трекер>\n\n        node.send(msg);\n    }\n\n\n}).catch(error => {\n\n    msg.error = error;\n    node.status({ fill: \"red\", shape: \"ring\" });\n\n    //node.error(error);\n});\n\n\n\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1370,
        "y": 980,
        "wires": [
            [
                "8db97feb9b027b4c",
                "caee82b8925225db"
            ]
        ]
    },
    {
        "id": "8db97feb9b027b4c",
        "type": "switch",
        "z": "476b070518efd452",
        "name": "statusCode",
        "property": "orderexec.statusCode",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "ok",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "not ok",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 1570,
        "y": 980,
        "wires": [
            [
                "4fcfacdd587dfb35"
            ],
            [
                "85f4207933f0ffcb"
            ]
        ]
    },
    {
        "id": "85f4207933f0ffcb",
        "type": "function",
        "z": "476b070518efd452",
        "name": "tilog",
        "func": "let botname = msg.bot.settings.botname;\nlet data = \"Ошибка при выставлении ордера - \"+msg.orderexec.statusBody;\nconst tilog = global.get('tilog')(botname,data);\n\ntilog.then(tilog => {\n\n\n        node.status({fill:\"green\",shape:\"dot\"});\n    node.send(msg);\n     \n    \n\n}).catch(error => {\n    \n    msg.error = error;\n    node.status({fill:\"red\",shape: \"ring\"});\n    \n    node.error(error);\n});",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1590,
        "y": 1020,
        "wires": [
            [
                "333515722605ce39"
            ]
        ]
    },
    {
        "id": "4fcfacdd587dfb35",
        "type": "function",
        "z": "476b070518efd452",
        "name": "setbot_ttp",
        "func": "//<трекер<\n    let trackname = \"ttp-track-\"+msg.botname;\n    let track = flow.get(trackname);\n    let start_node_time = new Date().getTime();\n    \n    let steptitle = node.name;\n\n    let laststep = track[track.length-1];\n    let last_node_end_time = laststep.end_node_time;\n//>трекер>\nmsg.topic = msg.bot.settings.userid+\"-bots:\"+msg.bot.settings.botname+\":ttp\";\n\nmsg.payload = JSON.stringify(msg.bot.ttp);\nconst upd = global.get('setbot_ttp')(msg.topic, msg.payload);\n\n\nupd.then(upd => {\n\n    //>трекер>\n        let end_node_time = new Date().getTime();\n        let duration = end_node_time - start_node_time;\n        let duration_step = end_node_time - last_node_end_time;\n        track.push({\n            \"steptitle\": steptitle,\n            \"start_node_time\": start_node_time,\n            \"end_node_time\": end_node_time,\n            \"duration_node\": duration,\n            \"duration_step\": duration_step\n        });\n        flow.set(trackname, track);\n    //>трекер>\n    node.status({fill:\"green\",shape:\"dot\"});\n    \n    let botname = msg.botname;\n    let datamsg = \"выставили ttp ордер\";\n    const tilog = global.get('tilog')(botname,datamsg);\n    tilog;\n    \n    node.send(msg);\n\n}).catch(error => {\n\n    //>трекер>\n        let end_node_time = new Date().getTime();\n        let duration = end_node_time - start_node_time;\n        let duration_step = end_node_time - last_node_end_time;\n        track.push({\n            \"steptitle\": steptitle+\"-faile\",\n            \"start_node_time\": start_node_time,\n            \"end_node_time\": end_node_time,\n            \"duration\": duration,\n            \"duration_step\": duration_step,\n            \"error\": error\n        });\n        flow.set(trackname, track);\n    //>трекер>\n    node.status({fill:\"red\",shape:\"dot\"}); \n    node.error(error);\n});",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1770,
        "y": 960,
        "wires": [
            [
                "fc4909a1c6ea8b7e",
                "5391fea852823d6a"
            ]
        ],
        "icon": "font-awesome/fa-bolt"
    },
    {
        "id": "333515722605ce39",
        "type": "link out",
        "z": "476b070518efd452",
        "name": "",
        "links": [
            "6bc676d5547374d8"
        ],
        "x": 1695,
        "y": 1020,
        "wires": []
    },
    {
        "id": "5391fea852823d6a",
        "type": "debug",
        "z": "476b070518efd452",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1770,
        "y": 920,
        "wires": []
    },
    {
        "id": "23d37d4df1760ca8",
        "type": "function",
        "z": "476b070518efd452",
        "name": "update bot floors, finance, sales",
        "func": "const sellprice = msg.bot.ttpprice\nlet comsa = Number(msg.payload);\nlet quantityall = msg.bot.ttp.quantity;\n\nnode.warn(\"finish ttp on floor \");\n\nlet tempfin = Number(Number(msg.bot.finance.quotainorders) - Number(msg.bot.ttp.quantity));\n\nlet tempfin2 = Number(Number(msg.bot.finance.basenal) + (Number(msg.bot.ttp.quantity) - Number(msg.bot.ttp.quantity * Number(msg.payload))) * Number(msg.bot.ttpprice));\n\nmsg.bot.finance.quotainorders = tempfin.toFixed(msg.bot.settings.digitprice);\nmsg.bot.finance.basenal = tempfin2.toFixed(msg.bot.settings.digitq);\n\nif (msg.bot.finance.baseinorders == -0) { msg.bot.finance.baseinorders = 0; }\nif (msg.bot.finance.basenal == -0) { msg.bot.finance.basenal = 0; }\n\nlet currentfloor = msg.bot.currentfloor;\n\n//обнуление всех этажей со статусом 3\n\nvar floors = msg.bot.floors;\n\nfloors.forEach(function (item, i, floors) {\n\n    if (item[7] == 3) {\n        //let buyprice = item[10];\n        //let quantity = Number(item[14]);\n        //msg.bot.sales.today.push((sellprice - buyprice) * quantity);\n\n        item[7] = 4;\n        // item[8] = 0;\n        // item[9] = 0;\n        // item[10] = 0;\n        item[11] = msg.bot.ttp.curorderid;\n        // item[12] = 0;\n        item[13] = sellprice;\n        // item[14] = 0;\n    }\n});\n\nmsg.bot.floors = floors;\n\n\nlet volname = msg.bot.settings.userid + \"-bots:\" + msg.botname + \":data\";\nlet botdata = {\n    \"finance\": JSON.stringify(msg.bot.finance),\n    \"floors\": JSON.stringify(msg.bot.floors),\n    \"sales\": JSON.stringify(msg.bot.sales)\n};\n\nconst upd = global.get('setbot_data')(volname, botdata);\n\nupd.then(upd => {\n\n    msg.payload = upd;\n\n    node.status({ fill: \"green\", shape: \"ring\", text: \"0k\" });\n    node.send(msg);\n\n}).catch(error => {\n\n    node.status({ fill: \"red\", shape: \"ring\", text: \"error\" });\n    node.error(error);\n});",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3030,
        "y": 1040,
        "wires": [
            []
        ],
        "icon": "font-awesome/fa-bolt"
    },
    {
        "id": "5e262c0788965b97",
        "type": "function",
        "z": "476b070518efd452",
        "name": "prepare get ttp order comsa",
        "func": "msg.bot.ttpprice = msg.payload;\n\nlet moneta = msg.bot.settings.moneta;\nlet orderid = msg.bot.ttp.curorderid;\n\nmsg.payload = [];\nmsg.topic = \"orders-status-\" + msg.bot.settings.userid + \":\" + moneta + \":\" + orderid + \"-comsa\";\n\n\n\n\nnode.status({fill: \"green\", shape: \"ring\", text: orderid});\nreturn msg;\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2760,
        "y": 880,
        "wires": [
            [
                "290167671f1b5b66"
            ]
        ],
        "inputLabels": [
            "orderid"
        ],
        "outputLabels": [
            "status"
        ],
        "icon": "node-red-contrib-binance/binance.png"
    },
    {
        "id": "290167671f1b5b66",
        "type": "redis-command",
        "z": "476b070518efd452",
        "server": "f120eab2.0a60a8",
        "command": "GET",
        "name": "get order status",
        "topic": "msg.payload",
        "params": "[]",
        "paramsType": "json",
        "payloadType": "json",
        "block": false,
        "x": 3000,
        "y": 880,
        "wires": [
            []
        ]
    },
    {
        "id": "5052d2d8b2cd230a",
        "type": "switch",
        "z": "476b070518efd452",
        "name": "sold ?",
        "property": "bot.ttp.sold",
        "propertyType": "msg",
        "rules": [
            {
                "t": "false"
            },
            {
                "t": "true"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 830,
        "y": 680,
        "wires": [
            [
                "836ca8423e5beeae"
            ],
            [
                "0cc95ba0ccde2563"
            ]
        ]
    },
    {
        "id": "0cc95ba0ccde2563",
        "type": "link out",
        "z": "476b070518efd452",
        "name": "",
        "links": [
            "6bc676d5547374d8"
        ],
        "x": 975,
        "y": 620,
        "wires": []
    },
    {
        "id": "1cd8cc8554e74af0",
        "type": "function",
        "z": "476b070518efd452",
        "name": "orderexec cansel",
        "func": "//<трекер<\nlet trackname = \"ttp-track-\" + msg.botname;\nlet track = flow.get(trackname);\nlet start_node_time = new Date().getTime();\n\nlet steptitle = node.name;\n\nlet laststep = track[track.length - 1];\nlet last_node_end_time = laststep.end_node_time;\n//>трекер>\nlet cmd = \"cansel\";\nlet orderid = msg.bot.ttp.curorderid;\n\n\nlet data = { moneta: msg.bot.settings.moneta, orderid: orderid};\nconst orderexec = global.get('order_exec')(cmd, data);\n\nlet botname = msg.bot.settings.botname;\n\n//let data2 = \"cansel order id:\" + orderid;\n//const tilog = global.get('tilog')(botname, data2);\n//tilog;\n\norderexec.then(orderexec => {\n    msg.orderexec = orderexec;\n    if (orderexec.statusCode === \"ok\") {\n        node.status({ fill: \"green\", shape: \"dot\", text: orderexec.statusBody.orderId });\n        //msg.bot = msg.orderexec.bot;\n        msg.bot.ttp.curorderid = 0;\n\n\n        //>трекер>\n        let end_node_time = new Date().getTime();\n        let duration = end_node_time - start_node_time;\n        let duration_step = end_node_time - last_node_end_time;\n        track.push({\n            \"steptitle\": steptitle,\n            \"start_node_time\": start_node_time,\n            \"end_node_time\": end_node_time,\n            \"duration_node\": duration,\n            \"duration_step\": duration_step\n        });\n        flow.set(trackname, track);\n        //>трекер>\n\n\n        let tempfin = Number(Number(msg.bot.finance.baseinorders) - Number(msg.bot.ttp.quantity) * Number(msg.bot.ttp.curstop));\n        let tempfin2 = Number(Number(msg.bot.finance.basenal) + Number(msg.bot.ttp.quantity) * Number(msg.bot.ttp.curstop));\n\n        msg.bot.finance.baseinorders = tempfin.toFixed(msg.bot.settings.digitprice);\n        msg.bot.finance.basenal = tempfin2.toFixed(msg.bot.settings.digitprice);\n\n\n        node.send(msg);\n\n    } else {\n        node.status({ fill: \"red\", shape: \"dot\" });\n\n        //>трекер>\n        let end_node_time = new Date().getTime();\n        let duration = end_node_time - start_node_time;\n        let duration_step = end_node_time - last_node_end_time;\n        track.push({\n            \"steptitle\": steptitle + \"-faile\",\n            \"start_node_time\": start_node_time,\n            \"end_node_time\": end_node_time,\n            \"duration\": duration,\n            \"duration_step\": duration_step,\n            \"error\": orderexec.statusBody\n        });\n        flow.set(trackname, track);\n        //>трекер>\n\n        node.send(msg);\n    }\n\n\n}).catch(error => {\n\n    msg.error = error;\n    node.status({ fill: \"red\", shape: \"ring\" });\n    node.warn(msg);\n    node.error(error);\n});\n\n\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1990,
        "y": 680,
        "wires": [
            [
                "88347b25dbfdbc6d"
            ]
        ]
    },
    {
        "id": "88347b25dbfdbc6d",
        "type": "switch",
        "z": "476b070518efd452",
        "name": "statusCode",
        "property": "orderexec.statusCode",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "ok",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "not ok",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 2190,
        "y": 680,
        "wires": [
            [
                "bf15c39ea1e1ae7f"
            ],
            [
                "6f1e52d4fe8de663",
                "4c9d2eed5117518a"
            ]
        ]
    },
    {
        "id": "6f1e52d4fe8de663",
        "type": "function",
        "z": "476b070518efd452",
        "name": "tilog",
        "func": "let botname = msg.bot.settings.botname;\nlet data = \"Ошибка при выставлении ордера - \"+msg.orderexec.statusBody;\nconst tilog = global.get('tilog')(botname,data);\n\ntilog.then(tilog => {\n\n\n        node.status({fill:\"green\",shape:\"dot\"});\n    node.send(msg);\n     \n    \n\n}).catch(error => {\n    \n    msg.error = error;\n    node.status({fill:\"red\",shape: \"ring\"});\n    \n    node.error(error);\n});",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2210,
        "y": 720,
        "wires": [
            [
                "6f1355ee42af80a1"
            ]
        ]
    },
    {
        "id": "bf15c39ea1e1ae7f",
        "type": "function",
        "z": "476b070518efd452",
        "name": "orderexec setsell",
        "func": "//<трекер<\nlet trackname = \"ttp-track-\" + msg.botname;\nlet track = flow.get(trackname);\nlet start_node_time = new Date().getTime();\n\nlet steptitle = node.name;\n\nlet laststep = track[track.length - 1];\nlet last_node_end_time = laststep.end_node_time;\n//>трекер>\n\nlet cmd = \"setsell\";\nlet data = {bot: msg.bot };\nconst orderexec = global.get('order_exec')(cmd, data);\n\n//let botname = msg.bot.settings.botname;\n//let data2 = \"setsell\" + msg.botname;\n//const tilog = global.get('tilog')(botname, data2);\n//tilog;\n\norderexec.then(orderexec => {\n    msg.orderexec = orderexec;\n    if (orderexec.statusCode == \"ok\") {\n        node.status({ fill: \"green\", shape: \"dot\", text: orderexec.statusBody.orderId });\n        //msg.bot = msg.orderexec.bot;\n        \n        msg.bot.ttp.curorderid = msg.orderexec.statusBody.orderId;\n        msg.bot.ttp.curstop = msg.bot.ttp.raschstopprice\n        //msg.bot.ttp.quantity = msg.orderexec.statusBody.origQty;\n        \n        //>трекер>\n        let end_node_time = new Date().getTime();\n        let duration = end_node_time - start_node_time;\n        let duration_step = end_node_time - last_node_end_time;\n        track.push({\n            \"steptitle\": steptitle,\n            \"start_node_time\": start_node_time,\n            \"end_node_time\": end_node_time,\n            \"duration_node\": duration,\n            \"duration_step\": duration_step\n        });\n        flow.set(trackname, track);\n        //>трекер>\n\n        node.send(msg);\n\n    } else {\n        node.status({ fill: \"red\", shape: \"dot\" });\n\n        //>трекер>\n        let end_node_time = new Date().getTime();\n        let duration = end_node_time - start_node_time;\n        let duration_step = end_node_time - last_node_end_time;\n        track.push({\n            \"steptitle\": steptitle + \"-faile\",\n            \"start_node_time\": start_node_time,\n            \"end_node_time\": end_node_time,\n            \"duration\": duration,\n            \"duration_step\": duration_step,\n            \"error\": orderexec.statusBody\n        });\n        flow.set(trackname, track);\n        //>трекер>\n\n        node.send(msg);\n    }\n\n\n}).catch(error => {\n\n    msg.error = error;\n    node.status({ fill: \"red\", shape: \"ring\" });\n\n    node.error(error);\n});\n\n\n\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2390,
        "y": 660,
        "wires": [
            [
                "737bedef214240b8"
            ]
        ]
    },
    {
        "id": "737bedef214240b8",
        "type": "switch",
        "z": "476b070518efd452",
        "name": "statusCode",
        "property": "orderexec.statusCode",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "ok",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "not ok",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 2590,
        "y": 660,
        "wires": [
            [
                "e03532bdf8418eb8"
            ],
            [
                "d6e8a3b9c837a9bc"
            ]
        ]
    },
    {
        "id": "d6e8a3b9c837a9bc",
        "type": "function",
        "z": "476b070518efd452",
        "name": "tilog",
        "func": "let botname = msg.bot.settings.botname;\nlet data = \"Ошибка при выставлении ордера - \"+msg.orderexec.statusBody;\nconst tilog = global.get('tilog')(botname,data);\n\ntilog.then(tilog => {\n\n\n        node.status({fill:\"green\",shape:\"dot\"});\n    node.send(msg);\n     \n    \n\n}).catch(error => {\n    \n    msg.error = error;\n    node.status({fill:\"red\",shape: \"ring\"});\n    \n    node.error(error);\n});",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2610,
        "y": 700,
        "wires": [
            [
                "5e8f412fe96ec434"
            ]
        ]
    },
    {
        "id": "7657db07cf3a06d6",
        "type": "link out",
        "z": "476b070518efd452",
        "name": "",
        "links": [
            "6bc676d5547374d8"
        ],
        "x": 2895,
        "y": 640,
        "wires": []
    },
    {
        "id": "46767c2bf999d770",
        "type": "link out",
        "z": "476b070518efd452",
        "name": "",
        "links": [
            "6bc676d5547374d8"
        ],
        "x": 2915,
        "y": 700,
        "wires": []
    },
    {
        "id": "6f1355ee42af80a1",
        "type": "link out",
        "z": "476b070518efd452",
        "name": "",
        "links": [
            "6bc676d5547374d8"
        ],
        "x": 2315,
        "y": 720,
        "wires": []
    },
    {
        "id": "e03532bdf8418eb8",
        "type": "function",
        "z": "476b070518efd452",
        "name": "setbot_ttp",
        "func": "//<трекер<\nlet trackname = \"ttp-track-\" + msg.botname;\nlet track = flow.get(trackname);\nlet start_node_time = new Date().getTime();\n\nlet steptitle = node.name;\n\nlet laststep = track[track.length - 1];\nlet last_node_end_time = laststep.end_node_time;\n//>трекер>\nmsg.topic = msg.bot.settings.userid + \"-bots:\" + msg.bot.settings.botname + \":ttp\";\n\nmsg.payload = JSON.stringify(msg.bot.ttp);\nconst upd = global.get('setbot_ttp')(msg.topic, msg.payload);\n\n\nupd.then(upd => {\n\n    //>трекер>\n    let end_node_time = new Date().getTime();\n    let duration = end_node_time - start_node_time;\n    let duration_step = end_node_time - last_node_end_time;\n    track.push({\n        \"steptitle\": steptitle,\n        \"start_node_time\": start_node_time,\n        \"end_node_time\": end_node_time,\n        \"duration_node\": duration,\n        \"duration_step\": duration_step\n    });\n    flow.set(trackname, track);\n    //>трекер>\n\n    let botname = msg.botname;\n    let datamsg = \"переставили ttp ордер, q=\" + msg.bot.ttp.quantity;\n    const tilog = global.get('tilog')(botname, datamsg);\n    tilog;\n\n    node.status({ fill: \"green\", shape: \"dot\" });\n    node.send(msg);\n\n}).catch(error => {\n\n    //>трекер>\n    let end_node_time = new Date().getTime();\n    let duration = end_node_time - start_node_time;\n    let duration_step = end_node_time - last_node_end_time;\n    track.push({\n        \"steptitle\": steptitle + \"-faile\",\n        \"start_node_time\": start_node_time,\n        \"end_node_time\": end_node_time,\n        \"duration\": duration,\n        \"duration_step\": duration_step,\n        \"error\": error\n    });\n    flow.set(trackname, track);\n    //>трекер>\n    node.status({ fill: \"red\", shape: \"dot\" });\n    node.error(error);\n});",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2770,
        "y": 640,
        "wires": [
            [
                "7657db07cf3a06d6"
            ]
        ],
        "icon": "font-awesome/fa-bolt"
    },
    {
        "id": "caee82b8925225db",
        "type": "debug",
        "z": "476b070518efd452",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1490,
        "y": 940,
        "wires": []
    },
    {
        "id": "5e8f412fe96ec434",
        "type": "function",
        "z": "476b070518efd452",
        "name": "setbot_ttp",
        "func": "//<трекер<\nlet trackname = \"ttp-track-\" + msg.botname;\nlet track = flow.get(trackname);\nlet start_node_time = new Date().getTime();\n\nlet steptitle = node.name;\n\nlet laststep = track[track.length - 1];\nlet last_node_end_time = laststep.end_node_time;\n//>трекер>\nmsg.topic = msg.bot.settings.userid + \"-bots:\" + msg.bot.settings.botname + \":ttp\";\n\nmsg.payload = JSON.stringify(msg.bot.ttp);\nconst upd = global.get('setbot_ttp')(msg.topic, msg.payload);\n\n\nupd.then(upd => {\n\n    //>трекер>\n    let end_node_time = new Date().getTime();\n    let duration = end_node_time - start_node_time;\n    let duration_step = end_node_time - last_node_end_time;\n    track.push({\n        \"steptitle\": steptitle,\n        \"start_node_time\": start_node_time,\n        \"end_node_time\": end_node_time,\n        \"duration_node\": duration,\n        \"duration_step\": duration_step\n    });\n    flow.set(trackname, track);\n    //>трекер>\n\n    let botname = msg.botname;\n    let datamsg = \"переставили ttp ордер, q=\" + msg.bot.ttp.quantity;\n    const tilog = global.get('tilog')(botname, datamsg);\n    tilog;\n\n    node.status({ fill: \"green\", shape: \"dot\" });\n    node.send(msg);\n\n}).catch(error => {\n\n    //>трекер>\n    let end_node_time = new Date().getTime();\n    let duration = end_node_time - start_node_time;\n    let duration_step = end_node_time - last_node_end_time;\n    track.push({\n        \"steptitle\": steptitle + \"-faile\",\n        \"start_node_time\": start_node_time,\n        \"end_node_time\": end_node_time,\n        \"duration\": duration,\n        \"duration_step\": duration_step,\n        \"error\": error\n    });\n    flow.set(trackname, track);\n    //>трекер>\n    node.status({ fill: \"red\", shape: \"dot\" });\n    node.error(error);\n});",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2770,
        "y": 700,
        "wires": [
            [
                "46767c2bf999d770"
            ]
        ],
        "icon": "font-awesome/fa-bolt"
    },
    {
        "id": "1764c7f592019d07",
        "type": "switch",
        "z": "476b070518efd452",
        "name": "currentprice < curstop ",
        "property": "bot.ttp.currentprice",
        "propertyType": "msg",
        "rules": [
            {
                "t": "lt",
                "v": "bot.ttp.curstop",
                "vt": "msg"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 1100,
        "y": 1620,
        "wires": [
            [
                "f2c9ef8628aa545e"
            ]
        ]
    },
    {
        "id": "f2c9ef8628aa545e",
        "type": "function",
        "z": "476b070518efd452",
        "name": "orderexec cansel",
        "func": "//<трекер<\nlet trackname = \"ttp-track-\" + msg.botname;\nlet track = flow.get(trackname);\nlet start_node_time = new Date().getTime();\n\nlet steptitle = node.name;\n\nlet laststep = track[track.length - 1];\nlet last_node_end_time = laststep.end_node_time;\n//>трекер>\nlet cmd = \"cansel\";\nlet orderid = msg.bot.ttp.curorderid;\n\n\nlet data = { moneta: msg.bot.settings.moneta, orderid: orderid};\nconst orderexec = global.get('order_exec')(cmd, data);\n\n//let botname = msg.bot.settings.botname;\n//let data2 = \"cansel order id:\" + orderid;\n//const tilog = global.get('tilog')(botname, data2);\n//tilog;\n\norderexec.then(orderexec => {\n    msg.orderexec = orderexec;\n    if (orderexec.statusCode === \"ok\") {\n        node.status({ fill: \"green\", shape: \"dot\", text: orderexec.statusBody.orderId });\n        msg.bot = msg.orderexec.bot;\n        msg.bot.ttp.curorderid = 0;\n\n\n        //>трекер>\n        let end_node_time = new Date().getTime();\n        let duration = end_node_time - start_node_time;\n        let duration_step = end_node_time - last_node_end_time;\n        track.push({\n            \"steptitle\": steptitle,\n            \"start_node_time\": start_node_time,\n            \"end_node_time\": end_node_time,\n            \"duration_node\": duration,\n            \"duration_step\": duration_step\n        });\n        flow.set(trackname, track);\n        //>трекер>\n\n\n        let tempfin = Number(Number(msg.bot.finance.baseinorders) - Number(msg.bot.ttp.quantity) * Number(msg.bot.ttp.curstop));\n        let tempfin2 = Number(Number(msg.bot.finance.basenal) + Number(msg.bot.ttp.quantity) * Number(msg.bot.ttp.curstop));\n\n        msg.bot.finance.baseinorders = tempfin.toFixed(msg.bot.settings.digitprice);\n        msg.bot.finance.basenal = tempfin2.toFixed(msg.bot.settings.digitprice);\n\n\n        node.send(msg);\n\n    } else {\n        node.status({ fill: \"red\", shape: \"dot\" });\n\n        //>трекер>\n        let end_node_time = new Date().getTime();\n        let duration = end_node_time - start_node_time;\n        let duration_step = end_node_time - last_node_end_time;\n        track.push({\n            \"steptitle\": steptitle + \"-faile\",\n            \"start_node_time\": start_node_time,\n            \"end_node_time\": end_node_time,\n            \"duration\": duration,\n            \"duration_step\": duration_step,\n            \"error\": orderexec.statusBody\n        });\n        flow.set(trackname, track);\n        //>трекер>\n\n        node.send(msg);\n    }\n\n\n}).catch(error => {\n\n    msg.error = error;\n    node.status({ fill: \"red\", shape: \"ring\" });\n\n    node.error(error);\n});\n\n\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1330,
        "y": 1620,
        "wires": [
            [
                "4dd45de53b86c925"
            ]
        ]
    },
    {
        "id": "4dd45de53b86c925",
        "type": "switch",
        "z": "476b070518efd452",
        "name": "statusCode",
        "property": "orderexec.statusCode",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "ok",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "not ok",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 1530,
        "y": 1620,
        "wires": [
            [
                "578b25ba836344f4"
            ],
            [
                "80dffbdcff3dd4df",
                "578b25ba836344f4"
            ]
        ]
    },
    {
        "id": "80dffbdcff3dd4df",
        "type": "function",
        "z": "476b070518efd452",
        "name": "tilog",
        "func": "let botname = msg.bot.settings.botname;\nlet data = \"Ошибка при выставлении ордера - \"+msg.orderexec.statusBody;\nconst tilog = global.get('tilog')(botname,data);\n\ntilog.then(tilog => {\n\n\n        node.status({fill:\"green\",shape:\"dot\"});\n    node.send(msg);\n     \n    \n\n}).catch(error => {\n    \n    msg.error = error;\n    node.status({fill:\"red\",shape: \"ring\"});\n    \n    node.error(error);\n});",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1690,
        "y": 1660,
        "wires": [
            [
                "8f467ab6ddc936e7"
            ]
        ]
    },
    {
        "id": "578b25ba836344f4",
        "type": "function",
        "z": "476b070518efd452",
        "name": "orderexec marketsell",
        "func": "//<трекер<\nlet trackname = \"ttp-track-\" + msg.botname;\nlet track = flow.get(trackname);\nlet start_node_time = new Date().getTime();\n\nlet steptitle = node.name;\n\nlet laststep = track[track.length - 1];\nlet last_node_end_time = laststep.end_node_time;\n//>трекер>\n\nlet cmd = \"marketsell\";\n\nlet data = { moneta: msg.bot.settings.moneta, quantity: msg.bot.ttp.quantity, bot: msg.bot };\n\n\nconst orderexec = global.get('order_exec')(cmd, data);\n\n//let botname = msg.bot.settings.botname;\n//let data2 = \"setsell\" + msg.botname;\n//const tilog = global.get('tilog')(botname, data2);\n//tilog;\n\norderexec.then(orderexec => {\n    msg.orderexec = orderexec;\n    if (orderexec.statusCode == \"ok\") {\n        node.status({ fill: \"green\", shape: \"dot\", text: orderexec.statusBody.orderId });\n        msg.bot = msg.orderexec.bot;\n        \n        //msg.bot.ttp.curorderid = 0;\n        msg.bot.ttp.curstop = 0;\n        msg.bot.ttp.finalorder = orderexec.statusBody.orderId;\n        //msg.bot.ttp.quantity = 0;\n        \n        //>трекер>\n        let end_node_time = new Date().getTime();\n        let duration = end_node_time - start_node_time;\n        let duration_step = end_node_time - last_node_end_time;\n        track.push({\n            \"steptitle\": steptitle,\n            \"start_node_time\": start_node_time,\n            \"end_node_time\": end_node_time,\n            \"duration_node\": duration,\n            \"duration_step\": duration_step\n        });\n        flow.set(trackname, track);\n        //>трекер>\n\n        node.send(msg);\n\n    } else {\n        node.status({ fill: \"red\", shape: \"dot\" });\n\n        //>трекер>\n        let end_node_time = new Date().getTime();\n        let duration = end_node_time - start_node_time;\n        let duration_step = end_node_time - last_node_end_time;\n        track.push({\n            \"steptitle\": steptitle + \"-faile\",\n            \"start_node_time\": start_node_time,\n            \"end_node_time\": end_node_time,\n            \"duration\": duration,\n            \"duration_step\": duration_step,\n            \"error\": orderexec.statusBody\n        });\n        flow.set(trackname, track);\n        //>трекер>\n\n        node.send(msg);\n    }\n\n\n}).catch(error => {\n\n    msg.error = error;\n    node.status({ fill: \"red\", shape: \"ring\" });\n\n    node.error(error);\n});\n\n\n\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1740,
        "y": 1580,
        "wires": [
            [
                "51615b7e935e8790",
                "ff57eb4d2025487b"
            ]
        ]
    },
    {
        "id": "51615b7e935e8790",
        "type": "switch",
        "z": "476b070518efd452",
        "name": "statusCode",
        "property": "orderexec.statusCode",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "ok",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "not ok",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 1950,
        "y": 1580,
        "wires": [
            [
                "a6120edc83ee23b7"
            ],
            [
                "1cfcb742972d8d06",
                "66a51493a6eab261"
            ]
        ]
    },
    {
        "id": "1cfcb742972d8d06",
        "type": "function",
        "z": "476b070518efd452",
        "name": "tilog",
        "func": "let botname = msg.bot.settings.botname;\nlet data = \"Ошибка при выставлении ордера - \"+msg.orderexec.statusBody;\nconst tilog = global.get('tilog')(botname,data);\n\ntilog.then(tilog => {\n\n\n        node.status({fill:\"green\",shape:\"dot\"});\n    node.send(msg);\n     \n    \n\n}).catch(error => {\n    \n    msg.error = error;\n    node.status({fill:\"red\",shape: \"ring\"});\n    \n    node.error(error);\n});",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2110,
        "y": 1620,
        "wires": [
            [
                "5cd92351c5c25157"
            ]
        ]
    },
    {
        "id": "f9ecd880187f9dcd",
        "type": "link out",
        "z": "476b070518efd452",
        "name": "",
        "links": [
            "6bc676d5547374d8"
        ],
        "x": 2395,
        "y": 1620,
        "wires": []
    },
    {
        "id": "8f467ab6ddc936e7",
        "type": "link out",
        "z": "476b070518efd452",
        "name": "",
        "links": [
            "6bc676d5547374d8"
        ],
        "x": 1795,
        "y": 1720,
        "wires": []
    },
    {
        "id": "5cd92351c5c25157",
        "type": "function",
        "z": "476b070518efd452",
        "name": "setbot_ttp",
        "func": "//<трекер<\nlet trackname = \"ttp-track-\" + msg.botname;\nlet track = flow.get(trackname);\nlet start_node_time = new Date().getTime();\n\nlet steptitle = node.name;\n\nlet laststep = track[track.length - 1];\nlet last_node_end_time = laststep.end_node_time;\n//>трекер>\nmsg.topic = msg.bot.settings.userid + \"-bots:\" + msg.bot.settings.botname + \":ttp\";\n\nmsg.payload = JSON.stringify(msg.bot.ttp);\nconst upd = global.get('setbot_ttp')(msg.topic, msg.payload);\n\n\nupd.then(upd => {\n\n    //>трекер>\n    let end_node_time = new Date().getTime();\n    let duration = end_node_time - start_node_time;\n    let duration_step = end_node_time - last_node_end_time;\n    track.push({\n        \"steptitle\": steptitle,\n        \"start_node_time\": start_node_time,\n        \"end_node_time\": end_node_time,\n        \"duration_node\": duration,\n        \"duration_step\": duration_step\n    });\n    flow.set(trackname, track);\n    //>трекер>\n\n    let botname = msg.botname;\n    let datamsg = \"переставили ttp ордер, q=\" + msg.bot.ttp.quantity;\n    const tilog = global.get('tilog')(botname, datamsg);\n    tilog;\n\n    node.status({ fill: \"green\", shape: \"dot\" });\n    node.send(msg);\n\n}).catch(error => {\n\n    //>трекер>\n    let end_node_time = new Date().getTime();\n    let duration = end_node_time - start_node_time;\n    let duration_step = end_node_time - last_node_end_time;\n    track.push({\n        \"steptitle\": steptitle + \"-faile\",\n        \"start_node_time\": start_node_time,\n        \"end_node_time\": end_node_time,\n        \"duration\": duration,\n        \"duration_step\": duration_step,\n        \"error\": error\n    });\n    flow.set(trackname, track);\n    //>трекер>\n    node.status({ fill: \"red\", shape: \"dot\" });\n    node.error(error);\n});",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2270,
        "y": 1620,
        "wires": [
            [
                "f9ecd880187f9dcd"
            ]
        ],
        "icon": "font-awesome/fa-bolt"
    },
    {
        "id": "ef400f3139d1ac75",
        "type": "catch",
        "z": "476b070518efd452",
        "name": "",
        "scope": [
            "f2c9ef8628aa545e"
        ],
        "uncaught": false,
        "x": 1290,
        "y": 1660,
        "wires": [
            [
                "be777366f0a147ba"
            ]
        ]
    },
    {
        "id": "be777366f0a147ba",
        "type": "debug",
        "z": "476b070518efd452",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1330,
        "y": 1700,
        "wires": []
    },
    {
        "id": "b6933092f066f004",
        "type": "switch",
        "z": "476b070518efd452",
        "name": "order id > 0 ",
        "property": "bot.ttp.curorderid",
        "propertyType": "msg",
        "rules": [
            {
                "t": "gt",
                "v": "0",
                "vt": "num"
            },
            {
                "t": "eq",
                "v": "0",
                "vt": "num"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 890,
        "y": 1660,
        "wires": [
            [
                "1764c7f592019d07"
            ],
            [
                "c7aa3e83582dec39"
            ]
        ]
    },
    {
        "id": "e5ff92cc6e134092",
        "type": "switch",
        "z": "476b070518efd452",
        "name": "order id > 0 ",
        "property": "bot.ttp.curorderid",
        "propertyType": "msg",
        "rules": [
            {
                "t": "gt",
                "v": "0",
                "vt": "num"
            },
            {
                "t": "eq",
                "v": "0",
                "vt": "num"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 1150,
        "y": 1260,
        "wires": [
            [
                "3a2dded961ef4f28"
            ],
            [
                "a525921f987f3c98"
            ]
        ]
    },
    {
        "id": "a525921f987f3c98",
        "type": "link out",
        "z": "476b070518efd452",
        "name": "",
        "links": [
            "6bc676d5547374d8"
        ],
        "x": 1275,
        "y": 1300,
        "wires": []
    },
    {
        "id": "c7aa3e83582dec39",
        "type": "link out",
        "z": "476b070518efd452",
        "name": "",
        "links": [
            "6bc676d5547374d8"
        ],
        "x": 1015,
        "y": 1700,
        "wires": []
    },
    {
        "id": "38802d96f0a93ac0",
        "type": "function",
        "z": "476b070518efd452",
        "name": "msg = {}",
        "func": "msg = {};\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2020,
        "y": 540,
        "wires": [
            [
                "318d04e81b57887d",
                "58d4a8cbd555797d"
            ]
        ]
    },
    {
        "id": "318d04e81b57887d",
        "type": "redis-out",
        "z": "476b070518efd452",
        "server": "f120eab2.0a60a8",
        "command": "publish",
        "name": "",
        "topic": "stop",
        "obj": true,
        "x": 2260,
        "y": 520,
        "wires": []
    },
    {
        "id": "58d4a8cbd555797d",
        "type": "delay",
        "z": "476b070518efd452",
        "name": "",
        "pauseType": "delay",
        "timeout": "4",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "x": 2200,
        "y": 560,
        "wires": [
            [
                "fdda60b189ce149b"
            ]
        ]
    },
    {
        "id": "fdda60b189ce149b",
        "type": "redis-out",
        "z": "476b070518efd452",
        "server": "f120eab2.0a60a8",
        "command": "publish",
        "name": "",
        "topic": "start",
        "obj": false,
        "x": 2360,
        "y": 560,
        "wires": []
    },
    {
        "id": "a6120edc83ee23b7",
        "type": "function",
        "z": "476b070518efd452",
        "name": "set sold",
        "func": "msg.bot.ttp.sold = true;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2120,
        "y": 1540,
        "wires": [
            [
                "53d062d6da522735"
            ]
        ]
    },
    {
        "id": "bcbe6ac24162f1e4",
        "type": "function",
        "z": "476b070518efd452",
        "name": "setbot_ttp",
        "func": "//<трекер<\nlet trackname = \"ttp-track-\" + msg.botname;\nlet track = flow.get(trackname);\nlet start_node_time = new Date().getTime();\nlet steptitle = node.name;\n\nlet laststep = track[track.length - 1];\nlet last_node_end_time = laststep.end_node_time;\n//>трекер>\n\n\nmsg.bot.ttp.final_price = msg.payload;\n//msg.bot.ttp.final_quantity = msg.bot.ttp.quantity;\n//msg.bot.ttp.quantity = 0;\n\nmsg.topic = msg.bot.settings.userid + \"-bots:\" + msg.bot.settings.botname + \":ttp\";\nmsg.payload = JSON.stringify(msg.bot.ttp);\n\nconst upd = global.get('setbot_ttp')(msg.topic, msg.payload);\n\nupd.then(upd => {\n\n    msg.topic = [];\n\n    //>трекер>\n    let end_node_time = new Date().getTime();\n    let duration = end_node_time - start_node_time;\n    let duration_step = end_node_time - last_node_end_time;\n    track.push({\n        \"steptitle\": steptitle,\n        \"start_node_time\": start_node_time,\n        \"end_node_time\": end_node_time,\n        \"duration_node\": duration,\n        \"duration_step\": duration_step\n    });\n    flow.set(trackname, track);\n    //>трекер>\n\n    let botname = msg.botname;\n    let datamsg = \"ttp finish on \" + msg.bot.ttp.final_price;\n    const tilog = global.get('tilog')(botname, datamsg);\n    tilog;\n\n    node.status({ fill: \"green\", shape: \"dot\" });\n    node.send(msg);\n\n}).catch(error => {\n\n    //>трекер>\n    let end_node_time = new Date().getTime();\n    let duration = end_node_time - start_node_time;\n    let duration_step = end_node_time - last_node_end_time;\n    track.push({\n        \"steptitle\": steptitle + \"-faile\",\n        \"start_node_time\": start_node_time,\n        \"end_node_time\": end_node_time,\n        \"duration\": duration,\n        \"duration_step\": duration_step,\n        \"error\": error\n    });\n    flow.set(trackname, track);\n    //>трекер>\n\n    node.status({ fill: \"red\", shape: \"dot\" });\n    node.error(error);\n});\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2770,
        "y": 1540,
        "wires": [
            [
                "cd39e428fe33cf64",
                "fc7930fb78f1189d"
            ]
        ]
    },
    {
        "id": "cd39e428fe33cf64",
        "type": "debug",
        "z": "476b070518efd452",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 2790,
        "y": 1500,
        "wires": []
    },
    {
        "id": "53d062d6da522735",
        "type": "function",
        "z": "476b070518efd452",
        "name": "prepare get ttp order price",
        "func": "\n\nlet moneta = msg.bot.settings.moneta;\nlet orderid = msg.bot.ttp.finalorder;\n\nmsg.payload = [];\nmsg.topic = \"orders-status-\" + msg.bot.settings.userid + \":\" + moneta + \":\" + orderid + \"-price\";\n\n\n\n\nnode.status({fill: \"green\", shape: \"ring\", text: orderid});\nreturn msg;\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2340,
        "y": 1540,
        "wires": [
            [
                "34e9ac76cd08bf3d"
            ]
        ],
        "inputLabels": [
            "orderid"
        ],
        "outputLabels": [
            "status"
        ],
        "icon": "node-red-contrib-binance/binance.png"
    },
    {
        "id": "34e9ac76cd08bf3d",
        "type": "redis-command",
        "z": "476b070518efd452",
        "server": "f120eab2.0a60a8",
        "command": "GET",
        "name": "get order status",
        "topic": "msg.payload",
        "params": "[]",
        "paramsType": "json",
        "payloadType": "json",
        "block": false,
        "x": 2580,
        "y": 1540,
        "wires": [
            [
                "bcbe6ac24162f1e4"
            ]
        ]
    },
    {
        "id": "fc7930fb78f1189d",
        "type": "link out",
        "z": "476b070518efd452",
        "name": "",
        "links": [
            "6bc676d5547374d8"
        ],
        "x": 2895,
        "y": 1540,
        "wires": []
    },
    {
        "id": "ff57eb4d2025487b",
        "type": "debug",
        "z": "476b070518efd452",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1790,
        "y": 1540,
        "wires": []
    },
    {
        "id": "66a51493a6eab261",
        "type": "function",
        "z": "476b070518efd452",
        "name": "msg = {}",
        "func": "msg = {};\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2140,
        "y": 1740,
        "wires": [
            [
                "dae78de7feb0d4c2"
            ]
        ]
    },
    {
        "id": "dae78de7feb0d4c2",
        "type": "redis-out",
        "z": "476b070518efd452",
        "server": "f120eab2.0a60a8",
        "command": "publish",
        "name": "",
        "topic": "stop",
        "obj": true,
        "x": 2380,
        "y": 1720,
        "wires": []
    },
    {
        "id": "f0abc8e033dca6ab",
        "type": "delay",
        "z": "476b070518efd452",
        "name": "",
        "pauseType": "delay",
        "timeout": "4",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "x": 2320,
        "y": 1760,
        "wires": [
            [
                "d30d9f25b83ced4e"
            ]
        ]
    },
    {
        "id": "d30d9f25b83ced4e",
        "type": "redis-out",
        "z": "476b070518efd452",
        "server": "f120eab2.0a60a8",
        "command": "publish",
        "name": "",
        "topic": "start",
        "obj": false,
        "x": 2480,
        "y": 1760,
        "wires": []
    },
    {
        "id": "4c9d2eed5117518a",
        "type": "debug",
        "z": "476b070518efd452",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 2290,
        "y": 800,
        "wires": []
    },
    {
        "id": "afeed900eed91ee7",
        "type": "debug",
        "z": "476b070518efd452",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 2050,
        "y": 740,
        "wires": []
    },
    {
        "id": "0619e7a5f913bb24",
        "type": "catch",
        "z": "476b070518efd452",
        "name": "",
        "scope": [
            "1cd8cc8554e74af0"
        ],
        "uncaught": false,
        "x": 1950,
        "y": 640,
        "wires": [
            [
                "d0d2b605c7c53f57"
            ]
        ]
    },
    {
        "id": "d0d2b605c7c53f57",
        "type": "debug",
        "z": "476b070518efd452",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 2070,
        "y": 640,
        "wires": []
    },
    {
        "id": "13434474d217e175",
        "type": "inject",
        "z": "476b070518efd452",
        "g": "90093d1f3e82603a",
        "name": " stop",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "reset",
                "v": "true",
                "vt": "bool"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 1950,
        "y": 100,
        "wires": [
            [
                "dd362a5efada30f0"
            ]
        ]
    },
    {
        "id": "dd362a5efada30f0",
        "type": "redis-out",
        "z": "476b070518efd452",
        "g": "90093d1f3e82603a",
        "server": "f120eab2.0a60a8",
        "command": "publish",
        "name": "",
        "topic": "stop",
        "obj": false,
        "x": 1950,
        "y": 140,
        "wires": []
    },
    {
        "id": "69218c86cfb23eee",
        "type": "inject",
        "z": "476b070518efd452",
        "g": "90093d1f3e82603a",
        "name": "start",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 1530,
        "y": 100,
        "wires": [
            [
                "75b12400e93abb55"
            ]
        ]
    },
    {
        "id": "75b12400e93abb55",
        "type": "redis-out",
        "z": "476b070518efd452",
        "g": "90093d1f3e82603a",
        "server": "f120eab2.0a60a8",
        "command": "publish",
        "name": "",
        "topic": "start",
        "obj": false,
        "x": 1530,
        "y": 140,
        "wires": []
    },
    {
        "id": "7d0e92a293453128",
        "type": "inject",
        "z": "476b070518efd452",
        "g": "90093d1f3e82603a",
        "name": "start1",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 1710,
        "y": 100,
        "wires": [
            [
                "3802babc0bf4e041"
            ]
        ]
    },
    {
        "id": "3802babc0bf4e041",
        "type": "redis-out",
        "z": "476b070518efd452",
        "g": "90093d1f3e82603a",
        "server": "f120eab2.0a60a8",
        "command": "publish",
        "name": "",
        "topic": "start1",
        "obj": false,
        "x": 1710,
        "y": 140,
        "wires": []
    },
    {
        "id": "ac0b473ca8f11faf",
        "type": "redis-instance",
        "z": "476b070518efd452",
        "g": "90093d1f3e82603a",
        "server": "f120eab2.0a60a8",
        "name": "",
        "topic": "redis",
        "location": "flow",
        "x": 2150,
        "y": 120,
        "wires": []
    },
    {
        "id": "7ee13f173b1ed22b",
        "type": "inject",
        "z": "476b070518efd452",
        "g": "5063e471deb87919",
        "name": " stop",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "reset",
                "v": "true",
                "vt": "bool"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 610,
        "y": 1720,
        "wires": [
            [
                "30d1f7c41bbee26d"
            ]
        ]
    },
    {
        "id": "30d1f7c41bbee26d",
        "type": "redis-out",
        "z": "476b070518efd452",
        "g": "5063e471deb87919",
        "server": "f120eab2.0a60a8",
        "command": "publish",
        "name": "",
        "topic": "stop",
        "obj": false,
        "x": 610,
        "y": 1760,
        "wires": []
    },
    {
        "id": "cc589b8aa1d88bf9",
        "type": "inject",
        "z": "476b070518efd452",
        "g": "5063e471deb87919",
        "name": "start",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 190,
        "y": 1720,
        "wires": [
            [
                "9578b95829d4d3c9"
            ]
        ]
    },
    {
        "id": "9578b95829d4d3c9",
        "type": "redis-out",
        "z": "476b070518efd452",
        "g": "5063e471deb87919",
        "server": "f120eab2.0a60a8",
        "command": "publish",
        "name": "",
        "topic": "start",
        "obj": false,
        "x": 190,
        "y": 1760,
        "wires": []
    },
    {
        "id": "d321d414f5fd4ad7",
        "type": "inject",
        "z": "476b070518efd452",
        "g": "5063e471deb87919",
        "name": "start1",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 370,
        "y": 1720,
        "wires": [
            [
                "8e7db1953351afd8"
            ]
        ]
    },
    {
        "id": "8e7db1953351afd8",
        "type": "redis-out",
        "z": "476b070518efd452",
        "g": "5063e471deb87919",
        "server": "f120eab2.0a60a8",
        "command": "publish",
        "name": "",
        "topic": "start1",
        "obj": false,
        "x": 370,
        "y": 1760,
        "wires": []
    },
    {
        "id": "d49b3cf43100e984",
        "type": "function",
        "z": "476b070518efd452",
        "g": "928a15b0fd8b6f59",
        "name": "duration",
        "func": "    let trackname = \"ttp-track-\"+msg.botname;\n    let track = flow.get(trackname);\n\nlet laststep = track[track.length-1];\nlet firststep = track[0];\nlet last_node_end_time = laststep.end_node_time;\nlet first_node_start_time = firststep.start_node_time;\n\nlet duration = last_node_end_time - first_node_start_time;\n//node.warn(duration);\nmsg.payload = duration;\n    \nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 3140,
        "y": 400,
        "wires": [
            [
                "48b696286badd140",
                "500abfb6cf4c0d0d"
            ]
        ]
    },
    {
        "id": "48b696286badd140",
        "type": "debug",
        "z": "476b070518efd452",
        "g": "928a15b0fd8b6f59",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 3310,
        "y": 440,
        "wires": []
    },
    {
        "id": "500abfb6cf4c0d0d",
        "type": "ui_chart",
        "z": "476b070518efd452",
        "g": "928a15b0fd8b6f59",
        "name": "",
        "group": "f244fee6.d2627",
        "order": 0,
        "width": "4",
        "height": "7",
        "label": "ttp track",
        "chartType": "line",
        "legend": "false",
        "xformat": "ss",
        "interpolate": "cubic",
        "nodata": "",
        "dot": true,
        "ymin": "",
        "ymax": "",
        "removeOlder": "10",
        "removeOlderPoints": "40",
        "removeOlderUnit": "1",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": true,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9a244f",
            "#c5b0d5"
        ],
        "outputs": 1,
        "x": 3300,
        "y": 400,
        "wires": [
            []
        ]
    },
    {
        "id": "76090516a9c9f733",
        "type": "debug",
        "z": "476b070518efd452",
        "g": "928a15b0fd8b6f59",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 2910,
        "y": 420,
        "wires": []
    },
    {
        "id": "24cea76ef5641007",
        "type": "comment",
        "z": "476b070518efd452",
        "g": "928a15b0fd8b6f59",
        "name": "Финиш трека. Семафор = \"Свободно\"",
        "info": "",
        "x": 2880,
        "y": 300,
        "wires": []
    },
    {
        "id": "7bad6997813c6d63",
        "type": "function",
        "z": "476b070518efd452",
        "g": "928a15b0fd8b6f59",
        "name": "setttp_free",
        "func": "//<трекер<\n    let trackname = \"ttp-track-\"+msg.botname;\n    let track = flow.get(trackname);\n    let start_node_time = new Date().getTime();\n    let steptitle = node.name;\n\n    let laststep = track[track.length-1];\n    let last_node_end_time = laststep.end_node_time;\n    \n    let firststep = track[0];\n    let first_node_start_time = firststep.start_node_time;\n    \n    let duration_track = last_node_end_time - first_node_start_time;\n//>трекер>\n\nconst upd = global.get('setttp_free')(msg.botname);\n\nupd.then(upd => {\n\n    //>трекер>\n        let end_node_time = new Date().getTime();\n        let duration = end_node_time - start_node_time;\n        let duration_step = end_node_time - last_node_end_time;\n        track.push({\n            \"steptitle\": steptitle,\n            \"start_node_time\": start_node_time,\n            \"end_node_time\": end_node_time,\n            \"duration_node\": duration,\n            \"duration_step\": duration_track //только для финишной ноды\n        });\n\n        \n        flow.set(trackname, track);\n        \n       \n    //>трекер>\n\n    let id = msg.botname + \"-ttp\";\n    flow.set(id, 0);\n    \n    node.status({fill:\"green\",shape:\"dot\"});\n    \n    node.send(msg);\n\n}).catch(error => {\n    //>трекер>\n        let end_node_time = new Date().getTime();\n        let duration = end_node_time - start_node_time;\n        let duration_step = end_node_time - last_node_end_time;\n        track.push({\n            \"steptitle\": steptitle+\"-faile\",\n            \"start_node_time\": start_node_time,\n            \"end_node_time\": end_node_time,\n            \"duration\": duration,\n            \"duration_step\": duration_step,\n            \"error\": error\n        });\n        flow.set(trackname, track);\n    //>трекер>\n    node.status({fill:\"red\",shape:\"dot\"});\n\n    node.error(error);\n});",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2890,
        "y": 360,
        "wires": [
            [
                "76090516a9c9f733",
                "d49b3cf43100e984",
                "99c9b0d68305f423"
            ]
        ],
        "icon": "font-awesome/fa-bolt"
    },
    {
        "id": "d984a56b748a1b47",
        "type": "function",
        "z": "476b070518efd452",
        "g": "928a15b0fd8b6f59",
        "name": "tester___",
        "func": "let start_node_time = new Date().getTime();\n\nnode.status({fill: \"green\", shape: \"ring\", text: start_node_time});\n    \n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 2760,
        "y": 440,
        "wires": [
            []
        ]
    },
    {
        "id": "5d2dd8b63ca2642e",
        "type": "debug",
        "z": "476b070518efd452",
        "g": "928a15b0fd8b6f59",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 3210,
        "y": 280,
        "wires": []
    },
    {
        "id": "f86d915a928bcd39",
        "type": "filter",
        "z": "2a761808.610238",
        "g": "f4f90b1391070951",
        "name": "filter off",
        "property": "bot.onoff",
        "propertyType": "msg",
        "asArray": false,
        "itemProperty": "",
        "itemPropertyType": "item",
        "rules": [
            {
                "t": "true",
                "output": 1
            }
        ],
        "checkall": "true",
        "outputs": 1,
        "x": 1280,
        "y": 200,
        "wires": [
            [
                "3c03470a.507ec8",
                "c7aec4b9cc156a78"
            ]
        ]
    },
    {
        "id": "6bc749d6aa184468",
        "type": "debug",
        "z": "2a761808.610238",
        "g": "f4f90b1391070951",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1290,
        "y": 120,
        "wires": []
    },
    {
        "id": "175ac72efd396d95",
        "type": "function",
        "z": "2a761808.610238",
        "g": "f4f90b1391070951",
        "name": "getbotlist",
        "func": "let a = global.get(\"botlist\");\nmsg.payload = a;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 740,
        "y": 200,
        "wires": [
            [
                "d65d088c5ac03f65"
            ]
        ]
    },
    {
        "id": "d65d088c5ac03f65",
        "type": "split",
        "z": "2a761808.610238",
        "g": "f4f90b1391070951",
        "name": "",
        "splt": "1",
        "spltType": "len",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "x": 890,
        "y": 200,
        "wires": [
            [
                "bbf71857d7b3aa11"
            ]
        ]
    },
    {
        "id": "bbf71857d7b3aa11",
        "type": "function",
        "z": "2a761808.610238",
        "g": "f4f90b1391070951",
        "name": "getbot global",
        "func": "\nlet botname = msg.payload;\nmsg.botname = botname;\n\nlet bot = global.get(botname);\nmsg.bot = bot;\n\nlet ttp = global.get(msg.botname + \"-ttp\");\nmsg.bot.ttp = ttp;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1070,
        "y": 200,
        "wires": [
            [
                "6bc749d6aa184468",
                "f86d915a928bcd39"
            ]
        ]
    },
    {
        "id": "8cc08f5b.14782",
        "type": "function",
        "z": "2a761808.610238",
        "g": "93bf1a09029b1ecf",
        "name": "duration",
        "func": "    let trackname = \"ttp-track-\"+msg.botname;\n    let track = flow.get(trackname);\n\nlet laststep = track[track.length-1];\nlet firststep = track[0];\nlet last_node_end_time = laststep.end_node_time;\nlet first_node_start_time = firststep.start_node_time;\n\nlet duration = last_node_end_time - first_node_start_time;\n//node.warn(duration);\nmsg.payload = duration;\n    \nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 2880,
        "y": 200,
        "wires": [
            [
                "60eb6ef5.3e20b"
            ]
        ]
    },
    {
        "id": "60eb6ef5.3e20b",
        "type": "ui_chart",
        "z": "2a761808.610238",
        "g": "93bf1a09029b1ecf",
        "name": "",
        "group": "f244fee6.d2627",
        "order": 0,
        "width": "4",
        "height": "7",
        "label": "ttp track",
        "chartType": "line",
        "legend": "false",
        "xformat": "ss",
        "interpolate": "cubic",
        "nodata": "",
        "dot": true,
        "ymin": "",
        "ymax": "",
        "removeOlder": "10",
        "removeOlderPoints": "100",
        "removeOlderUnit": "1",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9a244f",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "x": 3040,
        "y": 200,
        "wires": [
            []
        ]
    },
    {
        "id": "9f535577.3cdc98",
        "type": "debug",
        "z": "2a761808.610238",
        "g": "93bf1a09029b1ecf",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 2690,
        "y": 240,
        "wires": []
    },
    {
        "id": "203e6ef2.430c62",
        "type": "comment",
        "z": "2a761808.610238",
        "g": "93bf1a09029b1ecf",
        "name": "Финиш трека. Семафор = \"Свободно\"",
        "info": "",
        "x": 2760,
        "y": 140,
        "wires": []
    },
    {
        "id": "26cad534.28973a",
        "type": "function",
        "z": "2a761808.610238",
        "g": "93bf1a09029b1ecf",
        "name": "setttp_free, update global ttp",
        "func": "//<трекер<\nlet trackname = \"ttp-track-\" + msg.botname;\nlet track = flow.get(trackname);\nlet start_node_time = new Date().getTime();\nlet steptitle = node.name;\n\nlet laststep = track[track.length - 1];\nlet last_node_end_time = laststep.end_node_time;\n\nlet firststep = track[0];\nlet first_node_start_time = firststep.start_node_time;\n\nlet duration_track = last_node_end_time - first_node_start_time;\n//>трекер>\n\n\n\n//>трекер>\nlet end_node_time = new Date().getTime();\nlet duration = end_node_time - start_node_time;\nlet duration_step = end_node_time - last_node_end_time;\ntrack.push({\n    \"steptitle\": steptitle,\n    \"start_node_time\": start_node_time,\n    \"end_node_time\": end_node_time,\n    \"duration_node\": duration,\n    \"duration_step\": duration_track //только для финишной ноды\n});\n\n\nflow.set(trackname, track);\n\n\n//>трекер>\n\nmsg.bot.ttp.ttpbusy = false;\n\n\nglobal.set(msg.botname + \"-ttp\", msg.bot.ttp);\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2680,
        "y": 200,
        "wires": [
            [
                "8cc08f5b.14782",
                "9f535577.3cdc98"
            ]
        ],
        "icon": "font-awesome/fa-bolt"
    },
    {
        "id": "79c849c0dbfa5d25",
        "type": "delay",
        "z": "2a761808.610238",
        "name": "",
        "pauseType": "delay",
        "timeout": "3",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "x": 720,
        "y": 1760,
        "wires": [
            [
                "74bba3301ae3c8e3"
            ]
        ]
    },
    {
        "id": "cc8156f9e3f2e4ef",
        "type": "function",
        "z": "5df15275.2888ec",
        "name": "getbot_ttp",
        "func": "msg.botname = msg.payload;\nlet bot = {};\nmsg.bot = bot;\n\nconst gb = global.get('getbot_ttp')(msg.botname);\n\ngb.then(gb => {\n    msg.bot.ttp = JSON.parse(gb);\n    \n    node.status({ fill: \"green\", shape: \"dot\" });\n\n    node.send(msg);\n\n}).catch(error => {\n    \n    \n    node.status({ fill: \"red\", shape: \"dot\" });\n    node.error(error);\n});",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 790,
        "y": 360,
        "wires": [
            [
                "d93ae22cd1d45e58"
            ]
        ]
    },
    {
        "id": "d93ae22cd1d45e58",
        "type": "function",
        "z": "5df15275.2888ec",
        "name": "global.set(msg.botname+\"-ttp\", msg.bot.ttp);",
        "func": "\nglobal.set(msg.botname+\"-ttp\", msg.bot.ttp);\nnode.status({ fill: \"green\", shape: \"dot\" });\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1070,
        "y": 360,
        "wires": [
            []
        ]
    },
    {
        "id": "dfacea07fd7aa9ae",
        "type": "function",
        "z": "2a761808.610238",
        "name": "setbot_ttp",
        "func": "//<трекер<\nlet trackname = \"ttp-track-\" + msg.botname;\nlet track = flow.get(trackname);\nlet start_node_time = new Date().getTime();\nlet steptitle = node.name;\n\nlet laststep = track[track.length - 1];\nlet last_node_end_time = laststep.end_node_time;\n//>трекер>\n\n\nmsg.bot.ttp.final_price = msg.payload;\n//msg.bot.ttp.final_quantity = msg.bot.ttp.quantity;\n//msg.bot.ttp.quantity = 0;\n\nmsg.topic = msg.bot.settings.userid + \"-bots:\" + msg.bot.settings.botname + \":ttp\";\nmsg.payload = JSON.stringify(msg.bot.ttp);\n\nconst upd = global.get('setbot_ttp')(msg.topic, msg.payload);\n\nupd.then(upd => {\n\n    msg.topic = [];\n\n    //>трекер>\n    let end_node_time = new Date().getTime();\n    let duration = end_node_time - start_node_time;\n    let duration_step = end_node_time - last_node_end_time;\n    track.push({\n        \"steptitle\": steptitle,\n        \"start_node_time\": start_node_time,\n        \"end_node_time\": end_node_time,\n        \"duration_node\": duration,\n        \"duration_step\": duration_step\n    });\n    flow.set(trackname, track);\n    //>трекер>\n\n    let botname = msg.botname;\n    let datamsg = \"ttp finish on \" + msg.bot.ttp.final_price;\n    const tilog = global.get('tilog')(botname, datamsg);\n    tilog;\n\n    node.status({ fill: \"green\", shape: \"dot\" });\n    node.send(msg);\n\n}).catch(error => {\n\n    //>трекер>\n    let end_node_time = new Date().getTime();\n    let duration = end_node_time - start_node_time;\n    let duration_step = end_node_time - last_node_end_time;\n    track.push({\n        \"steptitle\": steptitle + \"-faile\",\n        \"start_node_time\": start_node_time,\n        \"end_node_time\": end_node_time,\n        \"duration\": duration,\n        \"duration_step\": duration_step,\n        \"error\": error\n    });\n    flow.set(trackname, track);\n    //>трекер>\n\n    node.status({ fill: \"red\", shape: \"dot\" });\n    node.error(error);\n});\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2790,
        "y": 520,
        "wires": [
            []
        ]
    },
    {
        "id": "06e4c0f51ed015ab",
        "type": "debug",
        "z": "2a761808.610238",
        "g": "f4f90b1391070951",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1630,
        "y": 140,
        "wires": []
    },
    {
        "id": "91c2610dc3c1bd01",
        "type": "debug",
        "z": "2a761808.610238",
        "g": "f4f90b1391070951",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1830,
        "y": 140,
        "wires": []
    },
    {
        "id": "c7aec4b9cc156a78",
        "type": "debug",
        "z": "2a761808.610238",
        "g": "f4f90b1391070951",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1450,
        "y": 120,
        "wires": []
    },
    {
        "id": "84372d0e6d93e364",
        "type": "function",
        "z": "2a761808.610238",
        "name": "tester___",
        "func": "let start_node_time = new Date().getTime();\n\nnode.status({fill: \"green\", shape: \"ring\", text: start_node_time});\n    \n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 2400,
        "y": 120,
        "wires": [
            []
        ]
    },
    {
        "id": "7db357973ec21c20",
        "type": "debug",
        "z": "5f98db3a.7ab21c",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 2710,
        "y": 1140,
        "wires": []
    },
    {
        "id": "f8cd782d3223fa1e",
        "type": "switch",
        "z": "5df15275.2888ec",
        "g": "7cf2ce1ee9aa09a0",
        "name": "try second",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "nempty"
            },
            {
                "t": "empty"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 1650,
        "y": 740,
        "wires": [
            [
                "c3754613797a5259"
            ],
            [
                "907b2cc664741e24",
                "b082667c299cc83e"
            ]
        ]
    },
    {
        "id": "907b2cc664741e24",
        "type": "debug",
        "z": "5df15275.2888ec",
        "g": "7cf2ce1ee9aa09a0",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1670,
        "y": 780,
        "wires": []
    },
    {
        "id": "042f3914a0a15bd1",
        "type": "trigger",
        "z": "5df15275.2888ec",
        "g": "d45e3611d1eb4d7c",
        "name": "",
        "op1": "1",
        "op2": "0",
        "op1type": "str",
        "op2type": "str",
        "duration": "-3",
        "extend": false,
        "overrideDelay": false,
        "units": "s",
        "reset": "",
        "bytopic": "all",
        "topic": "topic",
        "outputs": 1,
        "x": 520,
        "y": 500,
        "wires": [
            [
                "5f90fe219f3162fa"
            ]
        ]
    },
    {
        "id": "7c67107cf032f617",
        "type": "redis-in",
        "z": "5df15275.2888ec",
        "g": "d45e3611d1eb4d7c",
        "server": "f120eab2.0a60a8",
        "command": "subscribe",
        "name": "",
        "topic": "stop",
        "obj": true,
        "timeout": 0,
        "x": 130,
        "y": 560,
        "wires": [
            [
                "62dbb0111ba3a832"
            ]
        ]
    },
    {
        "id": "62dbb0111ba3a832",
        "type": "function",
        "z": "5df15275.2888ec",
        "g": "d45e3611d1eb4d7c",
        "name": "stop",
        "func": "msg.reset = true;\nmsg.payload = \"\";\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 270,
        "y": 560,
        "wires": [
            [
                "042f3914a0a15bd1"
            ]
        ]
    },
    {
        "id": "eeaeeab96ef014a9",
        "type": "redis-in",
        "z": "5df15275.2888ec",
        "g": "d45e3611d1eb4d7c",
        "server": "f120eab2.0a60a8",
        "command": "subscribe",
        "name": "",
        "topic": "start",
        "obj": true,
        "timeout": 0,
        "x": 130,
        "y": 500,
        "wires": [
            [
                "0ec009c807fdf6b6"
            ]
        ]
    },
    {
        "id": "0ec009c807fdf6b6",
        "type": "delay",
        "z": "5df15275.2888ec",
        "g": "d45e3611d1eb4d7c",
        "name": "",
        "pauseType": "delay",
        "timeout": "2",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "x": 280,
        "y": 500,
        "wires": [
            [
                "042f3914a0a15bd1"
            ]
        ]
    },
    {
        "id": "dd6e8b7c3cd4bd8f",
        "type": "redis-in",
        "z": "5df15275.2888ec",
        "g": "d45e3611d1eb4d7c",
        "server": "f120eab2.0a60a8",
        "command": "subscribe",
        "name": "",
        "topic": "start1",
        "obj": true,
        "timeout": 0,
        "x": 490,
        "y": 560,
        "wires": [
            [
                "20e5dbec70a2054f"
            ]
        ]
    },
    {
        "id": "5f90fe219f3162fa",
        "type": "function",
        "z": "5df15275.2888ec",
        "g": "d45e3611d1eb4d7c",
        "name": "getbotlist",
        "func": "let a = global.get(\"botlist\");\nmsg.payload = a;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 720,
        "y": 500,
        "wires": [
            [
                "ce5d5670a383e6ea"
            ]
        ]
    },
    {
        "id": "ce5d5670a383e6ea",
        "type": "split",
        "z": "5df15275.2888ec",
        "g": "d45e3611d1eb4d7c",
        "name": "",
        "splt": "1",
        "spltType": "len",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "x": 870,
        "y": 500,
        "wires": [
            [
                "449d486fe59111a1"
            ]
        ]
    },
    {
        "id": "449d486fe59111a1",
        "type": "function",
        "z": "5df15275.2888ec",
        "g": "d45e3611d1eb4d7c",
        "name": "getbot global",
        "func": "\nlet botname = msg.payload;\nmsg.botname = botname;\nlet bot = global.get(botname);\nmsg.bot = bot;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1030,
        "y": 500,
        "wires": [
            [
                "1e593dd0188fc77e"
            ]
        ]
    },
    {
        "id": "20e5dbec70a2054f",
        "type": "delay",
        "z": "5df15275.2888ec",
        "g": "d45e3611d1eb4d7c",
        "name": "",
        "pauseType": "delay",
        "timeout": "50",
        "timeoutUnits": "milliseconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "x": 650,
        "y": 560,
        "wires": [
            [
                "5f90fe219f3162fa"
            ]
        ]
    },
    {
        "id": "1e593dd0188fc77e",
        "type": "function",
        "z": "5df15275.2888ec",
        "g": "d45e3611d1eb4d7c",
        "name": "getbot_ttp",
        "func": "let a = global.get(msg.botname + \"-ttp\");\nmsg.bot.ttp = a;\nreturn msg;\n\n\n//const gb = global.get('getbot_ttp')(msg.bot.settings.botname);\n//\n//gb.then(gb => {\n//    msg.bot.ttp = JSON.parse(gb);\n//    \n//node.status({fill: \"green\", shape: \"ring\"});\n//\n//    node.send(msg);\n//\n//}).catch(error => {\n//    \n//    \n//    node.status({fill: \"red\", shape: \"ring\", text: \"error\"});\n//    node.error(error);\n//});",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1210,
        "y": 500,
        "wires": [
            [
                "9ed590fb177c65fa",
                "b71ccac226cfd352"
            ]
        ]
    },
    {
        "id": "c60bf2d6f98b0d01",
        "type": "redis-out",
        "z": "5df15275.2888ec",
        "g": "d45e3611d1eb4d7c",
        "server": "f120eab2.0a60a8",
        "command": "publish",
        "name": "",
        "topic": "",
        "obj": true,
        "x": 1680,
        "y": 560,
        "wires": []
    },
    {
        "id": "b71ccac226cfd352",
        "type": "function",
        "z": "5df15275.2888ec",
        "g": "d45e3611d1eb4d7c",
        "name": "task update floos finace sales",
        "func": "msg.topic = \"MUT\";\n\nlet cmd = \"update\";\n\nlet data = {\n    \"botname\": msg.botname,\n    \"cmd\": cmd,\n    \"floors\": msg.bot.floors,\n    \"finance\": msg.bot.finance,\n    \"sales\": msg.bot.sales\n\n}\nmsg.payload = {cmd, data};\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1450,
        "y": 560,
        "wires": [
            [
                "c60bf2d6f98b0d01"
            ]
        ]
    },
    {
        "id": "9ed590fb177c65fa",
        "type": "function",
        "z": "5df15275.2888ec",
        "g": "d45e3611d1eb4d7c",
        "name": "setbot_ttp to redis",
        "func": "\nmsg.topic = msg.bot.settings.userid + \"-bots:\" + msg.bot.settings.botname + \":ttp\";\nmsg.payload = JSON.stringify(msg.bot.ttp);\n\nconst upd = global.get('setbot_ttp')(msg.topic, msg.payload);\n\nupd.then(upd => {\n\n    node.status({ fill: \"green\", shape: \"dot\" });\n    node.send(msg);\n\n}).catch(error => {\n\n    node.status({ fill: \"red\", shape: \"dot\" });\n    node.error(error);\n});\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1410,
        "y": 500,
        "wires": [
            []
        ]
    },
    {
        "id": "09ccb3a61ebb95eb",
        "type": "function",
        "z": "5df15275.2888ec",
        "name": "сброс счетчиков busy",
        "func": "//сброс счетчиков busy\nflow.set(msg.botname, 0);\nflow.set(msg.botname + \"-ttp\", 0);\nmsg.bot.busy = false;\nmsg.bot.ttp.ttpbusy = false;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2390,
        "y": 300,
        "wires": [
            [
                "6f4a714290c3b59b"
            ]
        ],
        "icon": "font-awesome/fa-bolt"
    },
    {
        "id": "568bf479a68ab1cd",
        "type": "comment",
        "z": "5df15275.2888ec",
        "name": "",
        "info": "",
        "x": 1660,
        "y": 100,
        "wires": []
    },
    {
        "id": "dc32ea6b5cc8b3a0",
        "type": "function",
        "z": "2a761808.610238",
        "name": "setbot_ttp",
        "func": "global.set(msg.botname + \"-ttp\", msg.bot.ttp);\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2790,
        "y": 560,
        "wires": [
            []
        ],
        "icon": "font-awesome/fa-bolt"
    },
    {
        "id": "5890758ada12b47b",
        "type": "function",
        "z": "2a761808.610238",
        "name": "calculate quantity",
        "func": "var floors = msg.bot.floors;\nlet quantity = 0;\n\nfloors.forEach(function (item, i, floors) {\n\n    if (item[7] === 3) {\n\n        quantity = Number(quantity) + Number(item[14]);\n\n\n    }\n});\n\n\n\n\nmsg.bot.ttp.quantity = Number(quantity);\n\n\nreturn msg;\n\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 510,
        "y": 540,
        "wires": [
            [
                "eb0cfd256b009b25"
            ]
        ]
    },
    {
        "id": "eb0cfd256b009b25",
        "type": "switch",
        "z": "2a761808.610238",
        "name": "quantity > 0 ",
        "property": "bot.ttp.quantity",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "0",
                "vt": "num"
            },
            {
                "t": "gt",
                "v": "0",
                "vt": "num"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 710,
        "y": 540,
        "wires": [
            [
                "400703b3d0a09d2f",
                "20c1f9ea417a9489"
            ],
            [
                "8cc76823.4b4e68",
                "534c6e0e72f6f9fe"
            ]
        ]
    },
    {
        "id": "400703b3d0a09d2f",
        "type": "link out",
        "z": "2a761808.610238",
        "name": "",
        "links": [
            "ccd55cdb.7ed72"
        ],
        "x": 865,
        "y": 500,
        "wires": []
    },
    {
        "id": "20c1f9ea417a9489",
        "type": "function",
        "z": "2a761808.610238",
        "name": "tester___",
        "func": "let start_node_time = new Date().getTime();\n\nnode.status({fill: \"green\", shape: \"ring\", text: start_node_time});\n    \n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 980,
        "y": 500,
        "wires": [
            []
        ]
    },
    {
        "id": "534c6e0e72f6f9fe",
        "type": "function",
        "z": "2a761808.610238",
        "name": "tester___",
        "func": "let start_node_time = new Date().getTime();\n\nnode.status({fill: \"green\", shape: \"ring\", text: start_node_time});\n    \n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 980,
        "y": 560,
        "wires": [
            []
        ]
    },
    {
        "id": "fe5f4964aa470c3b",
        "type": "function",
        "z": "5df15275.2888ec",
        "g": "d4a5f2307ef8b222",
        "name": "setbot_ttp",
        "func": "\nmsg.topic = msg.bot.settings.userid+\"-bots:\"+msg.bot.settings.botname+\":ttp\";\n\nmsg.payload = JSON.stringify(msg.bot.ttp);\nconst upd = global.get('setbot_ttp')(msg.topic, msg.payload);\n\n\nupd.then(upd => {\n\n\n    node.status({fill:\"green\",shape:\"dot\"});\n    \n    //let botname = msg.botname;\n    //let datamsg = \"выставили ttp ордер\";\n    //const tilog = global.get('tilog')(botname,datamsg);\n    //tilog;\n    \n    node.send(msg);\n\n}).catch(error => {\n\n    node.status({fill:\"red\",shape:\"dot\"}); \n    node.error(error);\n});",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1730,
        "y": 1780,
        "wires": [
            []
        ],
        "icon": "font-awesome/fa-bolt"
    },
    {
        "id": "efa132132a7fa5d7",
        "type": "link in",
        "z": "5df15275.2888ec",
        "name": "",
        "links": [
            "f937bdc295f372a8"
        ],
        "x": 1905,
        "y": 120,
        "wires": [
            [
                "8e747d7d4ec5b050"
            ]
        ]
    },
    {
        "id": "f937bdc295f372a8",
        "type": "link out",
        "z": "5df15275.2888ec",
        "name": "",
        "links": [
            "efa132132a7fa5d7"
        ],
        "x": 2375,
        "y": 900,
        "wires": []
    },
    {
        "id": "8e747d7d4ec5b050",
        "type": "function",
        "z": "5df15275.2888ec",
        "name": "tester___",
        "func": "let start_node_time = new Date().getTime();\n\nnode.status({fill: \"green\", shape: \"ring\", text: start_node_time});\n    \n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2000,
        "y": 120,
        "wires": [
            []
        ]
    },
    {
        "id": "f5fcc7414475be12",
        "type": "comment",
        "z": "5df15275.2888ec",
        "name": "main track",
        "info": "",
        "x": 2000,
        "y": 80,
        "wires": []
    },
    {
        "id": "365e54e1b5c77315",
        "type": "link out",
        "z": "2a761808.610238",
        "name": "to tester",
        "links": [
            "1719022f8617153c"
        ],
        "x": 2335,
        "y": 120,
        "wires": []
    },
    {
        "id": "1719022f8617153c",
        "type": "link in",
        "z": "5df15275.2888ec",
        "name": "",
        "links": [
            "365e54e1b5c77315"
        ],
        "x": 2215,
        "y": 120,
        "wires": [
            [
                "c4ba62796dfec943"
            ]
        ]
    },
    {
        "id": "c4ba62796dfec943",
        "type": "function",
        "z": "5df15275.2888ec",
        "name": "tester___",
        "func": "let start_node_time = new Date().getTime();\n\nnode.status({fill: \"green\", shape: \"ring\", text: start_node_time});\n    \n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2310,
        "y": 120,
        "wires": [
            []
        ]
    },
    {
        "id": "64dc395af95431e1",
        "type": "comment",
        "z": "5df15275.2888ec",
        "name": "ttp track",
        "info": "",
        "x": 2310,
        "y": 80,
        "wires": []
    },
    {
        "id": "15ed4f36d4e7c9da",
        "type": "debug",
        "z": "2a761808.610238",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 690,
        "y": 1600,
        "wires": []
    },
    {
        "id": "217c43fc2b7e5524",
        "type": "debug",
        "z": "2a761808.610238",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 710,
        "y": 1640,
        "wires": []
    },
    {
        "id": "8e29837282996a31",
        "type": "debug",
        "z": "2a761808.610238",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 390,
        "y": 1540,
        "wires": []
    },
    {
        "id": "293e3cd4899c16c5",
        "type": "debug",
        "z": "2a761808.610238",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1430,
        "y": 1020,
        "wires": []
    },
    {
        "id": "ae92ec1796ac14de",
        "type": "function",
        "z": "2a761808.610238",
        "name": "tester___",
        "func": "let start_node_time = new Date().getTime();\n\nnode.status({fill: \"green\", shape: \"ring\", text: start_node_time});\n    \n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 840,
        "y": 1600,
        "wires": [
            []
        ]
    },
    {
        "id": "87238f2de96efe56",
        "type": "function",
        "z": "2a761808.610238",
        "name": "tester___",
        "func": "let start_node_time = new Date().getTime();\n\nnode.status({fill: \"green\", shape: \"ring\", text: start_node_time});\n    \n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 840,
        "y": 1660,
        "wires": [
            []
        ]
    },
    {
        "id": "fa9e35fc1d320ee9",
        "type": "function",
        "z": "2a761808.610238",
        "name": "tester___",
        "func": "let start_node_time = new Date().getTime();\n\nnode.status({fill: \"green\", shape: \"ring\", text: start_node_time});\n    \n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 860,
        "y": 940,
        "wires": [
            []
        ]
    },
    {
        "id": "eae2405f4f80842b",
        "type": "function",
        "z": "2a761808.610238",
        "name": "tester___",
        "func": "let start_node_time = new Date().getTime();\n\nnode.status({fill: \"green\", shape: \"ring\", text: start_node_time});\n    \n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 860,
        "y": 1080,
        "wires": [
            []
        ]
    },
    {
        "id": "53a4502c9820dacf",
        "type": "function",
        "z": "2a761808.610238",
        "name": "tester___",
        "func": "let start_node_time = new Date().getTime();\n\nnode.status({fill: \"green\", shape: \"ring\", text: start_node_time});\n    \n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1060,
        "y": 900,
        "wires": [
            []
        ]
    },
    {
        "id": "f0927551487edb15",
        "type": "function",
        "z": "2a761808.610238",
        "name": "tester___",
        "func": "let start_node_time = new Date().getTime();\n\nnode.status({fill: \"green\", shape: \"ring\", text: start_node_time});\n    \n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1060,
        "y": 1020,
        "wires": [
            []
        ]
    },
    {
        "id": "4bf2884a90f22869",
        "type": "function",
        "z": "2a761808.610238",
        "name": "tester___",
        "func": "let start_node_time = new Date().getTime();\n\nnode.status({fill: \"green\", shape: \"ring\", text: start_node_time});\n    \n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2300,
        "y": 1740,
        "wires": [
            []
        ]
    },
    {
        "id": "1d3063e027dc1c0c",
        "type": "function",
        "z": "2a761808.610238",
        "name": "prepare get ttp order status",
        "func": "\nlet moneta = msg.bot.settings.moneta;\nmsg.moneta = moneta;\nlet orderid = msg.bot.ttp.curorderid\nmsg.orderid = orderid;\n\n \nmsg.topic = \"orders-status-\" + msg.bot.settings.userid + \":\" + moneta + \":\" + orderid;\n\n\nnode.status({fill: \"green\", shape: \"ring\", text: orderid});\nreturn msg;\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1340,
        "y": 2040,
        "wires": [
            [
                "9ea860d261239092"
            ]
        ],
        "inputLabels": [
            "orderid"
        ],
        "outputLabels": [
            "status"
        ],
        "icon": "node-red-contrib-binance/binance.png"
    },
    {
        "id": "84ba06fc7512c1b7",
        "type": "switch",
        "z": "2a761808.610238",
        "name": "статус ордера",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "NEW",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "PARTIALLY_FILLED",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "CANCELED",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "FILLED",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "REJECTED",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "EXPIRED",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 6,
        "x": 1800,
        "y": 2040,
        "wires": [
            [
                "9011d963f8a5cefa"
            ],
            [
                "9011d963f8a5cefa"
            ],
            [
                "46607ceede3526b3"
            ],
            [
                "68b374aac5485516"
            ],
            [
                "43656eb1fac8a3d6"
            ],
            [
                "43656eb1fac8a3d6"
            ]
        ]
    },
    {
        "id": "3c4c100f10ecd807",
        "type": "comment",
        "z": "2a761808.610238",
        "name": "NEW",
        "info": "",
        "x": 2030,
        "y": 1920,
        "wires": []
    },
    {
        "id": "3bf753286f6614b5",
        "type": "comment",
        "z": "2a761808.610238",
        "name": "CANCELED",
        "info": "",
        "x": 2050,
        "y": 2020,
        "wires": []
    },
    {
        "id": "1a3922257786e9b0",
        "type": "comment",
        "z": "2a761808.610238",
        "name": "FILLED",
        "info": "",
        "x": 2030,
        "y": 2120,
        "wires": []
    },
    {
        "id": "dc961628ea7e3852",
        "type": "comment",
        "z": "2a761808.610238",
        "name": "REJECTED или EXPIRED",
        "info": "",
        "x": 2090,
        "y": 2220,
        "wires": []
    },
    {
        "id": "c485474dbd0d5e74",
        "type": "comment",
        "z": "2a761808.610238",
        "name": "PARTIALLY_FILLED",
        "info": "",
        "x": 2190,
        "y": 1920,
        "wires": []
    },
    {
        "id": "68b374aac5485516",
        "type": "function",
        "z": "2a761808.610238",
        "name": "set sold",
        "func": "msg.bot.ttp.sold = true;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2040,
        "y": 2160,
        "wires": [
            [
                "a5c324445eaf4103"
            ]
        ]
    },
    {
        "id": "a5c324445eaf4103",
        "type": "function",
        "z": "2a761808.610238",
        "name": "prepare get ttp order price",
        "func": "\n\nlet moneta = msg.bot.settings.moneta;\nlet orderid = msg.bot.ttp.curorderid;\n\nmsg.payload = [];\nmsg.topic = \"orders-status-\" + msg.bot.settings.userid + \":\" + moneta + \":\" + orderid + \"-price\";\n\n\n\n\nnode.status({fill: \"green\", shape: \"ring\", text: orderid});\nreturn msg;\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2260,
        "y": 2160,
        "wires": [
            [
                "10f52a4a5656e59c"
            ]
        ],
        "inputLabels": [
            "orderid"
        ],
        "outputLabels": [
            "status"
        ],
        "icon": "node-red-contrib-binance/binance.png"
    },
    {
        "id": "10f52a4a5656e59c",
        "type": "redis-command",
        "z": "2a761808.610238",
        "server": "f120eab2.0a60a8",
        "command": "GET",
        "name": "get order status",
        "topic": "msg.payload",
        "params": "[]",
        "paramsType": "json",
        "payloadType": "json",
        "block": false,
        "x": 2500,
        "y": 2160,
        "wires": [
            [
                "06ee55c7f64e90e8"
            ]
        ]
    },
    {
        "id": "9011d963f8a5cefa",
        "type": "link out",
        "z": "2a761808.610238",
        "name": "",
        "links": [
            "ccd55cdb.7ed72"
        ],
        "x": 1995,
        "y": 1960,
        "wires": []
    },
    {
        "id": "43656eb1fac8a3d6",
        "type": "link out",
        "z": "2a761808.610238",
        "name": "",
        "links": [
            "ccd55cdb.7ed72"
        ],
        "x": 1995,
        "y": 2260,
        "wires": []
    },
    {
        "id": "06ee55c7f64e90e8",
        "type": "link out",
        "z": "2a761808.610238",
        "name": "",
        "links": [
            "ccd55cdb.7ed72"
        ],
        "x": 2635,
        "y": 2160,
        "wires": []
    },
    {
        "id": "9ea860d261239092",
        "type": "function",
        "z": "2a761808.610238",
        "name": "get_order_status",
        "func": "let moneta = msg.moneta;\nlet orderid = Number(msg.orderid);\n\nconst get_order_status = global.get('get_order_status')(moneta, orderid);\n\nget_order_status.then(result => {\n    \n    msg.payload = result;\n  \n    node.status({fill:\"green\",shape:\"dot\"});\n    node.send(msg);\n\n}).catch(error => {\n    \n   \n    node.status({fill:\"red\",shape:\"dot\"});\n    node.error(error);\n});",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1590,
        "y": 2040,
        "wires": [
            [
                "84ba06fc7512c1b7"
            ]
        ]
    },
    {
        "id": "d81b89b8431c5219",
        "type": "function",
        "z": "5df15275.2888ec",
        "name": "getprice, MA",
        "func": "\nlet moneta = msg.bot.settings.moneta;\n\nconst gp = global.get('getprice')(moneta);\n\ngp.then(gp => {\n\n    msg.bot.status.currentprice = gp;\n    let volname = msg.bot.settings.botname + \"-MA-big\";\n    msg.bot.status.sr_ma_big = Number(flow.get(volname));\n\n    let volname2 = msg.bot.settings.botname + \"-MA-small\";\n    msg.bot.status.sr_ma_small = Number(flow.get(volname2));\n\n\n\n    node.status({ fill: \"green\", shape: \"dot\" });\n    node.send(msg);\n\n}).catch(error => {\n\n\n    node.status({ fill: \"red\", shape: \"dot\" });\n    node.error(error);\n});",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1730,
        "y": 300,
        "wires": [
            [
                "286f7ee0bb73b702"
            ]
        ]
    },
    {
        "id": "286f7ee0bb73b702",
        "type": "function",
        "z": "5df15275.2888ec",
        "name": "MA zapret calculate",
        "func": "\nmsg.bot.status.currentprice = Number(msg.bot.status.currentprice);\n\nif ((msg.bot.status.currentprice > msg.bot.status.sr_ma_big) && (msg.bot.status.currentprice > msg.bot.status.sr_ma_small)) {\n    msg.bot.zapret_na_zakup = false;\n    msg.bot.status.rezhim = \"МА - закуп разрешен\";\n\n} else {\n    msg.bot.zapret_na_zakup = true;\n    msg.bot.status.rezhim = \"МА - закуп запрещён\";\n\n}\n\nnode.status({ fill: \"green\", shape: \"dot\" });\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1940,
        "y": 300,
        "wires": [
            [
                "9a90af117cd916e1"
            ]
        ]
    },
    {
        "id": "9a90af117cd916e1",
        "type": "function",
        "z": "5df15275.2888ec",
        "name": "пересчет депо",
        "func": "\nlet p = Number(msg.bot.status.currentprice);\nmsg.bot.finance.depo = Number((Number(msg.bot.finance.quotanal) * p + Number(msg.bot.finance.quotainorders) * p + Number(msg.bot.finance.basenal) + Number(msg.bot.finance.baseinorders)).toFixed(msg.bot.settings.digitprice));\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2160,
        "y": 300,
        "wires": [
            [
                "09ccb3a61ebb95eb"
            ]
        ]
    }
]